<% content_for :title, "Settings" %>

<div class="container">
  <div class="row">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h4 class="mb-0">
            <i class="bi bi-gear"></i> System Settings
          </h4>
        </div>
        <div class="card-body">
          <%= form_with url: settings_path, method: :patch, local: true, html: { class: "needs-validation", novalidate: true } do |form| %>
            
            <!-- Segmentation API Settings -->
            <div class="row mb-4">
              <div class="col-12">
                <h5 class="border-bottom pb-2">
                  <i class="bi bi-cloud-arrow-up"></i> Segmentation API Configuration
                </h5>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-12">
                <label for="segmentation_api_endpoint" class="form-label">
                  API Endpoint URL
                  <small class="text-muted">*</small>
                </label>
                <div class="input-group">
                  <%= form.url_field "settings[segmentation_api_endpoint]", 
                      value: @settings['segmentation_api_endpoint']&.value,
                      class: "form-control",
                      id: "segmentation_api_endpoint",
                      placeholder: "http://aicdocker.liv.ac.uk:8000/segment/opencv",
                      required: true %>
                  <button type="button" id="test-connection" class="btn btn-outline-secondary">
                    <i class="bi bi-wifi"></i> Test Connection
                  </button>
                </div>
                <div class="form-text">
                  <%= @settings['segmentation_api_endpoint']&.description %>
                </div>
                <div id="connection-status" class="mt-2"></div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label for="segmentation_api_timeout" class="form-label">
                  Request Timeout (seconds)
                  <small class="text-muted">*</small>
                </label>
                <%= form.number_field "settings[segmentation_api_timeout]", 
                    value: @settings['segmentation_api_timeout']&.value,
                    class: "form-control",
                    id: "segmentation_api_timeout",
                    min: 5,
                    max: 300,
                    step: 1,
                    required: true %>
                <div class="form-text">
                  <%= @settings['segmentation_api_timeout']&.description %>
                </div>
              </div>

              <div class="col-md-6">
                <label for="auto_segment_point_type" class="form-label">
                  Default Point Type
                  <small class="text-muted">*</small>
                </label>
                <%= form.select "settings[auto_segment_point_type]", 
                    options_for_select([
                      ['Crystal', 'crystal'],
                      ['Particle', 'particle'],
                      ['Droplet', 'droplet'],
                      ['Other', 'other']
                    ], @settings['auto_segment_point_type']&.value),
                    {},
                    { class: "form-select", id: "auto_segment_point_type", required: true } %>
                <div class="form-text">
                  <%= @settings['auto_segment_point_type']&.description %>
                </div>
              </div>
            </div>

                        <!-- Unit Cell Conversion API Settings -->
            <h4 class="mt-4 mb-3">
              <i class="bi bi-diagram-3"></i> Unit Cell Conversion
            </h4>
            
            

            <div id="conventional-cell-api-settings">
            
              <div class="row mb-3">
                <div class="col-md-12">
                  <label for="conventional_cell_api_endpoint" class="form-label">
                    API Endpoint
                    <small class="text-muted">*</small>
                  </label>
                  <div class="input-group">
                    <%= form.url_field "settings[conventional_cell_api_endpoint]", 
                        value: @settings['conventional_cell_api_endpoint']&.value,
                        class: "form-control",
                        id: "conventional_cell_api_endpoint",
                        placeholder: "http://localhost:8000/api/v1/lepage",
                        required: true %>
                    <button type="button" id="test-conventional-cell-connection" class="btn btn-outline-secondary">
                      <i class="bi bi-wifi"></i> Test Connection
                    </button>
                  </div>
                  <div class="form-text">
                    <%= @settings['conventional_cell_api_endpoint']&.description %>
                  </div>
                  <div id="conventional-cell-connection-status" class="mt-2"></div>
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-md-6">
                  <label for="conventional_cell_api_timeout" class="form-label">
                    Request Timeout (seconds)
                    <small class="text-muted">*</small>
                  </label>
                  <%= form.number_field "settings[conventional_cell_api_timeout]", 
                      value: @settings['conventional_cell_api_timeout']&.value,
                      class: "form-control",
                      id: "conventional_cell_api_timeout",
                      min: 1,
                      max: 60,
                      step: 1,
                      required: true %>
                  <div class="form-text">
                    <%= @settings['conventional_cell_api_timeout']&.description %>
                  </div>
                </div>

                <div class="col-md-6">
                  <label for="conventional_cell_max_delta" class="form-label">
                    Conversion Tolerance (Max Delta)
                    <small class="text-muted">*</small>
                  </label>
                  <%= form.number_field "settings[conventional_cell_max_delta]", 
                      value: @settings['conventional_cell_max_delta']&.value,
                      class: "form-control",
                      id: "conventional_cell_max_delta",
                      min: 0.1,
                      max: 5.0,
                      step: 0.1,
                      required: true %>
                  <div class="form-text">
                    <%= @settings['conventional_cell_max_delta']&.description %>
                  </div>
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="row mt-4">
              <div class="col-12">
                <hr>
                <div class="d-flex justify-content-between">
                  <%= link_to 'Back to Home', root_path, class: 'btn btn-outline-secondary' %>
                  <div>
                    <button type="button" id="reset-defaults" class="btn btn-outline-warning me-2">
                      <i class="bi bi-arrow-clockwise"></i> Reset to Defaults
                    </button>
                    <%= form.submit 'Save Settings', class: 'btn btn-primary' %>
                  </div>
                </div>
              </div>
            </div>

          <% end %>
        </div>
      </div>
    </div>

    <!-- Settings Info Panel -->
    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">
            <i class="bi bi-info-circle"></i> Information
          </h5>
        </div>
        <div class="card-body">
          <h6>Segmentation API</h6>
          <p class="small text-muted">
            The segmentation API automatically detects regions of interest in your images. 
            Make sure the endpoint is accessible from your Rails application.
          </p>

          <h6>Network Considerations</h6>
          <p class="small text-muted">
            If running in Docker/containers, you may need to use internal IP addresses 
            instead of external hostnames to avoid NAT routing issues.
          </p>

          <h6>Unit Cell Conversion</h6>
          <p class="small text-muted">
            The unit cell conversion API converts primitive unit cells to conventional unit cells using 
            crystallographic symmetry analysis. This provides better visualization of 
            crystal structures by showing the most symmetric representation.
          </p>

          <h6>Testing Connection</h6>
          <p class="small text-muted">
            Use the "Test Connection" button to verify the API endpoint is reachable 
            before saving your settings.
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function initializeSettingsPage() {
  const testButton = document.getElementById('test-connection');
  const endpointInput = document.getElementById('segmentation_api_endpoint');
  const timeoutInput = document.getElementById('segmentation_api_timeout');
  const statusDiv = document.getElementById('connection-status');

  if (testButton) {
    testButton.addEventListener('click', function() {
      const endpoint = endpointInput.value;
      const timeout = timeoutInput.value;

      if (!endpoint) {
        showStatus('Please enter an endpoint URL first', 'danger');
        return;
      }

    // Show loading state
    testButton.disabled = true;
    testButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Testing...';
    statusDiv.innerHTML = '<div class="alert alert-info">Testing connection...</div>';

    // Make test request
    fetch('/settings/test_connection', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        endpoint: endpoint,
        timeout: parseInt(timeout) || 30
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showStatus(data.message, 'success');
      } else {
        showStatus(data.message, 'danger');
      }
    })
    .catch(error => {
      showStatus('Test request failed: ' + error.message, 'danger');
    })
    .finally(() => {
      // Restore button state
      testButton.disabled = false;
      testButton.innerHTML = '<i class="bi bi-wifi"></i> Test Connection';
    });
    });
  }

  function showStatus(message, type) {
    if (statusDiv) {
      statusDiv.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>`;
    }
  }



  // Unit cell conversion API test connection button
  const testConventionalCellButton = document.getElementById('test-conventional-cell-connection');
  const conventionalCellEndpointInput = document.getElementById('conventional_cell_api_endpoint');
  const conventionalCellTimeoutInput = document.getElementById('conventional_cell_api_timeout');
  const conventionalCellStatusDiv = document.getElementById('conventional-cell-connection-status');

  if (testConventionalCellButton) {
    testConventionalCellButton.addEventListener('click', function() {
      const endpoint = conventionalCellEndpointInput.value;
      const timeout = conventionalCellTimeoutInput.value;

      if (!endpoint) {
        showConventionalCellStatus('Please enter an endpoint URL first', 'danger');
        return;
      }

      // Show loading state
      testConventionalCellButton.disabled = true;
      testConventionalCellButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Testing...';
      conventionalCellStatusDiv.innerHTML = '<div class="alert alert-info">Testing connection...</div>';

      // Make test request
      fetch('/settings/test_conventional_cell_api', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          endpoint: endpoint,
          timeout: parseInt(timeout) || 5
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showConventionalCellStatus(data.message, 'success');
        } else {
          showConventionalCellStatus(data.message, 'danger');
        }
      })
      .catch(error => {
        showConventionalCellStatus('Test request failed: ' + error.message, 'danger');
      })
      .finally(() => {
        // Restore button state
        testConventionalCellButton.disabled = false;
        testConventionalCellButton.innerHTML = '<i class="bi bi-wifi"></i> Test Connection';
      });
    });
  }

  function showConventionalCellStatus(message, type) {
    if (conventionalCellStatusDiv) {
      conventionalCellStatusDiv.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>`;
    }
  }

  // Reset defaults functionality
  const resetDefaultsButton = document.getElementById('reset-defaults');
  if (resetDefaultsButton) {
    resetDefaultsButton.addEventListener('click', function() {
      if (confirm('Are you sure you want to reset all settings to their default values?')) {
        const segmentationEndpoint = document.getElementById('segmentation_api_endpoint');
        const segmentationTimeout = document.getElementById('segmentation_api_timeout');
        const autoSegmentType = document.getElementById('auto_segment_point_type');
        const conventionalCellEndpoint = document.getElementById('conventional_cell_api_endpoint');
        const conventionalCellTimeout = document.getElementById('conventional_cell_api_timeout');
        const conventionalCellMaxDelta = document.getElementById('conventional_cell_max_delta');

        if (segmentationEndpoint) segmentationEndpoint.value = 'http://aicdocker.liv.ac.uk:8000/segment/opencv';
        if (segmentationTimeout) segmentationTimeout.value = '30';
        if (autoSegmentType) autoSegmentType.value = 'other';
        if (conventionalCellEndpoint) conventionalCellEndpoint.value = 'http://localhost:8000/api/v1/lepage';
        if (conventionalCellTimeout) conventionalCellTimeout.value = '5';
        if (conventionalCellMaxDelta) conventionalCellMaxDelta.value = '1.0';
      }
    });
  }
}

// Store references for cleanup
let settingsPageInitialized = false;

function cleanupSettingsPage() {
  // Clear any existing event listeners or references if needed
  settingsPageInitialized = false;
}

function safeInitializeSettingsPage() {
  // Prevent double initialization
  if (settingsPageInitialized) return;
  
  // Only initialize if we're on the settings page
  if (document.getElementById('segmentation_api_endpoint') || document.getElementById('conventional_cell_api_endpoint')) {
    initializeSettingsPage();
    settingsPageInitialized = true;
  }
}

// Initialize on both DOMContentLoaded and turbo:load for compatibility
document.addEventListener('DOMContentLoaded', safeInitializeSettingsPage);
document.addEventListener('turbo:load', safeInitializeSettingsPage);
document.addEventListener('turbo:frame-load', safeInitializeSettingsPage);

// Cleanup before navigation
document.addEventListener('turbo:before-visit', cleanupSettingsPage);
document.addEventListener('turbo:before-frame-render', cleanupSettingsPage);
</script>
