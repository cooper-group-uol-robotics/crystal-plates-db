<% content_for :title, "Plate #{@plate.display_name}" %>

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1 class="mb-0">Plate: <%= @plate.display_name %></h1>
  <div>
    <%= link_to 'Edit', edit_plate_path(@plate), class: "btn btn-outline-primary me-2" %>
    <%= button_to 'Delete', plate_path(@plate), method: :delete,
                  class: "btn btn-outline-danger me-2",
                  form: { style: "display: inline-block;" },
                  data: { confirm: "Are you sure you want to delete Plate #{@plate.barcode}? It can be restored later." } %>
    <%= link_to 'Back', plates_path, class: "btn btn-outline-secondary" %>
  </div>
</div>

<div class="row mb-4">
  <div class="col-md-6">
    <div class="card shadow-sm">
      <div class="card-body">
        <h5 class="card-title">Plate Details</h5>
        <table class="table table-sm">
          <tr>
            <td><strong>Barcode:</strong></td>
            <td><%= @plate.barcode %></td>
          </tr>
          <% if @plate.name.present? %>
          <tr>
            <td><strong>Name:</strong></td>
            <td><%= @plate.name %></td>
          </tr>
          <% end %>
          <tr>
            <td><strong>Dimensions:</strong></td>
            <td><%= @rows %> rows Ã— <%= @columns %> columns</td>
          </tr>
          <tr>
            <td><strong>Total Wells:</strong></td>
            <td><%= @wells.count %></td>
          </tr>
        </table>
      </div>
    </div>
  </div>
  <div class="col-md-6">
    <div class="card shadow-sm">
      <div class="card-body">
        <h5 class="card-title">Storage Location</h5>
        <p class="card-text mb-0">
          <% if @plate.current_location %>
            Location: <strong><%= @plate.current_location.display_name %></strong>
          <% else %>
            Location: <strong>Not assigned</strong>
          <% end %>
        </p>
      </div>
    </div>
  </div>
</div>


<h2 class="mb-3">Wells</h2>
<div class="mb-2">
  <div class="form-check form-switch d-inline-block me-3">
    <input class="form-check-input" type="checkbox" id="selectModeSwitch">
    <label class="form-check-label" for="selectModeSwitch">Multi select</label>
  </div>
  <button id="editMultipleWellsBtn" class="btn btn-outline-primary btn-sm d-none" disabled>Edit multiple wells</button>
</div>
<div class="d-inline-block border rounded p-2 shadow-sm" style="background: #f8f9fa;">
  <div id="well-grid-container">
    <div class="d-grid" style="grid-template-columns: 40px repeat(<%= @columns %>, 80px); gap: 8px;">
      <div>
      <!-- Subwell header buttons (copied from well A1) -->
      <% wells_in_a1 = @wells.select { |w| w.well_row == 1 && w.well_column == 1 } %>
      <% wells_in_a1.sort_by(&:subwell).each do |well| %>
        <button type="button" class="btn btn-outline-secondary btn-sm subwell-header-btn p-1"
          data-subwell="<%= well.subwell %>" disabled>
          <%= well.subwell %>
        </button>
      <% end %>
      </div>
      

      <!-- Column header buttons -->
      <% (1..@columns).each do |col| %>
        <button type="button" class="btn btn-outline-secondary btn-sm col-header-btn" data-col="<%= col %>" disabled>
          <%= col %>
        </button>
      <% end %>
    <% (1..@rows).each do |row| %>
            <!-- Row header button -->
        <button type="button" class="btn btn-outline-secondary btn-sm row-header-btn" data-row="<%= row %>" disabled>
          <%= ('A'.ord + row - 1).chr %>
        </button>
      <% (1..@columns).each do |col| %>
        <% wells_in_position = @wells.select { |w| w.well_row == row && w.well_column == col } %>
        <div class="well-position border rounded p-1" style="background: white; min-height: 80px;">
          <% if wells_in_position.any? %>
            <div class="text-center mb-1" style="font-size: 10px; font-weight: bold;">
              <%= wells_in_position.first.well_label %>
            </div>
            <div class="d-grid" style="grid-template-columns: repeat(<%= Math.sqrt(wells_in_position.length).ceil %>, 1fr); gap: 2px;">
              <% wells_in_position.sort_by(&:subwell).each do |well| %>
                <% has_image = well.has_images? %>
                <% has_content = well.has_content? %>
                <% 
                  if has_image
                    bg_color = '#198754'  # Green - has images
                    text_color = 'white'
                  elsif has_content
                    bg_color = '#ffc107'  # Yellow - has stock solutions but no images
                    text_color = 'black'
                  else
                    bg_color = '#dc3545'  # Red - empty
                    text_color = 'white'
                  end
                %>
                <button type="button" class="btn btn-sm p-1 well-select-btn"
                  style="background-color: <%= bg_color %>; color: <%= text_color %>; height: 25px; font-size: 9px;"
                  data-well-id="<%= well.id %>"
                  data-well-label="<%= well.well_label_with_subwell %>"
                  data-col="<%= well.well_column %>"
                  data-row="<%= well.well_row %>"
                  data-subwell="<%= well.subwell %>"
                  title="<%= well.well_label_with_subwell %>"
                  <%= raw 'data-bs-toggle="modal" data-bs-target="#wellImagesModal"' %>>
                  <%= well.subwell %>
                </button>
              <% end %>
            </div>
          <% else %>
            <div class="text-center text-muted" style="padding-top: 25px; font-size: 10px;">
              Empty
            </div>
          <% end %>
        </div>
      <% end %>
    <% end %>
  </div>
</div>

<script>
// Select mode logic
let selectMode = false;
let selectedWells = new Set();

document.addEventListener('DOMContentLoaded', () => {
  const selectModeSwitch = document.getElementById('selectModeSwitch');
  const editMultipleWellsBtn = document.getElementById('editMultipleWellsBtn');
  const wellButtons = document.querySelectorAll('.well-select-btn');

  function updateEditButton() {
    if (selectedWells.size > 0) {
      editMultipleWellsBtn.classList.remove('d-none');
      editMultipleWellsBtn.disabled = false;
      editMultipleWellsBtn.textContent = `Edit multiple wells (${selectedWells.size})`;
    } else {
      editMultipleWellsBtn.classList.add('d-none');
      editMultipleWellsBtn.disabled = true;
      editMultipleWellsBtn.textContent = 'Edit multiple wells';
    }
  }

  function setHeaderButtonsState(enabled) {
    document.querySelectorAll('.row-header-btn, .col-header-btn, .subwell-header-btn').forEach(btn => {
      btn.disabled = !enabled;
    });
  }

  selectModeSwitch.addEventListener('change', (e) => {
    selectMode = e.target.checked;
    selectedWells.clear();
    wellButtons.forEach(btn => {
      btn.classList.remove('border-info', 'shadow');
      if (selectMode) {
        btn.removeAttribute('data-bs-toggle');
        btn.removeAttribute('data-bs-target');
        
      } else {
        btn.setAttribute('data-bs-toggle', 'modal');
        btn.setAttribute('data-bs-target', '#wellImagesModal');
      }
    });
    setHeaderButtonsState(selectMode);
    updateEditButton();
  });

  wellButtons.forEach(btn => {
    btn.addEventListener('click', function(event) {
      if (selectMode) {
        event.preventDefault();
        const wellId = this.getAttribute('data-well-id');
        if (selectedWells.has(wellId)) {
          selectedWells.delete(wellId);
          this.classList.remove('border-info', 'shadow');
        } else {
          selectedWells.add(wellId);
          this.classList.add('border-info', 'shadow');
        }
        updateEditButton();
      } else {
        // Normal behaviour: open modal
        this.setAttribute('data-bs-toggle', 'modal');
        this.setAttribute('data-bs-target', '#wellImagesModal');
      }
    });
  });

  // Row/Column/Subwell header selection logic using data-row, data-col, and data-subwell attributes
  function selectRow(row) {
    let allSelected = true;
    wellButtons.forEach(btn => {
      if (btn.getAttribute('data-row') == row) {
        const wellId = btn.getAttribute('data-well-id');
        if (!selectedWells.has(wellId)) {
          allSelected = false;
        }
      }
    });

    if (allSelected) {
      // Deselect all wells in the row
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-row') == row) {
          const wellId = btn.getAttribute('data-well-id');
          selectedWells.delete(wellId);
          btn.classList.remove('border-info', 'shadow');
        }
      });
    } else {
      // Select all wells in the row
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-row') == row) {
          const wellId = btn.getAttribute('data-well-id');
          if (!selectedWells.has(wellId)) {
            selectedWells.add(wellId);
            btn.classList.add('border-info', 'shadow');
          }
        }
      });
    }
    updateEditButton();
  }

  function selectColumn(col) {
    let allSelected = true;
    wellButtons.forEach(btn => {
      if (btn.getAttribute('data-col') == col) {
        const wellId = btn.getAttribute('data-well-id');
        if (!selectedWells.has(wellId)) {
          allSelected = false;
        }
      }
    });

    if (allSelected) {
      // Deselect all wells in the column
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-col') == col) {
          const wellId = btn.getAttribute('data-well-id');
          selectedWells.delete(wellId);
          btn.classList.remove('border-info', 'shadow');
        }
      });
    } else {
      // Select all wells in the column
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-col') == col) {
          const wellId = btn.getAttribute('data-well-id');
          if (!selectedWells.has(wellId)) {
            selectedWells.add(wellId);
            btn.classList.add('border-info', 'shadow');
          }
        }
      });
    }
    updateEditButton();
  }

  function selectSubwell(subwell) {
    let allSelected = true;
    wellButtons.forEach(btn => {
      if (btn.getAttribute('data-subwell') == subwell) {
        const wellId = btn.getAttribute('data-well-id');
        if (!selectedWells.has(wellId)) {
          allSelected = false;
        }
      }
    });

    if (allSelected) {
      // Deselect all wells in the subwell
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-subwell') == subwell) {
          const wellId = btn.getAttribute('data-well-id');
          selectedWells.delete(wellId);
          btn.classList.remove('border-info', 'shadow');
        }
      });
    } else {
      // Select all wells in the subwell
      wellButtons.forEach(btn => {
        if (btn.getAttribute('data-subwell') == subwell) {
          const wellId = btn.getAttribute('data-well-id');
          if (!selectedWells.has(wellId)) {
            selectedWells.add(wellId);
            btn.classList.add('border-info', 'shadow');
          }
        }
      });
    }
    updateEditButton();
  }

  document.querySelectorAll('.row-header-btn').forEach(btn => {
    btn.addEventListener('click', function(event) {
      if (selectMode) {
        event.preventDefault();
        const row = this.getAttribute('data-row');
        selectRow(row);
      }
    });
  });

  document.querySelectorAll('.col-header-btn').forEach(btn => {
    btn.addEventListener('click', function(event) {
      if (selectMode) {
        event.preventDefault();
        const col = this.getAttribute('data-col');
        selectColumn(col);
      }
    });
  });

  document.querySelectorAll('.subwell-header-btn').forEach(btn => {
    btn.addEventListener('click', function(event) {
      if (selectMode) {
        event.preventDefault();
        const subwell = this.getAttribute('data-subwell');
        selectSubwell(subwell);
      }
    });
  });

  editMultipleWellsBtn.addEventListener('click', function() {
    if (selectedWells.size === 0) return;
    // Bulk edit modal for multiple wells, reusing original modal's content (stock solution tab only)
    const wellIds = Array.from(selectedWells);
    const modalHtml = `
      <div class="modal fade" id="editMultipleWellsModal" tabindex="-1" aria-labelledby="editMultipleWellsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editMultipleWellsModalLabel">Edit Multiple Wells</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="max-height: 80vh; overflow-y: auto;">
              <div class="tab-content mt-3" id="bulkWellTabContent">
                <div class="tab-pane fade show active" id="bulk-content" role="tabpanel" aria-labelledby="bulk-content-tab">
                  <form id="bulkStockSolutionForm">
                    <div class="mb-3">
                      <div class="row">
                        <div class="col-md-8">
                          <label for="bulkStockSolutionSearch" class="form-label">Stock Solution</label>
                          <input type="text" class="form-control" id="bulkStockSolutionSearch" placeholder="Search stock solution..." autocomplete="off">
                          <input type="hidden" id="bulkStockSolutionId">
                          <div id="bulkStockSolutionResults" class="dropdown-menu" style="max-height: 200px;overflow-y: auto;"></div>
                        </div>
                        <div class="col-md-4">
                          <label for="bulkVolumeAmountInput" class="form-label">Volume with unit</label>
                          <input type="text" class="form-control" id="bulkVolumeAmountInput" placeholder="e.g. 50 Î¼L">
                        </div>
                      </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Add to selected wells</button>
                  </form>
                  <div id="bulkContentMessages" class="mt-2"></div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    `;
    // Remove any existing modal
    const existingModal = document.getElementById('editMultipleWellsModal');
    if (existingModal) existingModal.remove();
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    const modalEl = document.getElementById('editMultipleWellsModal');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();

    // Wait for modal to be fully shown before attaching event listeners
    modalEl.addEventListener('shown.bs.modal', function() {
      const bulkSearchInput = document.getElementById('bulkStockSolutionSearch');
      const bulkResultsDiv = document.getElementById('bulkStockSolutionResults');
      const bulkForm = document.getElementById('bulkStockSolutionForm');
      const bulkContentMessages = document.getElementById('bulkContentMessages');

      if (!bulkSearchInput || !bulkResultsDiv || !bulkForm) return;

      bulkSearchInput.addEventListener('input', function() {
        const query = bulkSearchInput.value.trim();
        if (query.length < 2) {
          bulkResultsDiv.classList.remove('show');
          bulkResultsDiv.classList.add('d-none');
          return;
        }
        fetch(`/stock_solutions/search?q=${encodeURIComponent(query)}`, {
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.length === 0) {
            bulkResultsDiv.innerHTML = '<div class="dropdown-item text-muted">No stock solutions found</div>';
          } else {
            bulkResultsDiv.innerHTML = data.map(solution => 
              `<button type="button" class="dropdown-item" 
                       data-solution-id="${solution.id}" 
                       data-solution-name="${solution.display_name}">
                <strong>${solution.display_name}</strong>
                ${solution.component_summary ? `<br><small class=\"text-muted\">${solution.component_summary}</small>` : ''}
              </button>`
            ).join('');
          }
          bulkResultsDiv.classList.remove('d-none');
          bulkResultsDiv.classList.add('show');

        });
      });
      bulkResultsDiv.addEventListener('click', function(event) {
        const target = event.target.closest('.dropdown-item');
        if (target && target.dataset.solutionId) {
          document.getElementById('bulkStockSolutionId').value = target.dataset.solutionId;
          bulkSearchInput.value = target.dataset.solutionName;
          bulkResultsDiv.classList.remove('show');
          bulkResultsDiv.classList.add('d-none');
        }
      });
      // Hide dropdown on blur
      bulkSearchInput.addEventListener('blur', function() {
        setTimeout(() => {
          bulkResultsDiv.classList.remove('show');
          bulkResultsDiv.classList.add('d-none');
        }, 200);
      });

      bulkForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const stockSolutionId = document.getElementById('bulkStockSolutionId').value;
        const volumeWithUnit = document.getElementById('bulkVolumeAmountInput').value.trim();
        if (!stockSolutionId) {
          bulkContentMessages.innerHTML = '<div class="alert alert-danger">Please select a stock solution</div>';
          return;
        }
        if (!volumeWithUnit) {
          bulkContentMessages.innerHTML = '<div class="alert alert-danger">Please enter a volume with unit (e.g., 50 Î¼L)</div>';
          return;
        }
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        if (!csrfToken) {
          bulkContentMessages.innerHTML = '<div class="alert alert-danger">CSRF token not found</div>';
          return;
        }
        fetch('/wells/bulk_add_content', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-CSRF-Token': csrfToken.getAttribute('content')
          },
          body: JSON.stringify({
            well_ids: wellIds,
            stock_solution_id: stockSolutionId,
            volume_with_unit: volumeWithUnit
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            bulkContentMessages.innerHTML = `<div class="alert alert-success">${data.message}</div>`;
          } else {
            bulkContentMessages.innerHTML = `<div class="alert alert-danger">${data.message || 'Bulk add failed'}</div>`;
          }
        })
        .catch(error => {
          bulkContentMessages.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
        });
      });
    });
  });
});
</script>

<!-- Points of Interest Section -->
<% if @points_of_interest.any? %>
  <div class="card mt-4 shadow-sm">
    <div class="card-header">
      <h5 class="mb-0">Points of Interest (<%= @points_of_interest.count %>)</h5>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-sm table-striped">
          <thead class="table-light">
            <tr>
              <th>Well</th>
              <th>Type</th>
              <th>Real World Coordinates (mm)</th>
              <th>Pixel Coordinates</th>
              <th>Marked At</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <% @points_of_interest.each do |point| %>
              <% 
                well = point.image.well
                well_position = "#{('A'.ord + well.well_row - 1).chr}#{well.well_column}"
                if well.subwell > 1
                  well_position += ".#{well.subwell}"
                end
                
                # Calculate real-world coordinates
                image = point.image
                real_x = nil
                real_y = nil
                if image.reference_x_mm && image.pixel_size_x_mm
                  real_x = image.reference_x_mm + (point.pixel_x * image.pixel_size_x_mm)
                end
                if image.reference_y_mm && image.pixel_size_y_mm
                  real_y = image.reference_y_mm + (point.pixel_y * image.pixel_size_y_mm)
                end
              %>
              <tr>
                <td>
                  <span class="fw-bold"><%= well_position %></span>
                </td>
                <td>
                  <span class="badge bg-<%= case point.point_type
                    when 'crystal' then 'primary'
                    when 'particle' then 'secondary' 
                    when 'droplet' then 'info'
                    else 'warning'
                  end %>">
                    <%= point.point_type.capitalize %>
                  </span>
                </td>
                <td>
                  <% if real_x && real_y %>
                    (<%= sprintf("%.3f", real_x) %>, <%= sprintf("%.3f", real_y) %>
                    <% if image.reference_z_mm %>, <%= sprintf("%.3f", image.reference_z_mm) %><% end %>)
                  <% else %>
                    <span class="text-muted">Not calibrated</span>
                  <% end %>
                </td>
                <td class="text-muted">
                  (<%= point.pixel_x %>, <%= point.pixel_y %>)
                </td>
                <td class="text-muted">
                  <% if point.marked_at %>
                    <%= point.marked_at.strftime("%m/%d/%y %H:%M") %>
                  <% else %>
                    <%= point.created_at.strftime("%m/%d/%y %H:%M") %>
                  <% end %>
                </td>
                <td>
                  <% if point.description.present? %>
                    <%= truncate(point.description, length: 50) %>
                  <% else %>
                    <span class="text-muted">â€”</span>
                  <% end %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
<% end %>

<!-- Modal -->
<div class="modal fade" id="wellImagesModal" tabindex="-1" aria-labelledby="wellImagesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="wellImagesModalLabel">Well Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body"
        style="max-height: 80vh; overflow-y: auto;">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="wellTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="images-tab" data-bs-toggle="tab" data-bs-target="#images" type="button" role="tab" aria-controls="images" aria-selected="true">Images</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="content-tab" data-bs-toggle="tab" data-bs-target="#content" type="button" role="tab" aria-controls="content" aria-selected="false">Stock Solutions</button>
          </li>
        </ul>

        <!-- Tab content -->
        <div class="tab-content mt-3" id="wellTabContent">
          <div class="tab-pane fade show active" id="images" role="tabpanel" aria-labelledby="images-tab">
            <div id="wellImagesContent">
              <!-- Images will be injected here -->
            </div>
          </div>
          <div class="tab-pane fade" id="content" role="tabpanel" aria-labelledby="content-tab">
            <div id="wellContentForm">
              <!-- Stock solution form will be injected here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Define showImageInMain function globally 
window.showImageInMain = function(imageId, imageUrl, largeImageUrl) {
  console.log('showImageInMain called with:', imageId, imageUrl, largeImageUrl);
  
  // Find the main image element and thumbnail - be specific about finding img element
  const mainImage = document.querySelector('img[id^="main-image-"]');
  const thumbnailImage = document.getElementById(`thumb-image-${imageId}`);
  const thumbnail = thumbnailImage?.closest('.image-thumbnail');
  
  console.log('Elements found:', {
    mainImage: !!mainImage,
    mainImageId: mainImage?.id,
    mainImageCurrentSrc: mainImage?.src,
    thumbnailImage: !!thumbnailImage,
    thumbnail: !!thumbnail
  });
  
  if (mainImage && thumbnailImage && thumbnail) {
    console.log('Switching image to:', largeImageUrl || thumbnailImage.src);
    
    // Use the provided large image URL, or fall back to thumbnail URL
    const imageSrc = largeImageUrl || thumbnailImage.src;
    
    console.log('Before update - mainImage.src:', mainImage.src);
    
    // Update main image
    mainImage.src = imageSrc;
    mainImage.id = `main-image-${imageId}`;
    
    console.log('After update - mainImage.src:', mainImage.src);
    console.log('Image element:', mainImage);
    
    // Force a reload of the image
    mainImage.onload = function() {
      console.log('Image loaded successfully:', imageSrc);
    };
    mainImage.onerror = function() {
      console.error('Image failed to load:', imageSrc);
    };
    
    // Update main image link
    const mainImageLink = document.getElementById('main-image-link');
    if (mainImageLink) {
      mainImageLink.href = imageUrl;
      console.log('Updated main image link href to:', imageUrl);
    } else {
      console.warn('main-image-link not found');
    }
    
    // Update image info overlay
    const imageInfo = thumbnail.getAttribute('data-image-info');
    const infoOverlay = document.getElementById('image-info-overlay');
    if (infoOverlay && imageInfo) {
      infoOverlay.innerHTML = `<small>${imageInfo}</small>`;
      console.log('Updated image info overlay:', imageInfo);
    } else {
      console.warn('image-info-overlay not found or no image info');
    }
    
    // Update header info
    const capturedDate = thumbnail.getAttribute('data-image-captured');
    const headerInfo = document.getElementById('current-image-info');
    if (headerInfo) {
      headerInfo.innerHTML = capturedDate ? `Captured: ${capturedDate}` : '';
      console.log('Updated header info:', capturedDate);
    } else {
      console.warn('current-image-info not found');
    }
    
    // Update description
    const description = thumbnail.getAttribute('data-image-description');
    const descriptionElement = document.getElementById('current-image-description');
    if (descriptionElement) {
      descriptionElement.textContent = description || '';
      console.log('Updated description:', description);
    } else {
      console.warn('current-image-description not found');
    }
    
    // Update action buttons
    const actionsContainer = document.getElementById('main-image-actions');
    if (actionsContainer) {
      const viewButton = actionsContainer.querySelector('.btn-outline-primary');
      const editButton = actionsContainer.querySelector('.btn-outline-secondary');
      if (viewButton) viewButton.href = imageUrl;
      if (editButton) editButton.href = imageUrl.replace(/\/\d+$/, `/${imageId}/edit`);
      console.log('Updated action buttons');
    } else {
      console.warn('main-image-actions not found');
    }
    
    // Update thumbnail highlighting
    document.querySelectorAll('.image-thumbnail').forEach(thumb => {
      thumb.classList.remove('border-primary');
    });
    thumbnail.classList.add('border-primary');
    
    console.log('Image switched successfully');
  } else {
    console.error('Could not find required elements:', {
      mainImage: !!mainImage,
      thumbnailImage: !!thumbnailImage,
      thumbnail: !!thumbnail,
      imageId: imageId
    });
  }
};

document.addEventListener('DOMContentLoaded', () => {
  const wellImagesModal = document.getElementById('wellImagesModal')
  const wellImagesContent = document.getElementById('wellImagesContent')
  const wellContentForm = document.getElementById('wellContentForm')
  const modalTitle = document.getElementById('wellImagesModalLabel')

  wellImagesModal.addEventListener('show.bs.modal', event => {
    console.log('Modal show event triggered');
    const button = event.relatedTarget
    const wellId = button.getAttribute('data-well-id')
    const wellLabel = button.getAttribute('data-well-label')

    console.log('Button:', button);
    console.log('Well ID:', wellId);
    console.log('Well Label:', wellLabel);

    if (!wellId) {
      wellImagesContent.innerHTML = '<p>No well selected.</p>'
      wellContentForm.innerHTML = '<p>No well selected.</p>'
      modalTitle.textContent = 'Well Details'
      return
    }

    modalTitle.textContent = `Well ${wellLabel} Details`

    // Load images tab
    console.log('Fetching:', `/wells/${wellId}/images`);
    fetch(`/wells/${wellId}/images`)
      .then(response => {
        console.log('Fetch response:', response);
        return response.text();
      })
      .then(html => {
        console.log('Fetch HTML length:', html.length);
        wellImagesContent.innerHTML = html
        // Initialize thumbnails after content is loaded
        setTimeout(() => {
          if (window.initializeThumbnails) {
            console.log('Calling initializeThumbnails after AJAX load');
            window.initializeThumbnails();
          } else {
            console.error('initializeThumbnails function not found, trying direct initialization');
            // Try to call it directly from the loaded content
            const thumbnails = document.querySelectorAll('.image-thumbnail');
            console.log('Found thumbnails directly:', thumbnails.length);
            
            thumbnails.forEach((thumbnail, index) => {
              if (thumbnail.hasAttribute('data-initialized')) {
                return;
              }
              
              thumbnail.setAttribute('data-initialized', 'true');
              
              // Add hover functionality for action buttons
              thumbnail.addEventListener('mouseenter', function() {
                const actions = this.querySelector('.image-actions');
                if (actions) {
                  actions.classList.remove('d-none');
                }
              });
              
              thumbnail.addEventListener('mouseleave', function() {
                const actions = this.querySelector('.image-actions');
                if (actions) {
                  actions.classList.add('d-none');
                }
              });
              
              thumbnail.addEventListener('click', function(e) {
                const imageId = this.getAttribute('data-image-id');
                const imageUrl = this.getAttribute('data-image-url');
                const largeImageUrl = this.getAttribute('data-large-image-url');
                console.log('Direct thumbnail clicked:', imageId, imageUrl, largeImageUrl);
                
                if (imageId && imageUrl && window.showImageInMain) {
                  window.showImageInMain(imageId, imageUrl, largeImageUrl);
                } else {
                  console.error('showImageInMain not available');
                }
              });
            });
          }
        }, 200);
      })
      .catch((error) => {
        console.error('Fetch error:', error);
        wellImagesContent.innerHTML = '<p>Error loading images.</p>'
      })

    // Load content tab
    fetch(`/wells/${wellId}/content_form`)
      .then(response => response.text())
      .then(html => {
        wellContentForm.innerHTML = html
      })
      .catch(() => {
        wellContentForm.innerHTML = '<p>Error loading content form.</p>'
      })
  })

  // Add event listener for when modal is closed to refresh the plate grid
  wellImagesModal.addEventListener('hidden.bs.modal', event => {
    console.log('Modal closed, refreshing page to update well colors...');
    // Refresh the page to update the well grid colors
    window.location.reload();
  })

// Stock solution search functionality
async function searchStockSolutions(input, hiddenFieldId, resultsId) {
  const query = input.value.trim();
  const resultsDiv = document.getElementById(resultsId);
  
  if (query.length < 2) {
    resultsDiv.classList.add('d-none');
    return;
  }
  
  try {
    const response = await fetch(`/stock_solutions/search?q=${encodeURIComponent(query)}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    if (!response.ok) {
      throw new Error('Search failed');
    }
    
    const data = await response.json();
    displayStockSolutionResults(data, resultsId, hiddenFieldId, input);
  } catch (error) {
    console.error('Stock solution search error:', error);
    resultsDiv.innerHTML = '<div class="dropdown-item text-danger">Search failed</div>';
    resultsDiv.classList.remove('d-none');
  }
}

function displayStockSolutionResults(results, resultsId, hiddenFieldId, input) {
  const resultsDiv = document.getElementById(resultsId);
  
  if (results.length === 0) {
    resultsDiv.innerHTML = '<div class="dropdown-item text-muted">No stock solutions found</div>';
  } else {
    resultsDiv.innerHTML = results.map(solution => 
      `<button type="button" class="dropdown-item" 
               data-solution-id="${solution.id}" 
               data-solution-name="${solution.display_name}"
               data-hidden-field-id="${hiddenFieldId}"
               data-input-id="${input.id}"
               data-results-id="${resultsId}">
        <strong>${solution.display_name}</strong>
        ${solution.component_summary ? `<br><small class="text-muted">${solution.component_summary}</small>` : ''}
      </button>`
    ).join('');
  }
  
  resultsDiv.classList.remove('d-none');
}

function selectStockSolution(id, name, hiddenFieldId, inputId, resultsId) {
  const hiddenField = document.getElementById(hiddenFieldId);
  const inputField = document.getElementById(inputId);
  
  if (hiddenField) {
    hiddenField.value = id;
  }
  
  if (inputField) {
    inputField.value = name;
  }
  
  hideStockSolutionResults(resultsId);
}

function hideStockSolutionResults(resultsId) {
  const resultsDiv = document.getElementById(resultsId);
  resultsDiv.classList.add('d-none');
}

  // Event delegation for dynamically loaded content
  wellContentForm.addEventListener('click', event => {
    const target = event.target
    const action = target.getAttribute('data-action')
    const wellId = target.getAttribute('data-well-id')

    if (action === 'add-stock-solution') {
      addStockSolution(wellId)
    } else if (action === 'remove-stock-solution') {
      const contentId = target.getAttribute('data-content-id')
      removeStockSolution(wellId, contentId)
    } else if (action === 'remove-all-content') {
      removeAllContent(wellId)
    } else {
      // Handle stock solution selection - check if clicked element or its parent is a dropdown item
      const dropdownItem = target.closest('.dropdown-item')
      if (dropdownItem && dropdownItem.dataset.solutionId) {
        const id = dropdownItem.dataset.solutionId
        const name = dropdownItem.dataset.solutionName
        const hiddenFieldId = dropdownItem.dataset.hiddenFieldId
        const inputId = dropdownItem.dataset.inputId
        const resultsId = dropdownItem.dataset.resultsId
        selectStockSolution(id, name, hiddenFieldId, inputId, resultsId)
      }
    }
  })

  // Event delegation for input events
  wellContentForm.addEventListener('input', event => {
    const target = event.target
    if (target.id && target.id.startsWith('stockSolutionSearch_')) {
      const wellId = target.id.replace('stockSolutionSearch_', '')
      const hiddenFieldId = `stockSolutionId_${wellId}`
      const resultsId = `stockSolutionResults_${wellId}`
      searchStockSolutions(target, hiddenFieldId, resultsId)
    }
  })

  // Event delegation for blur events
  wellContentForm.addEventListener('blur', event => {
    const target = event.target
    if (target.id && target.id.startsWith('stockSolutionSearch_')) {
      const wellId = target.id.replace('stockSolutionSearch_', '')
      const resultsId = `stockSolutionResults_${wellId}`
      setTimeout(() => hideStockSolutionResults(resultsId), 200)
    }
  }, true)
})

// Stock solution management functions
function addStockSolution(wellId) {
  const hiddenInput = document.getElementById(`stockSolutionId_${wellId}`)
  const searchInput = document.getElementById(`stockSolutionSearch_${wellId}`)
  const volumeInput = document.getElementById(`volumeAmountInput_${wellId}`)
  
  const stockSolutionId = hiddenInput.value
  const volumeWithUnit = volumeInput.value.trim()
  
  if (!stockSolutionId) {
    showMessage(wellId, 'Please select a stock solution', 'danger')
    return
  }

  if (!volumeWithUnit) {
    showMessage(wellId, 'Please enter a volume with unit (e.g., 50 Î¼L)', 'danger')
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')
  
  if (!csrfToken) {
    showMessage(wellId, 'CSRF token not found', 'danger')
    return
  }

  fetch(`/wells/${wellId}/well_contents`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    },
    body: JSON.stringify({
      well_content: {
        stock_solution_id: stockSolutionId,
        volume_with_unit: volumeWithUnit
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
      // Reset the form
      hiddenInput.value = ''
      searchInput.value = ''
      volumeInput.value = ''
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error adding stock solution: ' + error.message, 'danger')
  })
}

function removeStockSolution(wellId, contentId) {
  if (!confirm('Are you sure you want to remove this stock solution from the well?')) {
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')
  
  fetch(`/wells/${wellId}/well_contents/${contentId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error removing stock solution', 'danger')
  })
}

function removeAllContent(wellId) {
  if (!confirm('Are you sure you want to remove all stock solutions from this well?')) {
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')

  fetch(`/wells/${wellId}/update_content`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    },
    body: JSON.stringify({
      remove_all_content: true
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error removing content', 'danger')
  })
}

function reloadContentForm(wellId) {
  fetch(`/wells/${wellId}/content_form`)
    .then(response => response.text())
    .then(html => {
      document.getElementById('wellContentForm').innerHTML = html
    })
    .catch(error => {
      console.error('Error reloading form:', error)
    })
}

function showMessage(wellId, message, type) {
  const messagesDiv = document.getElementById(`contentMessages_${wellId}`)
  if (!messagesDiv) {
    console.error('Messages div not found for well:', wellId)
    return
  }
  
  messagesDiv.innerHTML = `
    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  `
  
  // Auto-hide after 3 seconds
  setTimeout(() => {
    const alert = messagesDiv.querySelector('.alert')
    if (alert) {
      alert.classList.remove('show')
      setTimeout(() => {
        messagesDiv.innerHTML = ''
      }, 150)
    }
  }, 3000)
}
</script>

<style>
  .well-select-btn.border-info {
    border-width: 3px !important;
    box-shadow: 0 0 0 3px #0dcaf0 !important;
    z-index: 2;
  }
</style>