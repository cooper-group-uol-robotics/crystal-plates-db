<% content_for :title, "Plate #{@plate.barcode}" %>

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1 class="mb-0">Plate: <%= @plate.barcode %></h1>
  <div>
    <%= link_to 'Edit', edit_plate_path(@plate), class: "btn btn-outline-primary me-2" %>
    <%= button_to 'Delete', plate_path(@plate), method: :delete,
                  class: "btn btn-outline-danger me-2",
                  form: { style: "display: inline-block;" },
                  data: { confirm: "Are you sure you want to delete Plate #{@plate.barcode}? It can be restored later." } %>
    <%= link_to 'Back', plates_path, class: "btn btn-outline-secondary" %>
  </div>
</div>

<div class="card mb-4 shadow-sm">
  <div class="card-body">
    <h5 class="card-title">Storage Location</h5>
    <p class="card-text mb-0">
      <% if @plate.current_location %>
        Location: <strong><%= @plate.current_location.display_name %></strong>
      <% else %>
        Location: <strong>Not assigned</strong>
      <% end %>
    </p>
  </div>
</div>

<h2 class="mb-3">Wells</h2>
<div class="d-inline-block border rounded p-2 shadow-sm" style="background: #f8f9fa;">
  <div class="d-grid" style="grid-template-columns: repeat(<%= @columns %>, 80px); gap: 8px;">
    <% (1..@rows).each do |row| %>
      <% (1..@columns).each do |col| %>
        <% wells_in_position = @wells.select { |w| w.well_row == row && w.well_column == col } %>
        <div class="well-position border rounded p-1" style="background: white; min-height: 80px;">
          <% if wells_in_position.any? %>
            <div class="text-center mb-1" style="font-size: 10px; font-weight: bold;">
              <%= wells_in_position.first.well_label %>
            </div>
            <div class="d-grid" style="grid-template-columns: repeat(<%= Math.sqrt(wells_in_position.length).ceil %>, 1fr); gap: 2px;">
              <% wells_in_position.sort_by(&:subwell).each do |well| %>
                <% has_image = well.has_images? %>
                <% has_content = well.has_content? %>
                <% 
                  if has_image
                    bg_color = '#198754'  # Green - has images
                    text_color = 'white'
                  elsif has_content
                    bg_color = '#ffc107'  # Yellow - has stock solutions but no images
                    text_color = 'black'
                  else
                    bg_color = '#dc3545'  # Red - empty
                    text_color = 'white'
                  end
                %>
                <button type="button" class="btn btn-sm p-1"
                  style="background-color: <%= bg_color %>; color: <%= text_color %>; height: 25px; font-size: 9px;"
                  data-bs-toggle="modal" data-bs-target="#wellImagesModal"
                  data-well-id="<%= well.id %>"
                  data-well-label="<%= well.well_label_with_subwell %>"
                  title="<%= well.well_label_with_subwell %>">
                  <%= well.subwell %>
                </button>
              <% end %>
            </div>
          <% else %>
            <div class="text-center text-muted" style="padding-top: 25px; font-size: 10px;">
              Empty
            </div>
          <% end %>
        </div>
      <% end %>
    <% end %>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="wellImagesModal" tabindex="-1" aria-labelledby="wellImagesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="wellImagesModalLabel">Well Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body"
        style="max-height: 80vh; overflow-y: auto;">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="wellTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="images-tab" data-bs-toggle="tab" data-bs-target="#images" type="button" role="tab" aria-controls="images" aria-selected="true">Images</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="content-tab" data-bs-toggle="tab" data-bs-target="#content" type="button" role="tab" aria-controls="content" aria-selected="false">Stock Solutions</button>
          </li>
        </ul>

        <!-- Tab content -->
        <div class="tab-content mt-3" id="wellTabContent">
          <div class="tab-pane fade show active" id="images" role="tabpanel" aria-labelledby="images-tab">
            <div id="wellImagesContent">
              <!-- Images will be injected here -->
            </div>
          </div>
          <div class="tab-pane fade" id="content" role="tabpanel" aria-labelledby="content-tab">
            <div id="wellContentForm">
              <!-- Stock solution form will be injected here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Define showImageInMain function globally 
window.showImageInMain = function(imageId, imageUrl, largeImageUrl) {
  console.log('showImageInMain called with:', imageId, imageUrl, largeImageUrl);
  
  // Find the main image element and thumbnail - be specific about finding img element
  const mainImage = document.querySelector('img[id^="main-image-"]');
  const thumbnailImage = document.getElementById(`thumb-image-${imageId}`);
  const thumbnail = thumbnailImage?.closest('.image-thumbnail');
  
  console.log('Elements found:', {
    mainImage: !!mainImage,
    mainImageId: mainImage?.id,
    mainImageCurrentSrc: mainImage?.src,
    thumbnailImage: !!thumbnailImage,
    thumbnail: !!thumbnail
  });
  
  if (mainImage && thumbnailImage && thumbnail) {
    console.log('Switching image to:', largeImageUrl || thumbnailImage.src);
    
    // Use the provided large image URL, or fall back to thumbnail URL
    const imageSrc = largeImageUrl || thumbnailImage.src;
    
    console.log('Before update - mainImage.src:', mainImage.src);
    
    // Update main image
    mainImage.src = imageSrc;
    mainImage.id = `main-image-${imageId}`;
    
    console.log('After update - mainImage.src:', mainImage.src);
    console.log('Image element:', mainImage);
    
    // Force a reload of the image
    mainImage.onload = function() {
      console.log('Image loaded successfully:', imageSrc);
    };
    mainImage.onerror = function() {
      console.error('Image failed to load:', imageSrc);
    };
    
    // Update main image link
    const mainImageLink = document.getElementById('main-image-link');
    if (mainImageLink) {
      mainImageLink.href = imageUrl;
      console.log('Updated main image link href to:', imageUrl);
    } else {
      console.warn('main-image-link not found');
    }
    
    // Update image info overlay
    const imageInfo = thumbnail.getAttribute('data-image-info');
    const infoOverlay = document.getElementById('image-info-overlay');
    if (infoOverlay && imageInfo) {
      infoOverlay.innerHTML = `<small>${imageInfo}</small>`;
      console.log('Updated image info overlay:', imageInfo);
    } else {
      console.warn('image-info-overlay not found or no image info');
    }
    
    // Update header info
    const capturedDate = thumbnail.getAttribute('data-image-captured');
    const headerInfo = document.getElementById('current-image-info');
    if (headerInfo) {
      headerInfo.innerHTML = capturedDate ? `Captured: ${capturedDate}` : '';
      console.log('Updated header info:', capturedDate);
    } else {
      console.warn('current-image-info not found');
    }
    
    // Update description
    const description = thumbnail.getAttribute('data-image-description');
    const descriptionElement = document.getElementById('current-image-description');
    if (descriptionElement) {
      descriptionElement.textContent = description || '';
      console.log('Updated description:', description);
    } else {
      console.warn('current-image-description not found');
    }
    
    // Update action buttons
    const actionsContainer = document.getElementById('main-image-actions');
    if (actionsContainer) {
      const viewButton = actionsContainer.querySelector('.btn-outline-primary');
      const editButton = actionsContainer.querySelector('.btn-outline-secondary');
      if (viewButton) viewButton.href = imageUrl;
      if (editButton) editButton.href = imageUrl.replace(/\/\d+$/, `/${imageId}/edit`);
      console.log('Updated action buttons');
    } else {
      console.warn('main-image-actions not found');
    }
    
    // Update thumbnail highlighting
    document.querySelectorAll('.image-thumbnail').forEach(thumb => {
      thumb.classList.remove('border-primary');
    });
    thumbnail.classList.add('border-primary');
    
    console.log('Image switched successfully');
  } else {
    console.error('Could not find required elements:', {
      mainImage: !!mainImage,
      thumbnailImage: !!thumbnailImage,
      thumbnail: !!thumbnail,
      imageId: imageId
    });
  }
};

document.addEventListener('DOMContentLoaded', () => {
  const wellImagesModal = document.getElementById('wellImagesModal')
  const wellImagesContent = document.getElementById('wellImagesContent')
  const wellContentForm = document.getElementById('wellContentForm')
  const modalTitle = document.getElementById('wellImagesModalLabel')

  wellImagesModal.addEventListener('show.bs.modal', event => {
    console.log('Modal show event triggered');
    const button = event.relatedTarget
    const wellId = button.getAttribute('data-well-id')
    const wellLabel = button.getAttribute('data-well-label')

    console.log('Button:', button);
    console.log('Well ID:', wellId);
    console.log('Well Label:', wellLabel);

    if (!wellId) {
      wellImagesContent.innerHTML = '<p>No well selected.</p>'
      wellContentForm.innerHTML = '<p>No well selected.</p>'
      modalTitle.textContent = 'Well Details'
      return
    }

    modalTitle.textContent = `Well ${wellLabel} Details`

    // Load images tab
    console.log('Fetching:', `/wells/${wellId}/images`);
    fetch(`/wells/${wellId}/images`)
      .then(response => {
        console.log('Fetch response:', response);
        return response.text();
      })
      .then(html => {
        console.log('Fetch HTML length:', html.length);
        wellImagesContent.innerHTML = html
        // Initialize thumbnails after content is loaded
        setTimeout(() => {
          if (window.initializeThumbnails) {
            console.log('Calling initializeThumbnails after AJAX load');
            window.initializeThumbnails();
          } else {
            console.error('initializeThumbnails function not found, trying direct initialization');
            // Try to call it directly from the loaded content
            const thumbnails = document.querySelectorAll('.image-thumbnail');
            console.log('Found thumbnails directly:', thumbnails.length);
            
            thumbnails.forEach((thumbnail, index) => {
              if (thumbnail.hasAttribute('data-initialized')) {
                return;
              }
              
              thumbnail.setAttribute('data-initialized', 'true');
              
              // Add hover functionality for action buttons
              thumbnail.addEventListener('mouseenter', function() {
                const actions = this.querySelector('.image-actions');
                if (actions) {
                  actions.classList.remove('d-none');
                }
              });
              
              thumbnail.addEventListener('mouseleave', function() {
                const actions = this.querySelector('.image-actions');
                if (actions) {
                  actions.classList.add('d-none');
                }
              });
              
              thumbnail.addEventListener('click', function(e) {
                const imageId = this.getAttribute('data-image-id');
                const imageUrl = this.getAttribute('data-image-url');
                const largeImageUrl = this.getAttribute('data-large-image-url');
                console.log('Direct thumbnail clicked:', imageId, imageUrl, largeImageUrl);
                
                if (imageId && imageUrl && window.showImageInMain) {
                  window.showImageInMain(imageId, imageUrl, largeImageUrl);
                } else {
                  console.error('showImageInMain not available');
                }
              });
            });
          }
        }, 200);
      })
      .catch((error) => {
        console.error('Fetch error:', error);
        wellImagesContent.innerHTML = '<p>Error loading images.</p>'
      })

    // Load content tab
    fetch(`/wells/${wellId}/content_form`)
      .then(response => response.text())
      .then(html => {
        wellContentForm.innerHTML = html
      })
      .catch(() => {
        wellContentForm.innerHTML = '<p>Error loading content form.</p>'
      })
  })

// Stock solution search functionality
async function searchStockSolutions(input, hiddenFieldId, resultsId) {
  const query = input.value.trim();
  const resultsDiv = document.getElementById(resultsId);
  
  if (query.length < 2) {
    resultsDiv.classList.add('d-none');
    return;
  }
  
  try {
    const response = await fetch(`/stock_solutions/search?q=${encodeURIComponent(query)}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    if (!response.ok) {
      throw new Error('Search failed');
    }
    
    const data = await response.json();
    displayStockSolutionResults(data, resultsId, hiddenFieldId, input);
  } catch (error) {
    console.error('Stock solution search error:', error);
    resultsDiv.innerHTML = '<div class="dropdown-item text-danger">Search failed</div>';
    resultsDiv.classList.remove('d-none');
  }
}

function displayStockSolutionResults(results, resultsId, hiddenFieldId, input) {
  const resultsDiv = document.getElementById(resultsId);
  
  if (results.length === 0) {
    resultsDiv.innerHTML = '<div class="dropdown-item text-muted">No stock solutions found</div>';
  } else {
    resultsDiv.innerHTML = results.map(solution => 
      `<button type="button" class="dropdown-item" 
               data-solution-id="${solution.id}" 
               data-solution-name="${solution.display_name}"
               data-hidden-field-id="${hiddenFieldId}"
               data-input-id="${input.id}"
               data-results-id="${resultsId}">
        <strong>${solution.display_name}</strong>
        ${solution.component_summary ? `<br><small class="text-muted">${solution.component_summary}</small>` : ''}
      </button>`
    ).join('');
  }
  
  resultsDiv.classList.remove('d-none');
}

function selectStockSolution(id, name, hiddenFieldId, inputId, resultsId) {
  const hiddenField = document.getElementById(hiddenFieldId);
  const inputField = document.getElementById(inputId);
  
  if (hiddenField) {
    hiddenField.value = id;
  }
  
  if (inputField) {
    inputField.value = name;
  }
  
  hideStockSolutionResults(resultsId);
}

function hideStockSolutionResults(resultsId) {
  const resultsDiv = document.getElementById(resultsId);
  resultsDiv.classList.add('d-none');
}

  // Event delegation for dynamically loaded content
  wellContentForm.addEventListener('click', event => {
    const target = event.target
    const action = target.getAttribute('data-action')
    const wellId = target.getAttribute('data-well-id')

    if (action === 'add-stock-solution') {
      addStockSolution(wellId)
    } else if (action === 'remove-stock-solution') {
      const contentId = target.getAttribute('data-content-id')
      removeStockSolution(wellId, contentId)
    } else if (action === 'remove-all-content') {
      removeAllContent(wellId)
    } else {
      // Handle stock solution selection - check if clicked element or its parent is a dropdown item
      const dropdownItem = target.closest('.dropdown-item')
      if (dropdownItem && dropdownItem.dataset.solutionId) {
        const id = dropdownItem.dataset.solutionId
        const name = dropdownItem.dataset.solutionName
        const hiddenFieldId = dropdownItem.dataset.hiddenFieldId
        const inputId = dropdownItem.dataset.inputId
        const resultsId = dropdownItem.dataset.resultsId
        selectStockSolution(id, name, hiddenFieldId, inputId, resultsId)
      }
    }
  })

  // Event delegation for input events
  wellContentForm.addEventListener('input', event => {
    const target = event.target
    if (target.id && target.id.startsWith('stockSolutionSearch_')) {
      const wellId = target.id.replace('stockSolutionSearch_', '')
      const hiddenFieldId = `stockSolutionId_${wellId}`
      const resultsId = `stockSolutionResults_${wellId}`
      searchStockSolutions(target, hiddenFieldId, resultsId)
    }
  })

  // Event delegation for blur events
  wellContentForm.addEventListener('blur', event => {
    const target = event.target
    if (target.id && target.id.startsWith('stockSolutionSearch_')) {
      const wellId = target.id.replace('stockSolutionSearch_', '')
      const resultsId = `stockSolutionResults_${wellId}`
      setTimeout(() => hideStockSolutionResults(resultsId), 200)
    }
  }, true)
})

// Stock solution management functions
function addStockSolution(wellId) {
  const hiddenInput = document.getElementById(`stockSolutionId_${wellId}`)
  const searchInput = document.getElementById(`stockSolutionSearch_${wellId}`)
  const volumeInput = document.getElementById(`volumeAmountInput_${wellId}`)
  
  const stockSolutionId = hiddenInput.value
  const volumeWithUnit = volumeInput.value.trim()
  
  if (!stockSolutionId) {
    showMessage(wellId, 'Please select a stock solution', 'danger')
    return
  }

  if (!volumeWithUnit) {
    showMessage(wellId, 'Please enter a volume with unit (e.g., 50 μL)', 'danger')
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')
  
  if (!csrfToken) {
    showMessage(wellId, 'CSRF token not found', 'danger')
    return
  }

  fetch(`/wells/${wellId}/well_contents`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    },
    body: JSON.stringify({
      well_content: {
        stock_solution_id: stockSolutionId,
        volume_with_unit: volumeWithUnit
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
      // Reset the form
      hiddenInput.value = ''
      searchInput.value = ''
      volumeInput.value = ''
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error adding stock solution: ' + error.message, 'danger')
  })
}

function removeStockSolution(wellId, contentId) {
  if (!confirm('Are you sure you want to remove this stock solution from the well?')) {
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')
  
  fetch(`/wells/${wellId}/well_contents/${contentId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error removing stock solution', 'danger')
  })
}

function removeAllContent(wellId) {
  if (!confirm('Are you sure you want to remove all stock solutions from this well?')) {
    return
  }

  const csrfToken = document.querySelector('meta[name="csrf-token"]')

  fetch(`/wells/${wellId}/update_content`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken.getAttribute('content')
    },
    body: JSON.stringify({
      remove_all_content: true
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showMessage(wellId, data.message, 'success')
      // Reload the content form
      reloadContentForm(wellId)
    } else {
      showMessage(wellId, data.message, 'danger')
    }
  })
  .catch(error => {
    console.error('Error:', error)
    showMessage(wellId, 'Error removing content', 'danger')
  })
}

function reloadContentForm(wellId) {
  fetch(`/wells/${wellId}/content_form`)
    .then(response => response.text())
    .then(html => {
      document.getElementById('wellContentForm').innerHTML = html
    })
    .catch(error => {
      console.error('Error reloading form:', error)
    })
}

function showMessage(wellId, message, type) {
  const messagesDiv = document.getElementById(`contentMessages_${wellId}`)
  if (!messagesDiv) {
    console.error('Messages div not found for well:', wellId)
    return
  }
  
  messagesDiv.innerHTML = `
    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  `
  
  // Auto-hide after 3 seconds
  setTimeout(() => {
    const alert = messagesDiv.querySelector('.alert')
    if (alert) {
      alert.classList.remove('show')
      setTimeout(() => {
        messagesDiv.innerHTML = ''
      }, 150)
    }
  }, 3000)
}
</script>