<%# app/views/wells/_calorimetry_datasets.html.erb %>
<script type="module">
// Define function in global scope for calorimetry dataset switching
window.showCalorimetryDatasetInMain = function(datasetId, datasetTitle, datasetUrl) {
  console.log('showCalorimetryDatasetInMain called with:', datasetId, datasetTitle, datasetUrl);
  
  // Update the main plot
  fetch(`/calorimetry_datasets/${datasetId}/plot`)
    .then(response => response.text())
    .then(html => {
      const container = document.getElementById('calorimetry-main-plot-container');
      container.innerHTML = html;
      
      // Execute any scripts that were injected
      const scripts = container.querySelectorAll('script');
      scripts.forEach(script => {
        try {
          if (script.type === 'module') {
            // Handle ES module scripts by creating a new script element
            const moduleScript = document.createElement('script');
            moduleScript.type = 'module';
            moduleScript.textContent = script.innerHTML;
            document.head.appendChild(moduleScript);
            // Clean up after execution
            setTimeout(() => moduleScript.remove(), 100);
          } else {
            // Use Function constructor for regular scripts
            new Function(script.innerHTML)();
          }
        } catch(e) {
          console.error('Error executing plot script:', e);
        }
      });
    })
    .catch(error => {
      console.error('Error loading plot:', error);
    });
    
  // Update dataset info
  document.getElementById('current-calorimetry-title').textContent = datasetTitle;
  
  // Update action buttons
  const downloadButton = document.getElementById('main-calorimetry-download-btn');
  if (downloadButton) {
    downloadButton.href = `/api/v1/calorimetry_datasets/${datasetId}/datapoints`;
  }
  
  // Update thumbnail highlighting
  document.querySelectorAll('.calorimetry-thumbnail').forEach(thumb => {
    thumb.classList.remove('border-primary');
  });
  const selectedThumb = document.querySelector(`[data-dataset-id="${datasetId}"]`);
  if (selectedThumb) {
    selectedThumb.classList.add('border-primary');
  }
};
</script>

<div class="d-flex justify-content-between align-items-center mb-3">
  <h5 class="mb-0">Calorimetry Datasets (<%= @calorimetry_datasets.count %>)</h5>
  <a class="btn btn-primary btn-sm" href="<%= new_well_calorimetry_dataset_path(well) %>" target="_blank">
    Add Calorimetry Dataset
  </a>
</div>

<% if @calorimetry_datasets.any? %>
  <% selected_dataset = @calorimetry_datasets.first %>
  
  <!-- Main Calorimetry Display -->
  <div class="mb-4">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span class="fw-bold">Temperature Viewer</span>
        <small class="text-muted" id="current-calorimetry-info">
          <% if selected_dataset.processed_at %>
            Processed: <%= selected_dataset.processed_at.strftime("%Y-%m-%d %H:%M") %>
          <% elsif selected_dataset.created_at %>
            Created: <%= selected_dataset.created_at.strftime("%Y-%m-%d %H:%M") %>
          <% end %>
        </small>
      </div>
      <div class="card-body p-0">
        <div class="position-relative">
          <div id="calorimetry-main-plot-container" style="min-height: 400px; background: #f8f9fa;">
            <%= render partial: 'calorimetry_datasets/plot', locals: { calorimetry_dataset: selected_dataset } %>
          </div>
          
          <!-- Temperature Info Overlay -->
          <div class="position-absolute bottom-0 start-0 bg-dark bg-opacity-75 text-white p-2 m-2 rounded" id="calorimetry-info-overlay">
            <small>
              Points: <%= number_with_delimiter(selected_dataset.datapoint_count) %> |
              <% temp_range = selected_dataset.temperature_range %>
              <% if temp_range[0] && temp_range[1] %>
                Range: <%= sprintf("%.1f°C - %.1f°C", temp_range[0], temp_range[1]) %> |
              <% end %>
              Duration: <%= time_duration_in_words(selected_dataset.duration_seconds) %>
            </small>
          </div>
        </div>
      </div>
      <div class="card-footer">
        <div class="d-flex justify-content-between align-items-center">
          <div class="btn-group btn-group-sm">
            <a href="/api/v1/calorimetry_datasets/<%= selected_dataset.id %>/datapoints" 
               class="btn btn-outline-success" id="main-calorimetry-download-btn" title="Download temperature data">
              <i class="bi bi-download"></i> Download CSV
            </a>
            <button type="button" class="btn btn-outline-danger" 
                    onclick="deleteCalorimetryDataset(<%= selected_dataset.id %>)" 
                    title="Delete dataset">
              <i class="bi bi-trash"></i> Delete
            </button>
          </div>
          <small class="text-muted" id="current-calorimetry-title">
            <%= selected_dataset.name.presence || "Calorimetry Dataset ##{selected_dataset.id}" %>
          </small>
        </div>
      </div>
    </div>
  </div>

  <!-- All Calorimetry Datasets Thumbnail Gallery -->
  <div class="mb-3">
    <h6 class="text-muted">All Datasets (<%= @calorimetry_datasets.count %>)</h6>
    <div class="border rounded p-2" style="background: #f8f9fa;">
      <div class="d-flex overflow-auto gap-2 p-2" style="scroll-behavior: smooth;">
        <% @calorimetry_datasets.each_with_index do |dataset, index| %>
          <% if dataset.datapoint_count > 0 %>
            <div class="flex-shrink-0 position-relative" style="width: 150px;">
              <div class="card h-100 calorimetry-thumbnail <%= 'border-primary' if index == 0 %>" style="cursor: pointer;" 
                   data-dataset-id="<%= dataset.id %>"
                   data-dataset-title="<%= dataset.name.presence || "Dataset ##{dataset.id}" %>">
                <div class="card-body p-2" style="height: 120px;">
                  <canvas id="thumb-<%= dataset.id %>" width="130" height="80" style="width: 100%; height: 100%;"></canvas>
                </div>
                <div class="card-footer p-1">
                  <div class="small text-center">
                    <div class="fw-bold"><%= truncate(dataset.name.presence || "Dataset ##{dataset.id}", length: 15) %></div>
                    <div class="text-muted" style="font-size: 11px;">
                      <%= dataset.processed_at.strftime('%m/%d %H:%M') %>
                    </div>
                  </div>
                </div>
                
                <!-- Actions overlay on hover -->
                <div class="position-absolute top-0 end-0 p-1 d-none calorimetry-actions">
                  <div class="btn-group-vertical btn-group-sm">
                    <a href="/api/v1/calorimetry_datasets/<%= dataset.id %>/datapoints" 
                       class="btn btn-outline-light btn-sm" title="Download">
                      <i class="bi bi-download"></i>
                    </a>
                    <button type="button" class="btn btn-outline-light btn-sm" 
                            onclick="deleteCalorimetryDataset(<%= dataset.id %>)" title="Delete">
                      <i class="bi bi-trash"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>



<% else %>
  <div class="alert alert-info text-center">
    <h6>No Calorimetry Datasets</h6>
    <p>No calorimetry datasets have been processed for this well yet.</p>
    <a href="<%= new_well_calorimetry_dataset_path(well) %>" class="btn btn-primary" target="_blank">Add First Dataset</a>
  </div>
<% end %>

<script type="module">
  setTimeout(async function() {
    try {
      // Import the calorimetry chart renderer
      const { renderCalorimetryChart } = await import("calorimetry_chart");
      
      // Initialize thumbnails with calorimetry data
      <% @calorimetry_datasets.each do |dataset| %>
        <% if dataset.datapoint_count > 0 %>
          (function() {
            const canvas = document.getElementById('thumb-<%= dataset.id %>');
            if (canvas) {
              const datapoints = <%= raw dataset.calorimetry_datapoints.order(:timestamp_seconds).map { |dp| { timestamp_seconds: dp.timestamp_seconds, temperature: dp.temperature } }.to_json %>;
              const title = '<%= j(dataset.name.presence || "Dataset ##{dataset.id}") %>';
              
              // Render mini chart using the modern approach
              renderCalorimetryChart('thumb-<%= dataset.id %>', datapoints, title, true);
            }
          })();
        <% end %>
      <% end %>
    } catch (error) {
      console.error('Error loading calorimetry chart module:', error);
      // Fallback to basic display if module loading fails
      console.log('Calorimetry chart thumbnails could not be rendered');
    }
    
    // Initialize thumbnail click handlers
    document.querySelectorAll('.calorimetry-thumbnail').forEach(function(thumb) {
      thumb.addEventListener('click', function() {
        const datasetId = this.getAttribute('data-dataset-id');
        const datasetTitle = this.getAttribute('data-dataset-title');
        
        window.showCalorimetryDatasetInMain(datasetId, datasetTitle, '');
      });
      
      // Show actions on hover
      thumb.addEventListener('mouseenter', function() {
        this.querySelector('.calorimetry-actions').classList.remove('d-none');
      });
      thumb.addEventListener('mouseleave', function() {
        this.querySelector('.calorimetry-actions').classList.add('d-none');
      });
    });
  }, 200);
</script>

<script>
// Utility functions
function deleteCalorimetryDataset(datasetId) {
  if (confirm('Are you sure you want to delete this dataset? This action cannot be undone.')) {
    fetch(`/api/v1/calorimetry_datasets/${datasetId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    }).then(response => {
      if (response.ok) {
        // Reload the calorimetry content
        const wellModalController = document.querySelector('[data-controller="well-modal"]');
        if (wellModalController && wellModalController.stimulusController) {
          wellModalController.stimulusController.loadCalorimetryInBackground();
        }
        showNotification('Dataset deleted successfully!', 'success');
      } else {
        showNotification('Error deleting dataset', 'error');
      }
    });
  }
}

function showNotification(message, type) {
  const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
  const notification = document.createElement('div');
  notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
  notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  notification.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (notification.parentNode) {
      notification.remove();
    }
  }, 5000);
}
</script>