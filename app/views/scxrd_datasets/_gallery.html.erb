<%# app/views/scxrd_datasets/_gallery.html.erb %>

<!-- SCXRD Diffraction Viewer Class - Visual Heatmap Version -->
<script>
// SCXRD Diffraction Viewer - Visual Heatmap Implementation
class ScxrdDiffractionViewer {
  constructor(containerId) {
    this.containerId = containerId;
    this.plotDiv = null;
    this.imageData = null;
    this.dimensions = null;
    this.metadata = null;
    this.heatmapInstance = null;
    this.currentIntensityRange = [0, 1000];
    this.currentZoom = 1;
    this.initialScale = 1;
  }

  getVisualHeatmap() {
    // Try both possible property names
    return window.VisualHeatmap || window.visualHeatmap;
  }

  async loadImageData(wellId, datasetId) {
    console.log(`Loading SCXRD image data for well ${wellId}, dataset ${datasetId}`);
    
    try {
      const url = `/wells/${wellId}/scxrd_datasets/${datasetId}/image_data`;
      console.log(`Fetching from: ${url}`);
      const response = await fetch(url);
      
      console.log(`Response status: ${response.status}`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Received data:', { success: data.success, dimensions: data.dimensions, dataLength: data.image_data?.length });
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to load image data');
      }
      
      this.imageData = data.image_data;
      this.dimensions = data.dimensions;
      this.metadata = data.metadata;
      
      console.log(`Loaded ${this.dimensions[0]}x${this.dimensions[1]} diffraction image`);
      return true;
    } catch (error) {
      console.error('Error loading SCXRD image data:', error);
      this.showError(error.message);
      return false;
    }
  }

  plotImage() {
    console.log('plotImage() called, checking Visual Heatmap availability...');
    console.log('window.VisualHeatmap:', window.VisualHeatmap);
    console.log('window.visualHeatmap:', window.visualHeatmap);
    console.log('typeof VisualHeatmap:', typeof window.VisualHeatmap);
    console.log('typeof visualHeatmap:', typeof window.visualHeatmap);
    
    if (!this.getVisualHeatmap()) {
      console.error('Visual Heatmap library not available');
      console.error('Available window properties:', Object.keys(window).filter(key => key.toLowerCase().includes('visual') || key.toLowerCase().includes('heatmap')));
      this.showError('Visual Heatmap library not loaded. Trying to reload...');
      
      // Try to load the library dynamically as fallback
      this.loadVisualHeatmapFallback();
      return;
    }

    this.plotDiv = document.getElementById(this.containerId);
    if (!this.plotDiv) {
      console.error(`Plot container '${this.containerId}' not found`);
      return;
    }

    if (!this.imageData || !this.dimensions) {
      this.showError('No image data available');
      return;
    }

    const [width, height] = this.dimensions;

    // Create container with heatmap div and controls
    this.plotDiv.innerHTML = `
      <div style="position: relative; width: 100%; height: 100%;">
        <div id="${this.containerId}-canvas" style="width: 100%; height: calc(100% - 60px); border: 1px solid #dee2e6; overflow: hidden; background: #000;"></div>
        <div id="${this.containerId}-controls" style="height: 50px; padding: 5px; background: #f8f9fa; border-top: 1px solid #dee2e6;">
          <!-- Controls will be added here -->
        </div>
      </div>
    `;

    const heatmapContainer = document.getElementById(`${this.containerId}-canvas`);
    
    // Bin the image into 2x2 superpixels to reduce data points and improve performance
    const binSize = 2;
    const binnedWidth = Math.ceil(width / binSize);
    const binnedHeight = Math.ceil(height / binSize);
    
    console.log(`Binning ${width}x${height} image into ${binnedWidth}x${binnedHeight} superpixels (${binSize}x${binSize} each)`);
    
    const heatmapData = [];
    
    // Create superpixel bins
    for (let binY = 0; binY < binnedHeight; binY++) {
      for (let binX = 0; binX < binnedWidth; binX++) {
        let totalIntensity = 0;
        let pixelCount = 0;
        
        // Sum intensities within this superpixel
        for (let py = binY * binSize; py < Math.min((binY + 1) * binSize, height); py++) {
          for (let px = binX * binSize; px < Math.min((binX + 1) * binSize, width); px++) {
            const value = this.imageData[py * width + px];
            totalIntensity += value;
            if (value > 0) pixelCount++;
          }
        }
        
        // Only include superpixels with non-zero intensity
        if (totalIntensity > 0) {
          heatmapData.push({
            x: binX * binSize, // Store original coordinates for now
            y: height - (binY * binSize), // Flip Y coordinate to correct orientation
            value: totalIntensity // Use sum of intensities for better visibility
          });
        }
      }
    }
    
    console.log(`Generated ${heatmapData.length} superpixel data points from ${width}x${height} image (${binnedWidth}x${binnedHeight} grid)`);
    console.log(`Reduction: ${(this.imageData.length - heatmapData.length).toLocaleString()} fewer points`);
    console.log(`Sample superpixel data:`, heatmapData.slice(0, 10));

    // Calculate intensity statistics for better scaling
    const sortedValues = this.imageData.filter(v => v > 0).sort((a, b) => a - b);
    const maxIntensity = sortedValues[sortedValues.length - 1] || 1;
    const p99 = sortedValues[Math.floor(sortedValues.length * 0.99)] || maxIntensity;
    
    this.currentIntensityRange = [0, p99];

    console.log(`Creating visual heatmap with ${heatmapData.length} data points`);
    console.log(`Intensity range: 0 to ${p99} (max: ${maxIntensity})`);

    // Calculate scale factor to fit the card width
    const containerRect = heatmapContainer.getBoundingClientRect();
    const containerWidth = containerRect.width - 2; // Account for border
    const scaleFactor = Math.min(containerWidth / width, 1.0); // Don't scale up, only down
    
    console.log(`Container width: ${containerWidth}px, Image width: ${width}px, Scale factor: ${scaleFactor}`);
    
    // Apply scaling to coordinates while keeping top-left anchored
    const scaledHeatmapData = heatmapData.map(point => ({
      x: point.x * scaleFactor,
      y: point.y * scaleFactor,
      value: point.value
    }));

    // Create heatmap instance using Visual Heatmap API
    try {
      const HeatmapConstructor = this.getVisualHeatmap();
      
      console.log(`First few scaled data points:`, scaledHeatmapData.slice(0, 5));
      console.log(`Data value range: min=${Math.min(...scaledHeatmapData.map(d => d.value))}, max=${Math.max(...scaledHeatmapData.map(d => d.value))}`);
      
      // Visual Heatmap expects a container ID/selector, not canvas element
      this.heatmapInstance = HeatmapConstructor(`#${this.containerId}-canvas`, {
        size: binSize, // Scale point size to match coordinate scaling
        max: p99,
        min: 0,
        intensity: 1.0, // Keep intensity at 1.0 (valid range is 0-1)
        opacity: 1.0, // Full opacity
        zoom: 1.0, // No zoom - render at natural size
        gradient: [{
          color: [0, 0, 0, 1.0],        // Black with transparency
          offset: 0.0
        }, {
          color: [255, 0, 0, 1.0],      // Reg
          offset: 0.33
        }, {
          color: [255, 255, 0, 1.0],    // Yellow
          offset: 0.66
        }, {
          color: [255, 255, 255, 1.0],      // White
          offset: 1.0
        }]
      });
      
      // Render the data
      console.log('Attempting to render data to heatmap instance...');
      console.log('Heatmap instance methods:', Object.keys(this.heatmapInstance));
      
      if (typeof this.heatmapInstance.renderData === 'function') {
        this.heatmapInstance.renderData(scaledHeatmapData);
        console.log('Data rendered with renderData()');
      } else if (typeof this.heatmapInstance.addData === 'function') {
        // Alternative API method
        this.heatmapInstance.addData(scaledHeatmapData);
        console.log('Data rendered with addData()');
      } else if (typeof this.heatmapInstance.setData === 'function') {
        // Another alternative API method
        this.heatmapInstance.setData({ data: scaledHeatmapData });
        console.log('Data rendered with setData()');
      } else {
        console.error('No suitable data rendering method found on heatmap instance');
        console.log('Available methods:', Object.keys(this.heatmapInstance));
      }
      
      // Force a render/repaint
      if (typeof this.heatmapInstance.render === 'function') {
        this.heatmapInstance.render();
      } else if (typeof this.heatmapInstance.repaint === 'function') {
        this.heatmapInstance.repaint();
      }
      
      // Store the initial scale for zoom controls (no scaling now)
      this.initialScale = 1.0;

      this.addControls();
      
      // Set initial intensity to match the slider's default value (100)
      const defaultIntensity = 100;
      if (typeof this.heatmapInstance.setMax === 'function') {
        this.heatmapInstance.setMax(defaultIntensity);
        this.heatmapInstance.render();
        console.log(`Set initial intensity to: ${defaultIntensity}`);
      }
      console.log('Visual heatmap created successfully');
      
    } catch (error) {
      console.error('Error creating visual heatmap:', error);
      this.showError('Failed to create diffraction image visualization');
    }
  }

  addControls() {
    const controlsDiv = document.getElementById(`${this.containerId}-controls`);
    if (!controlsDiv) return;

    const [width, height] = this.dimensions;
    // Fix: Don't spread large array - use manual calculation
    let maxIntensity = 0;
    for (let i = 0; i < this.imageData.length; i++) {
      if (this.imageData[i] > maxIntensity) {
        maxIntensity = this.imageData[i];
      }
    }

    controlsDiv.innerHTML = `
      <div class="d-flex align-items-center justify-content-center" style="font-size: 0.8rem;">
        <div class="d-flex align-items-center">
          <label class="me-2">Intensity:</label>
          <input type="range" id="${this.containerId}-intensity" class="form-range me-2" 
                 style="width: 120px;" min="1" max="1000" value="100">
          <span id="${this.containerId}-intensity-value">100</span>
        </div>
      </div>
    `;

    // Add event listener for intensity control
    const intensitySlider = document.getElementById(`${this.containerId}-intensity`);
    const intensityValue = document.getElementById(`${this.containerId}-intensity-value`);
    
    intensitySlider.addEventListener('input', (e) => {
      const sliderValue = parseInt(e.target.value);
      intensityValue.textContent = sliderValue;
      
      // Use the slider value directly as the intensity threshold (1-100)
      const newMax = sliderValue;
      this.currentIntensityRange[1] = newMax;
      
      // Update the heatmap's max value and re-render
      if (this.heatmapInstance) {
        console.log(`Intensity threshold set to: ${newMax}`);
        
        // Try different API methods for updating max value
        if (typeof this.heatmapInstance.setMax === 'function') {
          this.heatmapInstance.setMax(newMax);
        } else if (typeof this.heatmapInstance.configure === 'function') {
          this.heatmapInstance.configure({ max: newMax });
        } else if (typeof this.heatmapInstance.setConfig === 'function') {
          this.heatmapInstance.setConfig({ max: newMax });
        }
        
        // Force re-render
        if (typeof this.heatmapInstance.render === 'function') {
          this.heatmapInstance.render();
        } else if (typeof this.heatmapInstance.repaint === 'function') {
          this.heatmapInstance.repaint();
        }
        
        console.log(`Intensity threshold updated to: ${newMax}`);
      }
    });

    // Store reference for export function
    window[`scxrdViewer_${this.containerId.replace('-', '_')}`] = this;
  }

  setZoom(zoomLevel) {
    if (this.heatmapInstance) {
      // Apply zoom directly
      this.heatmapInstance.setZoom(zoomLevel);
      this.heatmapInstance.render();
      console.log(`Zoom set to ${zoomLevel}x`);
    }
  }

  loadVisualHeatmapFallback() {
    console.log('Attempting to load Visual Heatmap library dynamically...');
    
    // Try multiple CDN sources
    const cdnUrls = [
      'https://unpkg.com/visual-heatmap@2.2.0/dist/visualHeatmap.min.js',
      'https://cdn.jsdelivr.net/npm/visual-heatmap@2.2.0/dist/visualHeatmap.min.js',
      'https://cdnjs.cloudflare.com/ajax/libs/visual-heatmap/2.2.0/visualHeatmap.min.js'
    ];
    
    let currentIndex = 0;
    
    const tryNextCdn = () => {
      if (currentIndex >= cdnUrls.length) {
        this.showError('Unable to load Visual Heatmap library from any CDN source. Please check your internet connection.');
        return;
      }
      
      const script = document.createElement('script');
      script.src = cdnUrls[currentIndex];
      script.onload = () => {
        console.log(`Visual Heatmap loaded successfully from: ${cdnUrls[currentIndex]}`);
        console.log('window.VisualHeatmap now available:', !!window.VisualHeatmap);
        console.log('window.visualHeatmap now available:', !!window.visualHeatmap);
        // Retry plotting
        setTimeout(() => this.plotImage(), 100);
      };
      script.onerror = () => {
        console.error(`Failed to load from: ${cdnUrls[currentIndex]}`);
        currentIndex++;
        tryNextCdn();
      };
      document.head.appendChild(script);
    };
    
    tryNextCdn();
  }

  exportImage() {
    if (!this.heatmapInstance) {
      console.error('No heatmap instance available for export');
      return;
    }

    try {
      // Use Visual Heatmap's built-in export functionality
      this.heatmapInstance.toBlob('image/png', 0.92).then(blob => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `scxrd_diffraction_${Date.now()}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        console.log('Image export completed');
      }).catch(error => {
        console.error('Error exporting image:', error);
      });
      
    } catch (error) {
      console.error('Error exporting image:', error);
    }
  }

  showError(message) {
    const plotDiv = document.getElementById(this.containerId);
    if (plotDiv) {
      plotDiv.innerHTML = `
        <div class="alert alert-danger m-3" role="alert">
          <h6>Error Loading Diffraction Image</h6>
          <p class="mb-0">${message}</p>
        </div>
      `;
    }
  }

  showLoading() {
    const plotDiv = document.getElementById(this.containerId);
    if (plotDiv) {
      plotDiv.innerHTML = `
        <div class="d-flex justify-content-center align-items-center" style="height: 400px;">
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="mt-2">Loading diffraction image...</div>
          </div>
        </div>
      `;
    }
  }
}

// Make available globally
window.ScxrdDiffractionViewer = ScxrdDiffractionViewer;
console.log('ScxrdDiffractionViewer (Visual Heatmap) defined inline');
</script>

<script>
// Define function in global scope for SCXRD dataset switching
window.showScxrdDatasetInMain = function(datasetId, experimentName, datasetUrl) {
  console.log('showScxrdDatasetInMain called with:', datasetId, experimentName, datasetUrl);
  
  // Update the main display panels
  fetch(`/wells/<%= @well.id %>/scxrd_datasets/${datasetId}`, {
    headers: { 'Accept': 'application/json' }
  })
    .then(response => response.json())
    .then(data => {
      // Update first diffraction image panel with interactive viewer
      const imagePanel = document.getElementById('scxrd-first-image-panel');
      if (data.has_first_image) {
        // Show loading state
        imagePanel.innerHTML = `
          <div class="d-flex justify-content-center align-items-center h-100">
            <div class="text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <div class="mt-2 small">Loading diffraction image...</div>
            </div>
          </div>
        `;
        
        // Load and display interactive diffraction viewer
        console.log('ScxrdDiffractionViewer available:', !!window.ScxrdDiffractionViewer);
        console.log('Visual Heatmap available:', !!window.VisualHeatmap);
        if (window.ScxrdDiffractionViewer) {
          // First, replace panel content with plot container
          imagePanel.innerHTML = `
            <div class="position-relative h-100">
              <div id="scxrd-diffraction-plot" style="width: 100%; height: 100%;"></div>
            </div>
          `;
          
          // Now create viewer and load data
          setTimeout(() => {
            const viewer = new window.ScxrdDiffractionViewer('scxrd-diffraction-plot');
            viewer.showLoading();
            viewer.loadImageData(<%= @well.id %>, datasetId).then(success => {
              if (success) {
                viewer.plotImage();
              }
            });
          }, 100);
        } else {
          // Fallback if ScxrdDiffractionViewer is not available
          imagePanel.innerHTML = `
            <div class="text-center p-3">
              <i class="fas fa-camera fa-3x mb-3 text-primary"></i>
              <h6>First Frame</h6>
              <p class="text-muted small">Size: ${data.first_image_size}</p>
              <a href="/wells/<%= @well.id %>/scxrd_datasets/${datasetId}/download_first_image" 
                 class="btn btn-sm btn-primary">
                <i class="fas fa-download me-1"></i>Download
              </a>
            </div>
          `;
        }
      } else {
        imagePanel.innerHTML = `
          <div class="text-center p-3 text-muted">
            <i class="fas fa-camera fa-3x mb-3"></i>
            <h6>First Frame</h6>
            <p class="small">Not available</p>
          </div>
        `;
      }

      // Update peak table panel
      const peakPanel = document.getElementById('scxrd-peak-table-panel');
      if (data.has_peak_table) {
        peakPanel.innerHTML = `
          <div class="text-center p-3">
            <i class="fas fa-table fa-3x mb-3 text-success"></i>
            <h6>Reciprocal Lattice</h6>
            <p class="text-muted small">Size: ${data.peak_table_size}</p>
            <a href="/wells/<%= @well.id %>/scxrd_datasets/${datasetId}/download_peak_table" 
               class="btn btn-sm btn-success">
              <i class="fas fa-download me-1"></i>Download
            </a>
          </div>
        `;
      } else {
        peakPanel.innerHTML = `
          <div class="text-center p-3 text-muted">
            <i class="fas fa-table fa-3x mb-3"></i>
            <h6>Reciprocal Lattice</h6>
            <p class="small">Not available</p>
          </div>
        `;
      }

      // Update structure panel (placeholder)
      const structurePanel = document.getElementById('scxrd-structure-panel');
      structurePanel.innerHTML = `
        <div class="text-center p-3">
          <i class="fas fa-cube fa-3x mb-3 text-info"></i>
          <h6>Crystal Structure</h6>
          <p class="text-muted small">3D visualization placeholder</p>
          <button class="btn btn-sm btn-info" disabled>
            <i class="fas fa-eye me-1"></i>View 3D
          </button>
        </div>
      `;

      // Update experiment info card
      const infoCard = document.getElementById('scxrd-info-card');
      let unitCellInfo = '';
      if (data.unit_cell && data.unit_cell.a) {
        unitCellInfo = `
          <div class="mt-2">
            <small class="text-muted">Unit Cell:</small><br>
            <small>a=${data.unit_cell.a}Å, b=${data.unit_cell.b}Å, c=${data.unit_cell.c}Å</small><br>
            <small>α=${data.unit_cell.alpha}°, β=${data.unit_cell.beta}°, γ=${data.unit_cell.gamma}°</small>
          </div>
        `;
      }
      
      infoCard.innerHTML = `
        <div class="card-body">
          <h6 class="card-title">${experimentName}</h6>
          <p class="card-text">
            <small class="text-muted">
              Measured: ${data.date_measured || 'Unknown'}
              ${data.lattice_centring ? `| Lattice: ${data.lattice_centring}` : ''}
            </small>
            ${unitCellInfo}
          </p>
          <div class="btn-group btn-group-sm">
            <a href="${datasetUrl}" class="btn btn-outline-primary">
              <i class="fas fa-eye me-1"></i>View Details
            </a>
            <a href="${datasetUrl}/edit" class="btn btn-outline-secondary">
              <i class="fas fa-edit me-1"></i>Edit
            </a>
            ${data.has_archive ? `
              <a href="/wells/<%= @well.id %>/scxrd_datasets/${datasetId}/download" class="btn btn-outline-success">
                <i class="fas fa-download me-1"></i>Archive
              </a>
            ` : ''}
          </div>
        </div>
      `;
    })
    .catch(error => {
      console.error('Error loading SCXRD dataset details:', error);
    });
    
  // Update thumbnail highlighting
  document.querySelectorAll('.scxrd-thumbnail').forEach(thumb => {
    thumb.classList.remove('border-primary');
  });
  const selectedThumb = document.querySelector(`[data-dataset-id="${datasetId}"]`);
  if (selectedThumb) {
    selectedThumb.classList.add('border-primary');
  }
};
</script>

<div class="d-flex justify-content-between align-items-center mb-3">
  <h5 class="mb-0">SCXRD Datasets (<%= @well.scxrd_datasets.count %>)</h5>
  <a class="btn btn-primary btn-sm" href="<%= new_well_scxrd_dataset_path(@well) %>" target="_blank">
    Add SCXRD Dataset
  </a>
</div>

<% if @scxrd_datasets.any? %>
  <div class="row h-100">
    <!-- Main Display Area -->
    <div class="col-12 mb-3" style="height: 400px;">
      <div class="row h-100">
        <!-- First Diffraction Image Panel -->
        <div class="col-4 h-100">
          <div class="card h-100">
            <div class="card-header text-center bg-light">
              <small class="text-muted">Diffraction Image</small>
            </div>
            <div id="scxrd-first-image-panel" class="card-body p-0" style="position: relative;">
              <div class="d-flex align-items-center justify-content-center h-100 text-center text-muted">
                <div>
                  <i class="fas fa-camera fa-3x mb-3"></i>
                  <p>Select a dataset to view diffraction image</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Peak Table Panel -->
        <div class="col-4 h-100">
          <div class="card h-100">
            <div class="card-header text-center bg-light">
              <small class="text-muted">Reciprocal Lattice</small>
            </div>
            <div id="scxrd-peak-table-panel" class="card-body d-flex align-items-center justify-content-center">
              <div class="text-center text-muted">
                <i class="fas fa-table fa-3x mb-3"></i>
                <p>Select a dataset to view</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Structure Panel -->
        <div class="col-4 h-100">
          <div class="card h-100">
            <div class="card-header text-center bg-light">
              <small class="text-muted">Crystal Structure</small>
            </div>
            <div id="scxrd-structure-panel" class="card-body d-flex align-items-center justify-content-center">
              <div class="text-center text-muted">
                <i class="fas fa-cube fa-3x mb-3"></i>
                <p>Select a dataset to view</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Experiment Info Card -->
    <div class="col-12 mb-3">
      <div class="card">
        <div id="scxrd-info-card" class="text-center text-muted p-3">
          <i class="fas fa-info-circle me-2"></i>
          Select an SCXRD dataset to view experiment details
        </div>
      </div>
    </div>

    <!-- Dataset Navigator -->
    <div class="col-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <span class="fw-bold">SCXRD Datasets (<%= @scxrd_datasets.count %>)</span>
          <a href="<%= new_well_scxrd_dataset_path(@well) %>" class="btn btn-sm btn-primary">
            <i class="fas fa-plus me-1"></i>Add Dataset
          </a>
        </div>
        <div class="card-body p-2">
          <div class="row g-2">
            <% @scxrd_datasets.each_with_index do |dataset, index| %>
              <div class="col-6 col-md-4 col-lg-3">
                <div class="card scxrd-thumbnail <%= 'border-primary' if index == 0 %>" 
                     data-dataset-id="<%= dataset.id %>"
                     style="cursor: pointer; transition: all 0.2s;"
                     onclick="showScxrdDatasetInMain('<%= dataset.id %>', '<%= j(dataset.experiment_name) %>', '<%= well_scxrd_dataset_path(@well, dataset) %>')">
                  <div class="card-body p-2 text-center">
                    <div class="mb-2">
                      <% if dataset.has_first_image? %>
                        <i class="fas fa-camera fa-2x text-primary"></i>
                      <% else %>
                        <i class="fas fa-camera fa-2x text-muted"></i>
                      <% end %>
                    </div>
                    <div class="small fw-bold text-truncate" title="<%= dataset.experiment_name %>">
                      <%= dataset.experiment_name %>
                    </div>
                    <div class="text-muted" style="font-size: 0.75rem;">
                      <%= dataset.date_measured&.strftime("%m/%d/%y") || "No date" %>
                    </div>
                    <div class="mt-1">
                      <% if dataset.has_peak_table? %>
                        <span class="badge bg-success" style="font-size: 0.6rem;">Peak Table</span>
                      <% end %>
                      <% if dataset.has_first_image? %>
                        <span class="badge bg-primary" style="font-size: 0.6rem;">Image</span>
                      <% end %>
                      <% if dataset.lattice_centring %>
                        <span class="badge bg-info" style="font-size: 0.6rem;"><%= dataset.lattice_centring.symbol %></span>
                      <% end %>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Auto-select first dataset when the gallery loads
    <% if @scxrd_datasets.first %>
      // Wait for modules to load before initializing
      function initializeScxrdGallery() {
        console.log('Checking for ScxrdDiffractionViewer:', !!window.ScxrdDiffractionViewer);
        if (typeof window.showScxrdDatasetInMain === 'function') {
          showScxrdDatasetInMain(
            '<%= @scxrd_datasets.first.id %>', 
            '<%= j(@scxrd_datasets.first.experiment_name) %>', 
            '<%= well_scxrd_dataset_path(@well, @scxrd_datasets.first) %>'
          );
        } else {
          console.log('showScxrdDatasetInMain not available yet, retrying...');
          setTimeout(initializeScxrdGallery, 200);
        }
      }
      
      // Start initialization after DOM and modules are loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => setTimeout(initializeScxrdGallery, 500));
      } else {
        setTimeout(initializeScxrdGallery, 500);
      }
    <% end %>
  </script>

<% else %>
  <div class="alert alert-info text-center">
    <h6>No SCXRD Datasets</h6>
    <p>No single crystal X-ray diffraction datasets have been uploaded for this well yet.</p>
    <a href="<%= new_well_scxrd_dataset_path(@well) %>" class="btn btn-primary">Add First SCXRD Dataset</a>
  </div>
<% end %>