var ex = Object.defineProperty;
var th = (r) => {
  throw TypeError(r);
};
var tx = (r, e, t) => e in r ? ex(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var Vr = (r, e, t) => tx(r, typeof e != "symbol" ? e + "" : e, t), rh = (r, e, t) => e.has(r) || th("Cannot " + t);
var Pr = (r, e, t) => (rh(r, e, "read from private field"), t ? t.call(r) : e.get(r)), nh = (r, e, t) => e.has(r) ? th("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r) : e.set(r, t), ih = (r, e, t, n) => (rh(r, e, "write to private field"), n ? n.call(r, t) : e.set(r, t), t);
function Kl(r, e = !0) {
  const t = /^([+-]?)(\d+\.?\d*|\.\d+)[eE]([+-]?\d+)\((\d+)\)$/, n = r.match(t);
  if (e && n) {
    const [, l, u, c, f] = n, h = l === "-" ? -1 : 1, d = parseFloat(u), m = parseInt(c), p = u.includes(".") ? u.split(".")[1].length : 0, g = Number(h * d * Math.pow(10, m)), v = m - p, S = Number(parseInt(f) * Math.pow(10, v));
    return p - m >= 0 && p - m <= 100 ? {
      value: Number(g.toFixed(p - m)),
      su: Number(S.toFixed(p - m))
    } : { value: g, su: S };
  }
  const i = /^([+-]?)(\d+\.?\d*|\.\d+)[eE]([+-]?\d+)$/, a = r.match(i);
  if (a) {
    const [, l, u, c] = a, f = l === "-" ? -1 : 1, h = u.includes(".") ? u.split(".")[1].length : 0, d = parseInt(c), m = Number(f * parseFloat(u) * Math.pow(10, d));
    return h - d >= 0 && h - d <= 100 ? {
      value: Number(m.toFixed(h - d)),
      su: NaN
    } : { value: m, su: NaN };
  }
  const s = /^([+-]?)(\d+\.?\d*|\.\d+)\((\d+)\)$/, o = r.match(s);
  if (e && o) {
    const [, l, u, c] = o, f = l === "-" ? -1 : 1;
    if (u.includes(".")) {
      const h = u.split(".")[1].length, d = Number((f * parseFloat(u)).toFixed(h)), m = Number((Math.pow(10, -h) * parseFloat(c)).toFixed(h));
      return { value: d, su: m };
    } else {
      const h = f * parseInt(u), d = parseInt(c);
      return { value: h, su: d };
    }
  }
  return isNaN(r) ? /^".*"$/.test(r) || /^'.*'$/.test(r) ? { value: r.slice(1, -1).replace(/\\([^\\])/g, "$1"), su: NaN } : { value: r.replace(/\\([^\\])/g, "$1"), su: NaN } : { value: r.includes(".") ? parseFloat(r) : parseInt(r), su: NaN };
}
function jv(r, e) {
  const t = [r[e].slice(1)], n = r.slice(e + 1), i = n.findIndex((l) => l.startsWith(";")), a = t.concat(n.slice(0, i)), s = a.findIndex((l) => l.trim() !== ""), o = a.findLastIndex((l) => l.trim !== "");
  return {
    value: a.slice(s, o + 1).join(`
`),
    endIndex: e + i + 1
  };
}
const rx = [
  "_space_group_symop_ssg",
  "_space_group_symop",
  "_symmetry_equiv",
  "_geom_bond",
  "_geom_hbond",
  "_geom_angle",
  "_geom_torsion",
  "_diffrn_refln",
  "_refln",
  "_atom_site_fourier_wave_vector",
  "_atom_site_moment_fourier_param",
  "_atom_site_moment_special_func",
  "_atom_site_moment",
  "_atom_site_rotation",
  "_atom_site_displace_Fourier",
  "_atom_site_displace_special_func",
  "_atom_site_occ_Fourier",
  "_atom_site_occ_special_func",
  "_atom_site_phason",
  "_atom_site_rot_Fourier_param",
  "_atom_site_rot_Fourier",
  "_atom_site_rot_special_func",
  "_atom_site_U_Fourier",
  "_atom_site_anharm_gc_c",
  "_atom_site_anharm_gc_d",
  "_atom_site_aniso",
  "_atom_site"
];
class Is {
  /**
   * Creates a new CIF loop instance.
   * @class
   * @param {Array<string>} headerLines - Column header lines from the CIF
   * @param {Array<string>} dataLines - Data value lines from the CIF
   * @param {number} endIndex - Index where the loop ends in the original CIF
   * @param {boolean} splitSU - Whether to split standard uncertainties into value and uncertainty
   * @param {string} [name] - Loop name, will be auto-detected if omitted
   */
  constructor(e, t, n, i, a = null) {
    this.splitSU = i, this.headerLines = e, this.dataLines = t, this.endIndex = n, this.headers = null, this.data = null, this.name = null, a ? this.name = a : this.name = this.findCommonStart();
  }
  /**
   * Creates a CifLoop instance from raw CIF lines starting with 'loop_'.
   * @static
   * @param {Array<string>} lines - Raw CIF lines starting with 'loop_'
   * @param {boolean} splitSU - Whether to split standard uncertainties
   * @returns {CifLoop} New CifLoop instance with extracted headers and data
   */
  static fromLines(e, t) {
    let n = 1;
    for (; n < e.length && e[n].trim().startsWith("_"); )
      n++;
    const i = e.slice(1, n).map((u) => u.trim());
    let a = n, s = !1;
    for (; a < e.length && (!e[a].trim().startsWith("_") && !e[a].trim().startsWith("loop_") || s); )
      e[a].startsWith(";") && (s = !s), a++;
    const o = e.slice(n, a), l = a;
    return new Is(i, o, l, t);
  }
  /**
   * Parses loop content into structured data.
   * Processes headers and values, handling standard uncertainties if enabled.
   * Extracts multi-line strings and populates the data property with column values.
   * @returns {void}
   * @throws {Error} If the data values cannot be evenly distributed into columns
   * @throws {Error} If the loop contains no data values
   */
  parse() {
    if (this.data !== null)
      return;
    this.headers = [...this.headerLines], this.data = {};
    const e = this.dataLines.reduce((n, i, a) => {
      if (i = i.trim(), !i.length)
        return n;
      if (i.startsWith(";")) {
        const o = jv(this.dataLines, a);
        n.push({ value: o.value, su: NaN });
        for (let l = a; l < o.endIndex + 1; l++)
          this.dataLines[l] = "";
        return n;
      }
      const s = Array.from(i.matchAll(/'([^']*(?:'\S[^']*)*)'|"([^"]*(?:"\S[^"]*)*)"|\S+/g));
      return n.concat(s.map(
        (o) => Kl(o[1] || o[2] || o[0], this.splitSU)
      ));
    }, []), t = this.headers.length;
    if (e.length % t !== 0) {
      const n = e.map(({ value: i, su: a }) => `{value: ${i}, su: ${a}}`).join(", ");
      throw new Error(
        `Loop ${this.name}: Cannot distribute ${e.length} values evenly into ${t} columns
entries are: ${n}`
      );
    } else if (e.length === 0)
      throw new Error(`Loop ${this.name} has no data values.`);
    for (let n = 0; n < t; n++) {
      const i = this.headers[n], a = e.slice(n).filter((o, l) => l % t === 0);
      a.some((o) => !isNaN(o.su)) ? (this.data[i] = a.map((o) => o.value), this.data[i + "_su"] = a.map((o) => o.su), this.headers.push(i + "_su")) : this.data[i] = a.map((o) => o.value);
    }
  }
  /**
   * Gets the common name prefix shared by all headers to identify the loop type.
   * First checks against standard loop names, then tries dot-based splitting,
   * and finally analyzes underscore segments to find common parts.
   * @param {boolean} [checkStandardNames] - Whether to check against known standard loop names
   * @returns {string} Common prefix without the trailing underscore
   */
  findCommonStart(e = !0) {
    if (e) {
      for (const s of rx)
        if (this.headerLines.filter((l) => l.toLowerCase().startsWith(s.toLowerCase())).length >= this.headerLines.length / 2)
          return s;
    }
    const t = this.headerLines.map((s) => s.split("."));
    if (t[0].length > 1) {
      const s = t[0][0];
      if (this.headerLines.filter(
        (l) => l.split(".")[0] === s
      ).length >= this.headerLines.length / 2)
        return s;
    }
    const n = this.headerLines.map((s) => s.split(/[_.]/).filter((o) => o)), i = Math.min(...n.map((s) => s.length));
    let a = "";
    for (let s = 0; s < i; s++) {
      const o = n[0][s], l = n.filter(
        (u) => u[s] === o
      ).length;
      if (this.headerLines.length === 2)
        if (l === 2)
          a += "_" + o;
        else
          break;
      else if (l >= this.headerLines.length / 2)
        a += "_" + o;
      else
        break;
    }
    return a;
  }
  /**
   * Gets column data for given keys, trying each key in turn.
   * @param {string|Array<string>} keys - Key or array of keys to try
   * @param {*} [defaultValue] - Value to return if none of the keys are found
   * @returns {Array} Column data for the first matching key
   * @throws {Error} If no keys found and no default value provided
   */
  get(e, t = null) {
    this.parse();
    const n = Array.isArray(e) ? e : [e];
    for (const i of n) {
      const a = this.data[i];
      if (a !== void 0)
        return a;
    }
    if (t !== null)
      return t;
    throw new Error(`None of the keys [${n.join(", ")}] found in CIF loop ${this.name}`);
  }
  /**
   * Gets value at specific row index for one of the given keys.
   * @param {string|Array<string>} keys - Key or array of keys to try
   * @param {number} index - Row index (0-based)
   * @param {*} [defaultValue] - Value to return if keys not found
   * @returns {*} Value at the specified index
   * @throws {Error} If index is out of bounds
   * @throws {Error} If none of the keys are found and no default value provided
   */
  getIndex(e, t, n = null) {
    this.parse();
    const i = Array.isArray(e) ? e : [e];
    if (!i.some((s) => this.headers.includes(s))) {
      if (n !== null)
        return n;
      throw new Error(`None of the keys [${i.join(", ")}] found in CIF loop ${this.name}`);
    }
    const a = this.get(i);
    if (t < a.length)
      return a[t];
    throw new Error(
      `Tried to look up value of index ${t} in ${this.name}, but length is only ${a.length}`
    );
  }
  /**
   * Gets all column headers, parsing the loop first if needed.
   * @returns {Array<string>} Array of all header names
   */
  getHeaders() {
    return this.headers || this.parse(), this.headers;
  }
  /**
   * Gets the common name prefix shared by all headers.
   * @returns {string} Common prefix identifying the loop type
   */
  getName() {
    return this.name;
  }
  /**
   * Gets the line index where this loop ends in the original CIF.
   * @returns {number} Index of the last line of the loop
   */
  getEndIndex() {
    return this.endIndex;
  }
}
function ws(r) {
  return r && typeof r.getHeaders == "function";
}
function Jl(r) {
  return r.getHeaders()[0].split("_").filter((t) => t.length > 0);
}
function nx(r, e, t) {
  const n = ws(r) ? r : e, i = t.split("_").filter((o) => o.length > 0), a = Jl(n), s = "_" + i.join("_") + "_" + a[i.length];
  return ws(r) ? [s, t] : [t, s];
}
function ix(r, e) {
  const t = r.findCommonStart(!1), n = e.findCommonStart(!1);
  return t.length !== n.length ? [t, n] : null;
}
function ax(r, e, t) {
  const n = t.split("_").filter((s) => s.length > 0), i = Jl(r), a = Jl(e);
  return i.length >= a.length ? [
    t + "_" + i[n.length],
    t
  ] : [
    t,
    t + "_" + a[n.length]
  ];
}
function sx(r, e, t) {
  let n;
  !ws(r) || !ws(e) ? n = nx(r, e, t) : n = ix(r, e) || ax(r, e, t);
  const i = [r, e];
  return i.forEach((a, s) => {
    ws(a) && (a.name = n[s]);
  }), {
    newNames: n,
    newEntries: i
  };
}
class ox {
  /**
   * Creates a new CIF parser instance.
   * @class
   * @param {string} cifString - Raw CIF file content
   * @param {boolean} [splitSU] - Whether to split standard uncertainties
   */
  constructor(e, t = !0) {
    this.splitSU = t, this.rawCifBlocks = this.splitCifBlocks(`

` + e), this.blocks = Array(this.rawCifBlocks.length).fill(null), this._blockNameMap = null;
  }
  /**
   * Splits CIF content into blocks, while accounting for the fact that
   * there might be data entries within a multiline string.
   * @param {string} cifText - Raw CIF content with added newlines
   * @returns {Array<string>} Array of raw block texts
   * @private
   */
  splitCifBlocks(e) {
    const t = [], n = e.replaceAll(`\r
`, `
`).split(/\r?\ndata_/).slice(1);
    let i = 0;
    for (; i < n.length; ) {
      let a = n[i];
      const s = /\n;/g, o = a.match(s);
      let l = o ? o.length : 0;
      for (; l % 2 === 1 && i + 1 < n.length; )
        i++, a += `
data_` + n[i], l = a.match(s).length;
      t.push(a), i++;
    }
    return t;
  }
  /**
   * Gets a specific CIF data block.
   * @param {number} index - Block index (default: 0)
   * @returns {CifBlock} The requested CIF block
   */
  getBlock(e = 0) {
    return this.blocks[e] || (this.blocks[e] = new ah(this.rawCifBlocks[e], this.splitSU)), this.blocks[e];
  }
  /**
   * Gets all parsed CIF blocks.
   * @returns {Array<CifBlock>} Array of all CIF blocks
   */
  getAllBlocks() {
    for (let e = 0; e < this.blocks.length; e++)
      this.blocks[e] || (this.blocks[e] = new ah(this.rawCifBlocks[e], this.splitSU));
    return this.blocks;
  }
  _extractBlockNames() {
    if (this._blockNameMap !== null)
      return this._blockNameMap;
    this._blockNameMap = /* @__PURE__ */ new Map();
    const e = /^(\w+[\w.-]*)/;
    return this.rawCifBlocks.forEach((t, n) => {
      const i = e.exec(t.trim());
      i && i[1] && this._blockNameMap.set(i[1], n);
    }), this._blockNameMap;
  }
  // Get available block names
  getBlockNames() {
    return Array.from(this._extractBlockNames().keys());
  }
  // Get a block by name
  getBlockByName(e) {
    const n = this._extractBlockNames().get(e);
    if (n === void 0)
      throw new Error(
        `Block with name '${e}' not found. Available blocks: ${this.getBlockNames().join(", ")}`
      );
    return this.getBlock(n);
  }
}
class ah {
  /**
   * Creates a new CIF block instance.
   * @class
   * @param {string} blockText - Raw text of the CIF block
   * @param {boolean} [splitSU] - Whether to split standard uncertainties
   */
  constructor(e, t = !0) {
    this.rawText = e, this.splitSU = t, this.data = null, this.dataBlockName = null;
  }
  /**
   * Parses block content into structured data.
   * Handles single values, multiline strings, and loops.
   */
  parse() {
    if (this.data !== null)
      return;
    this.data = {};
    const e = this.rawText.split(`
`).filter((n) => !n.trim().startsWith("#")).map((n) => {
      const i = / #(?=(?:[^"]*"[^"]*")*[^"]*$)(?=(?:[^']*'[^']*')*[^']*$)/;
      return n.split(i)[0];
    });
    this.dataBlockName = e[0];
    let t = 1;
    for (; t < e.length; ) {
      if (t + 1 < e.length && e[t + 1].startsWith(";")) {
        const a = jv(e, t + 1);
        this.data[e[t]] = a.value, t = a.endIndex + 1;
        continue;
      }
      if (e[t].trim().startsWith("loop_")) {
        const a = Is.fromLines(e.slice(t), this.splitSU);
        if (!Object.prototype.hasOwnProperty.call(this.data, a.getName()))
          this.data[a.getName()] = a;
        else {
          const s = sx(this.data[a.getName()], a, a.getName());
          this.data[s.newNames[0]] = s.newEntries[0], this.data[s.newNames[1]] = s.newEntries[1];
        }
        t += a.getEndIndex();
        continue;
      }
      const n = e[t].trim();
      if (n.length === 0) {
        t++;
        continue;
      }
      const i = n.match(/^(_\S+)\s+(.*)$/);
      if (i) {
        const a = i[1], s = Kl(i[2], this.splitSU);
        this.data[a] = s.value, isNaN(s.su) || (this.data[a + "_su"] = s.su);
      } else if (n.startsWith("_") && !e[t + 1].startsWith("_")) {
        const a = n, s = Kl(e[t + 1].trim(), this.splitSU);
        this.data[a] = s.value, isNaN(s.su) || (this.data[a + "_su"] = s.su), t++;
      } else
        throw new Error("Could not parse line " + String(t) + ": " + e[t]);
      t++;
    }
  }
  get dataBlockName() {
    return this._dataBlockName || this.parse(), this._dataBlockName;
  }
  set dataBlockName(e) {
    this._dataBlockName = e;
  }
  /**
   * Gets a value from the CIF block, trying multiple possible keys.
   * @param {(string|Array<string>)} keys - Key or array of keys to try
   * @param {*} [defaultValue] - Value to return if keys not found
   * @returns {*} Found value or default value
   * @throws {Error} If no keys found and no default provided
   */
  get(e, t = null) {
    this.parse();
    const n = Array.isArray(e) ? e : [e];
    for (const i of n) {
      const a = this.data[i];
      if (a !== void 0)
        return a;
    }
    if (t !== null)
      return t;
    throw new Error(`None of the keys [${n.join(", ")}] found in CIF block`);
  }
}
class ux {
  /**
   * Creates a new SHELX parser instance
   * @param {string} shelxString - Raw SHELX file content
   */
  constructor(e) {
    this.rawText = e, this.data = null, this._parsedData = null;
  }
  /**
   * Parses the SHELX file content
   * @returns {ShelxBlock} Parsed SHELX data block
   */
  parse() {
    return this._parsedData !== null ? this._parsedData : (this._parsedData = new lx(this.rawText), this._parsedData.parse(), this._parsedData);
  }
  /**
   * Gets the parsed data block (creates one if not exists)
   * @returns {ShelxBlock} The parsed SHELX block
   */
  getBlock() {
    return this.parse();
  }
}
class lx {
  /**
   * Creates a new SHELX block instance
   * @param {string} blockText - Raw text of the SHELX block
   */
  constructor(e) {
    this.rawText = e, this.data = null, this.title = "", this.cellParameters = null, this.cellErrors = null, this.latticeType = 1, this.symmetryOperations = [], this.scatteringFactors = [], this.atoms = [], this.bonds = [], this.wavelength = 1.54178, this.anisotropicAtoms = /* @__PURE__ */ new Map(), this.currentPart = 0;
  }
  /**
   * Parses SHELX block content into structured data
   */
  parse() {
    if (this.data !== null)
      return;
    this.data = {};
    const e = this.rawText.split(`
`).map((t) => t.trim()).filter((t) => t.length > 0 && !t.startsWith("REM"));
    for (let t = 0; t < e.length; t++) {
      const n = e[t], i = n.split(/\s+/);
      switch (i[0].toUpperCase()) {
        case "TITL":
          this.title = n.substring(4).trim();
          break;
        case "CELL":
          this.parseCellLine(i);
          break;
        case "ZERR":
          this.parseZerrLine(i);
          break;
        case "LATT":
          this.latticeType = parseInt(i[1]);
          break;
        case "SYMM": {
          const s = n.substring(4).trim();
          s && this.symmetryOperations.push(s);
          break;
        }
        case "SFAC":
          for (let s = 1; s < i.length; s++)
            i[s] && !i[s].match(/^\d/) && this.scatteringFactors.push(i[s]);
          break;
        case "PART":
          this.currentPart = i.length > 1 ? parseInt(i[1]) : 0;
          break;
        case "BOND":
          this.parseBondLine(i);
          break;
        case "HKLF":
          break;
        default:
          if (this.isAtomLine(n)) {
            const s = this.parseAtomLine(i, n);
            t = this.parseAdpContinuation(e, t, s);
          }
          break;
      }
    }
    this.symmetryOperations.length === 0 && this.symmetryOperations.push("X,Y,Z"), this.symmetryOperations = this.symmetryOperations.filter((t) => t && typeof t == "string" && t.trim().length > 0).map((t) => String(t).trim()), this.convertToCifFormat();
  }
  /**
   * Parses the CELL line containing unit cell parameters
   * @param {string[]} parts - Split line parts
   */
  parseCellLine(e) {
    e.length >= 8 && (this.wavelength = parseFloat(e[1]), this.cellParameters = [
      parseFloat(e[2]),
      // a
      parseFloat(e[3]),
      // b
      parseFloat(e[4]),
      // c
      parseFloat(e[5]),
      // alpha
      parseFloat(e[6]),
      // beta
      parseFloat(e[7])
      // gamma
    ]);
  }
  /**
   * Parses the ZERR line containing cell parameter errors
   * @param {string[]} parts - Split line parts
   */
  parseZerrLine(e) {
    e.length >= 8 && (this.cellErrors = [
      parseFloat(e[2]),
      // a_su
      parseFloat(e[3]),
      // b_su
      parseFloat(e[4]),
      // c_su
      parseFloat(e[5]),
      // alpha_su
      parseFloat(e[6]),
      // beta_su
      parseFloat(e[7])
      // gamma_su
    ]);
  }
  /**
   * Checks if a line represents an atom entry
   * @param {string} line - Line to check
   * @returns {boolean} True if line is an atom entry
   */
  isAtomLine(e) {
    const t = e.split(/\s+/);
    if (["TITL", "CELL", "ZERR", "LATT", "SYMM", "SFAC", "UNIT", "HKLF", "END", "FMAP", "PLAN"].includes(t[0].toUpperCase()) || t.length < 5)
      return !1;
    try {
      const i = parseFloat(t[2]), a = parseFloat(t[3]), s = parseFloat(t[4]);
      return !isNaN(i) && !isNaN(a) && !isNaN(s) && Math.abs(i) <= 5 && Math.abs(a) <= 5 && Math.abs(s) <= 5;
    } catch {
      return !1;
    }
  }
  /**
   * Parses an atom line
   * @param {string[]} parts - Split line parts
   * @param {string} fullLine - Full line including potential = continuation
   * @returns {number} Index of the atom that was added
   */
  parseAtomLine(e, t) {
    if (e.length < 5)
      return -1;
    const n = e[0], i = parseInt(e[1]), a = parseFloat(e[2]), s = parseFloat(e[3]), o = parseFloat(e[4]), l = e.length > 5 ? parseFloat(e[5]) : 11;
    let u = "C";
    i > 0 && i <= this.scatteringFactors.length && (u = this.scatteringFactors[i - 1]);
    let c = this.currentPart;
    l < 0 && (c = -1);
    const f = Math.abs(l);
    if (f > 11 && f < 100) {
      const d = Math.floor(f / 10);
      d > 1 && (c = d - 1);
    }
    const h = {
      label: n,
      atomType: u,
      x: a,
      y: s,
      z: o,
      occupancy: Math.abs(l) / 11,
      // Convert from SHELX format
      sfacIndex: i,
      disorderGroup: c,
      isAnisotropic: !1,
      uiso: null,
      u11: null,
      u22: null,
      u33: null,
      u12: null,
      u13: null,
      u23: null
    };
    return e.length >= 12 ? (h.isAnisotropic = !0, h.u11 = parseFloat(e[6]), h.u22 = parseFloat(e[7]), h.u33 = parseFloat(e[8]), h.u23 = parseFloat(e[9]), h.u13 = parseFloat(e[10]), h.u12 = parseFloat(e[11])) : e.length >= 8 && t.trim().endsWith("=") ? (h.isAnisotropic = !0, h.u11 = parseFloat(e[6]), h.u22 = parseFloat(e[7])) : e.length > 6 ? h.uiso = parseFloat(e[6]) : h.uiso = 0.05, h.hasContinuation = t.trim().endsWith("="), this.atoms.push(h), this.atoms.length - 1;
  }
  /**
   * Parses ADP continuation lines that start with spaces and may contain =
   * @param {string[]} lines - All lines from the file
   * @param {number} currentIndex - Current line index
   * @param {number} atomIndex - Index of the atom to update
   * @returns {number} New line index after processing continuations
   */
  parseAdpContinuation(e, t, n) {
    if (n === -1 || !this.atoms[n].hasContinuation)
      return t;
    let i = t + 1;
    const a = [];
    for (; i < e.length; ) {
      const o = e[i].trim();
      if (o.length === 0) {
        i++;
        continue;
      }
      if (o.match(/^[A-Z]/)) {
        i--;
        break;
      } else {
        const l = o.replace("=", "").split(/\s+/).filter((u) => u.length > 0);
        for (const u of l) {
          const c = parseFloat(u);
          isNaN(c) || a.push(c);
        }
        if (o.endsWith("=")) {
          i++;
          continue;
        } else
          break;
      }
    }
    const s = this.atoms[n];
    return a.length >= 6 ? (s.isAnisotropic = !0, s.u11 = a[0], s.u22 = a[1], s.u33 = a[2], s.u23 = a[3], s.u13 = a[4], s.u12 = a[5]) : a.length >= 4 && s.isAnisotropic && s.u11 !== null && s.u22 !== null && (s.u33 = a[0], s.u23 = a[1], s.u13 = a[2], s.u12 = a[3]), i;
  }
  /**
   * Parses a BOND instruction line
   * Format: BOND atom1 atom2 [atom3 atom4 ...]
   * @param {string[]} parts - Split line parts
   */
  parseBondLine(e) {
    for (let t = 1; t < e.length - 1; t += 2) {
      const n = e[t], i = e[t + 1];
      n && i && this.bonds.push({
        atom1Label: n,
        atom2Label: i
      });
    }
  }
  /**
   * Converts parsed SHELX data to CIF-compatible format
   */
  convertToCifFormat() {
    if (this.cellParameters && (this.data._cell_length_a = this.cellParameters[0], this.data._cell_length_b = this.cellParameters[1], this.data._cell_length_c = this.cellParameters[2], this.data._cell_angle_alpha = this.cellParameters[3], this.data._cell_angle_beta = this.cellParameters[4], this.data._cell_angle_gamma = this.cellParameters[5], this.cellErrors && (this.data._cell_length_a_su = this.cellErrors[0], this.data._cell_length_b_su = this.cellErrors[1], this.data._cell_length_c_su = this.cellErrors[2], this.data._cell_angle_alpha_su = this.cellErrors[3], this.data._cell_angle_beta_su = this.cellErrors[4], this.data._cell_angle_gamma_su = this.cellErrors[5])), this.atoms.length > 0) {
      const t = new js("_atom_site");
      t.setColumns([
        "_atom_site_label",
        "_atom_site_type_symbol",
        "_atom_site_fract_x",
        "_atom_site_fract_y",
        "_atom_site_fract_z",
        "_atom_site_occupancy",
        "_atom_site_U_iso_or_equiv",
        "_atom_site_adp_type",
        "_atom_site_disorder_group"
      ]);
      for (const n of this.atoms) {
        const i = n.isAnisotropic && n.u11 !== null && n.u22 !== null && n.u33 !== null ? (n.u11 + n.u22 + n.u33) / 3 : (
          // Calculate Ueq from anisotropic
          n.uiso || 0.05
        );
        t.addRow([
          n.label,
          n.atomType,
          n.x,
          n.y,
          n.z,
          n.occupancy,
          i,
          n.isAnisotropic ? "Uani" : "Uiso",
          n.disorderGroup || 0
        ]);
      }
      this.data._atom_site = t;
    }
    const e = this.atoms.filter((t) => t.isAnisotropic);
    if (e.length > 0) {
      const t = new js("_atom_site_aniso");
      t.setColumns([
        "_atom_site_aniso.label",
        "_atom_site_aniso.u_11",
        "_atom_site_aniso.u_22",
        "_atom_site_aniso.u_33",
        "_atom_site_aniso.u_12",
        "_atom_site_aniso.u_13",
        "_atom_site_aniso.u_23"
      ]);
      for (const n of e)
        t.addRow([
          n.label,
          n.u11,
          n.u22,
          n.u33,
          n.u12,
          n.u13,
          n.u23
        ]);
      this.data._atom_site_aniso = t;
    }
    if (this.symmetryOperations.length > 0) {
      const t = new js("_symmetry_equiv_pos");
      t.setColumns(["_symmetry_equiv_pos_as_xyz"]);
      for (const n of this.symmetryOperations)
        t.addRow([String(n)]);
      this.data._symmetry_equiv_pos = t;
    }
    if (this.bonds.length > 0) {
      const t = new js("_geom_bond");
      t.setColumns([
        "_geom_bond_atom_site_label_1",
        "_geom_bond_atom_site_label_2"
      ]);
      for (const n of this.bonds)
        t.addRow([
          n.atom1Label,
          n.atom2Label
        ]);
      this.data._geom_bond = t;
    }
    this.data._space_group_crystal_system = "triclinic", this.data._space_group_IT_number = 1;
  }
  /**
   * Gets a value from the SHELX block data (CIF-compatible interface)
   * @param {(string|Array<string>)} keys - Key or array of keys to try
   * @param {*} [defaultValue] - Value to return if keys not found
   * @returns {*} Found value or default value
   */
  get(e, t = null) {
    this.data === null && this.parse();
    const n = Array.isArray(e) ? e : [e];
    for (const i of n) {
      const a = this.data[i];
      if (a !== void 0)
        return a;
    }
    if (t !== null)
      return t;
    throw new Error(`None of the keys [${n.join(", ")}] found in SHELX block`);
  }
}
class js extends Is {
  constructor(e) {
    super([], [], 0, !0), this.name = e, this.data = {}, this.headers = [], this.columns = [], this.rows = [];
  }
  setColumns(e) {
    this.columns = e, this.headers = e;
    for (const t of e)
      this.data[t] = [];
  }
  addRow(e) {
    this.rows.push(e);
    for (let t = 0; t < this.columns.length && t < e.length; t++)
      this.data[this.columns[t]].push(e[t]);
  }
  // Override parse to do nothing since we manually populate data
  parse() {
  }
  // Override getName to return our name
  getName() {
    return this.name;
  }
}
function pr() {
  return pr = Object.assign ? Object.assign.bind() : function(r) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t) ({}).hasOwnProperty.call(t, n) && (r[n] = t[n]);
    }
    return r;
  }, pr.apply(null, arguments);
}
var eg = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  relTol: 1e-12,
  // minimum absolute difference between two compared values,
  // used by all comparison functions
  absTol: 1e-15,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: "Matrix",
  // type of default number output. Choose 'number' (default) 'BigNumber', 'bigint', or 'Fraction'
  number: "number",
  // type of fallback used for config { number: 'bigint' } when a value cannot be represented
  // in the configured numeric type. Choose 'number' (default) or 'BigNumber'.
  numberFallback: "number",
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: !1,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};
function Sr(r, e) {
  if (au(r, e))
    return r[e];
  throw typeof r[e] == "function" && mf(r, e) ? new Error('Cannot access method "' + e + '" as a property') : new Error('No access to property "' + e + '"');
}
function ka(r, e, t) {
  if (au(r, e))
    return r[e] = t, t;
  throw new Error('No access to property "' + e + '"');
}
function au(r, e) {
  return !fx(r) && !Array.isArray(r) ? !1 : Ue(hx, e) ? !0 : !(e in Object.prototype || e in Function.prototype);
}
function cx(r, e) {
  if (!mf(r, e))
    throw new Error('No access to method "' + e + '"');
  return r[e];
}
function mf(r, e) {
  return r == null || typeof r[e] != "function" || Ue(r, e) && Object.getPrototypeOf && e in Object.getPrototypeOf(r) ? !1 : Ue(dx, e) ? !0 : !(e in Object.prototype || e in Function.prototype);
}
function fx(r) {
  return typeof r == "object" && r && r.constructor === Object;
}
var hx = {
  length: !0,
  name: !0
}, dx = {
  toString: !0,
  valueOf: !0,
  toLocaleString: !0
};
class Ru {
  constructor(e) {
    this.wrappedObject = e, this[Symbol.iterator] = this.entries;
  }
  keys() {
    return Object.keys(this.wrappedObject).filter((e) => this.has(e)).values();
  }
  get(e) {
    return Sr(this.wrappedObject, e);
  }
  set(e, t) {
    return ka(this.wrappedObject, e, t), this;
  }
  has(e) {
    return au(this.wrappedObject, e) && e in this.wrappedObject;
  }
  entries() {
    return rg(this.keys(), (e) => [e, this.get(e)]);
  }
  forEach(e) {
    for (var t of this.keys())
      e(this.get(t), t, this);
  }
  delete(e) {
    au(this.wrappedObject, e) && delete this.wrappedObject[e];
  }
  clear() {
    for (var e of this.keys())
      this.delete(e);
  }
  get size() {
    return Object.keys(this.wrappedObject).length;
  }
}
class tg {
  /**
   * @param {Map} a
   * @param {Map} b
   * @param {Set} bKeys
   */
  constructor(e, t, n) {
    this.a = e, this.b = t, this.bKeys = n, this[Symbol.iterator] = this.entries;
  }
  get(e) {
    return this.bKeys.has(e) ? this.b.get(e) : this.a.get(e);
  }
  set(e, t) {
    return this.bKeys.has(e) ? this.b.set(e, t) : this.a.set(e, t), this;
  }
  has(e) {
    return this.b.has(e) || this.a.has(e);
  }
  keys() {
    return (/* @__PURE__ */ new Set([...this.a.keys(), ...this.b.keys()]))[Symbol.iterator]();
  }
  entries() {
    return rg(this.keys(), (e) => [e, this.get(e)]);
  }
  forEach(e) {
    for (var t of this.keys())
      e(this.get(t), t, this);
  }
  delete(e) {
    return this.bKeys.has(e) ? this.b.delete(e) : this.a.delete(e);
  }
  clear() {
    this.a.clear(), this.b.clear();
  }
  get size() {
    return [...this.keys()].length;
  }
}
function rg(r, e) {
  return {
    next: () => {
      var t = r.next();
      return t.done ? t : {
        value: e(t.value),
        done: !1
      };
    }
  };
}
function As() {
  return /* @__PURE__ */ new Map();
}
function Fa(r) {
  if (!r)
    return As();
  if (qi(r))
    return r;
  if (ji(r))
    return new Ru(r);
  throw new Error("createMap can create maps from objects or Maps");
}
function mx(r) {
  if (r instanceof Ru)
    return r.wrappedObject;
  var e = {};
  for (var t of r.keys()) {
    var n = r.get(t);
    ka(e, t, n);
  }
  return e;
}
function et(r) {
  return typeof r == "number";
}
function Qe(r) {
  return !r || typeof r != "object" || typeof r.constructor != "function" ? !1 : r.isBigNumber === !0 && typeof r.constructor.prototype == "object" && r.constructor.prototype.isBigNumber === !0 || typeof r.constructor.isDecimal == "function" && r.constructor.isDecimal(r) === !0;
}
function Oa(r) {
  return typeof r == "bigint";
}
function fn(r) {
  return r && typeof r == "object" && Object.getPrototypeOf(r).isComplex === !0 || !1;
}
function Qi(r) {
  return r && typeof r == "object" && Object.getPrototypeOf(r).isFraction === !0 || !1;
}
function wr(r) {
  return r && r.constructor.prototype.isUnit === !0 || !1;
}
function sr(r) {
  return typeof r == "string";
}
var Mt = Array.isArray;
function Ve(r) {
  return r && r.constructor.prototype.isMatrix === !0 || !1;
}
function kr(r) {
  return Array.isArray(r) || Ve(r);
}
function Ds(r) {
  return r && r.isDenseMatrix && r.constructor.prototype.isMatrix === !0 || !1;
}
function ai(r) {
  return r && r.isSparseMatrix && r.constructor.prototype.isMatrix === !0 || !1;
}
function Fu(r) {
  return r && r.constructor.prototype.isRange === !0 || !1;
}
function Ls(r) {
  return r && r.constructor.prototype.isIndex === !0 || !1;
}
function ng(r) {
  return typeof r == "boolean";
}
function ig(r) {
  return r && r.constructor.prototype.isResultSet === !0 || !1;
}
function pf(r) {
  return r && r.constructor.prototype.isHelp === !0 || !1;
}
function ag(r) {
  return typeof r == "function";
}
function sg(r) {
  return r instanceof Date;
}
function og(r) {
  return r instanceof RegExp;
}
function ji(r) {
  return !!(r && typeof r == "object" && r.constructor === Object && !fn(r) && !Qi(r));
}
function qi(r) {
  return r ? r instanceof Map || r instanceof Ru || typeof r.set == "function" && typeof r.get == "function" && typeof r.keys == "function" && typeof r.has == "function" : !1;
}
function px(r) {
  return qi(r) && qi(r.a) && qi(r.b);
}
function vx(r) {
  return qi(r) && ji(r.wrappedObject);
}
function ug(r) {
  return r === null;
}
function lg(r) {
  return r === void 0;
}
function hi(r) {
  return r && r.isAccessorNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Ur(r) {
  return r && r.isArrayNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function cg(r) {
  return r && r.isAssignmentNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function fg(r) {
  return r && r.isBlockNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function hg(r) {
  return r && r.isConditionalNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function ht(r) {
  return r && r.isConstantNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Ql(r) {
  return ht(r) || kt(r) && r.args.length === 1 && ht(r.args[0]) && "-+~".includes(r.op);
}
function ts(r) {
  return r && r.isFunctionAssignmentNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Vn(r) {
  return r && r.isFunctionNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function ea(r) {
  return r && r.isIndexNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function bt(r) {
  return r && r.isNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Us(r) {
  return r && r.isObjectNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function kt(r) {
  return r && r.isOperatorNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function En(r) {
  return r && r.isParenthesisNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function dg(r) {
  return r && r.isRangeNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function mg(r) {
  return r && r.isRelationalNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Zt(r) {
  return r && r.isSymbolNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function vf(r) {
  return r && r.constructor.prototype.isChain === !0 || !1;
}
function Dt(r) {
  var e = typeof r;
  return e === "object" ? r === null ? "null" : Qe(r) ? "BigNumber" : r.constructor && r.constructor.name ? r.constructor.name : "Object" : e;
}
function Ye(r) {
  var e = typeof r;
  if (e === "number" || e === "bigint" || e === "string" || e === "boolean" || r === null || r === void 0)
    return r;
  if (typeof r.clone == "function")
    return r.clone();
  if (Array.isArray(r))
    return r.map(function(t) {
      return Ye(t);
    });
  if (r instanceof Date) return new Date(r.valueOf());
  if (Qe(r)) return r;
  if (ji(r))
    return gx(r, Ye);
  if (e === "function")
    return r;
  throw new TypeError("Cannot clone: unknown type of value (value: ".concat(r, ")"));
}
function gx(r, e) {
  var t = {};
  for (var n in r)
    Ue(r, n) && (t[n] = e(r[n]));
  return t;
}
function pg(r, e) {
  for (var t in e)
    Ue(e, t) && (r[t] = e[t]);
  return r;
}
function vg(r, e) {
  if (Array.isArray(e))
    throw new TypeError("Arrays are not supported by deepExtend");
  for (var t in e)
    if (Ue(e, t) && !(t in Object.prototype) && !(t in Function.prototype))
      if (e[t] && e[t].constructor === Object)
        r[t] === void 0 && (r[t] = {}), r[t] && r[t].constructor === Object ? vg(r[t], e[t]) : r[t] = e[t];
      else {
        if (Array.isArray(e[t]))
          throw new TypeError("Arrays are not supported by deepExtend");
        r[t] = e[t];
      }
  return r;
}
function qn(r, e) {
  var t, n, i;
  if (Array.isArray(r)) {
    if (!Array.isArray(e) || r.length !== e.length)
      return !1;
    for (n = 0, i = r.length; n < i; n++)
      if (!qn(r[n], e[n]))
        return !1;
    return !0;
  } else {
    if (typeof r == "function")
      return r === e;
    if (r instanceof Object) {
      if (Array.isArray(e) || !(e instanceof Object))
        return !1;
      for (t in r)
        if (!(t in e) || !qn(r[t], e[t]))
          return !1;
      for (t in e)
        if (!(t in r))
          return !1;
      return !0;
    } else
      return r === e;
  }
}
function yx(r) {
  var e = {};
  return gg(r, e), e;
}
function gg(r, e) {
  for (var t in r)
    if (Ue(r, t)) {
      var n = r[t];
      typeof n == "object" && n !== null ? gg(n, e) : e[t] = n;
    }
}
function Pi(r, e, t) {
  var n = !0, i;
  Object.defineProperty(r, e, {
    get: function() {
      return n && (i = t(), n = !1), i;
    },
    set: function(s) {
      i = s, n = !1;
    },
    configurable: !0,
    enumerable: !0
  });
}
function Ue(r, e) {
  return r && Object.hasOwnProperty.call(r, e);
}
function xx(r) {
  return r && typeof r.factory == "function";
}
function _x(r, e) {
  for (var t = {}, n = 0; n < e.length; n++) {
    var i = e[n], a = r[i];
    a !== void 0 && (t[i] = a);
  }
  return t;
}
var sh = ["Matrix", "Array"], oh = ["number", "BigNumber", "Fraction"];
function bx(r, e) {
  function t(n) {
    if (n) {
      if (n.epsilon !== void 0) {
        console.warn('Warning: The configuration option "epsilon" is deprecated. Use "relTol" and "absTol" instead.');
        var i = Ye(n);
        return i.relTol = n.epsilon, i.absTol = n.epsilon * 1e-3, delete i.epsilon, t(i);
      }
      var a = Ye(r);
      uh(n, "matrix", sh), uh(n, "number", oh), vg(r, n);
      var s = Ye(r), o = Ye(n);
      return e("config", s, a, o), s;
    } else
      return Ye(r);
  }
  return t.MATRIX_OPTIONS = sh, t.NUMBER_OPTIONS = oh, Object.keys(eg).forEach((n) => {
    Object.defineProperty(t, n, {
      get: () => r[n],
      enumerable: !0,
      configurable: !0
    });
  }), t;
}
function uh(r, e, t) {
  r[e] !== void 0 && !t.includes(r[e]) && console.warn('Warning: Unknown value "' + r[e] + '" for configuration option "' + e + '". Available options: ' + t.map((n) => JSON.stringify(n)).join(", ") + ".");
}
function lh() {
  return !0;
}
function qr() {
  return !1;
}
function sa() {
}
const ch = "Argument is not a typed-function.";
function yg() {
  function r(F) {
    return typeof F == "object" && F !== null && F.constructor === Object;
  }
  const e = [{
    name: "number",
    test: function(F) {
      return typeof F == "number";
    }
  }, {
    name: "string",
    test: function(F) {
      return typeof F == "string";
    }
  }, {
    name: "boolean",
    test: function(F) {
      return typeof F == "boolean";
    }
  }, {
    name: "Function",
    test: function(F) {
      return typeof F == "function";
    }
  }, {
    name: "Array",
    test: Array.isArray
  }, {
    name: "Date",
    test: function(F) {
      return F instanceof Date;
    }
  }, {
    name: "RegExp",
    test: function(F) {
      return F instanceof RegExp;
    }
  }, {
    name: "Object",
    test: r
  }, {
    name: "null",
    test: function(F) {
      return F === null;
    }
  }, {
    name: "undefined",
    test: function(F) {
      return F === void 0;
    }
  }], t = {
    name: "any",
    test: lh,
    isAny: !0
  };
  let n, i, a = 0, s = {
    createCount: 0
  };
  function o(F) {
    const H = n.get(F);
    if (H)
      return H;
    let X = 'Unknown type "' + F + '"';
    const K = F.toLowerCase();
    let se;
    for (se of i)
      if (se.toLowerCase() === K) {
        X += '. Did you mean "' + se + '" ?';
        break;
      }
    throw new TypeError(X);
  }
  function l(F) {
    let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "any";
    const X = H ? o(H).index : i.length, K = [];
    for (let le = 0; le < F.length; ++le) {
      if (!F[le] || typeof F[le].name != "string" || typeof F[le].test != "function")
        throw new TypeError("Object with properties {name: string, test: function} expected");
      const ge = F[le].name;
      if (n.has(ge))
        throw new TypeError('Duplicate type name "' + ge + '"');
      K.push(ge), n.set(ge, {
        name: ge,
        test: F[le].test,
        isAny: F[le].isAny,
        index: X + le,
        conversionsTo: []
        // Newly added type can't have any conversions to it
      });
    }
    const se = i.slice(X);
    i = i.slice(0, X).concat(K).concat(se);
    for (let le = X + K.length; le < i.length; ++le)
      n.get(i[le]).index = le;
  }
  function u() {
    n = /* @__PURE__ */ new Map(), i = [], a = 0, l([t], !1);
  }
  u(), l(e);
  function c() {
    let F;
    for (F of i)
      n.get(F).conversionsTo = [];
    a = 0;
  }
  function f(F) {
    const H = i.filter((X) => {
      const K = n.get(X);
      return !K.isAny && K.test(F);
    });
    return H.length ? H : ["any"];
  }
  function h(F) {
    return F && typeof F == "function" && "_typedFunctionData" in F;
  }
  function d(F, H, X) {
    if (!h(F))
      throw new TypeError(ch);
    const K = X && X.exact, se = Array.isArray(H) ? H.join(",") : H, le = y(se), ge = g(le);
    if (!K || ge in F.signatures) {
      const Oe = F._typedFunctionData.signatureMap.get(ge);
      if (Oe)
        return Oe;
    }
    const be = le.length;
    let he;
    if (K) {
      he = [];
      let Oe;
      for (Oe in F.signatures)
        he.push(F._typedFunctionData.signatureMap.get(Oe));
    } else
      he = F._typedFunctionData.signatures;
    for (let Oe = 0; Oe < be; ++Oe) {
      const Te = le[Oe], Fe = [];
      let N;
      for (N of he) {
        const j = A(N.params, Oe);
        if (!(!j || Te.restParam && !j.restParam)) {
          if (!j.hasAny) {
            const de = x(j);
            if (Te.types.some((Q) => !de.has(Q.name)))
              continue;
          }
          Fe.push(N);
        }
      }
      if (he = Fe, he.length === 0) break;
    }
    let ye;
    for (ye of he)
      if (ye.params.length <= be)
        return ye;
    throw new TypeError("Signature not found (signature: " + (F.name || "unnamed") + "(" + g(le, ", ") + "))");
  }
  function m(F, H, X) {
    return d(F, H, X).implementation;
  }
  function p(F, H) {
    const X = o(H);
    if (X.test(F))
      return F;
    const K = X.conversionsTo;
    if (K.length === 0)
      throw new Error("There are no conversions to " + H + " defined.");
    for (let se = 0; se < K.length; se++)
      if (o(K[se].from).test(F))
        return K[se].convert(F);
    throw new Error("Cannot convert " + F + " to " + H);
  }
  function g(F) {
    let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ",";
    return F.map((X) => X.name).join(H);
  }
  function v(F) {
    const H = F.indexOf("...") === 0, K = (H ? F.length > 3 ? F.slice(3) : "any" : F).split("|").map((be) => o(be.trim()));
    let se = !1, le = H ? "..." : "";
    return {
      types: K.map(function(be) {
        return se = be.isAny || se, le += be.name + "|", {
          name: be.name,
          typeIndex: be.index,
          test: be.test,
          isAny: be.isAny,
          conversion: null,
          conversionIndex: -1
        };
      }),
      name: le.slice(0, -1),
      // remove trailing '|' from above
      hasAny: se,
      hasConversion: !1,
      restParam: H
    };
  }
  function S(F) {
    const H = F.types.map((ge) => ge.name), X = k(H);
    let K = F.hasAny, se = F.name;
    const le = X.map(function(ge) {
      const be = o(ge.from);
      return K = be.isAny || K, se += "|" + ge.from, {
        name: ge.from,
        typeIndex: be.index,
        test: be.test,
        isAny: be.isAny,
        conversion: ge,
        conversionIndex: ge.index
      };
    });
    return {
      types: F.types.concat(le),
      name: se,
      hasAny: K,
      hasConversion: le.length > 0,
      restParam: F.restParam
    };
  }
  function x(F) {
    return F.typeSet || (F.typeSet = /* @__PURE__ */ new Set(), F.types.forEach((H) => F.typeSet.add(H.name))), F.typeSet;
  }
  function y(F) {
    const H = [];
    if (typeof F != "string")
      throw new TypeError("Signatures must be strings");
    const X = F.trim();
    if (X === "")
      return H;
    const K = X.split(",");
    for (let se = 0; se < K.length; ++se) {
      const le = v(K[se].trim());
      if (le.restParam && se !== K.length - 1)
        throw new SyntaxError('Unexpected rest parameter "' + K[se] + '": only allowed for the last parameter');
      if (le.types.length === 0)
        return null;
      H.push(le);
    }
    return H;
  }
  function b(F) {
    const H = Z(F);
    return H ? H.restParam : !1;
  }
  function _(F) {
    if (!F || F.types.length === 0)
      return lh;
    if (F.types.length === 1)
      return o(F.types[0].name).test;
    if (F.types.length === 2) {
      const H = o(F.types[0].name).test, X = o(F.types[1].name).test;
      return function(se) {
        return H(se) || X(se);
      };
    } else {
      const H = F.types.map(function(X) {
        return o(X.name).test;
      });
      return function(K) {
        for (let se = 0; se < H.length; se++)
          if (H[se](K))
            return !0;
        return !1;
      };
    }
  }
  function M(F) {
    let H, X, K;
    if (b(F)) {
      H = G(F).map(_);
      const se = H.length, le = _(Z(F)), ge = function(be) {
        for (let he = se; he < be.length; he++)
          if (!le(be[he]))
            return !1;
        return !0;
      };
      return function(he) {
        for (let ye = 0; ye < H.length; ye++)
          if (!H[ye](he[ye]))
            return !1;
        return ge(he) && he.length >= se + 1;
      };
    } else
      return F.length === 0 ? function(le) {
        return le.length === 0;
      } : F.length === 1 ? (X = _(F[0]), function(le) {
        return X(le[0]) && le.length === 1;
      }) : F.length === 2 ? (X = _(F[0]), K = _(F[1]), function(le) {
        return X(le[0]) && K(le[1]) && le.length === 2;
      }) : (H = F.map(_), function(le) {
        for (let ge = 0; ge < H.length; ge++)
          if (!H[ge](le[ge]))
            return !1;
        return le.length === H.length;
      });
  }
  function A(F, H) {
    return H < F.length ? F[H] : b(F) ? Z(F) : null;
  }
  function w(F, H) {
    const X = A(F, H);
    return X ? x(X) : /* @__PURE__ */ new Set();
  }
  function E(F) {
    return F.conversion === null || F.conversion === void 0;
  }
  function D(F, H) {
    const X = /* @__PURE__ */ new Set();
    return F.forEach((K) => {
      const se = w(K.params, H);
      let le;
      for (le of se)
        X.add(le);
    }), X.has("any") ? ["any"] : Array.from(X);
  }
  function T(F, H, X) {
    let K, se;
    const le = F || "unnamed";
    let ge = X, be;
    for (be = 0; be < H.length; be++) {
      const Te = [];
      if (ge.forEach((Fe) => {
        const N = A(Fe.params, be), j = _(N);
        (be < Fe.params.length || b(Fe.params)) && j(H[be]) && Te.push(Fe);
      }), Te.length === 0) {
        if (se = D(ge, be), se.length > 0) {
          const Fe = f(H[be]);
          return K = new TypeError("Unexpected type of argument in function " + le + " (expected: " + se.join(" or ") + ", actual: " + Fe.join(" | ") + ", index: " + be + ")"), K.data = {
            category: "wrongType",
            fn: le,
            index: be,
            actual: Fe,
            expected: se
          }, K;
        }
      } else
        ge = Te;
    }
    const he = ge.map(function(Te) {
      return b(Te.params) ? 1 / 0 : Te.params.length;
    });
    if (H.length < Math.min.apply(null, he))
      return se = D(ge, be), K = new TypeError("Too few arguments in function " + le + " (expected: " + se.join(" or ") + ", index: " + H.length + ")"), K.data = {
        category: "tooFewArgs",
        fn: le,
        index: H.length,
        expected: se
      }, K;
    const ye = Math.max.apply(null, he);
    if (H.length > ye)
      return K = new TypeError("Too many arguments in function " + le + " (expected: " + ye + ", actual: " + H.length + ")"), K.data = {
        category: "tooManyArgs",
        fn: le,
        index: H.length,
        expectedLength: ye
      }, K;
    const Oe = [];
    for (let Te = 0; Te < H.length; ++Te)
      Oe.push(f(H[Te]).join("|"));
    return K = new TypeError('Arguments of type "' + Oe.join(", ") + '" do not match any of the defined signatures of function ' + le + "."), K.data = {
      category: "mismatch",
      actual: Oe
    }, K;
  }
  function R(F) {
    let H = i.length + 1;
    for (let X = 0; X < F.types.length; X++)
      E(F.types[X]) && (H = Math.min(H, F.types[X].typeIndex));
    return H;
  }
  function B(F) {
    let H = a + 1;
    for (let X = 0; X < F.types.length; X++)
      E(F.types[X]) || (H = Math.min(H, F.types[X].conversionIndex));
    return H;
  }
  function I(F, H) {
    if (F.hasAny) {
      if (!H.hasAny)
        return 1;
    } else if (H.hasAny)
      return -1;
    if (F.restParam) {
      if (!H.restParam)
        return 1;
    } else if (H.restParam)
      return -1;
    if (F.hasConversion) {
      if (!H.hasConversion)
        return 1;
    } else if (H.hasConversion)
      return -1;
    const X = R(F) - R(H);
    if (X < 0)
      return -1;
    if (X > 0)
      return 1;
    const K = B(F) - B(H);
    return K < 0 ? -1 : K > 0 ? 1 : 0;
  }
  function C(F, H) {
    const X = F.params, K = H.params, se = Z(X), le = Z(K), ge = b(X), be = b(K);
    if (ge && se.hasAny) {
      if (!be || !le.hasAny)
        return 1;
    } else if (be && le.hasAny)
      return -1;
    let he = 0, ye = 0, Oe;
    for (Oe of X)
      Oe.hasAny && ++he, Oe.hasConversion && ++ye;
    let Te = 0, Fe = 0;
    for (Oe of K)
      Oe.hasAny && ++Te, Oe.hasConversion && ++Fe;
    if (he !== Te)
      return he - Te;
    if (ge && se.hasConversion) {
      if (!be || !le.hasConversion)
        return 1;
    } else if (be && le.hasConversion)
      return -1;
    if (ye !== Fe)
      return ye - Fe;
    if (ge) {
      if (!be)
        return 1;
    } else if (be)
      return -1;
    const N = (X.length - K.length) * (ge ? -1 : 1);
    if (N !== 0)
      return N;
    const j = [];
    let de = 0;
    for (let Se = 0; Se < X.length; ++Se) {
      const pe = I(X[Se], K[Se]);
      j.push(pe), de += pe;
    }
    if (de !== 0)
      return de;
    let Q;
    for (Q of j)
      if (Q !== 0)
        return Q;
    return 0;
  }
  function k(F) {
    if (F.length === 0)
      return [];
    const H = F.map(o);
    F.length > 1 && H.sort((se, le) => se.index - le.index);
    let X = H[0].conversionsTo;
    if (F.length === 1)
      return X;
    X = X.concat([]);
    const K = new Set(F);
    for (let se = 1; se < H.length; ++se) {
      let le;
      for (le of H[se].conversionsTo)
        K.has(le.from) || (X.push(le), K.add(le.from));
    }
    return X;
  }
  function z(F, H) {
    let X = H;
    if (F.some((se) => se.hasConversion)) {
      const se = b(F), le = F.map(V);
      X = function() {
        const be = [], he = se ? arguments.length - 1 : arguments.length;
        for (let ye = 0; ye < he; ye++)
          be[ye] = le[ye](arguments[ye]);
        return se && (be[he] = arguments[he].map(le[he])), H.apply(this, be);
      };
    }
    let K = X;
    if (b(F)) {
      const se = F.length - 1;
      K = function() {
        return X.apply(this, te(arguments, 0, se).concat([te(arguments, se)]));
      };
    }
    return K;
  }
  function V(F) {
    let H, X, K, se;
    const le = [], ge = [];
    switch (F.types.forEach(function(be) {
      be.conversion && (le.push(o(be.conversion.from).test), ge.push(be.conversion.convert));
    }), ge.length) {
      case 0:
        return function(he) {
          return he;
        };
      case 1:
        return H = le[0], K = ge[0], function(he) {
          return H(he) ? K(he) : he;
        };
      case 2:
        return H = le[0], X = le[1], K = ge[0], se = ge[1], function(he) {
          return H(he) ? K(he) : X(he) ? se(he) : he;
        };
      default:
        return function(he) {
          for (let ye = 0; ye < ge.length; ye++)
            if (le[ye](he))
              return ge[ye](he);
          return he;
        };
    }
  }
  function ee(F) {
    function H(X, K, se) {
      if (K < X.length) {
        const le = X[K];
        let ge = [];
        if (le.restParam) {
          const be = le.types.filter(E);
          be.length < le.types.length && ge.push({
            types: be,
            name: "..." + be.map((he) => he.name).join("|"),
            hasAny: be.some((he) => he.isAny),
            hasConversion: !1,
            restParam: !0
          }), ge.push(le);
        } else
          ge = le.types.map(function(be) {
            return {
              types: [be],
              name: be.name,
              hasAny: be.isAny,
              hasConversion: be.conversion,
              restParam: !1
            };
          });
        return ae(ge, function(be) {
          return H(X, K + 1, se.concat([be]));
        });
      } else
        return [se];
    }
    return H(F, 0, []);
  }
  function re(F, H) {
    const X = Math.max(F.length, H.length);
    for (let be = 0; be < X; be++) {
      const he = w(F, be), ye = w(H, be);
      let Oe = !1, Te;
      for (Te of ye)
        if (he.has(Te)) {
          Oe = !0;
          break;
        }
      if (!Oe)
        return !1;
    }
    const K = F.length, se = H.length, le = b(F), ge = b(H);
    return le ? ge ? K === se : se >= K : ge ? K >= se : K === se;
  }
  function L(F) {
    return F.map((H) => Ne(H) ? Ae(H.referToSelf.callback) : De(H) ? q(H.referTo.references, H.referTo.callback) : H);
  }
  function J(F, H, X) {
    const K = [];
    let se;
    for (se of F) {
      let le = X[se];
      if (typeof le != "number")
        throw new TypeError('No definition for referenced signature "' + se + '"');
      if (le = H[le], typeof le != "function")
        return !1;
      K.push(le);
    }
    return K;
  }
  function U(F, H, X) {
    const K = L(F), se = new Array(K.length).fill(!1);
    let le = !0;
    for (; le; ) {
      le = !1;
      let ge = !0;
      for (let be = 0; be < K.length; ++be) {
        if (se[be]) continue;
        const he = K[be];
        if (Ne(he))
          K[be] = he.referToSelf.callback(X), K[be].referToSelf = he.referToSelf, se[be] = !0, ge = !1;
        else if (De(he)) {
          const ye = J(he.referTo.references, K, H);
          ye ? (K[be] = he.referTo.callback.apply(this, ye), K[be].referTo = he.referTo, se[be] = !0, ge = !1) : le = !0;
        }
      }
      if (ge && le)
        throw new SyntaxError("Circular reference detected in resolving typed.referTo");
    }
    return K;
  }
  function ue(F) {
    const H = /\bthis(\(|\.signatures\b)/;
    Object.keys(F).forEach((X) => {
      const K = F[X];
      if (H.test(K.toString()))
        throw new SyntaxError("Using `this` to self-reference a function is deprecated since typed-function@3. Use typed.referTo and typed.referToSelf instead.");
    });
  }
  function oe(F, H) {
    if (s.createCount++, Object.keys(H).length === 0)
      throw new SyntaxError("No signatures provided");
    s.warnAgainstDeprecatedThis && ue(H);
    const X = [], K = [], se = {}, le = [];
    let ge;
    for (ge in H) {
      if (!Object.prototype.hasOwnProperty.call(H, ge))
        continue;
      const ve = y(ge);
      if (!ve) continue;
      X.forEach(function(He) {
        if (re(He, ve))
          throw new TypeError('Conflicting signatures "' + g(He) + '" and "' + g(ve) + '".');
      }), X.push(ve);
      const fe = K.length;
      K.push(H[ge]);
      const Re = ve.map(S);
      let Be;
      for (Be of ee(Re)) {
        const He = g(Be);
        le.push({
          params: Be,
          name: He,
          fn: fe
        }), Be.every((Ge) => !Ge.hasConversion) && (se[He] = fe);
      }
    }
    le.sort(C);
    const be = U(K, se, _e);
    let he;
    for (he in se)
      Object.prototype.hasOwnProperty.call(se, he) && (se[he] = be[se[he]]);
    const ye = [], Oe = /* @__PURE__ */ new Map();
    for (he of le)
      Oe.has(he.name) || (he.fn = be[he.fn], ye.push(he), Oe.set(he.name, he));
    const Te = ye[0] && ye[0].params.length <= 2 && !b(ye[0].params), Fe = ye[1] && ye[1].params.length <= 2 && !b(ye[1].params), N = ye[2] && ye[2].params.length <= 2 && !b(ye[2].params), j = ye[3] && ye[3].params.length <= 2 && !b(ye[3].params), de = ye[4] && ye[4].params.length <= 2 && !b(ye[4].params), Q = ye[5] && ye[5].params.length <= 2 && !b(ye[5].params), Se = Te && Fe && N && j && de && Q;
    for (let ve = 0; ve < ye.length; ++ve)
      ye[ve].test = M(ye[ve].params);
    const pe = Te ? _(ye[0].params[0]) : qr, Ee = Fe ? _(ye[1].params[0]) : qr, ze = N ? _(ye[2].params[0]) : qr, ke = j ? _(ye[3].params[0]) : qr, at = de ? _(ye[4].params[0]) : qr, Bt = Q ? _(ye[5].params[0]) : qr, jt = Te ? _(ye[0].params[1]) : qr, _t = Fe ? _(ye[1].params[1]) : qr, Fr = N ? _(ye[2].params[1]) : qr, en = j ? _(ye[3].params[1]) : qr, Ws = de ? _(ye[4].params[1]) : qr, Xs = Q ? _(ye[5].params[1]) : qr;
    for (let ve = 0; ve < ye.length; ++ve)
      ye[ve].implementation = z(ye[ve].params, ye[ve].fn);
    const Cn = Te ? ye[0].implementation : sa, fs = Fe ? ye[1].implementation : sa, Ys = N ? ye[2].implementation : sa, Zs = j ? ye[3].implementation : sa, na = de ? ye[4].implementation : sa, Ks = Q ? ye[5].implementation : sa, ia = Te ? ye[0].params.length : -1, Js = Fe ? ye[1].params.length : -1, Qs = N ? ye[2].params.length : -1, ju = j ? ye[3].params.length : -1, el = de ? ye[4].params.length : -1, tl = Q ? ye[5].params.length : -1, rl = Se ? 6 : 0, nl = ye.length, il = ye.map((ve) => ve.test), Y = ye.map((ve) => ve.implementation), me = function() {
      for (let fe = rl; fe < nl; fe++)
        if (il[fe](arguments))
          return Y[fe].apply(this, arguments);
      return s.onMismatch(F, arguments, ye);
    };
    function _e(ve, fe) {
      return arguments.length === ia && pe(ve) && jt(fe) ? Cn.apply(this, arguments) : arguments.length === Js && Ee(ve) && _t(fe) ? fs.apply(this, arguments) : arguments.length === Qs && ze(ve) && Fr(fe) ? Ys.apply(this, arguments) : arguments.length === ju && ke(ve) && en(fe) ? Zs.apply(this, arguments) : arguments.length === el && at(ve) && Ws(fe) ? na.apply(this, arguments) : arguments.length === tl && Bt(ve) && Xs(fe) ? Ks.apply(this, arguments) : me.apply(this, arguments);
    }
    try {
      Object.defineProperty(_e, "name", {
        value: F
      });
    } catch {
    }
    return _e.signatures = se, _e._typedFunctionData = {
      signatures: ye,
      signatureMap: Oe
    }, _e;
  }
  function ie(F, H, X) {
    throw T(F, H, X);
  }
  function G(F) {
    return te(F, 0, F.length - 1);
  }
  function Z(F) {
    return F[F.length - 1];
  }
  function te(F, H, X) {
    return Array.prototype.slice.call(F, H, X);
  }
  function ne(F, H) {
    for (let X = 0; X < F.length; X++)
      if (H(F[X]))
        return F[X];
  }
  function ae(F, H) {
    return Array.prototype.concat.apply([], F.map(H));
  }
  function xe() {
    const F = G(arguments).map((X) => g(y(X))), H = Z(arguments);
    if (typeof H != "function")
      throw new TypeError("Callback function expected as last argument");
    return q(F, H);
  }
  function q(F, H) {
    return {
      referTo: {
        references: F,
        callback: H
      }
    };
  }
  function Ae(F) {
    if (typeof F != "function")
      throw new TypeError("Callback function expected as first argument");
    return {
      referToSelf: {
        callback: F
      }
    };
  }
  function De(F) {
    return F && typeof F.referTo == "object" && Array.isArray(F.referTo.references) && typeof F.referTo.callback == "function";
  }
  function Ne(F) {
    return F && typeof F.referToSelf == "object" && typeof F.referToSelf.callback == "function";
  }
  function we(F, H) {
    if (!F)
      return H;
    if (H && H !== F) {
      const X = new Error("Function names do not match (expected: " + F + ", actual: " + H + ")");
      throw X.data = {
        actual: H,
        expected: F
      }, X;
    }
    return F;
  }
  function Pe(F) {
    let H;
    for (const X in F)
      Object.prototype.hasOwnProperty.call(F, X) && (h(F[X]) || typeof F[X].signature == "string") && (H = we(H, F[X].name));
    return H;
  }
  function $(F, H) {
    let X;
    for (X in H)
      if (Object.prototype.hasOwnProperty.call(H, X)) {
        if (X in F && H[X] !== F[X]) {
          const K = new Error('Signature "' + X + '" is defined twice');
          throw K.data = {
            signature: X,
            sourceFunction: H[X],
            destFunction: F[X]
          }, K;
        }
        F[X] = H[X];
      }
  }
  const P = s;
  s = function(F) {
    const H = typeof F == "string", X = H ? 1 : 0;
    let K = H ? F : "";
    const se = {};
    for (let le = X; le < arguments.length; ++le) {
      const ge = arguments[le];
      let be = {}, he;
      if (typeof ge == "function" ? (he = ge.name, typeof ge.signature == "string" ? be[ge.signature] = ge : h(ge) && (be = ge.signatures)) : r(ge) && (be = ge, H || (he = Pe(ge))), Object.keys(be).length === 0) {
        const ye = new TypeError("Argument to 'typed' at index " + le + " is not a (typed) function, nor an object with signatures as keys and functions as values.");
        throw ye.data = {
          index: le,
          argument: ge
        }, ye;
      }
      H || (K = we(K, he)), $(se, be);
    }
    return oe(K || "", se);
  }, s.create = yg, s.createCount = P.createCount, s.onMismatch = ie, s.throwMismatchError = ie, s.createError = T, s.clear = u, s.clearConversions = c, s.addTypes = l, s._findType = o, s.referTo = xe, s.referToSelf = Ae, s.convert = p, s.findSignature = d, s.find = m, s.isTypedFunction = h, s.warnAgainstDeprecatedThis = !0, s.addType = function(F, H) {
    let X = "any";
    H !== !1 && n.has("Object") && (X = "Object"), s.addTypes([F], X);
  };
  function O(F) {
    if (!F || typeof F.from != "string" || typeof F.to != "string" || typeof F.convert != "function")
      throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");
    if (F.to === F.from)
      throw new SyntaxError('Illegal to define conversion from "' + F.from + '" to itself.');
  }
  return s.addConversion = function(F) {
    let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      override: !1
    };
    O(F);
    const X = o(F.to), K = X.conversionsTo.find((se) => se.from === F.from);
    if (K)
      if (H && H.override)
        s.removeConversion({
          from: K.from,
          to: F.to,
          convert: K.convert
        });
      else
        throw new Error('There is already a conversion from "' + F.from + '" to "' + X.name + '"');
    X.conversionsTo.push({
      from: F.from,
      convert: F.convert,
      index: a++
    });
  }, s.addConversions = function(F, H) {
    F.forEach((X) => s.addConversion(X, H));
  }, s.removeConversion = function(F) {
    O(F);
    const H = o(F.to), X = ne(H.conversionsTo, (se) => se.from === F.from);
    if (!X)
      throw new Error("Attempt to remove nonexistent conversion from " + F.from + " to " + F.to);
    if (X.convert !== F.convert)
      throw new Error("Conversion to remove does not match existing conversion");
    const K = H.conversionsTo.indexOf(X);
    H.conversionsTo.splice(K, 1);
  }, s.resolve = function(F, H) {
    if (!h(F))
      throw new TypeError(ch);
    const X = F._typedFunctionData.signatures;
    for (let K = 0; K < X.length; ++K)
      if (X[K].test(H))
        return X[K];
    return null;
  }, s;
}
const Cs = yg();
function W(r, e, t, n) {
  function i(a) {
    var s = _x(a, e.map(xg));
    return wx(r, e, a), t(s);
  }
  return i.isFactory = !0, i.fn = r, i.dependencies = e.slice().sort(), n && (i.meta = n), i;
}
function Ss(r) {
  return typeof r == "function" && typeof r.fn == "string" && Array.isArray(r.dependencies);
}
function wx(r, e, t) {
  var n = e.filter((a) => !Sx(a)).every((a) => t[a] !== void 0);
  if (!n) {
    var i = e.filter((a) => t[a] === void 0);
    throw new Error('Cannot create function "'.concat(r, '", ') + "some dependencies are missing: ".concat(i.map((a) => '"'.concat(a, '"')).join(", "), "."));
  }
}
function Sx(r) {
  return r && r[0] === "?";
}
function xg(r) {
  return r && r[0] === "?" ? r.slice(1) : r;
}
function $e(r) {
  return typeof r == "boolean" ? !0 : isFinite(r) ? r === Math.round(r) : !1;
}
function xi(r, e) {
  if (e.number === "bigint")
    try {
      BigInt(r);
    } catch {
      return e.numberFallback;
    }
  return e.number;
}
var si = Math.sign || function(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}, Ex = Math.log2 || function(e) {
  return Math.log(e) / Math.LN2;
}, Mx = Math.log10 || function(e) {
  return Math.log(e) / Math.LN10;
}, Ax = Math.log1p || function(r) {
  return Math.log(r + 1);
}, Dx = Math.cbrt || function(e) {
  if (e === 0)
    return e;
  var t = e < 0, n;
  return t && (e = -e), isFinite(e) ? (n = Math.exp(Math.log(e) / 3), n = (e / (n * n) + 2 * n) / 3) : n = e, t ? -n : n;
}, Cx = Math.expm1 || function(e) {
  return e >= 2e-4 || e <= -2e-4 ? Math.exp(e) - 1 : e + e * e / 2 + e * e * e / 6;
};
function sl(r, e, t) {
  var n = {
    2: "0b",
    8: "0o",
    16: "0x"
  }, i = n[e], a = "";
  if (t) {
    if (t < 1)
      throw new Error("size must be in greater than 0");
    if (!$e(t))
      throw new Error("size must be an integer");
    if (r > 2 ** (t - 1) - 1 || r < -(2 ** (t - 1)))
      throw new Error("Value must be in range [-2^".concat(t - 1, ", 2^").concat(t - 1, "-1]"));
    if (!$e(r))
      throw new Error("Value must be an integer");
    r < 0 && (r = r + 2 ** t), a = "i".concat(t);
  }
  var s = "";
  return r < 0 && (r = -r, s = "-"), "".concat(s).concat(i).concat(r.toString(e)).concat(a);
}
function Wi(r, e) {
  if (typeof e == "function")
    return e(r);
  if (r === 1 / 0)
    return "Infinity";
  if (r === -1 / 0)
    return "-Infinity";
  if (isNaN(r))
    return "NaN";
  var {
    notation: t,
    precision: n,
    wordSize: i
  } = _g(e);
  switch (t) {
    case "fixed":
      return bg(r, n);
    case "exponential":
      return wg(r, n);
    case "engineering":
      return Tx(r, n);
    case "bin":
      return sl(r, 2, i);
    case "oct":
      return sl(r, 8, i);
    case "hex":
      return sl(r, 16, i);
    case "auto":
      return Nx(r, n, e).replace(/((\.\d*?)(0+))($|e)/, function() {
        var a = arguments[2], s = arguments[4];
        return a !== "." ? a + s : s;
      });
    default:
      throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
function _g(r) {
  var e = "auto", t, n;
  if (r !== void 0)
    if (et(r))
      t = r;
    else if (Qe(r))
      t = r.toNumber();
    else if (ji(r))
      r.precision !== void 0 && (t = fh(r.precision, () => {
        throw new Error('Option "precision" must be a number or BigNumber');
      })), r.wordSize !== void 0 && (n = fh(r.wordSize, () => {
        throw new Error('Option "wordSize" must be a number or BigNumber');
      })), r.notation && (e = r.notation);
    else
      throw new Error("Unsupported type of options, number, BigNumber, or object expected");
  return {
    notation: e,
    precision: t,
    wordSize: n
  };
}
function zs(r) {
  var e = String(r).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
  if (!e)
    throw new SyntaxError("Invalid number " + r);
  var t = e[1], n = e[2], i = parseFloat(e[4] || "0"), a = n.indexOf(".");
  i += a !== -1 ? a - 1 : n.length - 1;
  var s = n.replace(".", "").replace(/^0*/, function(o) {
    return i -= o.length, "";
  }).replace(/0*$/, "").split("").map(function(o) {
    return parseInt(o);
  });
  return s.length === 0 && (s.push(0), i++), {
    sign: t,
    coefficients: s,
    exponent: i
  };
}
function Tx(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = zs(r), n = Ou(t, e), i = n.exponent, a = n.coefficients, s = i % 3 === 0 ? i : i < 0 ? i - 3 - i % 3 : i - i % 3;
  if (et(e))
    for (; e > a.length || i - s + 1 > a.length; )
      a.push(0);
  else
    for (var o = Math.abs(i - s) - (a.length - 1), l = 0; l < o; l++)
      a.push(0);
  for (var u = Math.abs(i - s), c = 1; u > 0; )
    c++, u--;
  var f = a.slice(c).join(""), h = et(e) && f.length || f.match(/[1-9]/) ? "." + f : "", d = a.slice(0, c).join("") + h + "e" + (i >= 0 ? "+" : "") + s.toString();
  return n.sign + d;
}
function bg(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = zs(r), n = typeof e == "number" ? Ou(t, t.exponent + 1 + e) : t, i = n.coefficients, a = n.exponent + 1, s = a + (e || 0);
  return i.length < s && (i = i.concat(Pa(s - i.length))), a < 0 && (i = Pa(-a + 1).concat(i), a = 1), a < i.length && i.splice(a, 0, a === 0 ? "0." : "."), n.sign + i.join("");
}
function wg(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = zs(r), n = e ? Ou(t, e) : t, i = n.coefficients, a = n.exponent;
  i.length < e && (i = i.concat(Pa(e - i.length)));
  var s = i.shift();
  return n.sign + s + (i.length > 0 ? "." + i.join("") : "") + "e" + (a >= 0 ? "+" : "") + a;
}
function Nx(r, e, t) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var n = hh(t == null ? void 0 : t.lowerExp, -3), i = hh(t == null ? void 0 : t.upperExp, 5), a = zs(r), s = e ? Ou(a, e) : a;
  if (s.exponent < n || s.exponent >= i)
    return wg(r, e);
  var o = s.coefficients, l = s.exponent;
  o.length < e && (o = o.concat(Pa(e - o.length))), o = o.concat(Pa(l - o.length + 1 + (o.length < e ? e - o.length : 0))), o = Pa(-l).concat(o);
  var u = l > 0 ? l : 0;
  return u < o.length - 1 && o.splice(u + 1, 0, "."), s.sign + o.join("");
}
function Ou(r, e) {
  for (var t = {
    sign: r.sign,
    coefficients: r.coefficients,
    exponent: r.exponent
  }, n = t.coefficients; e <= 0; )
    n.unshift(0), t.exponent++, e++;
  if (n.length > e) {
    var i = n.splice(e, n.length - e);
    if (i[0] >= 5) {
      var a = e - 1;
      for (n[a]++; n[a] === 10; )
        n.pop(), a === 0 && (n.unshift(0), t.exponent++, a++), a--, n[a]++;
    }
  }
  return t;
}
function Pa(r) {
  for (var e = [], t = 0; t < r; t++)
    e.push(0);
  return e;
}
function Rx(r) {
  return r.toExponential().replace(/e.*$/, "").replace(/^0\.?0*|\./, "").length;
}
function lr(r, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e-8, n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  if (t <= 0)
    throw new Error("Relative tolerance must be greater than 0");
  if (n < 0)
    throw new Error("Absolute tolerance must be at least 0");
  return isNaN(r) || isNaN(e) ? !1 : !isFinite(r) || !isFinite(e) ? r === e : r === e ? !0 : Math.abs(r - e) <= Math.max(t * Math.max(Math.abs(r), Math.abs(e)), n);
}
var Fx = Math.acosh || function(r) {
  return Math.log(Math.sqrt(r * r - 1) + r);
}, Ox = Math.asinh || function(r) {
  return Math.log(Math.sqrt(r * r + 1) + r);
}, Px = Math.atanh || function(r) {
  return Math.log((1 + r) / (1 - r)) / 2;
}, Bx = Math.cosh || function(r) {
  return (Math.exp(r) + Math.exp(-r)) / 2;
}, Ix = Math.sinh || function(r) {
  return (Math.exp(r) - Math.exp(-r)) / 2;
}, Lx = Math.tanh || function(r) {
  var e = Math.exp(2 * r);
  return (e - 1) / (e + 1);
};
function Ux(r, e) {
  var t = !0, n = e > 0 ? !0 : e < 0 ? !1 : 1 / e === 1 / 0;
  return t ^ n ? -r : r;
}
function fh(r, e) {
  if (et(r))
    return r;
  if (Qe(r))
    return r.toNumber();
  e();
}
function hh(r, e) {
  return et(r) ? r : Qe(r) ? r.toNumber() : e;
}
var Sg = function() {
  return Sg = Cs.create, Cs;
}, zx = ["?BigNumber", "?Complex", "?DenseMatrix", "?Fraction"], kx = /* @__PURE__ */ W("typed", zx, function(e) {
  var {
    BigNumber: t,
    Complex: n,
    DenseMatrix: i,
    Fraction: a
  } = e, s = Sg();
  return s.clear(), s.addTypes([
    {
      name: "number",
      test: et
    },
    {
      name: "Complex",
      test: fn
    },
    {
      name: "BigNumber",
      test: Qe
    },
    {
      name: "bigint",
      test: Oa
    },
    {
      name: "Fraction",
      test: Qi
    },
    {
      name: "Unit",
      test: wr
    },
    // The following type matches a valid variable name, i.e., an alphanumeric
    // string starting with an alphabetic character. It is used (at least)
    // in the definition of the derivative() function, as the argument telling
    // what to differentiate over must (currently) be a variable.
    // TODO: deprecate the identifier type (it's not used anymore, see https://github.com/josdejong/mathjs/issues/3253)
    {
      name: "identifier",
      test: (o) => sr && /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/.test(o)
    },
    {
      name: "string",
      test: sr
    },
    {
      name: "Chain",
      test: vf
    },
    {
      name: "Array",
      test: Mt
    },
    {
      name: "Matrix",
      test: Ve
    },
    {
      name: "DenseMatrix",
      test: Ds
    },
    {
      name: "SparseMatrix",
      test: ai
    },
    {
      name: "Range",
      test: Fu
    },
    {
      name: "Index",
      test: Ls
    },
    {
      name: "boolean",
      test: ng
    },
    {
      name: "ResultSet",
      test: ig
    },
    {
      name: "Help",
      test: pf
    },
    {
      name: "function",
      test: ag
    },
    {
      name: "Date",
      test: sg
    },
    {
      name: "RegExp",
      test: og
    },
    {
      name: "null",
      test: ug
    },
    {
      name: "undefined",
      test: lg
    },
    {
      name: "AccessorNode",
      test: hi
    },
    {
      name: "ArrayNode",
      test: Ur
    },
    {
      name: "AssignmentNode",
      test: cg
    },
    {
      name: "BlockNode",
      test: fg
    },
    {
      name: "ConditionalNode",
      test: hg
    },
    {
      name: "ConstantNode",
      test: ht
    },
    {
      name: "FunctionNode",
      test: Vn
    },
    {
      name: "FunctionAssignmentNode",
      test: ts
    },
    {
      name: "IndexNode",
      test: ea
    },
    {
      name: "Node",
      test: bt
    },
    {
      name: "ObjectNode",
      test: Us
    },
    {
      name: "OperatorNode",
      test: kt
    },
    {
      name: "ParenthesisNode",
      test: En
    },
    {
      name: "RangeNode",
      test: dg
    },
    {
      name: "RelationalNode",
      test: mg
    },
    {
      name: "SymbolNode",
      test: Zt
    },
    {
      name: "Map",
      test: qi
    },
    {
      name: "Object",
      test: ji
    }
    // order 'Object' last, it matches on other classes too
  ]), s.addConversions([{
    from: "number",
    to: "BigNumber",
    convert: function(l) {
      if (t || eo(l), Rx(l) > 15)
        throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: " + l + "). Use function bignumber(x) to convert to BigNumber.");
      return new t(l);
    }
  }, {
    from: "number",
    to: "Complex",
    convert: function(l) {
      return n || to(l), new n(l, 0);
    }
  }, {
    from: "BigNumber",
    to: "Complex",
    convert: function(l) {
      return n || to(l), new n(l.toNumber(), 0);
    }
  }, {
    from: "bigint",
    to: "number",
    convert: function(l) {
      if (l > Number.MAX_SAFE_INTEGER)
        throw new TypeError("Cannot implicitly convert bigint to number: value exceeds the max safe integer value (value: " + l + ")");
      return Number(l);
    }
  }, {
    from: "bigint",
    to: "BigNumber",
    convert: function(l) {
      return t || eo(l), new t(l.toString());
    }
  }, {
    from: "bigint",
    to: "Fraction",
    convert: function(l) {
      return a || ro(l), new a(l);
    }
  }, {
    from: "Fraction",
    to: "BigNumber",
    convert: function(l) {
      throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");
    }
  }, {
    from: "Fraction",
    to: "Complex",
    convert: function(l) {
      return n || to(l), new n(l.valueOf(), 0);
    }
  }, {
    from: "number",
    to: "Fraction",
    convert: function(l) {
      a || ro(l);
      var u = new a(l);
      if (u.valueOf() !== l)
        throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: " + l + "). Use function fraction(x) to convert to Fraction.");
      return u;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: "string",
    to: "number",
    convert: function(l) {
      var u = Number(l);
      if (isNaN(u))
        throw new Error('Cannot convert "' + l + '" to a number');
      return u;
    }
  }, {
    from: "string",
    to: "BigNumber",
    convert: function(l) {
      t || eo(l);
      try {
        return new t(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to BigNumber');
      }
    }
  }, {
    from: "string",
    to: "bigint",
    convert: function(l) {
      try {
        return BigInt(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to BigInt');
      }
    }
  }, {
    from: "string",
    to: "Fraction",
    convert: function(l) {
      a || ro(l);
      try {
        return new a(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to Fraction');
      }
    }
  }, {
    from: "string",
    to: "Complex",
    convert: function(l) {
      n || to(l);
      try {
        return new n(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to Complex');
      }
    }
  }, {
    from: "boolean",
    to: "number",
    convert: function(l) {
      return +l;
    }
  }, {
    from: "boolean",
    to: "BigNumber",
    convert: function(l) {
      return t || eo(l), new t(+l);
    }
  }, {
    from: "boolean",
    to: "bigint",
    convert: function(l) {
      return BigInt(+l);
    }
  }, {
    from: "boolean",
    to: "Fraction",
    convert: function(l) {
      return a || ro(l), new a(+l);
    }
  }, {
    from: "boolean",
    to: "string",
    convert: function(l) {
      return String(l);
    }
  }, {
    from: "Array",
    to: "Matrix",
    convert: function(l) {
      return i || Hx(), new i(l);
    }
  }, {
    from: "Matrix",
    to: "Array",
    convert: function(l) {
      return l.valueOf();
    }
  }]), s.onMismatch = (o, l, u) => {
    var c = s.createError(o, l, u);
    if (["wrongType", "mismatch"].includes(c.data.category) && l.length === 1 && kr(l[0]) && // check if the function can be unary:
    u.some((h) => !h.params.includes(","))) {
      var f = new TypeError("Function '".concat(o, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(o, ")'."));
      throw f.data = c.data, f;
    }
    throw c;
  }, s.onMismatch = (o, l, u) => {
    var c = s.createError(o, l, u);
    if (["wrongType", "mismatch"].includes(c.data.category) && l.length === 1 && kr(l[0]) && // check if the function can be unary:
    u.some((h) => !h.params.includes(","))) {
      var f = new TypeError("Function '".concat(o, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(o, ")'."));
      throw f.data = c.data, f;
    }
    throw c;
  }, s;
});
function eo(r) {
  throw new Error("Cannot convert value ".concat(r, " into a BigNumber: no class 'BigNumber' provided"));
}
function to(r) {
  throw new Error("Cannot convert value ".concat(r, " into a Complex number: no class 'Complex' provided"));
}
function Hx() {
  throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided");
}
function ro(r) {
  throw new Error("Cannot convert value ".concat(r, " into a Fraction, no class 'Fraction' provided."));
}
var Gx = "ResultSet", $x = [], Vx = /* @__PURE__ */ W(Gx, $x, () => {
  function r(e) {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
    this.entries = e || [];
  }
  return r.prototype.type = "ResultSet", r.prototype.isResultSet = !0, r.prototype.valueOf = function() {
    return this.entries;
  }, r.prototype.toString = function() {
    return "[" + this.entries.map(String).join(", ") + "]";
  }, r.prototype.toJSON = function() {
    return {
      mathjs: "ResultSet",
      entries: this.entries
    };
  }, r.fromJSON = function(e) {
    return new r(e.entries);
  }, r;
}, {
  isClass: !0
});
/*!
 *  decimal.js v10.6.0
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */
var Ta = 9e15, _i = 1e9, jl = "0123456789abcdef", su = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", ou = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", ec = {
  // These values must be integers within the stated ranges (inclusive).
  // Most of these values can be changed at run-time using the `Decimal.config` method.
  // The maximum number of significant digits of the result of a calculation or base conversion.
  // E.g. `Decimal.config({ precision: 20 });`
  precision: 20,
  // 1 to MAX_DIGITS
  // The rounding mode used when rounding to `precision`.
  //
  // ROUND_UP         0 Away from zero.
  // ROUND_DOWN       1 Towards zero.
  // ROUND_CEIL       2 Towards +Infinity.
  // ROUND_FLOOR      3 Towards -Infinity.
  // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
  // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
  // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
  // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
  // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
  //
  // E.g.
  // `Decimal.rounding = 4;`
  // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
  rounding: 4,
  // 0 to 8
  // The modulo mode used when calculating the modulus: a mod n.
  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
  // The remainder (r) is calculated as: r = a - n * q.
  //
  // UP         0 The remainder is positive if the dividend is negative, else is negative.
  // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
  // FLOOR      3 The remainder has the same sign as the divisor (Python %).
  // HALF_EVEN  6 The IEEE 754 remainder function.
  // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
  //
  // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
  // division (9) are commonly used for the modulus operation. The other rounding modes can also
  // be used, but they may not give useful results.
  modulo: 1,
  // 0 to 9
  // The exponent value at and beneath which `toString` returns exponential notation.
  // JavaScript numbers: -7
  toExpNeg: -7,
  // 0 to -EXP_LIMIT
  // The exponent value at and above which `toString` returns exponential notation.
  // JavaScript numbers: 21
  toExpPos: 21,
  // 0 to EXP_LIMIT
  // The minimum exponent value, beneath which underflow to zero occurs.
  // JavaScript numbers: -324  (5e-324)
  minE: -Ta,
  // -1 to -EXP_LIMIT
  // The maximum exponent value, above which overflow to Infinity occurs.
  // JavaScript numbers: 308  (1.7976931348623157e+308)
  maxE: Ta,
  // 1 to EXP_LIMIT
  // Whether to use cryptographically-secure random number generation, if available.
  crypto: !1
  // true/false
}, Eg, zn, tt = !0, Pu = "[DecimalError] ", di = Pu + "Invalid argument: ", Mg = Pu + "Precision limit exceeded", Ag = Pu + "crypto unavailable", Dg = "[object Decimal]", gr = Math.floor, Yt = Math.pow, qx = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, Wx = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, Xx = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, Cg = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, hn = 1e7, Ke = 7, Yx = 9007199254740991, Zx = su.length - 1, tc = ou.length - 1, Ce = { toStringTag: Dg };
Ce.absoluteValue = Ce.abs = function() {
  var r = new this.constructor(this);
  return r.s < 0 && (r.s = 1), We(r);
};
Ce.ceil = function() {
  return We(new this.constructor(this), this.e + 1, 2);
};
Ce.clampedTo = Ce.clamp = function(r, e) {
  var t, n = this, i = n.constructor;
  if (r = new i(r), e = new i(e), !r.s || !e.s) return new i(NaN);
  if (r.gt(e)) throw Error(di + e);
  return t = n.cmp(r), t < 0 ? r : n.cmp(e) > 0 ? e : new i(n);
};
Ce.comparedTo = Ce.cmp = function(r) {
  var e, t, n, i, a = this, s = a.d, o = (r = new a.constructor(r)).d, l = a.s, u = r.s;
  if (!s || !o)
    return !l || !u ? NaN : l !== u ? l : s === o ? 0 : !s ^ l < 0 ? 1 : -1;
  if (!s[0] || !o[0]) return s[0] ? l : o[0] ? -u : 0;
  if (l !== u) return l;
  if (a.e !== r.e) return a.e > r.e ^ l < 0 ? 1 : -1;
  for (n = s.length, i = o.length, e = 0, t = n < i ? n : i; e < t; ++e)
    if (s[e] !== o[e]) return s[e] > o[e] ^ l < 0 ? 1 : -1;
  return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;
};
Ce.cosine = Ce.cos = function() {
  var r, e, t = this, n = t.constructor;
  return t.d ? t.d[0] ? (r = n.precision, e = n.rounding, n.precision = r + Math.max(t.e, t.sd()) + Ke, n.rounding = 1, t = Kx(n, Og(n, t)), n.precision = r, n.rounding = e, We(zn == 2 || zn == 3 ? t.neg() : t, r, e, !0)) : new n(1) : new n(NaN);
};
Ce.cubeRoot = Ce.cbrt = function() {
  var r, e, t, n, i, a, s, o, l, u, c = this, f = c.constructor;
  if (!c.isFinite() || c.isZero()) return new f(c);
  for (tt = !1, a = c.s * Yt(c.s * c, 1 / 3), !a || Math.abs(a) == 1 / 0 ? (t = or(c.d), r = c.e, (a = (r - t.length + 1) % 3) && (t += a == 1 || a == -2 ? "0" : "00"), a = Yt(t, 1 / 3), r = gr((r + 1) / 3) - (r % 3 == (r < 0 ? -1 : 2)), a == 1 / 0 ? t = "5e" + r : (t = a.toExponential(), t = t.slice(0, t.indexOf("e") + 1) + r), n = new f(t), n.s = c.s) : n = new f(a.toString()), s = (r = f.precision) + 3; ; )
    if (o = n, l = o.times(o).times(o), u = l.plus(c), n = Ot(u.plus(c).times(o), u.plus(l), s + 2, 1), or(o.d).slice(0, s) === (t = or(n.d)).slice(0, s))
      if (t = t.slice(s - 3, s + 1), t == "9999" || !i && t == "4999") {
        if (!i && (We(o, r + 1, 0), o.times(o).times(o).eq(c))) {
          n = o;
          break;
        }
        s += 4, i = 1;
      } else {
        (!+t || !+t.slice(1) && t.charAt(0) == "5") && (We(n, r + 1, 1), e = !n.times(n).times(n).eq(c));
        break;
      }
  return tt = !0, We(n, r, f.rounding, e);
};
Ce.decimalPlaces = Ce.dp = function() {
  var r, e = this.d, t = NaN;
  if (e) {
    if (r = e.length - 1, t = (r - gr(this.e / Ke)) * Ke, r = e[r], r) for (; r % 10 == 0; r /= 10) t--;
    t < 0 && (t = 0);
  }
  return t;
};
Ce.dividedBy = Ce.div = function(r) {
  return Ot(this, new this.constructor(r));
};
Ce.dividedToIntegerBy = Ce.divToInt = function(r) {
  var e = this, t = e.constructor;
  return We(Ot(e, new t(r), 0, 1, 1), t.precision, t.rounding);
};
Ce.equals = Ce.eq = function(r) {
  return this.cmp(r) === 0;
};
Ce.floor = function() {
  return We(new this.constructor(this), this.e + 1, 3);
};
Ce.greaterThan = Ce.gt = function(r) {
  return this.cmp(r) > 0;
};
Ce.greaterThanOrEqualTo = Ce.gte = function(r) {
  var e = this.cmp(r);
  return e == 1 || e === 0;
};
Ce.hyperbolicCosine = Ce.cosh = function() {
  var r, e, t, n, i, a = this, s = a.constructor, o = new s(1);
  if (!a.isFinite()) return new s(a.s ? 1 / 0 : NaN);
  if (a.isZero()) return o;
  t = s.precision, n = s.rounding, s.precision = t + Math.max(a.e, a.sd()) + 4, s.rounding = 1, i = a.d.length, i < 32 ? (r = Math.ceil(i / 3), e = (1 / Iu(4, r)).toString()) : (r = 16, e = "2.3283064365386962890625e-10"), a = Ha(s, 1, a.times(e), new s(1), !0);
  for (var l, u = r, c = new s(8); u--; )
    l = a.times(a), a = o.minus(l.times(c.minus(l.times(c))));
  return We(a, s.precision = t, s.rounding = n, !0);
};
Ce.hyperbolicSine = Ce.sinh = function() {
  var r, e, t, n, i = this, a = i.constructor;
  if (!i.isFinite() || i.isZero()) return new a(i);
  if (e = a.precision, t = a.rounding, a.precision = e + Math.max(i.e, i.sd()) + 4, a.rounding = 1, n = i.d.length, n < 3)
    i = Ha(a, 2, i, i, !0);
  else {
    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, i = i.times(1 / Iu(5, r)), i = Ha(a, 2, i, i, !0);
    for (var s, o = new a(5), l = new a(16), u = new a(20); r--; )
      s = i.times(i), i = i.times(o.plus(s.times(l.times(s).plus(u))));
  }
  return a.precision = e, a.rounding = t, We(i, e, t, !0);
};
Ce.hyperbolicTangent = Ce.tanh = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 7, n.rounding = 1, Ot(t.sinh(), t.cosh(), n.precision = r, n.rounding = e)) : new n(t.s);
};
Ce.inverseCosine = Ce.acos = function() {
  var r = this, e = r.constructor, t = r.abs().cmp(1), n = e.precision, i = e.rounding;
  return t !== -1 ? t === 0 ? r.isNeg() ? _n(e, n, i) : new e(0) : new e(NaN) : r.isZero() ? _n(e, n + 4, i).times(0.5) : (e.precision = n + 6, e.rounding = 1, r = new e(1).minus(r).div(r.plus(1)).sqrt().atan(), e.precision = n, e.rounding = i, r.times(2));
};
Ce.inverseHyperbolicCosine = Ce.acosh = function() {
  var r, e, t = this, n = t.constructor;
  return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (r = n.precision, e = n.rounding, n.precision = r + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, tt = !1, t = t.times(t).minus(1).sqrt().plus(t), tt = !0, n.precision = r, n.rounding = e, t.ln()) : new n(t);
};
Ce.inverseHyperbolicSine = Ce.asinh = function() {
  var r, e, t = this, n = t.constructor;
  return !t.isFinite() || t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, tt = !1, t = t.times(t).plus(1).sqrt().plus(t), tt = !0, n.precision = r, n.rounding = e, t.ln());
};
Ce.inverseHyperbolicTangent = Ce.atanh = function() {
  var r, e, t, n, i = this, a = i.constructor;
  return i.isFinite() ? i.e >= 0 ? new a(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (r = a.precision, e = a.rounding, n = i.sd(), Math.max(n, r) < 2 * -i.e - 1 ? We(new a(i), r, e, !0) : (a.precision = t = n - i.e, i = Ot(i.plus(1), new a(1).minus(i), t + r, 1), a.precision = r + 4, a.rounding = 1, i = i.ln(), a.precision = r, a.rounding = e, i.times(0.5))) : new a(NaN);
};
Ce.inverseSine = Ce.asin = function() {
  var r, e, t, n, i = this, a = i.constructor;
  return i.isZero() ? new a(i) : (e = i.abs().cmp(1), t = a.precision, n = a.rounding, e !== -1 ? e === 0 ? (r = _n(a, t + 4, n).times(0.5), r.s = i.s, r) : new a(NaN) : (a.precision = t + 6, a.rounding = 1, i = i.div(new a(1).minus(i.times(i)).sqrt().plus(1)).atan(), a.precision = t, a.rounding = n, i.times(2)));
};
Ce.inverseTangent = Ce.atan = function() {
  var r, e, t, n, i, a, s, o, l, u = this, c = u.constructor, f = c.precision, h = c.rounding;
  if (u.isFinite()) {
    if (u.isZero())
      return new c(u);
    if (u.abs().eq(1) && f + 4 <= tc)
      return s = _n(c, f + 4, h).times(0.25), s.s = u.s, s;
  } else {
    if (!u.s) return new c(NaN);
    if (f + 4 <= tc)
      return s = _n(c, f + 4, h).times(0.5), s.s = u.s, s;
  }
  for (c.precision = o = f + 10, c.rounding = 1, t = Math.min(28, o / Ke + 2 | 0), r = t; r; --r) u = u.div(u.times(u).plus(1).sqrt().plus(1));
  for (tt = !1, e = Math.ceil(o / Ke), n = 1, l = u.times(u), s = new c(u), i = u; r !== -1; )
    if (i = i.times(l), a = s.minus(i.div(n += 2)), i = i.times(l), s = a.plus(i.div(n += 2)), s.d[e] !== void 0) for (r = e; s.d[r] === a.d[r] && r--; ) ;
  return t && (s = s.times(2 << t - 1)), tt = !0, We(s, c.precision = f, c.rounding = h, !0);
};
Ce.isFinite = function() {
  return !!this.d;
};
Ce.isInteger = Ce.isInt = function() {
  return !!this.d && gr(this.e / Ke) > this.d.length - 2;
};
Ce.isNaN = function() {
  return !this.s;
};
Ce.isNegative = Ce.isNeg = function() {
  return this.s < 0;
};
Ce.isPositive = Ce.isPos = function() {
  return this.s > 0;
};
Ce.isZero = function() {
  return !!this.d && this.d[0] === 0;
};
Ce.lessThan = Ce.lt = function(r) {
  return this.cmp(r) < 0;
};
Ce.lessThanOrEqualTo = Ce.lte = function(r) {
  return this.cmp(r) < 1;
};
Ce.logarithm = Ce.log = function(r) {
  var e, t, n, i, a, s, o, l, u = this, c = u.constructor, f = c.precision, h = c.rounding, d = 5;
  if (r == null)
    r = new c(10), e = !0;
  else {
    if (r = new c(r), t = r.d, r.s < 0 || !t || !t[0] || r.eq(1)) return new c(NaN);
    e = r.eq(10);
  }
  if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1))
    return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);
  if (e)
    if (t.length > 1)
      a = !0;
    else {
      for (i = t[0]; i % 10 === 0; ) i /= 10;
      a = i !== 1;
    }
  if (tt = !1, o = f + d, s = oi(u, o), n = e ? uu(c, o + 10) : oi(r, o), l = Ot(s, n, o, 1), Ts(l.d, i = f, h))
    do
      if (o += 10, s = oi(u, o), n = e ? uu(c, o + 10) : oi(r, o), l = Ot(s, n, o, 1), !a) {
        +or(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = We(l, f + 1, 0));
        break;
      }
    while (Ts(l.d, i += 10, h));
  return tt = !0, We(l, f, h);
};
Ce.minus = Ce.sub = function(r) {
  var e, t, n, i, a, s, o, l, u, c, f, h, d = this, m = d.constructor;
  if (r = new m(r), !d.d || !r.d)
    return !d.s || !r.s ? r = new m(NaN) : d.d ? r.s = -r.s : r = new m(r.d || d.s !== r.s ? d : NaN), r;
  if (d.s != r.s)
    return r.s = -r.s, d.plus(r);
  if (u = d.d, h = r.d, o = m.precision, l = m.rounding, !u[0] || !h[0]) {
    if (h[0]) r.s = -r.s;
    else if (u[0]) r = new m(d);
    else return new m(l === 3 ? -0 : 0);
    return tt ? We(r, o, l) : r;
  }
  if (t = gr(r.e / Ke), c = gr(d.e / Ke), u = u.slice(), a = c - t, a) {
    for (f = a < 0, f ? (e = u, a = -a, s = h.length) : (e = h, t = c, s = u.length), n = Math.max(Math.ceil(o / Ke), s) + 2, a > n && (a = n, e.length = 1), e.reverse(), n = a; n--; ) e.push(0);
    e.reverse();
  } else {
    for (n = u.length, s = h.length, f = n < s, f && (s = n), n = 0; n < s; n++)
      if (u[n] != h[n]) {
        f = u[n] < h[n];
        break;
      }
    a = 0;
  }
  for (f && (e = u, u = h, h = e, r.s = -r.s), s = u.length, n = h.length - s; n > 0; --n) u[s++] = 0;
  for (n = h.length; n > a; ) {
    if (u[--n] < h[n]) {
      for (i = n; i && u[--i] === 0; ) u[i] = hn - 1;
      --u[i], u[n] += hn;
    }
    u[n] -= h[n];
  }
  for (; u[--s] === 0; ) u.pop();
  for (; u[0] === 0; u.shift()) --t;
  return u[0] ? (r.d = u, r.e = Bu(u, t), tt ? We(r, o, l) : r) : new m(l === 3 ? -0 : 0);
};
Ce.modulo = Ce.mod = function(r) {
  var e, t = this, n = t.constructor;
  return r = new n(r), !t.d || !r.s || r.d && !r.d[0] ? new n(NaN) : !r.d || t.d && !t.d[0] ? We(new n(t), n.precision, n.rounding) : (tt = !1, n.modulo == 9 ? (e = Ot(t, r.abs(), 0, 3, 1), e.s *= r.s) : e = Ot(t, r, 0, n.modulo, 1), e = e.times(r), tt = !0, t.minus(e));
};
Ce.naturalExponential = Ce.exp = function() {
  return rc(this);
};
Ce.naturalLogarithm = Ce.ln = function() {
  return oi(this);
};
Ce.negated = Ce.neg = function() {
  var r = new this.constructor(this);
  return r.s = -r.s, We(r);
};
Ce.plus = Ce.add = function(r) {
  var e, t, n, i, a, s, o, l, u, c, f = this, h = f.constructor;
  if (r = new h(r), !f.d || !r.d)
    return !f.s || !r.s ? r = new h(NaN) : f.d || (r = new h(r.d || f.s === r.s ? f : NaN)), r;
  if (f.s != r.s)
    return r.s = -r.s, f.minus(r);
  if (u = f.d, c = r.d, o = h.precision, l = h.rounding, !u[0] || !c[0])
    return c[0] || (r = new h(f)), tt ? We(r, o, l) : r;
  if (a = gr(f.e / Ke), n = gr(r.e / Ke), u = u.slice(), i = a - n, i) {
    for (i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = a, s = u.length), a = Math.ceil(o / Ke), s = a > s ? a + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--; ) t.push(0);
    t.reverse();
  }
  for (s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), e = 0; i; )
    e = (u[--i] = u[i] + c[i] + e) / hn | 0, u[i] %= hn;
  for (e && (u.unshift(e), ++n), s = u.length; u[--s] == 0; ) u.pop();
  return r.d = u, r.e = Bu(u, n), tt ? We(r, o, l) : r;
};
Ce.precision = Ce.sd = function(r) {
  var e, t = this;
  if (r !== void 0 && r !== !!r && r !== 1 && r !== 0) throw Error(di + r);
  return t.d ? (e = Tg(t.d), r && t.e + 1 > e && (e = t.e + 1)) : e = NaN, e;
};
Ce.round = function() {
  var r = this, e = r.constructor;
  return We(new e(r), r.e + 1, e.rounding);
};
Ce.sine = Ce.sin = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + Math.max(t.e, t.sd()) + Ke, n.rounding = 1, t = Qx(n, Og(n, t)), n.precision = r, n.rounding = e, We(zn > 2 ? t.neg() : t, r, e, !0)) : new n(NaN);
};
Ce.squareRoot = Ce.sqrt = function() {
  var r, e, t, n, i, a, s = this, o = s.d, l = s.e, u = s.s, c = s.constructor;
  if (u !== 1 || !o || !o[0])
    return new c(!u || u < 0 && (!o || o[0]) ? NaN : o ? s : 1 / 0);
  for (tt = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (e = or(o), (e.length + l) % 2 == 0 && (e += "0"), u = Math.sqrt(e), l = gr((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? e = "5e" + l : (e = u.toExponential(), e = e.slice(0, e.indexOf("e") + 1) + l), n = new c(e)) : n = new c(u.toString()), t = (l = c.precision) + 3; ; )
    if (a = n, n = a.plus(Ot(s, a, t + 2, 1)).times(0.5), or(a.d).slice(0, t) === (e = or(n.d)).slice(0, t))
      if (e = e.slice(t - 3, t + 1), e == "9999" || !i && e == "4999") {
        if (!i && (We(a, l + 1, 0), a.times(a).eq(s))) {
          n = a;
          break;
        }
        t += 4, i = 1;
      } else {
        (!+e || !+e.slice(1) && e.charAt(0) == "5") && (We(n, l + 1, 1), r = !n.times(n).eq(s));
        break;
      }
  return tt = !0, We(n, l, c.rounding, r);
};
Ce.tangent = Ce.tan = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = Ot(t, new n(1).minus(t.times(t)).sqrt(), r + 10, 0), n.precision = r, n.rounding = e, We(zn == 2 || zn == 4 ? t.neg() : t, r, e, !0)) : new n(NaN);
};
Ce.times = Ce.mul = function(r) {
  var e, t, n, i, a, s, o, l, u, c = this, f = c.constructor, h = c.d, d = (r = new f(r)).d;
  if (r.s *= c.s, !h || !h[0] || !d || !d[0])
    return new f(!r.s || h && !h[0] && !d || d && !d[0] && !h ? NaN : !h || !d ? r.s / 0 : r.s * 0);
  for (t = gr(c.e / Ke) + gr(r.e / Ke), l = h.length, u = d.length, l < u && (a = h, h = d, d = a, s = l, l = u, u = s), a = [], s = l + u, n = s; n--; ) a.push(0);
  for (n = u; --n >= 0; ) {
    for (e = 0, i = l + n; i > n; )
      o = a[i] + d[n] * h[i - n - 1] + e, a[i--] = o % hn | 0, e = o / hn | 0;
    a[i] = (a[i] + e) % hn | 0;
  }
  for (; !a[--s]; ) a.pop();
  return e ? ++t : a.shift(), r.d = a, r.e = Bu(a, t), tt ? We(r, f.precision, f.rounding) : r;
};
Ce.toBinary = function(r, e) {
  return gf(this, 2, r, e);
};
Ce.toDecimalPlaces = Ce.toDP = function(r, e) {
  var t = this, n = t.constructor;
  return t = new n(t), r === void 0 ? t : (Rr(r, 0, _i), e === void 0 ? e = n.rounding : Rr(e, 0, 8), We(t, r + t.e + 1, e));
};
Ce.toExponential = function(r, e) {
  var t, n = this, i = n.constructor;
  return r === void 0 ? t = Mn(n, !0) : (Rr(r, 0, _i), e === void 0 ? e = i.rounding : Rr(e, 0, 8), n = We(new i(n), r + 1, e), t = Mn(n, !0, r + 1)), n.isNeg() && !n.isZero() ? "-" + t : t;
};
Ce.toFixed = function(r, e) {
  var t, n, i = this, a = i.constructor;
  return r === void 0 ? t = Mn(i) : (Rr(r, 0, _i), e === void 0 ? e = a.rounding : Rr(e, 0, 8), n = We(new a(i), r + i.e + 1, e), t = Mn(n, !1, r + n.e + 1)), i.isNeg() && !i.isZero() ? "-" + t : t;
};
Ce.toFraction = function(r) {
  var e, t, n, i, a, s, o, l, u, c, f, h, d = this, m = d.d, p = d.constructor;
  if (!m) return new p(d);
  if (u = t = new p(1), n = l = new p(0), e = new p(n), a = e.e = Tg(m) - d.e - 1, s = a % Ke, e.d[0] = Yt(10, s < 0 ? Ke + s : s), r == null)
    r = a > 0 ? e : u;
  else {
    if (o = new p(r), !o.isInt() || o.lt(u)) throw Error(di + o);
    r = o.gt(e) ? a > 0 ? e : u : o;
  }
  for (tt = !1, o = new p(or(m)), c = p.precision, p.precision = a = m.length * Ke * 2; f = Ot(o, e, 0, 1, 1), i = t.plus(f.times(n)), i.cmp(r) != 1; )
    t = n, n = i, i = u, u = l.plus(f.times(i)), l = i, i = e, e = o.minus(f.times(i)), o = i;
  return i = Ot(r.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = d.s, h = Ot(u, n, a, 1).minus(d).abs().cmp(Ot(l, t, a, 1).minus(d).abs()) < 1 ? [u, n] : [l, t], p.precision = c, tt = !0, h;
};
Ce.toHexadecimal = Ce.toHex = function(r, e) {
  return gf(this, 16, r, e);
};
Ce.toNearest = function(r, e) {
  var t = this, n = t.constructor;
  if (t = new n(t), r == null) {
    if (!t.d) return t;
    r = new n(1), e = n.rounding;
  } else {
    if (r = new n(r), e === void 0 ? e = n.rounding : Rr(e, 0, 8), !t.d) return r.s ? t : r;
    if (!r.d)
      return r.s && (r.s = t.s), r;
  }
  return r.d[0] ? (tt = !1, t = Ot(t, r, 0, e, 1).times(r), tt = !0, We(t)) : (r.s = t.s, t = r), t;
};
Ce.toNumber = function() {
  return +this;
};
Ce.toOctal = function(r, e) {
  return gf(this, 8, r, e);
};
Ce.toPower = Ce.pow = function(r) {
  var e, t, n, i, a, s, o = this, l = o.constructor, u = +(r = new l(r));
  if (!o.d || !r.d || !o.d[0] || !r.d[0]) return new l(Yt(+o, u));
  if (o = new l(o), o.eq(1)) return o;
  if (n = l.precision, a = l.rounding, r.eq(1)) return We(o, n, a);
  if (e = gr(r.e / Ke), e >= r.d.length - 1 && (t = u < 0 ? -u : u) <= Yx)
    return i = Ng(l, o, t, n), r.s < 0 ? new l(1).div(i) : We(i, n, a);
  if (s = o.s, s < 0) {
    if (e < r.d.length - 1) return new l(NaN);
    if ((r.d[e] & 1) == 0 && (s = 1), o.e == 0 && o.d[0] == 1 && o.d.length == 1)
      return o.s = s, o;
  }
  return t = Yt(+o, u), e = t == 0 || !isFinite(t) ? gr(u * (Math.log("0." + or(o.d)) / Math.LN10 + o.e + 1)) : new l(t + "").e, e > l.maxE + 1 || e < l.minE - 1 ? new l(e > 0 ? s / 0 : 0) : (tt = !1, l.rounding = o.s = 1, t = Math.min(12, (e + "").length), i = rc(r.times(oi(o, n + t)), n), i.d && (i = We(i, n + 5, 1), Ts(i.d, n, a) && (e = n + 10, i = We(rc(r.times(oi(o, e + t)), e), e + 5, 1), +or(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = We(i, n + 1, 0)))), i.s = s, tt = !0, l.rounding = a, We(i, n, a));
};
Ce.toPrecision = function(r, e) {
  var t, n = this, i = n.constructor;
  return r === void 0 ? t = Mn(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (Rr(r, 1, _i), e === void 0 ? e = i.rounding : Rr(e, 0, 8), n = We(new i(n), r, e), t = Mn(n, r <= n.e || n.e <= i.toExpNeg, r)), n.isNeg() && !n.isZero() ? "-" + t : t;
};
Ce.toSignificantDigits = Ce.toSD = function(r, e) {
  var t = this, n = t.constructor;
  return r === void 0 ? (r = n.precision, e = n.rounding) : (Rr(r, 1, _i), e === void 0 ? e = n.rounding : Rr(e, 0, 8)), We(new n(t), r, e);
};
Ce.toString = function() {
  var r = this, e = r.constructor, t = Mn(r, r.e <= e.toExpNeg || r.e >= e.toExpPos);
  return r.isNeg() && !r.isZero() ? "-" + t : t;
};
Ce.truncated = Ce.trunc = function() {
  return We(new this.constructor(this), this.e + 1, 1);
};
Ce.valueOf = Ce.toJSON = function() {
  var r = this, e = r.constructor, t = Mn(r, r.e <= e.toExpNeg || r.e >= e.toExpPos);
  return r.isNeg() ? "-" + t : t;
};
function or(r) {
  var e, t, n, i = r.length - 1, a = "", s = r[0];
  if (i > 0) {
    for (a += s, e = 1; e < i; e++)
      n = r[e] + "", t = Ke - n.length, t && (a += ti(t)), a += n;
    s = r[e], n = s + "", t = Ke - n.length, t && (a += ti(t));
  } else if (s === 0)
    return "0";
  for (; s % 10 === 0; ) s /= 10;
  return a + s;
}
function Rr(r, e, t) {
  if (r !== ~~r || r < e || r > t)
    throw Error(di + r);
}
function Ts(r, e, t, n) {
  var i, a, s, o;
  for (a = r[0]; a >= 10; a /= 10) --e;
  return --e < 0 ? (e += Ke, i = 0) : (i = Math.ceil((e + 1) / Ke), e %= Ke), a = Yt(10, Ke - e), o = r[i] % a | 0, n == null ? e < 3 ? (e == 0 ? o = o / 100 | 0 : e == 1 && (o = o / 10 | 0), s = t < 4 && o == 99999 || t > 3 && o == 49999 || o == 5e4 || o == 0) : s = (t < 4 && o + 1 == a || t > 3 && o + 1 == a / 2) && (r[i + 1] / a / 100 | 0) == Yt(10, e - 2) - 1 || (o == a / 2 || o == 0) && (r[i + 1] / a / 100 | 0) == 0 : e < 4 ? (e == 0 ? o = o / 1e3 | 0 : e == 1 ? o = o / 100 | 0 : e == 2 && (o = o / 10 | 0), s = (n || t < 4) && o == 9999 || !n && t > 3 && o == 4999) : s = ((n || t < 4) && o + 1 == a || !n && t > 3 && o + 1 == a / 2) && (r[i + 1] / a / 1e3 | 0) == Yt(10, e - 3) - 1, s;
}
function Vo(r, e, t) {
  for (var n, i = [0], a, s = 0, o = r.length; s < o; ) {
    for (a = i.length; a--; ) i[a] *= e;
    for (i[0] += jl.indexOf(r.charAt(s++)), n = 0; n < i.length; n++)
      i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);
  }
  return i.reverse();
}
function Kx(r, e) {
  var t, n, i;
  if (e.isZero()) return e;
  n = e.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / Iu(4, t)).toString()) : (t = 16, i = "2.3283064365386962890625e-10"), r.precision += t, e = Ha(r, 1, e.times(i), new r(1));
  for (var a = t; a--; ) {
    var s = e.times(e);
    e = s.times(s).minus(s).times(8).plus(1);
  }
  return r.precision -= t, e;
}
var Ot = /* @__PURE__ */ function() {
  function r(n, i, a) {
    var s, o = 0, l = n.length;
    for (n = n.slice(); l--; )
      s = n[l] * i + o, n[l] = s % a | 0, o = s / a | 0;
    return o && n.unshift(o), n;
  }
  function e(n, i, a, s) {
    var o, l;
    if (a != s)
      l = a > s ? 1 : -1;
    else
      for (o = l = 0; o < a; o++)
        if (n[o] != i[o]) {
          l = n[o] > i[o] ? 1 : -1;
          break;
        }
    return l;
  }
  function t(n, i, a, s) {
    for (var o = 0; a--; )
      n[a] -= o, o = n[a] < i[a] ? 1 : 0, n[a] = o * s + n[a] - i[a];
    for (; !n[0] && n.length > 1; ) n.shift();
  }
  return function(n, i, a, s, o, l) {
    var u, c, f, h, d, m, p, g, v, S, x, y, b, _, M, A, w, E, D, T, R = n.constructor, B = n.s == i.s ? 1 : -1, I = n.d, C = i.d;
    if (!I || !I[0] || !C || !C[0])
      return new R(
        // Return NaN if either NaN, or both Infinity or 0.
        !n.s || !i.s || (I ? C && I[0] == C[0] : !C) ? NaN : (
          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          I && I[0] == 0 || !C ? B * 0 : B / 0
        )
      );
    for (l ? (d = 1, c = n.e - i.e) : (l = hn, d = Ke, c = gr(n.e / d) - gr(i.e / d)), D = C.length, w = I.length, v = new R(B), S = v.d = [], f = 0; C[f] == (I[f] || 0); f++) ;
    if (C[f] > (I[f] || 0) && c--, a == null ? (_ = a = R.precision, s = R.rounding) : o ? _ = a + (n.e - i.e) + 1 : _ = a, _ < 0)
      S.push(1), m = !0;
    else {
      if (_ = _ / d + 2 | 0, f = 0, D == 1) {
        for (h = 0, C = C[0], _++; (f < w || h) && _--; f++)
          M = h * l + (I[f] || 0), S[f] = M / C | 0, h = M % C | 0;
        m = h || f < w;
      } else {
        for (h = l / (C[0] + 1) | 0, h > 1 && (C = r(C, h, l), I = r(I, h, l), D = C.length, w = I.length), A = D, x = I.slice(0, D), y = x.length; y < D; ) x[y++] = 0;
        T = C.slice(), T.unshift(0), E = C[0], C[1] >= l / 2 && ++E;
        do
          h = 0, u = e(C, x, D, y), u < 0 ? (b = x[0], D != y && (b = b * l + (x[1] || 0)), h = b / E | 0, h > 1 ? (h >= l && (h = l - 1), p = r(C, h, l), g = p.length, y = x.length, u = e(p, x, g, y), u == 1 && (h--, t(p, D < g ? T : C, g, l))) : (h == 0 && (u = h = 1), p = C.slice()), g = p.length, g < y && p.unshift(0), t(x, p, y, l), u == -1 && (y = x.length, u = e(C, x, D, y), u < 1 && (h++, t(x, D < y ? T : C, y, l))), y = x.length) : u === 0 && (h++, x = [0]), S[f++] = h, u && x[0] ? x[y++] = I[A] || 0 : (x = [I[A]], y = 1);
        while ((A++ < w || x[0] !== void 0) && _--);
        m = x[0] !== void 0;
      }
      S[0] || S.shift();
    }
    if (d == 1)
      v.e = c, Eg = m;
    else {
      for (f = 1, h = S[0]; h >= 10; h /= 10) f++;
      v.e = f + c * d - 1, We(v, o ? a + v.e + 1 : a, s, m);
    }
    return v;
  };
}();
function We(r, e, t, n) {
  var i, a, s, o, l, u, c, f, h, d = r.constructor;
  e: if (e != null) {
    if (f = r.d, !f) return r;
    for (i = 1, o = f[0]; o >= 10; o /= 10) i++;
    if (a = e - i, a < 0)
      a += Ke, s = e, c = f[h = 0], l = c / Yt(10, i - s - 1) % 10 | 0;
    else if (h = Math.ceil((a + 1) / Ke), o = f.length, h >= o)
      if (n) {
        for (; o++ <= h; ) f.push(0);
        c = l = 0, i = 1, a %= Ke, s = a - Ke + 1;
      } else
        break e;
    else {
      for (c = o = f[h], i = 1; o >= 10; o /= 10) i++;
      a %= Ke, s = a - Ke + i, l = s < 0 ? 0 : c / Yt(10, i - s - 1) % 10 | 0;
    }
    if (n = n || e < 0 || f[h + 1] !== void 0 || (s < 0 ? c : c % Yt(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (r.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && // Check whether the digit to the left of the rounding digit is odd.
    (a > 0 ? s > 0 ? c / Yt(10, i - s) : 0 : f[h - 1]) % 10 & 1 || t == (r.s < 0 ? 8 : 7)), e < 1 || !f[0])
      return f.length = 0, u ? (e -= r.e + 1, f[0] = Yt(10, (Ke - e % Ke) % Ke), r.e = -e || 0) : f[0] = r.e = 0, r;
    if (a == 0 ? (f.length = h, o = 1, h--) : (f.length = h + 1, o = Yt(10, Ke - a), f[h] = s > 0 ? (c / Yt(10, i - s) % Yt(10, s) | 0) * o : 0), u)
      for (; ; )
        if (h == 0) {
          for (a = 1, s = f[0]; s >= 10; s /= 10) a++;
          for (s = f[0] += o, o = 1; s >= 10; s /= 10) o++;
          a != o && (r.e++, f[0] == hn && (f[0] = 1));
          break;
        } else {
          if (f[h] += o, f[h] != hn) break;
          f[h--] = 0, o = 1;
        }
    for (a = f.length; f[--a] === 0; ) f.pop();
  }
  return tt && (r.e > d.maxE ? (r.d = null, r.e = NaN) : r.e < d.minE && (r.e = 0, r.d = [0])), r;
}
function Mn(r, e, t) {
  if (!r.isFinite()) return Fg(r);
  var n, i = r.e, a = or(r.d), s = a.length;
  return e ? (t && (n = t - s) > 0 ? a = a.charAt(0) + "." + a.slice(1) + ti(n) : s > 1 && (a = a.charAt(0) + "." + a.slice(1)), a = a + (r.e < 0 ? "e" : "e+") + r.e) : i < 0 ? (a = "0." + ti(-i - 1) + a, t && (n = t - s) > 0 && (a += ti(n))) : i >= s ? (a += ti(i + 1 - s), t && (n = t - i - 1) > 0 && (a = a + "." + ti(n))) : ((n = i + 1) < s && (a = a.slice(0, n) + "." + a.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (a += "."), a += ti(n))), a;
}
function Bu(r, e) {
  var t = r[0];
  for (e *= Ke; t >= 10; t /= 10) e++;
  return e;
}
function uu(r, e, t) {
  if (e > Zx)
    throw tt = !0, t && (r.precision = t), Error(Mg);
  return We(new r(su), e, 1, !0);
}
function _n(r, e, t) {
  if (e > tc) throw Error(Mg);
  return We(new r(ou), e, t, !0);
}
function Tg(r) {
  var e = r.length - 1, t = e * Ke + 1;
  if (e = r[e], e) {
    for (; e % 10 == 0; e /= 10) t--;
    for (e = r[0]; e >= 10; e /= 10) t++;
  }
  return t;
}
function ti(r) {
  for (var e = ""; r--; ) e += "0";
  return e;
}
function Ng(r, e, t, n) {
  var i, a = new r(1), s = Math.ceil(n / Ke + 4);
  for (tt = !1; ; ) {
    if (t % 2 && (a = a.times(e), mh(a.d, s) && (i = !0)), t = gr(t / 2), t === 0) {
      t = a.d.length - 1, i && a.d[t] === 0 && ++a.d[t];
      break;
    }
    e = e.times(e), mh(e.d, s);
  }
  return tt = !0, a;
}
function dh(r) {
  return r.d[r.d.length - 1] & 1;
}
function Rg(r, e, t) {
  for (var n, i, a = new r(e[0]), s = 0; ++s < e.length; ) {
    if (i = new r(e[s]), !i.s) {
      a = i;
      break;
    }
    n = a.cmp(i), (n === t || n === 0 && a.s === t) && (a = i);
  }
  return a;
}
function rc(r, e) {
  var t, n, i, a, s, o, l, u = 0, c = 0, f = 0, h = r.constructor, d = h.rounding, m = h.precision;
  if (!r.d || !r.d[0] || r.e > 17)
    return new h(r.d ? r.d[0] ? r.s < 0 ? 0 : 1 / 0 : 1 : r.s ? r.s < 0 ? 0 : r : NaN);
  for (e == null ? (tt = !1, l = m) : l = e, o = new h(0.03125); r.e > -2; )
    r = r.times(o), f += 5;
  for (n = Math.log(Yt(2, f)) / Math.LN10 * 2 + 5 | 0, l += n, t = a = s = new h(1), h.precision = l; ; ) {
    if (a = We(a.times(r), l, 1), t = t.times(++c), o = s.plus(Ot(a, t, l, 1)), or(o.d).slice(0, l) === or(s.d).slice(0, l)) {
      for (i = f; i--; ) s = We(s.times(s), l, 1);
      if (e == null)
        if (u < 3 && Ts(s.d, l - n, d, u))
          h.precision = l += 10, t = a = o = new h(1), c = 0, u++;
        else
          return We(s, h.precision = m, d, tt = !0);
      else
        return h.precision = m, s;
    }
    s = o;
  }
}
function oi(r, e) {
  var t, n, i, a, s, o, l, u, c, f, h, d = 1, m = 10, p = r, g = p.d, v = p.constructor, S = v.rounding, x = v.precision;
  if (p.s < 0 || !g || !g[0] || !p.e && g[0] == 1 && g.length == 1)
    return new v(g && !g[0] ? -1 / 0 : p.s != 1 ? NaN : g ? 0 : p);
  if (e == null ? (tt = !1, c = x) : c = e, v.precision = c += m, t = or(g), n = t.charAt(0), Math.abs(a = p.e) < 15e14) {
    for (; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3; )
      p = p.times(r), t = or(p.d), n = t.charAt(0), d++;
    a = p.e, n > 1 ? (p = new v("0." + t), a++) : p = new v(n + "." + t.slice(1));
  } else
    return u = uu(v, c + 2, x).times(a + ""), p = oi(new v(n + "." + t.slice(1)), c - m).plus(u), v.precision = x, e == null ? We(p, x, S, tt = !0) : p;
  for (f = p, l = s = p = Ot(p.minus(1), p.plus(1), c, 1), h = We(p.times(p), c, 1), i = 3; ; ) {
    if (s = We(s.times(h), c, 1), u = l.plus(Ot(s, new v(i), c, 1)), or(u.d).slice(0, c) === or(l.d).slice(0, c))
      if (l = l.times(2), a !== 0 && (l = l.plus(uu(v, c + 2, x).times(a + ""))), l = Ot(l, new v(d), c, 1), e == null)
        if (Ts(l.d, c - m, S, o))
          v.precision = c += m, u = s = p = Ot(f.minus(1), f.plus(1), c, 1), h = We(p.times(p), c, 1), i = o = 1;
        else
          return We(l, v.precision = x, S, tt = !0);
      else
        return v.precision = x, l;
    l = u, i += 2;
  }
}
function Fg(r) {
  return String(r.s * r.s / 0);
}
function qo(r, e) {
  var t, n, i;
  for ((t = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (n = e.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +e.slice(n + 1), e = e.substring(0, n)) : t < 0 && (t = e.length), n = 0; e.charCodeAt(n) === 48; n++) ;
  for (i = e.length; e.charCodeAt(i - 1) === 48; --i) ;
  if (e = e.slice(n, i), e) {
    if (i -= n, r.e = t = t - n - 1, r.d = [], n = (t + 1) % Ke, t < 0 && (n += Ke), n < i) {
      for (n && r.d.push(+e.slice(0, n)), i -= Ke; n < i; ) r.d.push(+e.slice(n, n += Ke));
      e = e.slice(n), n = Ke - e.length;
    } else
      n -= i;
    for (; n--; ) e += "0";
    r.d.push(+e), tt && (r.e > r.constructor.maxE ? (r.d = null, r.e = NaN) : r.e < r.constructor.minE && (r.e = 0, r.d = [0]));
  } else
    r.e = 0, r.d = [0];
  return r;
}
function Jx(r, e) {
  var t, n, i, a, s, o, l, u, c;
  if (e.indexOf("_") > -1) {
    if (e = e.replace(/(\d)_(?=\d)/g, "$1"), Cg.test(e)) return qo(r, e);
  } else if (e === "Infinity" || e === "NaN")
    return +e || (r.s = NaN), r.e = NaN, r.d = null, r;
  if (Wx.test(e))
    t = 16, e = e.toLowerCase();
  else if (qx.test(e))
    t = 2;
  else if (Xx.test(e))
    t = 8;
  else
    throw Error(di + e);
  for (a = e.search(/p/i), a > 0 ? (l = +e.slice(a + 1), e = e.substring(2, a)) : e = e.slice(2), a = e.indexOf("."), s = a >= 0, n = r.constructor, s && (e = e.replace(".", ""), o = e.length, a = o - a, i = Ng(n, new n(t), a, a * 2)), u = Vo(e, t, hn), c = u.length - 1, a = c; u[a] === 0; --a) u.pop();
  return a < 0 ? new n(r.s * 0) : (r.e = Bu(u, c), r.d = u, tt = !1, s && (r = Ot(r, i, o * 4)), l && (r = r.times(Math.abs(l) < 54 ? Yt(2, l) : mi.pow(2, l))), tt = !0, r);
}
function Qx(r, e) {
  var t, n = e.d.length;
  if (n < 3)
    return e.isZero() ? e : Ha(r, 2, e, e);
  t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, e = e.times(1 / Iu(5, t)), e = Ha(r, 2, e, e);
  for (var i, a = new r(5), s = new r(16), o = new r(20); t--; )
    i = e.times(e), e = e.times(a.plus(i.times(s.times(i).minus(o))));
  return e;
}
function Ha(r, e, t, n, i) {
  var a, s, o, l, u = r.precision, c = Math.ceil(u / Ke);
  for (tt = !1, l = t.times(t), o = new r(n); ; ) {
    if (s = Ot(o.times(l), new r(e++ * e++), u, 1), o = i ? n.plus(s) : n.minus(s), n = Ot(s.times(l), new r(e++ * e++), u, 1), s = o.plus(n), s.d[c] !== void 0) {
      for (a = c; s.d[a] === o.d[a] && a--; ) ;
      if (a == -1) break;
    }
    a = o, o = n, n = s, s = a;
  }
  return tt = !0, s.d.length = c + 1, s;
}
function Iu(r, e) {
  for (var t = r; --e; ) t *= r;
  return t;
}
function Og(r, e) {
  var t, n = e.s < 0, i = _n(r, r.precision, 1), a = i.times(0.5);
  if (e = e.abs(), e.lte(a))
    return zn = n ? 4 : 1, e;
  if (t = e.divToInt(i), t.isZero())
    zn = n ? 3 : 2;
  else {
    if (e = e.minus(t.times(i)), e.lte(a))
      return zn = dh(t) ? n ? 2 : 3 : n ? 4 : 1, e;
    zn = dh(t) ? n ? 1 : 4 : n ? 3 : 2;
  }
  return e.minus(i).abs();
}
function gf(r, e, t, n) {
  var i, a, s, o, l, u, c, f, h, d = r.constructor, m = t !== void 0;
  if (m ? (Rr(t, 1, _i), n === void 0 ? n = d.rounding : Rr(n, 0, 8)) : (t = d.precision, n = d.rounding), !r.isFinite())
    c = Fg(r);
  else {
    for (c = Mn(r), s = c.indexOf("."), m ? (i = 2, e == 16 ? t = t * 4 - 3 : e == 8 && (t = t * 3 - 2)) : i = e, s >= 0 && (c = c.replace(".", ""), h = new d(1), h.e = c.length - s, h.d = Vo(Mn(h), 10, i), h.e = h.d.length), f = Vo(c, 10, i), a = l = f.length; f[--l] == 0; ) f.pop();
    if (!f[0])
      c = m ? "0p+0" : "0";
    else {
      if (s < 0 ? a-- : (r = new d(r), r.d = f, r.e = a, r = Ot(r, h, t, n, 0, i), f = r.d, a = r.e, u = Eg), s = f[t], o = i / 2, u = u || f[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (r.s < 0 ? 3 : 2)) : s > o || s === o && (n === 4 || u || n === 6 && f[t - 1] & 1 || n === (r.s < 0 ? 8 : 7)), f.length = t, u)
        for (; ++f[--t] > i - 1; )
          f[t] = 0, t || (++a, f.unshift(1));
      for (l = f.length; !f[l - 1]; --l) ;
      for (s = 0, c = ""; s < l; s++) c += jl.charAt(f[s]);
      if (m) {
        if (l > 1)
          if (e == 16 || e == 8) {
            for (s = e == 16 ? 4 : 3, --l; l % s; l++) c += "0";
            for (f = Vo(c, i, e), l = f.length; !f[l - 1]; --l) ;
            for (s = 1, c = "1."; s < l; s++) c += jl.charAt(f[s]);
          } else
            c = c.charAt(0) + "." + c.slice(1);
        c = c + (a < 0 ? "p" : "p+") + a;
      } else if (a < 0) {
        for (; ++a; ) c = "0" + c;
        c = "0." + c;
      } else if (++a > l) for (a -= l; a--; ) c += "0";
      else a < l && (c = c.slice(0, a) + "." + c.slice(a));
    }
    c = (e == 16 ? "0x" : e == 2 ? "0b" : e == 8 ? "0o" : "") + c;
  }
  return r.s < 0 ? "-" + c : c;
}
function mh(r, e) {
  if (r.length > e)
    return r.length = e, !0;
}
function jx(r) {
  return new this(r).abs();
}
function e_(r) {
  return new this(r).acos();
}
function t_(r) {
  return new this(r).acosh();
}
function r_(r, e) {
  return new this(r).plus(e);
}
function n_(r) {
  return new this(r).asin();
}
function i_(r) {
  return new this(r).asinh();
}
function a_(r) {
  return new this(r).atan();
}
function s_(r) {
  return new this(r).atanh();
}
function o_(r, e) {
  r = new this(r), e = new this(e);
  var t, n = this.precision, i = this.rounding, a = n + 4;
  return !r.s || !e.s ? t = new this(NaN) : !r.d && !e.d ? (t = _n(this, a, 1).times(e.s > 0 ? 0.25 : 0.75), t.s = r.s) : !e.d || r.isZero() ? (t = e.s < 0 ? _n(this, n, i) : new this(0), t.s = r.s) : !r.d || e.isZero() ? (t = _n(this, a, 1).times(0.5), t.s = r.s) : e.s < 0 ? (this.precision = a, this.rounding = 1, t = this.atan(Ot(r, e, a, 1)), e = _n(this, a, 1), this.precision = n, this.rounding = i, t = r.s < 0 ? t.minus(e) : t.plus(e)) : t = this.atan(Ot(r, e, a, 1)), t;
}
function u_(r) {
  return new this(r).cbrt();
}
function l_(r) {
  return We(r = new this(r), r.e + 1, 2);
}
function c_(r, e, t) {
  return new this(r).clamp(e, t);
}
function f_(r) {
  if (!r || typeof r != "object") throw Error(Pu + "Object expected");
  var e, t, n, i = r.defaults === !0, a = [
    "precision",
    1,
    _i,
    "rounding",
    0,
    8,
    "toExpNeg",
    -Ta,
    0,
    "toExpPos",
    0,
    Ta,
    "maxE",
    0,
    Ta,
    "minE",
    -Ta,
    0,
    "modulo",
    0,
    9
  ];
  for (e = 0; e < a.length; e += 3)
    if (t = a[e], i && (this[t] = ec[t]), (n = r[t]) !== void 0)
      if (gr(n) === n && n >= a[e + 1] && n <= a[e + 2]) this[t] = n;
      else throw Error(di + t + ": " + n);
  if (t = "crypto", i && (this[t] = ec[t]), (n = r[t]) !== void 0)
    if (n === !0 || n === !1 || n === 0 || n === 1)
      if (n)
        if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
          this[t] = !0;
        else
          throw Error(Ag);
      else
        this[t] = !1;
    else
      throw Error(di + t + ": " + n);
  return this;
}
function h_(r) {
  return new this(r).cos();
}
function d_(r) {
  return new this(r).cosh();
}
function Pg(r) {
  var e, t, n;
  function i(a) {
    var s, o, l, u = this;
    if (!(u instanceof i)) return new i(a);
    if (u.constructor = i, ph(a)) {
      u.s = a.s, tt ? !a.d || a.e > i.maxE ? (u.e = NaN, u.d = null) : a.e < i.minE ? (u.e = 0, u.d = [0]) : (u.e = a.e, u.d = a.d.slice()) : (u.e = a.e, u.d = a.d ? a.d.slice() : a.d);
      return;
    }
    if (l = typeof a, l === "number") {
      if (a === 0) {
        u.s = 1 / a < 0 ? -1 : 1, u.e = 0, u.d = [0];
        return;
      }
      if (a < 0 ? (a = -a, u.s = -1) : u.s = 1, a === ~~a && a < 1e7) {
        for (s = 0, o = a; o >= 10; o /= 10) s++;
        tt ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [0]) : (u.e = s, u.d = [a]) : (u.e = s, u.d = [a]);
        return;
      }
      if (a * 0 !== 0) {
        a || (u.s = NaN), u.e = NaN, u.d = null;
        return;
      }
      return qo(u, a.toString());
    }
    if (l === "string")
      return (o = a.charCodeAt(0)) === 45 ? (a = a.slice(1), u.s = -1) : (o === 43 && (a = a.slice(1)), u.s = 1), Cg.test(a) ? qo(u, a) : Jx(u, a);
    if (l === "bigint")
      return a < 0 ? (a = -a, u.s = -1) : u.s = 1, qo(u, a.toString());
    throw Error(di + a);
  }
  if (i.prototype = Ce, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = f_, i.clone = Pg, i.isDecimal = ph, i.abs = jx, i.acos = e_, i.acosh = t_, i.add = r_, i.asin = n_, i.asinh = i_, i.atan = a_, i.atanh = s_, i.atan2 = o_, i.cbrt = u_, i.ceil = l_, i.clamp = c_, i.cos = h_, i.cosh = d_, i.div = m_, i.exp = p_, i.floor = v_, i.hypot = g_, i.ln = y_, i.log = x_, i.log10 = b_, i.log2 = __, i.max = w_, i.min = S_, i.mod = E_, i.mul = M_, i.pow = A_, i.random = D_, i.round = C_, i.sign = T_, i.sin = N_, i.sinh = R_, i.sqrt = F_, i.sub = O_, i.sum = P_, i.tan = B_, i.tanh = I_, i.trunc = L_, r === void 0 && (r = {}), r && r.defaults !== !0)
    for (n = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], e = 0; e < n.length; ) r.hasOwnProperty(t = n[e++]) || (r[t] = this[t]);
  return i.config(r), i;
}
function m_(r, e) {
  return new this(r).div(e);
}
function p_(r) {
  return new this(r).exp();
}
function v_(r) {
  return We(r = new this(r), r.e + 1, 3);
}
function g_() {
  var r, e, t = new this(0);
  for (tt = !1, r = 0; r < arguments.length; )
    if (e = new this(arguments[r++]), e.d)
      t.d && (t = t.plus(e.times(e)));
    else {
      if (e.s)
        return tt = !0, new this(1 / 0);
      t = e;
    }
  return tt = !0, t.sqrt();
}
function ph(r) {
  return r instanceof mi || r && r.toStringTag === Dg || !1;
}
function y_(r) {
  return new this(r).ln();
}
function x_(r, e) {
  return new this(r).log(e);
}
function __(r) {
  return new this(r).log(2);
}
function b_(r) {
  return new this(r).log(10);
}
function w_() {
  return Rg(this, arguments, -1);
}
function S_() {
  return Rg(this, arguments, 1);
}
function E_(r, e) {
  return new this(r).mod(e);
}
function M_(r, e) {
  return new this(r).mul(e);
}
function A_(r, e) {
  return new this(r).pow(e);
}
function D_(r) {
  var e, t, n, i, a = 0, s = new this(1), o = [];
  if (r === void 0 ? r = this.precision : Rr(r, 1, _i), n = Math.ceil(r / Ke), this.crypto)
    if (crypto.getRandomValues)
      for (e = crypto.getRandomValues(new Uint32Array(n)); a < n; )
        i = e[a], i >= 429e7 ? e[a] = crypto.getRandomValues(new Uint32Array(1))[0] : o[a++] = i % 1e7;
    else if (crypto.randomBytes) {
      for (e = crypto.randomBytes(n *= 4); a < n; )
        i = e[a] + (e[a + 1] << 8) + (e[a + 2] << 16) + ((e[a + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(e, a) : (o.push(i % 1e7), a += 4);
      a = n / 4;
    } else
      throw Error(Ag);
  else for (; a < n; ) o[a++] = Math.random() * 1e7 | 0;
  for (n = o[--a], r %= Ke, n && r && (i = Yt(10, Ke - r), o[a] = (n / i | 0) * i); o[a] === 0; a--) o.pop();
  if (a < 0)
    t = 0, o = [0];
  else {
    for (t = -1; o[0] === 0; t -= Ke) o.shift();
    for (n = 1, i = o[0]; i >= 10; i /= 10) n++;
    n < Ke && (t -= Ke - n);
  }
  return s.e = t, s.d = o, s;
}
function C_(r) {
  return We(r = new this(r), r.e + 1, this.rounding);
}
function T_(r) {
  return r = new this(r), r.d ? r.d[0] ? r.s : 0 * r.s : r.s || NaN;
}
function N_(r) {
  return new this(r).sin();
}
function R_(r) {
  return new this(r).sinh();
}
function F_(r) {
  return new this(r).sqrt();
}
function O_(r, e) {
  return new this(r).sub(e);
}
function P_() {
  var r = 0, e = arguments, t = new this(e[r]);
  for (tt = !1; t.s && ++r < e.length; ) t = t.plus(e[r]);
  return tt = !0, We(t, this.precision, this.rounding);
}
function B_(r) {
  return new this(r).tan();
}
function I_(r) {
  return new this(r).tanh();
}
function L_(r) {
  return We(r = new this(r), r.e + 1, 1);
}
Ce[Symbol.for("nodejs.util.inspect.custom")] = Ce.toString;
Ce[Symbol.toStringTag] = "Decimal";
var mi = Ce.constructor = Pg(ec);
su = new mi(su);
ou = new mi(ou);
var U_ = "BigNumber", z_ = ["?on", "config"], k_ = /* @__PURE__ */ W(U_, z_, (r) => {
  var {
    on: e,
    config: t
  } = r, n = mi.clone({
    precision: t.precision,
    modulo: mi.EUCLID
  });
  return n.prototype = Object.create(n.prototype), n.prototype.type = "BigNumber", n.prototype.isBigNumber = !0, n.prototype.toJSON = function() {
    return {
      mathjs: "BigNumber",
      value: this.toString()
    };
  }, n.fromJSON = function(i) {
    return new n(i.value);
  }, e && e("config", function(i, a) {
    i.precision !== a.precision && n.config({
      precision: i.precision
    });
  }), n;
}, {
  isClass: !0
});
const fr = Math.cosh || function(r) {
  return Math.abs(r) < 1e-9 ? 1 - r : (Math.exp(r) + Math.exp(-r)) * 0.5;
}, Wr = Math.sinh || function(r) {
  return Math.abs(r) < 1e-9 ? r : (Math.exp(r) - Math.exp(-r)) * 0.5;
}, H_ = function(r) {
  const e = Math.PI / 4;
  if (-e > r || r > e)
    return Math.cos(r) - 1;
  const t = r * r;
  return t * (t * (t * (t * (t * (t * (t * (t / 20922789888e3 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
}, ol = function(r, e) {
  return r = Math.abs(r), e = Math.abs(e), r < e && ([r, e] = [e, r]), r < 1e8 ? Math.sqrt(r * r + e * e) : (e /= r, r * Math.sqrt(1 + e * e));
}, oa = function() {
  throw SyntaxError("Invalid Param");
};
function ul(r, e) {
  const t = Math.abs(r), n = Math.abs(e);
  return r === 0 ? Math.log(n) : e === 0 ? Math.log(t) : t < 3e3 && n < 3e3 ? Math.log(r * r + e * e) * 0.5 : (r = r * 0.5, e = e * 0.5, 0.5 * Math.log(r * r + e * e) + Math.LN2);
}
const G_ = { re: 0, im: 0 }, Bi = function(r, e) {
  const t = G_;
  if (r == null)
    t.re = t.im = 0;
  else if (e !== void 0)
    t.re = r, t.im = e;
  else
    switch (typeof r) {
      case "object":
        if ("im" in r && "re" in r)
          t.re = r.re, t.im = r.im;
        else if ("abs" in r && "arg" in r) {
          if (!isFinite(r.abs) && isFinite(r.arg))
            return Me.INFINITY;
          t.re = r.abs * Math.cos(r.arg), t.im = r.abs * Math.sin(r.arg);
        } else if ("r" in r && "phi" in r) {
          if (!isFinite(r.r) && isFinite(r.phi))
            return Me.INFINITY;
          t.re = r.r * Math.cos(r.phi), t.im = r.r * Math.sin(r.phi);
        } else r.length === 2 ? (t.re = r[0], t.im = r[1]) : oa();
        break;
      case "string":
        t.im = /* void */
        t.re = 0;
        const n = r.replace(/_/g, "").match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
        let i = 1, a = 0;
        n === null && oa();
        for (let s = 0; s < n.length; s++) {
          const o = n[s];
          o === " " || o === "	" || o === `
` || (o === "+" ? i++ : o === "-" ? a++ : o === "i" || o === "I" ? (i + a === 0 && oa(), n[s + 1] !== " " && !isNaN(n[s + 1]) ? (t.im += parseFloat((a % 2 ? "-" : "") + n[s + 1]), s++) : t.im += parseFloat((a % 2 ? "-" : "") + "1"), i = a = 0) : ((i + a === 0 || isNaN(o)) && oa(), n[s + 1] === "i" || n[s + 1] === "I" ? (t.im += parseFloat((a % 2 ? "-" : "") + o), s++) : t.re += parseFloat((a % 2 ? "-" : "") + o), i = a = 0));
        }
        i + a > 0 && oa();
        break;
      case "number":
        t.im = 0, t.re = r;
        break;
      default:
        oa();
    }
  return isNaN(t.re) || isNaN(t.im), t;
};
function Me(r, e) {
  if (!(this instanceof Me))
    return new Me(r, e);
  const t = Bi(r, e);
  this.re = t.re, this.im = t.im;
}
Me.prototype = {
  re: 0,
  im: 0,
  /**
   * Calculates the sign of a complex number, which is a normalized complex
   *
   * @returns {Complex}
   */
  sign: function() {
    const r = ol(this.re, this.im);
    return new Me(
      this.re / r,
      this.im / r
    );
  },
  /**
   * Adds two complex numbers
   *
   * @returns {Complex}
   */
  add: function(r, e) {
    const t = Bi(r, e), n = this.isInfinite(), i = !(isFinite(t.re) && isFinite(t.im));
    return n || i ? n && i ? Me.NAN : Me.INFINITY : new Me(
      this.re + t.re,
      this.im + t.im
    );
  },
  /**
   * Subtracts two complex numbers
   *
   * @returns {Complex}
   */
  sub: function(r, e) {
    const t = Bi(r, e), n = this.isInfinite(), i = !(isFinite(t.re) && isFinite(t.im));
    return n || i ? n && i ? Me.NAN : Me.INFINITY : new Me(
      this.re - t.re,
      this.im - t.im
    );
  },
  /**
   * Multiplies two complex numbers
   *
   * @returns {Complex}
   */
  mul: function(r, e) {
    const t = Bi(r, e), n = this.isInfinite(), i = !(isFinite(t.re) && isFinite(t.im)), a = this.re === 0 && this.im === 0, s = t.re === 0 && t.im === 0;
    return n && s || i && a ? Me.NAN : n || i ? Me.INFINITY : t.im === 0 && this.im === 0 ? new Me(this.re * t.re, 0) : new Me(
      this.re * t.re - this.im * t.im,
      this.re * t.im + this.im * t.re
    );
  },
  /**
   * Divides two complex numbers
   *
   * @returns {Complex}
   */
  div: function(r, e) {
    const t = Bi(r, e), n = this.isInfinite(), i = !(isFinite(t.re) && isFinite(t.im)), a = this.re === 0 && this.im === 0, s = t.re === 0 && t.im === 0;
    if (a && s || n && i)
      return Me.NAN;
    if (s || n)
      return Me.INFINITY;
    if (a || i)
      return Me.ZERO;
    if (t.im === 0)
      return new Me(this.re / t.re, this.im / t.re);
    if (Math.abs(t.re) < Math.abs(t.im)) {
      const o = t.re / t.im, l = t.re * o + t.im;
      return new Me(
        (this.re * o + this.im) / l,
        (this.im * o - this.re) / l
      );
    } else {
      const o = t.im / t.re, l = t.im * o + t.re;
      return new Me(
        (this.re + this.im * o) / l,
        (this.im - this.re * o) / l
      );
    }
  },
  /**
   * Calculate the power of two complex numbers
   *
   * @returns {Complex}
   */
  pow: function(r, e) {
    const t = Bi(r, e), n = this.re === 0 && this.im === 0;
    if (t.re === 0 && t.im === 0)
      return Me.ONE;
    if (t.im === 0) {
      if (this.im === 0 && this.re > 0)
        return new Me(Math.pow(this.re, t.re), 0);
      if (this.re === 0)
        switch ((t.re % 4 + 4) % 4) {
          case 0:
            return new Me(Math.pow(this.im, t.re), 0);
          case 1:
            return new Me(0, Math.pow(this.im, t.re));
          case 2:
            return new Me(-Math.pow(this.im, t.re), 0);
          case 3:
            return new Me(0, -Math.pow(this.im, t.re));
        }
    }
    if (n && t.re > 0)
      return Me.ZERO;
    const a = Math.atan2(this.im, this.re), s = ul(this.re, this.im);
    let o = Math.exp(t.re * s - t.im * a), l = t.im * s + t.re * a;
    return new Me(
      o * Math.cos(l),
      o * Math.sin(l)
    );
  },
  /**
   * Calculate the complex square root
   *
   * @returns {Complex}
   */
  sqrt: function() {
    const r = this.re, e = this.im;
    if (e === 0)
      return r >= 0 ? new Me(Math.sqrt(r), 0) : new Me(0, Math.sqrt(-r));
    const t = ol(r, e);
    let n = Math.sqrt(0.5 * (t + Math.abs(r))), i = Math.abs(e) / (2 * n);
    return r >= 0 ? new Me(n, e < 0 ? -i : i) : new Me(i, e < 0 ? -n : n);
  },
  /**
   * Calculate the complex exponent
   *
   * @returns {Complex}
   */
  exp: function() {
    const r = Math.exp(this.re);
    return this.im === 0 ? new Me(r, 0) : new Me(
      r * Math.cos(this.im),
      r * Math.sin(this.im)
    );
  },
  /**
   * Calculate the complex exponent and subtracts one.
   *
   * This may be more accurate than `Complex(x).exp().sub(1)` if
   * `x` is small.
   *
   * @returns {Complex}
   */
  expm1: function() {
    const r = this.re, e = this.im;
    return new Me(
      Math.expm1(r) * Math.cos(e) + H_(e),
      Math.exp(r) * Math.sin(e)
    );
  },
  /**
   * Calculate the natural log
   *
   * @returns {Complex}
   */
  log: function() {
    const r = this.re, e = this.im;
    return e === 0 && r > 0 ? new Me(Math.log(r), 0) : new Me(
      ul(r, e),
      Math.atan2(e, r)
    );
  },
  /**
   * Calculate the magnitude of the complex number
   *
   * @returns {number}
   */
  abs: function() {
    return ol(this.re, this.im);
  },
  /**
   * Calculate the angle of the complex number
   *
   * @returns {number}
   */
  arg: function() {
    return Math.atan2(this.im, this.re);
  },
  /**
   * Calculate the sine of the complex number
   *
   * @returns {Complex}
   */
  sin: function() {
    const r = this.re, e = this.im;
    return new Me(
      Math.sin(r) * fr(e),
      Math.cos(r) * Wr(e)
    );
  },
  /**
   * Calculate the cosine
   *
   * @returns {Complex}
   */
  cos: function() {
    const r = this.re, e = this.im;
    return new Me(
      Math.cos(r) * fr(e),
      -Math.sin(r) * Wr(e)
    );
  },
  /**
   * Calculate the tangent
   *
   * @returns {Complex}
   */
  tan: function() {
    const r = 2 * this.re, e = 2 * this.im, t = Math.cos(r) + fr(e);
    return new Me(
      Math.sin(r) / t,
      Wr(e) / t
    );
  },
  /**
   * Calculate the cotangent
   *
   * @returns {Complex}
   */
  cot: function() {
    const r = 2 * this.re, e = 2 * this.im, t = Math.cos(r) - fr(e);
    return new Me(
      -Math.sin(r) / t,
      Wr(e) / t
    );
  },
  /**
   * Calculate the secant
   *
   * @returns {Complex}
   */
  sec: function() {
    const r = this.re, e = this.im, t = 0.5 * fr(2 * e) + 0.5 * Math.cos(2 * r);
    return new Me(
      Math.cos(r) * fr(e) / t,
      Math.sin(r) * Wr(e) / t
    );
  },
  /**
   * Calculate the cosecans
   *
   * @returns {Complex}
   */
  csc: function() {
    const r = this.re, e = this.im, t = 0.5 * fr(2 * e) - 0.5 * Math.cos(2 * r);
    return new Me(
      Math.sin(r) * fr(e) / t,
      -Math.cos(r) * Wr(e) / t
    );
  },
  /**
   * Calculate the complex arcus sinus
   *
   * @returns {Complex}
   */
  asin: function() {
    const r = this.re, e = this.im, t = new Me(
      e * e - r * r + 1,
      -2 * r * e
    ).sqrt(), n = new Me(
      t.re - e,
      t.im + r
    ).log();
    return new Me(n.im, -n.re);
  },
  /**
   * Calculate the complex arcus cosinus
   *
   * @returns {Complex}
   */
  acos: function() {
    const r = this.re, e = this.im, t = new Me(
      e * e - r * r + 1,
      -2 * r * e
    ).sqrt(), n = new Me(
      t.re - e,
      t.im + r
    ).log();
    return new Me(Math.PI / 2 - n.im, n.re);
  },
  /**
   * Calculate the complex arcus tangent
   *
   * @returns {Complex}
   */
  atan: function() {
    const r = this.re, e = this.im;
    if (r === 0) {
      if (e === 1)
        return new Me(0, 1 / 0);
      if (e === -1)
        return new Me(0, -1 / 0);
    }
    const t = r * r + (1 - e) * (1 - e), n = new Me(
      (1 - e * e - r * r) / t,
      -2 * r / t
    ).log();
    return new Me(-0.5 * n.im, 0.5 * n.re);
  },
  /**
   * Calculate the complex arcus cotangent
   *
   * @returns {Complex}
   */
  acot: function() {
    const r = this.re, e = this.im;
    if (e === 0)
      return new Me(Math.atan2(1, r), 0);
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).atan() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).atan();
  },
  /**
   * Calculate the complex arcus secant
   *
   * @returns {Complex}
   */
  asec: function() {
    const r = this.re, e = this.im;
    if (r === 0 && e === 0)
      return new Me(0, 1 / 0);
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).acos() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).acos();
  },
  /**
   * Calculate the complex arcus cosecans
   *
   * @returns {Complex}
   */
  acsc: function() {
    const r = this.re, e = this.im;
    if (r === 0 && e === 0)
      return new Me(Math.PI / 2, 1 / 0);
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).asin() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).asin();
  },
  /**
   * Calculate the complex sinh
   *
   * @returns {Complex}
   */
  sinh: function() {
    const r = this.re, e = this.im;
    return new Me(
      Wr(r) * Math.cos(e),
      fr(r) * Math.sin(e)
    );
  },
  /**
   * Calculate the complex cosh
   *
   * @returns {Complex}
   */
  cosh: function() {
    const r = this.re, e = this.im;
    return new Me(
      fr(r) * Math.cos(e),
      Wr(r) * Math.sin(e)
    );
  },
  /**
   * Calculate the complex tanh
   *
   * @returns {Complex}
   */
  tanh: function() {
    const r = 2 * this.re, e = 2 * this.im, t = fr(r) + Math.cos(e);
    return new Me(
      Wr(r) / t,
      Math.sin(e) / t
    );
  },
  /**
   * Calculate the complex coth
   *
   * @returns {Complex}
   */
  coth: function() {
    const r = 2 * this.re, e = 2 * this.im, t = fr(r) - Math.cos(e);
    return new Me(
      Wr(r) / t,
      -Math.sin(e) / t
    );
  },
  /**
   * Calculate the complex coth
   *
   * @returns {Complex}
   */
  csch: function() {
    const r = this.re, e = this.im, t = Math.cos(2 * e) - fr(2 * r);
    return new Me(
      -2 * Wr(r) * Math.cos(e) / t,
      2 * fr(r) * Math.sin(e) / t
    );
  },
  /**
   * Calculate the complex sech
   *
   * @returns {Complex}
   */
  sech: function() {
    const r = this.re, e = this.im, t = Math.cos(2 * e) + fr(2 * r);
    return new Me(
      2 * fr(r) * Math.cos(e) / t,
      -2 * Wr(r) * Math.sin(e) / t
    );
  },
  /**
   * Calculate the complex asinh
   *
   * @returns {Complex}
   */
  asinh: function() {
    let r = this.im;
    this.im = -this.re, this.re = r;
    const e = this.asin();
    return this.re = -this.im, this.im = r, r = e.re, e.re = -e.im, e.im = r, e;
  },
  /**
   * Calculate the complex acosh
   *
   * @returns {Complex}
   */
  acosh: function() {
    const r = this.acos();
    if (r.im <= 0) {
      const e = r.re;
      r.re = -r.im, r.im = e;
    } else {
      const e = r.im;
      r.im = -r.re, r.re = e;
    }
    return r;
  },
  /**
   * Calculate the complex atanh
   *
   * @returns {Complex}
   */
  atanh: function() {
    const r = this.re, e = this.im, t = r > 1 && e === 0, n = 1 - r, i = 1 + r, a = n * n + e * e, s = a !== 0 ? new Me(
      (i * n - e * e) / a,
      (e * n + i * e) / a
    ) : new Me(
      r !== -1 ? r / 0 : 0,
      e !== 0 ? e / 0 : 0
    ), o = s.re;
    return s.re = ul(s.re, s.im) / 2, s.im = Math.atan2(s.im, o) / 2, t && (s.im = -s.im), s;
  },
  /**
   * Calculate the complex acoth
   *
   * @returns {Complex}
   */
  acoth: function() {
    const r = this.re, e = this.im;
    if (r === 0 && e === 0)
      return new Me(0, Math.PI / 2);
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).atanh() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).atanh();
  },
  /**
   * Calculate the complex acsch
   *
   * @returns {Complex}
   */
  acsch: function() {
    const r = this.re, e = this.im;
    if (e === 0)
      return new Me(
        r !== 0 ? Math.log(r + Math.sqrt(r * r + 1)) : 1 / 0,
        0
      );
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).asinh() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).asinh();
  },
  /**
   * Calculate the complex asech
   *
   * @returns {Complex}
   */
  asech: function() {
    const r = this.re, e = this.im;
    if (this.isZero())
      return Me.INFINITY;
    const t = r * r + e * e;
    return t !== 0 ? new Me(
      r / t,
      -e / t
    ).acosh() : new Me(
      r !== 0 ? r / 0 : 0,
      e !== 0 ? -e / 0 : 0
    ).acosh();
  },
  /**
   * Calculate the complex inverse 1/z
   *
   * @returns {Complex}
   */
  inverse: function() {
    if (this.isZero())
      return Me.INFINITY;
    if (this.isInfinite())
      return Me.ZERO;
    const r = this.re, e = this.im, t = r * r + e * e;
    return new Me(r / t, -e / t);
  },
  /**
   * Returns the complex conjugate
   *
   * @returns {Complex}
   */
  conjugate: function() {
    return new Me(this.re, -this.im);
  },
  /**
   * Gets the negated complex number
   *
   * @returns {Complex}
   */
  neg: function() {
    return new Me(-this.re, -this.im);
  },
  /**
   * Ceils the actual complex number
   *
   * @returns {Complex}
   */
  ceil: function(r) {
    return r = Math.pow(10, r || 0), new Me(
      Math.ceil(this.re * r) / r,
      Math.ceil(this.im * r) / r
    );
  },
  /**
   * Floors the actual complex number
   *
   * @returns {Complex}
   */
  floor: function(r) {
    return r = Math.pow(10, r || 0), new Me(
      Math.floor(this.re * r) / r,
      Math.floor(this.im * r) / r
    );
  },
  /**
   * Ceils the actual complex number
   *
   * @returns {Complex}
   */
  round: function(r) {
    return r = Math.pow(10, r || 0), new Me(
      Math.round(this.re * r) / r,
      Math.round(this.im * r) / r
    );
  },
  /**
   * Compares two complex numbers
   *
   * **Note:** new Complex(Infinity).equals(Infinity) === false
   *
   * @returns {boolean}
   */
  equals: function(r, e) {
    const t = Bi(r, e);
    return Math.abs(t.re - this.re) <= Me.EPSILON && Math.abs(t.im - this.im) <= Me.EPSILON;
  },
  /**
   * Clones the actual object
   *
   * @returns {Complex}
   */
  clone: function() {
    return new Me(this.re, this.im);
  },
  /**
   * Gets a string of the actual complex number
   *
   * @returns {string}
   */
  toString: function() {
    let r = this.re, e = this.im, t = "";
    return this.isNaN() ? "NaN" : this.isInfinite() ? "Infinity" : (Math.abs(r) < Me.EPSILON && (r = 0), Math.abs(e) < Me.EPSILON && (e = 0), e === 0 ? t + r : (r !== 0 ? (t += r, t += " ", e < 0 ? (e = -e, t += "-") : t += "+", t += " ") : e < 0 && (e = -e, t += "-"), e !== 1 && (t += e), t + "i"));
  },
  /**
   * Returns the actual number as a vector
   *
   * @returns {Array}
   */
  toVector: function() {
    return [this.re, this.im];
  },
  /**
   * Returns the actual real value of the current object
   *
   * @returns {number|null}
   */
  valueOf: function() {
    return this.im === 0 ? this.re : null;
  },
  /**
   * Determines whether a complex number is not on the Riemann sphere.
   *
   * @returns {boolean}
   */
  isNaN: function() {
    return isNaN(this.re) || isNaN(this.im);
  },
  /**
   * Determines whether or not a complex number is at the zero pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  isZero: function() {
    return this.im === 0 && this.re === 0;
  },
  /**
   * Determines whether a complex number is not at the infinity pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  isFinite: function() {
    return isFinite(this.re) && isFinite(this.im);
  },
  /**
   * Determines whether or not a complex number is at the infinity pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  isInfinite: function() {
    return !this.isFinite();
  }
};
Me.ZERO = new Me(0, 0);
Me.ONE = new Me(1, 0);
Me.I = new Me(0, 1);
Me.PI = new Me(Math.PI, 0);
Me.E = new Me(Math.E, 0);
Me.INFINITY = new Me(1 / 0, 1 / 0);
Me.NAN = new Me(NaN, NaN);
Me.EPSILON = 1e-15;
var $_ = "Complex", V_ = [], q_ = /* @__PURE__ */ W($_, V_, () => (Object.defineProperty(Me, "name", {
  value: "Complex"
}), Me.prototype.constructor = Me, Me.prototype.type = "Complex", Me.prototype.isComplex = !0, Me.prototype.toJSON = function() {
  return {
    mathjs: "Complex",
    re: this.re,
    im: this.im
  };
}, Me.prototype.toPolar = function() {
  return {
    r: this.abs(),
    phi: this.arg()
  };
}, Me.prototype.format = function(r) {
  var e = "", t = this.im, n = this.re, i = Wi(this.re, r), a = Wi(this.im, r), s = et(r) ? r : r ? r.precision : null;
  if (s !== null) {
    var o = Math.pow(10, -s);
    Math.abs(n / t) < o && (n = 0), Math.abs(t / n) < o && (t = 0);
  }
  return t === 0 ? e = i : n === 0 ? t === 1 ? e = "i" : t === -1 ? e = "-i" : e = a + "i" : t < 0 ? t === -1 ? e = i + " - i" : e = i + " - " + a.substring(1) + "i" : t === 1 ? e = i + " + i" : e = i + " + " + a + "i", e;
}, Me.fromPolar = function(r) {
  switch (arguments.length) {
    case 1: {
      var e = arguments[0];
      if (typeof e == "object")
        return Me(e);
      throw new TypeError("Input has to be an object with r and phi keys.");
    }
    case 2: {
      var t = arguments[0], n = arguments[1];
      if (et(t)) {
        if (wr(n) && n.hasBase("ANGLE") && (n = n.toNumber("rad")), et(n))
          return new Me({
            r: t,
            phi: n
          });
        throw new TypeError("Phi is not a number nor an angle unit.");
      } else
        throw new TypeError("Radius r is not a number.");
    }
    default:
      throw new SyntaxError("Wrong number of arguments in function fromPolar");
  }
}, Me.prototype.valueOf = Me.prototype.toString, Me.fromJSON = function(r) {
  return new Me(r);
}, Me.compare = function(r, e) {
  return r.re > e.re ? 1 : r.re < e.re ? -1 : r.im > e.im ? 1 : r.im < e.im ? -1 : 0;
}, Me), {
  isClass: !0
});
typeof BigInt > "u" && (BigInt = function(r) {
  if (isNaN(r)) throw new Error("");
  return r;
});
const qe = BigInt(0), ut = BigInt(1), Ns = BigInt(2), nc = BigInt(5), Tr = BigInt(10), W_ = 2e3, Ie = {
  s: ut,
  n: qe,
  d: ut
};
function Tn(r, e) {
  try {
    r = BigInt(r);
  } catch {
    throw ei();
  }
  return r * e;
}
function rn(r) {
  return typeof r == "bigint" ? r : Math.floor(r);
}
function Lt(r, e) {
  if (e === qe)
    throw yf();
  const t = Object.create(Yr.prototype);
  t.s = r < qe ? -ut : ut, r = r < qe ? -r : r;
  const n = Ui(r, e);
  return t.n = r / n, t.d = e / n, t;
}
function ua(r) {
  const e = {};
  let t = r, n = Ns, i = nc - ut;
  for (; i <= t; ) {
    for (; t % n === qe; )
      t /= n, e[n] = (e[n] || qe) + ut;
    i += ut + Ns * n++;
  }
  return t !== r ? t > 1 && (e[t] = (e[t] || qe) + ut) : e[r] = (e[r] || qe) + ut, e;
}
const rr = function(r, e) {
  let t = qe, n = ut, i = ut;
  if (r != null) if (e !== void 0) {
    if (typeof r == "bigint")
      t = r;
    else {
      if (isNaN(r))
        throw ei();
      if (r % 1 !== 0)
        throw vh();
      t = BigInt(r);
    }
    if (typeof e == "bigint")
      n = e;
    else {
      if (isNaN(e))
        throw ei();
      if (e % 1 !== 0)
        throw vh();
      n = BigInt(e);
    }
    i = t * n;
  } else if (typeof r == "object") {
    if ("d" in r && "n" in r)
      t = BigInt(r.n), n = BigInt(r.d), "s" in r && (t *= BigInt(r.s));
    else if (0 in r)
      t = BigInt(r[0]), 1 in r && (n = BigInt(r[1]));
    else if (typeof r == "bigint")
      t = r;
    else
      throw ei();
    i = t * n;
  } else if (typeof r == "number") {
    if (isNaN(r))
      throw ei();
    if (r < 0 && (i = -ut, r = -r), r % 1 === 0)
      t = BigInt(r);
    else {
      let a = 1, s = 0, o = 1, l = 1, u = 1, c = 1e7;
      for (r >= 1 && (a = 10 ** Math.floor(1 + Math.log10(r)), r /= a); o <= c && u <= c; ) {
        let f = (s + l) / (o + u);
        if (r === f) {
          o + u <= c ? (t = s + l, n = o + u) : u > o ? (t = l, n = u) : (t = s, n = o);
          break;
        } else
          r > f ? (s += l, o += u) : (l += s, u += o), o > c ? (t = l, n = u) : (t = s, n = o);
      }
      t = BigInt(t) * BigInt(a), n = BigInt(n);
    }
  } else if (typeof r == "string") {
    let a = 0, s = qe, o = qe, l = qe, u = ut, c = ut, f = r.replace(/_/g, "").match(/\d+|./g);
    if (f === null)
      throw ei();
    if (f[a] === "-" ? (i = -ut, a++) : f[a] === "+" && a++, f.length === a + 1 ? o = Tn(f[a++], i) : f[a + 1] === "." || f[a] === "." ? (f[a] !== "." && (s = Tn(f[a++], i)), a++, (a + 1 === f.length || f[a + 1] === "(" && f[a + 3] === ")" || f[a + 1] === "'" && f[a + 3] === "'") && (o = Tn(f[a], i), u = Tr ** BigInt(f[a].length), a++), (f[a] === "(" && f[a + 2] === ")" || f[a] === "'" && f[a + 2] === "'") && (l = Tn(f[a + 1], i), c = Tr ** BigInt(f[a + 1].length) - ut, a += 3)) : f[a + 1] === "/" || f[a + 1] === ":" ? (o = Tn(f[a], i), u = Tn(f[a + 2], ut), a += 3) : f[a + 3] === "/" && f[a + 1] === " " && (s = Tn(f[a], i), o = Tn(f[a + 2], i), u = Tn(f[a + 4], ut), a += 5), f.length <= a)
      n = u * c, i = /* void */
      t = l + n * s + c * o;
    else
      throw ei();
  } else if (typeof r == "bigint")
    t = r, i = r, n = ut;
  else
    throw ei();
  if (n === qe)
    throw yf();
  Ie.s = i < qe ? -ut : ut, Ie.n = t < qe ? -t : t, Ie.d = n < qe ? -n : n;
};
function X_(r, e, t) {
  let n = ut;
  for (; e > qe; r = r * r % t, e >>= ut)
    e & ut && (n = n * r % t);
  return n;
}
function Y_(r, e) {
  for (; e % Ns === qe; e /= Ns)
    ;
  for (; e % nc === qe; e /= nc)
    ;
  if (e === ut)
    return qe;
  let t = Tr % e, n = 1;
  for (; t !== ut; n++)
    if (t = t * Tr % e, n > W_)
      return qe;
  return BigInt(n);
}
function Z_(r, e, t) {
  let n = ut, i = X_(Tr, t, e);
  for (let a = 0; a < 300; a++) {
    if (n === i)
      return BigInt(a);
    n = n * Tr % e, i = i * Tr % e;
  }
  return 0;
}
function Ui(r, e) {
  if (!r)
    return e;
  if (!e)
    return r;
  for (; ; ) {
    if (r %= e, !r)
      return e;
    if (e %= r, !e)
      return r;
  }
}
function Yr(r, e) {
  if (rr(r, e), this instanceof Yr)
    r = Ui(Ie.d, Ie.n), this.s = Ie.s, this.n = Ie.n / r, this.d = Ie.d / r;
  else
    return Lt(Ie.s * Ie.n, Ie.d);
}
var yf = function() {
  return new Error("Division by Zero");
}, ei = function() {
  return new Error("Invalid argument");
}, vh = function() {
  return new Error("Parameters must be integer");
};
Yr.prototype = {
  s: ut,
  n: qe,
  d: ut,
  /**
   * Calculates the absolute value
   *
   * Ex: new Fraction(-4).abs() => 4
   **/
  abs: function() {
    return Lt(this.n, this.d);
  },
  /**
   * Inverts the sign of the current fraction
   *
   * Ex: new Fraction(-4).neg() => 4
   **/
  neg: function() {
    return Lt(-this.s * this.n, this.d);
  },
  /**
   * Adds two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
   **/
  add: function(r, e) {
    return rr(r, e), Lt(
      this.s * this.n * Ie.d + Ie.s * this.d * Ie.n,
      this.d * Ie.d
    );
  },
  /**
   * Subtracts two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
   **/
  sub: function(r, e) {
    return rr(r, e), Lt(
      this.s * this.n * Ie.d - Ie.s * this.d * Ie.n,
      this.d * Ie.d
    );
  },
  /**
   * Multiplies two rational numbers
   *
   * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
   **/
  mul: function(r, e) {
    return rr(r, e), Lt(
      this.s * Ie.s * this.n * Ie.n,
      this.d * Ie.d
    );
  },
  /**
   * Divides two rational numbers
   *
   * Ex: new Fraction("-17.(345)").inverse().div(3)
   **/
  div: function(r, e) {
    return rr(r, e), Lt(
      this.s * Ie.s * this.n * Ie.d,
      this.d * Ie.n
    );
  },
  /**
   * Clones the actual object
   *
   * Ex: new Fraction("-17.(345)").clone()
   **/
  clone: function() {
    return Lt(this.s * this.n, this.d);
  },
  /**
   * Calculates the modulo of two rational numbers - a more precise fmod
   *
   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
   * Ex: new Fraction(20, 10).mod().equals(0) ? "is Integer"
   **/
  mod: function(r, e) {
    if (r === void 0)
      return Lt(this.s * this.n % this.d, ut);
    if (rr(r, e), qe === Ie.n * this.d)
      throw yf();
    return Lt(
      this.s * (Ie.d * this.n) % (Ie.n * this.d),
      Ie.d * this.d
    );
  },
  /**
   * Calculates the fractional gcd of two rational numbers
   *
   * Ex: new Fraction(5,8).gcd(3,7) => 1/56
   */
  gcd: function(r, e) {
    return rr(r, e), Lt(Ui(Ie.n, this.n) * Ui(Ie.d, this.d), Ie.d * this.d);
  },
  /**
   * Calculates the fractional lcm of two rational numbers
   *
   * Ex: new Fraction(5,8).lcm(3,7) => 15
   */
  lcm: function(r, e) {
    return rr(r, e), Ie.n === qe && this.n === qe ? Lt(qe, ut) : Lt(Ie.n * this.n, Ui(Ie.n, this.n) * Ui(Ie.d, this.d));
  },
  /**
   * Gets the inverse of the fraction, means numerator and denominator are exchanged
   *
   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
   **/
  inverse: function() {
    return Lt(this.s * this.d, this.n);
  },
  /**
   * Calculates the fraction to some integer exponent
   *
   * Ex: new Fraction(-1,2).pow(-3) => -8
   */
  pow: function(r, e) {
    if (rr(r, e), Ie.d === ut)
      return Ie.s < qe ? Lt((this.s * this.d) ** Ie.n, this.n ** Ie.n) : Lt((this.s * this.n) ** Ie.n, this.d ** Ie.n);
    if (this.s < qe) return null;
    let t = ua(this.n), n = ua(this.d), i = ut, a = ut;
    for (let s in t)
      if (s !== "1") {
        if (s === "0") {
          i = qe;
          break;
        }
        if (t[s] *= Ie.n, t[s] % Ie.d === qe)
          t[s] /= Ie.d;
        else return null;
        i *= BigInt(s) ** t[s];
      }
    for (let s in n)
      if (s !== "1") {
        if (n[s] *= Ie.n, n[s] % Ie.d === qe)
          n[s] /= Ie.d;
        else return null;
        a *= BigInt(s) ** n[s];
      }
    return Ie.s < qe ? Lt(a, i) : Lt(i, a);
  },
  /**
   * Calculates the logarithm of a fraction to a given rational base
   *
   * Ex: new Fraction(27, 8).log(9, 4) => 3/2
   */
  log: function(r, e) {
    if (rr(r, e), this.s <= qe || Ie.s <= qe) return null;
    const t = {}, n = ua(Ie.n), i = ua(Ie.d), a = ua(this.n), s = ua(this.d);
    for (const u in i)
      n[u] = (n[u] || qe) - i[u];
    for (const u in s)
      a[u] = (a[u] || qe) - s[u];
    for (const u in n)
      u !== "1" && (t[u] = !0);
    for (const u in a)
      u !== "1" && (t[u] = !0);
    let o = null, l = null;
    for (const u in t) {
      const c = n[u] || qe, f = a[u] || qe;
      if (c === qe) {
        if (f !== qe)
          return null;
        continue;
      }
      let h = f, d = c;
      const m = Ui(h, d);
      if (h /= m, d /= m, o === null && l === null)
        o = h, l = d;
      else if (h * l !== o * d)
        return null;
    }
    return o !== null && l !== null ? Lt(o, l) : null;
  },
  /**
   * Check if two rational numbers are the same
   *
   * Ex: new Fraction(19.6).equals([98, 5]);
   **/
  equals: function(r, e) {
    return rr(r, e), this.s * this.n * Ie.d === Ie.s * Ie.n * this.d;
  },
  /**
   * Check if this rational number is less than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  lt: function(r, e) {
    return rr(r, e), this.s * this.n * Ie.d < Ie.s * Ie.n * this.d;
  },
  /**
   * Check if this rational number is less than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  lte: function(r, e) {
    return rr(r, e), this.s * this.n * Ie.d <= Ie.s * Ie.n * this.d;
  },
  /**
   * Check if this rational number is greater than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  gt: function(r, e) {
    return rr(r, e), this.s * this.n * Ie.d > Ie.s * Ie.n * this.d;
  },
  /**
   * Check if this rational number is greater than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  gte: function(r, e) {
    return rr(r, e), this.s * this.n * Ie.d >= Ie.s * Ie.n * this.d;
  },
  /**
   * Compare two rational numbers
   * < 0 iff this < that
   * > 0 iff this > that
   * = 0 iff this = that
   *
   * Ex: new Fraction(19.6).compare([98, 5]);
   **/
  compare: function(r, e) {
    rr(r, e);
    let t = this.s * this.n * Ie.d - Ie.s * Ie.n * this.d;
    return (qe < t) - (t < qe);
  },
  /**
   * Calculates the ceil of a rational number
   *
   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
   **/
  ceil: function(r) {
    return r = Tr ** BigInt(r || 0), Lt(
      rn(this.s * r * this.n / this.d) + (r * this.n % this.d > qe && this.s >= qe ? ut : qe),
      r
    );
  },
  /**
   * Calculates the floor of a rational number
   *
   * Ex: new Fraction('4.(3)').floor() => (4 / 1)
   **/
  floor: function(r) {
    return r = Tr ** BigInt(r || 0), Lt(
      rn(this.s * r * this.n / this.d) - (r * this.n % this.d > qe && this.s < qe ? ut : qe),
      r
    );
  },
  /**
   * Rounds a rational numbers
   *
   * Ex: new Fraction('4.(3)').round() => (4 / 1)
   **/
  round: function(r) {
    return r = Tr ** BigInt(r || 0), Lt(
      rn(this.s * r * this.n / this.d) + this.s * ((this.s >= qe ? ut : qe) + Ns * (r * this.n % this.d) > this.d ? ut : qe),
      r
    );
  },
  /**
    * Rounds a rational number to a multiple of another rational number
    *
    * Ex: new Fraction('0.9').roundTo("1/8") => 7 / 8
    **/
  roundTo: function(r, e) {
    rr(r, e);
    const t = this.n * Ie.d, n = this.d * Ie.n, i = t % n;
    let a = rn(t / n);
    return i + i >= n && a++, Lt(this.s * a * Ie.n, Ie.d);
  },
  /**
   * Check if two rational numbers are divisible
   *
   * Ex: new Fraction(19.6).divisible(1.5);
   */
  divisible: function(r, e) {
    return rr(r, e), !(!(Ie.n * this.d) || this.n * Ie.d % (Ie.n * this.d));
  },
  /**
   * Returns a decimal representation of the fraction
   *
   * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
   **/
  valueOf: function() {
    return Number(this.s * this.n) / Number(this.d);
  },
  /**
   * Creates a string representation of a fraction with all digits
   *
   * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
   **/
  toString: function(r) {
    let e = this.n, t = this.d;
    r = r || 15;
    let n = Y_(e, t), i = Z_(e, t, n), a = this.s < qe ? "-" : "";
    if (a += rn(e / t), e %= t, e *= Tr, e && (a += "."), n) {
      for (let s = i; s--; )
        a += rn(e / t), e %= t, e *= Tr;
      a += "(";
      for (let s = n; s--; )
        a += rn(e / t), e %= t, e *= Tr;
      a += ")";
    } else
      for (let s = r; e && s--; )
        a += rn(e / t), e %= t, e *= Tr;
    return a;
  },
  /**
   * Returns a string-fraction representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
   **/
  toFraction: function(r) {
    let e = this.n, t = this.d, n = this.s < qe ? "-" : "";
    if (t === ut)
      n += e;
    else {
      let i = rn(e / t);
      r && i > qe && (n += i, n += " ", e %= t), n += e, n += "/", n += t;
    }
    return n;
  },
  /**
   * Returns a latex representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
   **/
  toLatex: function(r) {
    let e = this.n, t = this.d, n = this.s < qe ? "-" : "";
    if (t === ut)
      n += e;
    else {
      let i = rn(e / t);
      r && i > qe && (n += i, e %= t), n += "\\frac{", n += e, n += "}{", n += t, n += "}";
    }
    return n;
  },
  /**
   * Returns an array of continued fraction elements
   *
   * Ex: new Fraction("7/8").toContinued() => [0,1,7]
   */
  toContinued: function() {
    let r = this.n, e = this.d, t = [];
    do {
      t.push(rn(r / e));
      let n = r % e;
      r = e, e = n;
    } while (r !== ut);
    return t;
  },
  simplify: function(r) {
    const e = BigInt(1 / (r || 1e-3) | 0), t = this.abs(), n = t.toContinued();
    for (let i = 1; i < n.length; i++) {
      let a = Lt(n[i - 1], ut);
      for (let o = i - 2; o >= 0; o--)
        a = a.inverse().add(n[o]);
      let s = a.sub(t);
      if (s.n * e < s.d)
        return a.mul(this.s);
    }
    return this;
  }
};
var K_ = "Fraction", J_ = [], Q_ = /* @__PURE__ */ W(K_, J_, () => (Object.defineProperty(Yr, "name", {
  value: "Fraction"
}), Yr.prototype.constructor = Yr, Yr.prototype.type = "Fraction", Yr.prototype.isFraction = !0, Yr.prototype.toJSON = function() {
  return {
    mathjs: "Fraction",
    n: String(this.s * this.n),
    d: String(this.d)
  };
}, Yr.fromJSON = function(r) {
  return new Yr(r);
}, Yr), {
  isClass: !0
}), j_ = "Range", eb = [], tb = /* @__PURE__ */ W(j_, eb, () => {
  function r(e, t, n) {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
    var i = e != null, a = t != null, s = n != null;
    if (i) {
      if (Qe(e))
        e = e.toNumber();
      else if (typeof e != "number" && !Oa(e))
        throw new TypeError("Parameter start must be a number or bigint");
    }
    if (a) {
      if (Qe(t))
        t = t.toNumber();
      else if (typeof t != "number" && !Oa(t))
        throw new TypeError("Parameter end must be a number or bigint");
    }
    if (s) {
      if (Qe(n))
        n = n.toNumber();
      else if (typeof n != "number" && !Oa(n))
        throw new TypeError("Parameter step must be a number or bigint");
    }
    this.start = i ? parseFloat(e) : 0, this.end = a ? parseFloat(t) : 0, this.step = s ? parseFloat(n) : 1;
  }
  return r.prototype.type = "Range", r.prototype.isRange = !0, r.parse = function(e) {
    if (typeof e != "string")
      return null;
    var t = e.split(":"), n = t.map(function(a) {
      return parseFloat(a);
    }), i = n.some(function(a) {
      return isNaN(a);
    });
    if (i)
      return null;
    switch (n.length) {
      case 2:
        return new r(n[0], n[1]);
      case 3:
        return new r(n[0], n[2], n[1]);
      default:
        return null;
    }
  }, r.prototype.clone = function() {
    return new r(this.start, this.end, this.step);
  }, r.prototype.size = function() {
    var e = 0, t = this.start, n = this.step, i = this.end, a = i - t;
    return si(n) === si(a) ? e = Math.ceil(a / n) : a === 0 && (e = 0), isNaN(e) && (e = 0), [e];
  }, r.prototype.min = function() {
    var e = this.size()[0];
    if (e > 0)
      return this.step > 0 ? this.start : this.start + (e - 1) * this.step;
  }, r.prototype.max = function() {
    var e = this.size()[0];
    if (e > 0)
      return this.step > 0 ? this.start + (e - 1) * this.step : this.start;
  }, r.prototype.forEach = function(e) {
    var t = this.start, n = this.step, i = this.end, a = 0;
    if (n > 0)
      for (; t < i; )
        e(t, [a], this), t += n, a++;
    else if (n < 0)
      for (; t > i; )
        e(t, [a], this), t += n, a++;
  }, r.prototype.map = function(e) {
    var t = [];
    return this.forEach(function(n, i, a) {
      t[i[0]] = e(n, i, a);
    }), t;
  }, r.prototype.toArray = function() {
    var e = [];
    return this.forEach(function(t, n) {
      e[n[0]] = t;
    }), e;
  }, r.prototype.valueOf = function() {
    return this.toArray();
  }, r.prototype.format = function(e) {
    var t = Wi(this.start, e);
    return this.step !== 1 && (t += ":" + Wi(this.step, e)), t += ":" + Wi(this.end, e), t;
  }, r.prototype.toString = function() {
    return this.format();
  }, r.prototype.toJSON = function() {
    return {
      mathjs: "Range",
      start: this.start,
      end: this.end,
      step: this.step
    };
  }, r.fromJSON = function(e) {
    return new r(e.start, e.end, e.step);
  }, r;
}, {
  isClass: !0
}), rb = "Matrix", nb = [], ib = /* @__PURE__ */ W(rb, nb, () => {
  function r() {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
  }
  return r.prototype.type = "Matrix", r.prototype.isMatrix = !0, r.prototype.storage = function() {
    throw new Error("Cannot invoke storage on a Matrix interface");
  }, r.prototype.datatype = function() {
    throw new Error("Cannot invoke datatype on a Matrix interface");
  }, r.prototype.create = function(e, t) {
    throw new Error("Cannot invoke create on a Matrix interface");
  }, r.prototype.subset = function(e, t, n) {
    throw new Error("Cannot invoke subset on a Matrix interface");
  }, r.prototype.get = function(e) {
    throw new Error("Cannot invoke get on a Matrix interface");
  }, r.prototype.set = function(e, t, n) {
    throw new Error("Cannot invoke set on a Matrix interface");
  }, r.prototype.resize = function(e, t) {
    throw new Error("Cannot invoke resize on a Matrix interface");
  }, r.prototype.reshape = function(e, t) {
    throw new Error("Cannot invoke reshape on a Matrix interface");
  }, r.prototype.clone = function() {
    throw new Error("Cannot invoke clone on a Matrix interface");
  }, r.prototype.size = function() {
    throw new Error("Cannot invoke size on a Matrix interface");
  }, r.prototype.map = function(e, t) {
    throw new Error("Cannot invoke map on a Matrix interface");
  }, r.prototype.forEach = function(e) {
    throw new Error("Cannot invoke forEach on a Matrix interface");
  }, r.prototype[Symbol.iterator] = function() {
    throw new Error("Cannot iterate a Matrix interface");
  }, r.prototype.toArray = function() {
    throw new Error("Cannot invoke toArray on a Matrix interface");
  }, r.prototype.valueOf = function() {
    throw new Error("Cannot invoke valueOf on a Matrix interface");
  }, r.prototype.format = function(e) {
    throw new Error("Cannot invoke format on a Matrix interface");
  }, r.prototype.toString = function() {
    throw new Error("Cannot invoke toString on a Matrix interface");
  }, r;
}, {
  isClass: !0
});
function ll(r, e, t) {
  var n = r.constructor, i = new n(2), a = "";
  if (t) {
    if (t < 1)
      throw new Error("size must be in greater than 0");
    if (!$e(t))
      throw new Error("size must be an integer");
    if (r.greaterThan(i.pow(t - 1).sub(1)) || r.lessThan(i.pow(t - 1).mul(-1)))
      throw new Error("Value must be in range [-2^".concat(t - 1, ", 2^").concat(t - 1, "-1]"));
    if (!r.isInteger())
      throw new Error("Value must be an integer");
    r.lessThan(0) && (r = r.add(i.pow(t))), a = "i".concat(t);
  }
  switch (e) {
    case 2:
      return "".concat(r.toBinary()).concat(a);
    case 8:
      return "".concat(r.toOctal()).concat(a);
    case 16:
      return "".concat(r.toHexadecimal()).concat(a);
    default:
      throw new Error("Base ".concat(e, " not supported "));
  }
}
function ab(r, e) {
  if (typeof e == "function")
    return e(r);
  if (!r.isFinite())
    return r.isNaN() ? "NaN" : r.gt(0) ? "Infinity" : "-Infinity";
  var {
    notation: t,
    precision: n,
    wordSize: i
  } = _g(e);
  switch (t) {
    case "fixed":
      return ob(r, n);
    case "exponential":
      return gh(r, n);
    case "engineering":
      return sb(r, n);
    case "bin":
      return ll(r, 2, i);
    case "oct":
      return ll(r, 8, i);
    case "hex":
      return ll(r, 16, i);
    case "auto": {
      var a = yh(e == null ? void 0 : e.lowerExp, -3), s = yh(e == null ? void 0 : e.upperExp, 5);
      if (r.isZero()) return "0";
      var o, l = r.toSignificantDigits(n), u = l.e;
      return u >= a && u < s ? o = l.toFixed() : o = gh(r, n), o.replace(/((\.\d*?)(0+))($|e)/, function() {
        var c = arguments[2], f = arguments[4];
        return c !== "." ? c + f : f;
      });
    }
    default:
      throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
function sb(r, e) {
  var t = r.e, n = t % 3 === 0 ? t : t < 0 ? t - 3 - t % 3 : t - t % 3, i = r.mul(Math.pow(10, -n)), a = i.toPrecision(e);
  if (a.includes("e")) {
    var s = r.constructor;
    a = new s(a).toFixed();
  }
  return a + "e" + (t >= 0 ? "+" : "") + n.toString();
}
function gh(r, e) {
  return e !== void 0 ? r.toExponential(e - 1) : r.toExponential();
}
function ob(r, e) {
  return r.toFixed(e);
}
function yh(r, e) {
  return et(r) ? r : Qe(r) ? r.toNumber() : e;
}
function ub(r, e) {
  var t = r.length - e.length, n = r.length;
  return r.substring(t, n) === e;
}
function lt(r, e) {
  var t = lb(r, e);
  return e && typeof e == "object" && "truncate" in e && t.length > e.truncate ? t.substring(0, e.truncate - 3) + "..." : t;
}
function lb(r, e) {
  if (typeof r == "number")
    return Wi(r, e);
  if (Qe(r))
    return ab(r, e);
  if (cb(r))
    return !e || e.fraction !== "decimal" ? "".concat(r.s * r.n, "/").concat(r.d) : r.toString();
  if (Array.isArray(r))
    return Bg(r, e);
  if (sr(r))
    return Na(r);
  if (typeof r == "function")
    return r.syntax ? String(r.syntax) : "function";
  if (r && typeof r == "object") {
    if (typeof r.format == "function")
      return r.format(e);
    if (r && r.toString(e) !== {}.toString())
      return r.toString(e);
    var t = Object.keys(r).map((n) => Na(n) + ": " + lt(r[n], e));
    return "{" + t.join(", ") + "}";
  }
  return String(r);
}
function Na(r) {
  for (var e = String(r), t = "", n = 0; n < e.length; ) {
    var i = e.charAt(n);
    t += i in xh ? xh[i] : i, n++;
  }
  return '"' + t + '"';
}
var xh = {
  '"': '\\"',
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t"
};
function Jr(r) {
  var e = String(r);
  return e = e.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), e;
}
function Bg(r, e) {
  if (Array.isArray(r)) {
    for (var t = "[", n = r.length, i = 0; i < n; i++)
      i !== 0 && (t += ", "), t += Bg(r[i], e);
    return t += "]", t;
  } else
    return lt(r, e);
}
function cb(r) {
  return r && typeof r == "object" && typeof r.s == "bigint" && typeof r.n == "bigint" && typeof r.d == "bigint" || !1;
}
function ic(r, e) {
  if (!sr(r))
    throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + Dt(r) + ", index: 0)");
  if (!sr(e))
    throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + Dt(e) + ", index: 1)");
  return r === e ? 0 : r > e ? 1 : -1;
}
function st(r, e, t) {
  if (!(this instanceof st))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.actual = r, this.expected = e, this.relation = t, this.message = "Dimension mismatch (" + (Array.isArray(r) ? "[" + r.join(", ") + "]" : r) + " " + (this.relation || "!=") + " " + (Array.isArray(e) ? "[" + e.join(", ") + "]" : e) + ")", this.stack = new Error().stack;
}
st.prototype = new RangeError();
st.prototype.constructor = RangeError;
st.prototype.name = "DimensionError";
st.prototype.isDimensionError = !0;
function jr(r, e, t) {
  if (!(this instanceof jr))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.index = r, arguments.length < 3 ? (this.min = 0, this.max = e) : (this.min = e, this.max = t), this.min !== void 0 && this.index < this.min ? this.message = "Index out of range (" + this.index + " < " + this.min + ")" : this.max !== void 0 && this.index >= this.max ? this.message = "Index out of range (" + this.index + " > " + (this.max - 1) + ")" : this.message = "Index out of range (" + this.index + ")", this.stack = new Error().stack;
}
jr.prototype = new RangeError();
jr.prototype.constructor = RangeError;
jr.prototype.name = "IndexError";
jr.prototype.isIndexError = !0;
function Je(r) {
  for (var e = []; Array.isArray(r); )
    e.push(r.length), r = r[0];
  return e;
}
function Ig(r, e, t) {
  var n, i = r.length;
  if (i !== e[t])
    throw new st(i, e[t]);
  if (t < e.length - 1) {
    var a = t + 1;
    for (n = 0; n < i; n++) {
      var s = r[n];
      if (!Array.isArray(s))
        throw new st(e.length - 1, e.length, "<");
      Ig(r[n], e, a);
    }
  } else
    for (n = 0; n < i; n++)
      if (Array.isArray(r[n]))
        throw new st(e.length + 1, e.length, ">");
}
function _h(r, e) {
  var t = e.length === 0;
  if (t) {
    if (Array.isArray(r))
      throw new st(r.length, 0);
  } else
    Ig(r, e, 0);
}
function lu(r, e) {
  var t = r.isMatrix ? r._size : Je(r), n = e._sourceSize;
  n.forEach((i, a) => {
    if (i !== null && i !== t[a])
      throw new st(i, t[a]);
  });
}
function Tt(r, e) {
  if (r !== void 0) {
    if (!et(r) || !$e(r))
      throw new TypeError("Index must be an integer (value: " + r + ")");
    if (r < 0 || typeof e == "number" && r >= e)
      throw new jr(r, e);
  }
}
function Ga(r) {
  for (var e = 0; e < r._dimensions.length; ++e) {
    var t = r._dimensions[e];
    if (t._data && Mt(t._data)) {
      if (t._size[0] === 0)
        return !0;
    } else if (t.isRange) {
      if (t.start === t.end)
        return !0;
    } else if (sr(t) && t.length === 0)
      return !0;
  }
  return !1;
}
function $a(r, e, t) {
  if (!Array.isArray(e))
    throw new TypeError("Array expected");
  if (e.length === 0)
    throw new Error("Resizing to scalar is not supported");
  e.forEach(function(i) {
    if (!et(i) || !$e(i) || i < 0)
      throw new TypeError("Invalid size, must contain positive integers (size: " + lt(e) + ")");
  }), (et(r) || Qe(r)) && (r = [r]);
  var n = t !== void 0 ? t : 0;
  return ac(r, e, 0, n), r;
}
function ac(r, e, t, n) {
  var i, a, s = r.length, o = e[t], l = Math.min(s, o);
  if (r.length = o, t < e.length - 1) {
    var u = t + 1;
    for (i = 0; i < l; i++)
      a = r[i], Array.isArray(a) || (a = [a], r[i] = a), ac(a, e, u, n);
    for (i = l; i < o; i++)
      a = [], r[i] = a, ac(a, e, u, n);
  } else {
    for (i = 0; i < l; i++)
      for (; Array.isArray(r[i]); )
        r[i] = r[i][0];
    for (i = l; i < o; i++)
      r[i] = n;
  }
}
function xf(r, e) {
  var t = vt(r, !0), n = t.length;
  if (!Array.isArray(r) || !Array.isArray(e))
    throw new TypeError("Array expected");
  if (e.length === 0)
    throw new st(0, n, "!=");
  e = _f(e, n);
  var i = Lg(e);
  if (n !== i)
    throw new st(i, n, "!=");
  try {
    return fb(t, e);
  } catch (a) {
    throw a instanceof st ? new st(i, n, "!=") : a;
  }
}
function _f(r, e) {
  var t = Lg(r), n = r.slice(), i = -1, a = r.indexOf(i), s = r.indexOf(i, a + 1) >= 0;
  if (s)
    throw new Error("More than one wildcard in sizes");
  var o = a >= 0, l = e % t === 0;
  if (o)
    if (l)
      n[a] = -e / t;
    else
      throw new Error("Could not replace wildcard, since " + e + " is no multiple of " + -t);
  return n;
}
function Lg(r) {
  return r.reduce((e, t) => e * t, 1);
}
function fb(r, e) {
  for (var t = r, n, i = e.length - 1; i > 0; i--) {
    var a = e[i];
    n = [];
    for (var s = t.length / a, o = 0; o < s; o++)
      n.push(t.slice(o * a, (o + 1) * a));
    t = n;
  }
  return t;
}
function cu(r, e) {
  for (var t = Je(r); Array.isArray(r) && r.length === 1; )
    r = r[0], t.shift();
  for (var n = t.length; t[n - 1] === 1; )
    n--;
  return n < t.length && (r = Ug(r, n, 0), t.length = n), r;
}
function Ug(r, e, t) {
  var n, i;
  if (t < e) {
    var a = t + 1;
    for (n = 0, i = r.length; n < i; n++)
      r[n] = Ug(r[n], e, a);
  } else
    for (; Array.isArray(r); )
      r = r[0];
  return r;
}
function zg(r, e, t, n) {
  var i = n || Je(r);
  if (t)
    for (var a = 0; a < t; a++)
      r = [r], i.unshift(1);
  for (r = kg(r, e, 0); i.length < e; )
    i.push(1);
  return r;
}
function kg(r, e, t) {
  var n, i;
  if (Array.isArray(r)) {
    var a = t + 1;
    for (n = 0, i = r.length; n < i; n++)
      r[n] = kg(r[n], e, a);
  } else
    for (var s = t; s < e; s++)
      r = [r];
  return r;
}
function vt(r) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  if (!Array.isArray(r))
    return r;
  if (typeof e != "boolean")
    throw new TypeError("Boolean expected for second argument of flatten");
  var t = [];
  return e ? i(r) : n(r), t;
  function n(a) {
    for (var s = 0; s < a.length; s++) {
      var o = a[s];
      Array.isArray(o) ? n(o) : t.push(o);
    }
  }
  function i(a) {
    if (Array.isArray(a[0]))
      for (var s = 0; s < a.length; s++)
        i(a[s]);
    else
      for (var o = 0; o < a.length; o++)
        t.push(a[o]);
  }
}
function li(r, e) {
  return Array.prototype.map.call(r, e);
}
function Hg(r, e) {
  Array.prototype.forEach.call(r, e);
}
function bh(r, e) {
  if (Je(r).length !== 1)
    throw new Error("Only one dimensional matrices supported");
  return Array.prototype.filter.call(r, e);
}
function wh(r, e) {
  if (Je(r).length !== 1)
    throw new Error("Only one dimensional matrices supported");
  return Array.prototype.filter.call(r, (t) => e.test(t));
}
function Sh(r, e) {
  return Array.prototype.join.call(r, e);
}
function Va(r) {
  if (!Array.isArray(r))
    throw new TypeError("Array input expected");
  if (r.length === 0)
    return r;
  var e = [], t = 0;
  e[0] = {
    value: r[0],
    identifier: 0
  };
  for (var n = 1; n < r.length; n++)
    r[n] === r[n - 1] ? t++ : t = 0, e.push({
      value: r[n],
      identifier: t
    });
  return e;
}
function fu(r) {
  if (!Array.isArray(r))
    throw new TypeError("Array input expected");
  if (r.length === 0)
    return r;
  for (var e = [], t = 0; t < r.length; t++)
    e.push(r[t].value);
  return e;
}
function Lu(r, e) {
  for (var t, n = 0, i = 0; i < r.length; i++) {
    var a = r[i], s = Array.isArray(a);
    if (i === 0 && s && (n = a.length), s && a.length !== n)
      return;
    var o = s ? Lu(a, e) : e(a);
    if (t === void 0)
      t = o;
    else if (t !== o)
      return "mixed";
  }
  return t;
}
function Gg(r, e, t, n) {
  if (n < t) {
    if (r.length !== e.length)
      throw new st(r.length, e.length);
    for (var i = [], a = 0; a < r.length; a++)
      i[a] = Gg(r[a], e[a], t, n + 1);
    return i;
  } else
    return r.concat(e);
}
function $g() {
  var r = Array.prototype.slice.call(arguments, 0, -1), e = Array.prototype.slice.call(arguments, -1);
  if (r.length === 1)
    return r[0];
  if (r.length > 1)
    return r.slice(1).reduce(function(t, n) {
      return Gg(t, n, e, 0);
    }, r[0]);
  throw new Error("Wrong number of arguments in function concat");
}
function bf() {
  for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
    e[t] = arguments[t];
  for (var n = e.map((h) => h.length), i = Math.max(...n), a = new Array(i).fill(null), s = 0; s < e.length; s++)
    for (var o = e[s], l = n[s], u = 0; u < l; u++) {
      var c = i - l + u;
      o[u] > a[c] && (a[c] = o[u]);
    }
  for (var f = 0; f < e.length; f++)
    Vg(e[f], a);
  return a;
}
function Vg(r, e) {
  for (var t = e.length, n = r.length, i = 0; i < n; i++) {
    var a = t - n + i;
    if (r[i] < e[a] && r[i] > 1 || r[i] > e[a])
      throw new Error("shape mismatch: mismatch is found in arg with shape (".concat(r, ") not possible to broadcast dimension ").concat(n, " with size ").concat(r[i], " to size ").concat(e[a]));
  }
}
function Gi(r, e) {
  var t = Je(r);
  if (qn(t, e))
    return r;
  Vg(t, e);
  var n = bf(t, e), i = n.length, a = [...Array(i - t.length).fill(1), ...t], s = db(r);
  t.length < i && (s = xf(s, a), t = Je(s));
  for (var o = 0; o < i; o++)
    t[o] < n[o] && (s = hb(s, n[o], o), t = Je(s));
  return s;
}
function hb(r, e, t) {
  return $g(...Array(e).fill(r), t);
}
function wf(r, e) {
  if (!Array.isArray(r))
    throw new Error("Array expected");
  var t = Je(r);
  if (e.length !== t.length)
    throw new st(e.length, t.length);
  for (var n = 0; n < e.length; n++)
    Tt(e[n], t[n]);
  return e.reduce((i, a) => i[a], r);
}
function sc(r, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
  if (r.length === 0)
    return [];
  if (t)
    return a(r);
  var n = [];
  return i(r, 0);
  function i(s, o) {
    if (Array.isArray(s)) {
      for (var l = s.length, u = Array(l), c = 0; c < l; c++)
        n[o] = c, u[c] = i(s[c], o + 1);
      return u;
    } else
      return e(s, n.slice(0, o), r);
  }
  function a(s) {
    if (Array.isArray(s)) {
      for (var o = s.length, l = Array(o), u = 0; u < o; u++)
        l[u] = a(s[u]);
      return l;
    } else
      return e(s);
  }
}
function qg(r, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
  if (r.length === 0)
    return;
  if (t) {
    a(r);
    return;
  }
  var n = [];
  i(r, 0);
  function i(s, o) {
    if (Array.isArray(s))
      for (var l = s.length, u = 0; u < l; u++)
        n[o] = u, i(s[u], o + 1);
    else
      e(s, n.slice(0, o), r);
  }
  function a(s) {
    if (Array.isArray(s))
      for (var o = s.length, l = 0; l < o; l++)
        a(s[l]);
    else
      e(s);
  }
}
function db(r) {
  return pr([], r);
}
function Yi(r, e, t) {
  var n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
  if (Cs.isTypedFunction(r)) {
    var i;
    if (n)
      i = 1;
    else {
      var a = (e.isMatrix ? e.size() : Je(e)).map(() => 0), s = e.isMatrix ? e.get(a) : wf(e, a);
      i = vb(r, s, a, e);
    }
    var o;
    if (e.isMatrix && e.dataType !== "mixed" && e.dataType !== void 0) {
      var l = mb(r, i);
      o = l !== void 0 ? l : r;
    } else
      o = r;
    return i >= 1 && i <= 3 ? {
      isUnary: i === 1,
      fn: function() {
        for (var c = arguments.length, f = new Array(c), h = 0; h < c; h++)
          f[h] = arguments[h];
        return Eh(o, f.slice(0, i), t, r.name);
      }
    } : {
      isUnary: !1,
      fn: function() {
        for (var c = arguments.length, f = new Array(c), h = 0; h < c; h++)
          f[h] = arguments[h];
        return Eh(o, f, t, r.name);
      }
    };
  }
  return n === void 0 ? {
    isUnary: pb(r),
    fn: r
  } : {
    isUnary: n,
    fn: r
  };
}
function mb(r, e) {
  var t = [];
  if (Object.entries(r.signatures).forEach((n) => {
    var [i, a] = n;
    i.split(",").length === e && t.push(a);
  }), t.length === 1)
    return t[0];
}
function pb(r) {
  if (r.length !== 1) return !1;
  var e = r.toString();
  if (/arguments/.test(e)) return !1;
  var t = e.match(/\(.*?\)/);
  return !/\.\.\./.test(t);
}
function vb(r, e, t, n) {
  for (var i = [e, t, n], a = 3; a > 0; a--) {
    var s = i.slice(0, a);
    if (Cs.resolve(r, s) !== null)
      return a;
  }
}
function Eh(r, e, t, n) {
  try {
    return r(...e);
  } catch (i) {
    gb(i, e, t, n);
  }
}
function gb(r, e, t, n) {
  var i;
  if (r instanceof TypeError && ((i = r.data) === null || i === void 0 ? void 0 : i.category) === "wrongType") {
    var a = [];
    throw a.push("value: ".concat(Dt(e[0]))), e.length >= 2 && a.push("index: ".concat(Dt(e[1]))), e.length >= 3 && a.push("array: ".concat(Dt(e[2]))), new TypeError("Function ".concat(t, " cannot apply callback arguments ") + "".concat(n, "(").concat(a.join(", "), ") at index ").concat(JSON.stringify(e[1])));
  } else
    throw new TypeError("Function ".concat(t, " cannot apply callback arguments ") + "to function ".concat(n, ": ").concat(r.message));
}
var yb = "DenseMatrix", xb = ["Matrix"], _b = /* @__PURE__ */ W(yb, xb, (r) => {
  var {
    Matrix: e
  } = r;
  function t(c, f) {
    if (!(this instanceof t))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (f && !sr(f))
      throw new Error("Invalid datatype: " + f);
    if (Ve(c))
      c.type === "DenseMatrix" ? (this._data = Ye(c._data), this._size = Ye(c._size), this._datatype = f || c._datatype) : (this._data = c.toArray(), this._size = c.size(), this._datatype = f || c._datatype);
    else if (c && Mt(c.data) && Mt(c.size))
      this._data = c.data, this._size = c.size, _h(this._data, this._size), this._datatype = f || c.datatype;
    else if (Mt(c))
      this._data = u(c), this._size = Je(this._data), _h(this._data, this._size), this._datatype = f;
    else {
      if (c)
        throw new TypeError("Unsupported type of data (" + Dt(c) + ")");
      this._data = [], this._size = [0], this._datatype = f;
    }
  }
  t.prototype = new e(), t.prototype.createDenseMatrix = function(c, f) {
    return new t(c, f);
  }, Object.defineProperty(t, "name", {
    value: "DenseMatrix"
  }), t.prototype.constructor = t, t.prototype.type = "DenseMatrix", t.prototype.isDenseMatrix = !0, t.prototype.getDataType = function() {
    return Lu(this._data, Dt);
  }, t.prototype.storage = function() {
    return "dense";
  }, t.prototype.datatype = function() {
    return this._datatype;
  }, t.prototype.create = function(c, f) {
    return new t(c, f);
  }, t.prototype.subset = function(c, f, h) {
    switch (arguments.length) {
      case 1:
        return n(this, c);
      // intentional fall through
      case 2:
      case 3:
        return a(this, c, f, h);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, t.prototype.get = function(c) {
    return wf(this._data, c);
  }, t.prototype.set = function(c, f, h) {
    if (!Mt(c))
      throw new TypeError("Array expected");
    if (c.length < this._size.length)
      throw new st(c.length, this._size.length, "<");
    var d, m, p, g = c.map(function(S) {
      return S + 1;
    });
    l(this, g, h);
    var v = this._data;
    for (d = 0, m = c.length - 1; d < m; d++)
      p = c[d], Tt(p, v.length), v = v[p];
    return p = c[c.length - 1], Tt(p, v.length), v[p] = f, this;
  };
  function n(c, f) {
    if (!Ls(f))
      throw new TypeError("Invalid index");
    var h = f.isScalar();
    if (h)
      return c.get(f.min());
    var d = f.size();
    if (d.length !== c._size.length)
      throw new st(d.length, c._size.length);
    for (var m = f.min(), p = f.max(), g = 0, v = c._size.length; g < v; g++)
      Tt(m[g], c._size[g]), Tt(p[g], c._size[g]);
    var S = new t([]), x = i(c._data, f);
    return S._size = x.size, S._datatype = c._datatype, S._data = x.data, S;
  }
  function i(c, f) {
    var h = f.size().length - 1, d = Array(h);
    return {
      data: m(c),
      size: d
    };
    function m(p) {
      var g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, v = f.dimension(g);
      return d[g] = v.size()[0], g < h ? v.map((S) => (Tt(S, p.length), m(p[S], g + 1))).valueOf() : v.map((S) => (Tt(S, p.length), p[S])).valueOf();
    }
  }
  function a(c, f, h, d) {
    if (!f || f.isIndex !== !0)
      throw new TypeError("Invalid index");
    var m = f.size(), p = f.isScalar(), g;
    if (Ve(h) ? (g = h.size(), h = h.valueOf()) : g = Je(h), p) {
      if (g.length !== 0)
        throw new TypeError("Scalar expected");
      c.set(f.min(), h, d);
    } else {
      if (!qn(g, m))
        try {
          g.length === 0 ? h = Gi([h], m) : h = Gi(h, m), g = Je(h);
        } catch {
        }
      if (m.length < c._size.length)
        throw new st(m.length, c._size.length, "<");
      if (g.length < m.length) {
        for (var v = 0, S = 0; m[v] === 1 && g[v] === 1; )
          v++;
        for (; m[v] === 1; )
          S++, v++;
        h = zg(h, m.length, S, g);
      }
      if (!qn(m, g))
        throw new st(m, g, ">");
      var x = f.max().map(function(y) {
        return y + 1;
      });
      l(c, x, d), s(c._data, f, h);
    }
    return c;
  }
  function s(c, f, h) {
    var d = f.size().length - 1;
    m(c, h);
    function m(p, g) {
      var v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, S = f.dimension(v);
      v < d ? S.forEach((x, y) => {
        Tt(x, p.length), m(p[x], g[y[0]], v + 1);
      }) : S.forEach((x, y) => {
        Tt(x, p.length), p[x] = g[y[0]];
      });
    }
  }
  t.prototype.resize = function(c, f, h) {
    if (!kr(c))
      throw new TypeError("Array or Matrix expected");
    var d = c.valueOf().map((p) => Array.isArray(p) && p.length === 1 ? p[0] : p), m = h ? this.clone() : this;
    return o(m, d, f);
  };
  function o(c, f, h) {
    if (f.length === 0) {
      for (var d = c._data; Mt(d); )
        d = d[0];
      return d;
    }
    return c._size = f.slice(0), c._data = $a(c._data, c._size, h), c;
  }
  t.prototype.reshape = function(c, f) {
    var h = f ? this.clone() : this;
    h._data = xf(h._data, c);
    var d = h._size.reduce((m, p) => m * p);
    return h._size = _f(c, d), h;
  };
  function l(c, f, h) {
    for (var d = c._size.slice(0), m = !1; d.length < f.length; )
      d.push(0), m = !0;
    for (var p = 0, g = f.length; p < g; p++)
      f[p] > d[p] && (d[p] = f[p], m = !0);
    m && o(c, d, h);
  }
  t.prototype.clone = function() {
    var c = new t({
      data: Ye(this._data),
      size: Ye(this._size),
      datatype: this._datatype
    });
    return c;
  }, t.prototype.size = function() {
    return this._size.slice(0);
  }, t.prototype.map = function(c) {
    var f = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, h = this, d = h._size.length - 1;
    if (d < 0) return h.clone();
    var m = Yi(c, h, "map", f), p = m.fn, g = h.create(void 0, h._datatype);
    if (g._size = h._size, f || m.isUnary)
      return g._data = _(h._data), g;
    if (d === 0) {
      for (var v = h.valueOf(), S = Array(v.length), x = 0; x < v.length; x++)
        S[x] = p(v[x], [x], h);
      return g._data = S, g;
    }
    var y = [];
    return g._data = b(h._data), g;
    function b(M) {
      var A = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, w = Array(M.length);
      if (A < d)
        for (var E = 0; E < M.length; E++)
          y[A] = E, w[E] = b(M[E], A + 1);
      else
        for (var D = 0; D < M.length; D++)
          y[A] = D, w[D] = p(M[D], y.slice(), h);
      return w;
    }
    function _(M) {
      var A = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, w = Array(M.length);
      if (A < d)
        for (var E = 0; E < M.length; E++)
          w[E] = _(M[E], A + 1);
      else
        for (var D = 0; D < M.length; D++)
          w[D] = p(M[D]);
      return w;
    }
  }, t.prototype.forEach = function(c) {
    var f = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, h = this, d = h._size.length - 1;
    if (d < 0) return;
    var m = Yi(c, h, "map", f), p = m.fn;
    if (f || m.isUnary) {
      x(h._data);
      return;
    }
    if (d === 0) {
      for (var g = 0; g < h._data.length; g++)
        p(h._data[g], [g], h);
      return;
    }
    var v = [];
    S(h._data);
    function S(y) {
      var b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      if (b < d)
        for (var _ = 0; _ < y.length; _++)
          v[b] = _, S(y[_], b + 1);
      else
        for (var M = 0; M < y.length; M++)
          v[b] = M, p(y[M], v.slice(), h);
    }
    function x(y) {
      var b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      if (b < d)
        for (var _ = 0; _ < y.length; _++)
          x(y[_], b + 1);
      else
        for (var M = 0; M < y.length; M++)
          p(y[M]);
    }
  }, t.prototype[Symbol.iterator] = function* () {
    var c = this._size.length - 1;
    if (!(c < 0)) {
      if (c === 0) {
        for (var f = 0; f < this._data.length; f++)
          yield {
            value: this._data[f],
            index: [f]
          };
        return;
      }
      var h = [], d = function* (p, g) {
        if (g < c)
          for (var v = 0; v < p.length; v++)
            h[g] = v, yield* d(p[v], g + 1);
        else
          for (var S = 0; S < p.length; S++)
            h[g] = S, yield {
              value: p[S],
              index: h.slice()
            };
      };
      yield* d(this._data, 0);
    }
  }, t.prototype.rows = function() {
    var c = [], f = this.size();
    if (f.length !== 2)
      throw new TypeError("Rows can only be returned for a 2D matrix.");
    var h = this._data;
    for (var d of h)
      c.push(new t([d], this._datatype));
    return c;
  }, t.prototype.columns = function() {
    var c = this, f = [], h = this.size();
    if (h.length !== 2)
      throw new TypeError("Rows can only be returned for a 2D matrix.");
    for (var d = this._data, m = function(v) {
      var S = d.map((x) => [x[v]]);
      f.push(new t(S, c._datatype));
    }, p = 0; p < h[1]; p++)
      m(p);
    return f;
  }, t.prototype.toArray = function() {
    return Ye(this._data);
  }, t.prototype.valueOf = function() {
    return this._data;
  }, t.prototype.format = function(c) {
    return lt(this._data, c);
  }, t.prototype.toString = function() {
    return lt(this._data);
  }, t.prototype.toJSON = function() {
    return {
      mathjs: "DenseMatrix",
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  }, t.prototype.diagonal = function(c) {
    if (c) {
      if (Qe(c) && (c = c.toNumber()), !et(c) || !$e(c))
        throw new TypeError("The parameter k must be an integer number");
    } else
      c = 0;
    for (var f = c > 0 ? c : 0, h = c < 0 ? -c : 0, d = this._size[0], m = this._size[1], p = Math.min(d - h, m - f), g = [], v = 0; v < p; v++)
      g[v] = this._data[v + h][v + f];
    return new t({
      data: g,
      size: [p],
      datatype: this._datatype
    });
  }, t.diagonal = function(c, f, h, d) {
    if (!Mt(c))
      throw new TypeError("Array expected, size parameter");
    if (c.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (c = c.map(function(M) {
      if (Qe(M) && (M = M.toNumber()), !et(M) || !$e(M) || M < 1)
        throw new Error("Size values must be positive integers");
      return M;
    }), h) {
      if (Qe(h) && (h = h.toNumber()), !et(h) || !$e(h))
        throw new TypeError("The parameter k must be an integer number");
    } else
      h = 0;
    var m = h > 0 ? h : 0, p = h < 0 ? -h : 0, g = c[0], v = c[1], S = Math.min(g - p, v - m), x;
    if (Mt(f)) {
      if (f.length !== S)
        throw new Error("Invalid value array length");
      x = function(A) {
        return f[A];
      };
    } else if (Ve(f)) {
      var y = f.size();
      if (y.length !== 1 || y[0] !== S)
        throw new Error("Invalid matrix length");
      x = function(A) {
        return f.get([A]);
      };
    } else
      x = function() {
        return f;
      };
    d || (d = Qe(x(0)) ? x(0).mul(0) : 0);
    var b = [];
    if (c.length > 0) {
      b = $a(b, c, d);
      for (var _ = 0; _ < S; _++)
        b[_ + p][_ + m] = x(_);
    }
    return new t({
      data: b,
      size: [g, v]
    });
  }, t.fromJSON = function(c) {
    return new t(c);
  }, t.prototype.swapRows = function(c, f) {
    if (!et(c) || !$e(c) || !et(f) || !$e(f))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return Tt(c, this._size[0]), Tt(f, this._size[0]), t._swapRows(c, f, this._data), this;
  }, t._swapRows = function(c, f, h) {
    var d = h[c];
    h[c] = h[f], h[f] = d;
  };
  function u(c) {
    return Ve(c) ? u(c.valueOf()) : Mt(c) ? c.map(u) : c;
  }
  return t;
}, {
  isClass: !0
}), Mh = "clone", bb = ["typed"], wb = /* @__PURE__ */ W(Mh, bb, (r) => {
  var {
    typed: e
  } = r;
  return e(Mh, {
    any: Ye
  });
});
function Wg(r) {
  var e = r.length, t = r[0].length, n, i, a = [];
  for (i = 0; i < t; i++) {
    var s = [];
    for (n = 0; n < e; n++)
      s.push(r[n][i]);
    a.push(s);
  }
  return a;
}
function rs(r) {
  for (var e = 0; e < r.length; e++)
    if (kr(r[e]))
      return !0;
  return !1;
}
function pi(r, e) {
  Ve(r) ? r.forEach((t) => e(t), !1, !0) : qg(r, e, !0);
}
function nt(r, e, t) {
  if (!t)
    return Ve(r) ? r.map((i) => e(i), !1, !0) : sc(r, e, !0);
  var n = (i) => i === 0 ? i : e(i);
  return Ve(r) ? r.map((i) => n(i), !1, !0) : sc(r, n, !0);
}
function Uu(r, e, t) {
  var n = Array.isArray(r) ? Je(r) : r.size();
  if (e < 0 || e >= n.length)
    throw new jr(e, n.length);
  return Ve(r) ? r.create(hu(r.valueOf(), e, t), r.datatype()) : hu(r, e, t);
}
function hu(r, e, t) {
  var n, i, a, s;
  if (e <= 0)
    if (Array.isArray(r[0])) {
      for (s = Wg(r), i = [], n = 0; n < s.length; n++)
        i[n] = hu(s[n], e - 1, t);
      return i;
    } else {
      for (a = r[0], n = 1; n < r.length; n++)
        a = t(a, r[n]);
      return a;
    }
  else {
    for (i = [], n = 0; n < r.length; n++)
      i[n] = hu(r[n], e - 1, t);
    return i;
  }
}
function Ah(r, e, t, n, i, a, s, o, l, u, c) {
  var f = r._values, h = r._index, d = r._ptr, m, p, g, v;
  if (n)
    for (p = d[e], g = d[e + 1], m = p; m < g; m++)
      v = h[m], t[v] !== a ? (t[v] = a, s.push(v), n[v] = f[m]) : (n[v] = o(n[v], f[m]), i[v] = a);
  else
    for (p = d[e], g = d[e + 1], m = p; m < g; m++)
      v = h[m], t[v] !== a ? (t[v] = a, s.push(v)) : i[v] = a;
}
var Dh = "isInteger", Sb = ["typed"], Eb = /* @__PURE__ */ W(Dh, Sb, (r) => {
  var {
    typed: e
  } = r;
  return e(Dh, {
    number: $e,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function(n) {
      return n.isInt();
    },
    bigint: function(n) {
      return !0;
    },
    Fraction: function(n) {
      return n.d === 1n;
    },
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), pn = "number", ns = "number, number";
function Xg(r) {
  return Math.abs(r);
}
Xg.signature = pn;
function Yg(r, e) {
  return r + e;
}
Yg.signature = ns;
function Zg(r, e) {
  return r - e;
}
Zg.signature = ns;
function Kg(r, e) {
  return r * e;
}
Kg.signature = ns;
function Jg(r) {
  return -r;
}
Jg.signature = pn;
function Qg(r) {
  return r;
}
Qg.signature = pn;
function xs(r) {
  return Dx(r);
}
xs.signature = pn;
function jg(r) {
  return r * r * r;
}
jg.signature = pn;
function e1(r) {
  return Math.exp(r);
}
e1.signature = pn;
function t1(r) {
  return Cx(r);
}
t1.signature = pn;
function r1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Parameters in function lcm must be integer numbers");
  if (r === 0 || e === 0)
    return 0;
  for (var t, n = r * e; e !== 0; )
    t = e, e = r % t, r = t;
  return Math.abs(n / r);
}
r1.signature = ns;
function Ch(r, e) {
  return e ? Math.log(r) / Math.log(e) : Math.log(r);
}
function du(r) {
  return Mx(r);
}
du.signature = pn;
function oc(r) {
  return Ex(r);
}
oc.signature = pn;
function Th(r) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2, t = e < 0;
  if (t && (e = -e), e === 0)
    throw new Error("Root must be non-zero");
  if (r < 0 && Math.abs(e) % 2 !== 1)
    throw new Error("Root must be odd when a is negative.");
  if (r === 0)
    return t ? 1 / 0 : 0;
  if (!isFinite(r))
    return t ? 0 : r;
  var n = Math.pow(Math.abs(r), 1 / e);
  return n = r < 0 ? -n : n, t ? 1 / n : n;
}
function uc(r) {
  return si(r);
}
uc.signature = pn;
function n1(r) {
  return r * r;
}
n1.signature = pn;
function i1(r, e) {
  var t, n, i, a = 0, s = 1, o = 1, l = 0;
  if (!$e(r) || !$e(e))
    throw new Error("Parameters in function xgcd must be integer numbers");
  for (; e; )
    n = Math.floor(r / e), i = r - n * e, t = a, a = s - n * a, s = t, t = o, o = l - n * o, l = t, r = e, e = i;
  var u;
  return r < 0 ? u = [-r, -s, -l] : u = [r, r ? s : 0, l], u;
}
i1.signature = ns;
function a1(r, e) {
  return r * r < 1 && e === 1 / 0 || r * r > 1 && e === -1 / 0 ? 0 : Math.pow(r, e);
}
a1.signature = ns;
function ds(r) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!$e(e) || e < 0 || e > 15)
    throw new Error("Number of decimals in function round must be an integer from 0 to 15 inclusive");
  return parseFloat(bg(r, e));
}
var Mb = "number", is = "number, number";
function s1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function bitAnd");
  return r & e;
}
s1.signature = is;
function o1(r) {
  if (!$e(r))
    throw new Error("Integer expected in function bitNot");
  return ~r;
}
o1.signature = Mb;
function u1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function bitOr");
  return r | e;
}
u1.signature = is;
function l1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function bitXor");
  return r ^ e;
}
l1.signature = is;
function c1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function leftShift");
  return r << e;
}
c1.signature = is;
function f1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function rightArithShift");
  return r >> e;
}
f1.signature = is;
function h1(r, e) {
  if (!$e(r) || !$e(e))
    throw new Error("Integers expected in function rightLogShift");
  return r >>> e;
}
h1.signature = is;
function kn(r, e) {
  if (e < r)
    return 1;
  if (e === r)
    return e;
  var t = e + r >> 1;
  return kn(r, t) * kn(t + 1, e);
}
function d1(r, e) {
  if (!$e(r) || r < 0)
    throw new TypeError("Positive integer value expected in function combinations");
  if (!$e(e) || e < 0)
    throw new TypeError("Positive integer value expected in function combinations");
  if (e > r)
    throw new TypeError("k must be less than or equal to n");
  for (var t = r - e, n = 1, i = e < t ? t + 1 : e + 1, a = 2, s = e < t ? e : t, o = i; o <= r; ++o)
    for (n *= o; a <= s && n % a === 0; )
      n /= a, ++a;
  return a <= s && (n /= kn(a, s)), n;
}
d1.signature = "number, number";
var Ab = Math.PI, Db = 2 * Math.PI, Cb = Math.E, Tb = 1.618033988749895, Nb = "number", Sf = "number, number";
function m1(r) {
  return !r;
}
m1.signature = Nb;
function lc(r, e) {
  return !!(r || e);
}
lc.signature = Sf;
function cc(r, e) {
  return !!r != !!e;
}
cc.signature = Sf;
function fc(r, e) {
  return !!(r && e);
}
fc.signature = Sf;
function mu(r) {
  var e;
  if ($e(r))
    return r <= 0 ? isFinite(r) ? 1 / 0 : NaN : r > 171 ? 1 / 0 : kn(1, r - 1);
  if (r < 0.5)
    return Math.PI / (Math.sin(Math.PI * r) * mu(1 - r));
  if (r >= 171.35)
    return 1 / 0;
  if (r > 85) {
    var t = r * r, n = t * r, i = n * r, a = i * r;
    return Math.sqrt(2 * Math.PI / r) * Math.pow(r / Math.E, r) * (1 + 1 / (12 * r) + 1 / (288 * t) - 139 / (51840 * n) - 571 / (2488320 * i) + 163879 / (209018880 * a) + 5246819 / (75246796800 * a * r));
  }
  --r, e = Ba[0];
  for (var s = 1; s < Ba.length; ++s)
    e += Ba[s] / (r + s);
  var o = r + p1 + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(o, r + 0.5) * Math.exp(-o) * e;
}
mu.signature = "number";
var p1 = 4.7421875, Ba = [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3399464998481189e-20, 4652362892704858e-20, -9837447530487956e-20, 1580887032249125e-19, -21026444172410488e-20, 21743961811521265e-20, -1643181065367639e-19, 8441822398385275e-20, -26190838401581408e-21, 36899182659531625e-22], v1 = 0.9189385332046728, Rb = 5, Fb = 7, Nh = [1.000000000190015, 76.18009172947146, -86.50532032941678, 24.01409824083091, -1.231739572450155, 0.001208650973866179, -5395239384953e-18];
function pu(r) {
  if (r < 0) return NaN;
  if (r === 0) return 1 / 0;
  if (!isFinite(r)) return r;
  if (r < 0.5)
    return Math.log(Math.PI / Math.sin(Math.PI * r)) - pu(1 - r);
  r = r - 1;
  for (var e = r + Rb + 0.5, t = Nh[0], n = Fb - 1; n >= 1; n--)
    t += Nh[n] / (r + n);
  return v1 + (r + 0.5) * Math.log(e) - e + Math.log(t);
}
pu.signature = "number";
var yr = "number";
function g1(r) {
  return Fx(r);
}
g1.signature = yr;
function y1(r) {
  return Math.atan(1 / r);
}
y1.signature = yr;
function x1(r) {
  return isFinite(r) ? (Math.log((r + 1) / r) + Math.log(r / (r - 1))) / 2 : 0;
}
x1.signature = yr;
function _1(r) {
  return Math.asin(1 / r);
}
_1.signature = yr;
function b1(r) {
  var e = 1 / r;
  return Math.log(e + Math.sqrt(e * e + 1));
}
b1.signature = yr;
function w1(r) {
  return Math.acos(1 / r);
}
w1.signature = yr;
function S1(r) {
  var e = 1 / r, t = Math.sqrt(e * e - 1);
  return Math.log(t + e);
}
S1.signature = yr;
function E1(r) {
  return Ox(r);
}
E1.signature = yr;
function M1(r) {
  return Px(r);
}
M1.signature = yr;
function A1(r) {
  return 1 / Math.tan(r);
}
A1.signature = yr;
function D1(r) {
  var e = Math.exp(2 * r);
  return (e + 1) / (e - 1);
}
D1.signature = yr;
function C1(r) {
  return 1 / Math.sin(r);
}
C1.signature = yr;
function T1(r) {
  return r === 0 ? Number.POSITIVE_INFINITY : Math.abs(2 / (Math.exp(r) - Math.exp(-r))) * si(r);
}
T1.signature = yr;
function N1(r) {
  return 1 / Math.cos(r);
}
N1.signature = yr;
function R1(r) {
  return 2 / (Math.exp(r) + Math.exp(-r));
}
R1.signature = yr;
function F1(r) {
  return Ix(r);
}
F1.signature = yr;
var Ef = "number";
function O1(r) {
  return r < 0;
}
O1.signature = Ef;
function P1(r) {
  return r > 0;
}
P1.signature = Ef;
function B1(r) {
  return Number.isNaN(r);
}
B1.signature = Ef;
function Qr(r, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e-9, n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  if (t <= 0)
    throw new Error("Relative tolerance must be greater than 0");
  if (n < 0)
    throw new Error("Absolute tolerance must be at least 0");
  return r.isNaN() || e.isNaN() ? !1 : !r.isFinite() || !e.isFinite() ? r.eq(e) : r.eq(e) ? !0 : r.minus(e).abs().lte(r.constructor.max(r.constructor.max(r.abs(), e.abs()).mul(t), n));
}
var Rh = "isNegative", Ob = ["typed", "config"], Pb = /* @__PURE__ */ W(Rh, Ob, (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Rh, {
    number: (n) => lr(n, 0, t.relTol, t.absTol) ? !1 : O1(n),
    BigNumber: (n) => Qr(n, new n.constructor(0), t.relTol, t.absTol) ? !1 : n.isNeg() && !n.isZero() && !n.isNaN(),
    bigint: (n) => n < 0n,
    Fraction: (n) => n.s < 0n,
    // It's enough to decide on the sign
    Unit: e.referToSelf((n) => (i) => e.find(n, i.valueType())(i.value)),
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), Fh = "isNumeric", Bb = ["typed"], Ib = /* @__PURE__ */ W(Fh, Bb, (r) => {
  var {
    typed: e
  } = r;
  return e(Fh, {
    "number | BigNumber | bigint | Fraction | boolean": () => !0,
    "Complex | Unit | string | null | undefined | Node": () => !1,
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), Oh = "hasNumericValue", Lb = ["typed", "isNumeric"], Ub = /* @__PURE__ */ W(Oh, Lb, (r) => {
  var {
    typed: e,
    isNumeric: t
  } = r;
  return e(Oh, {
    boolean: () => !0,
    string: function(i) {
      return i.trim().length > 0 && !isNaN(Number(i));
    },
    any: function(i) {
      return t(i);
    }
  });
}), Ph = "isPositive", zb = ["typed", "config"], kb = /* @__PURE__ */ W(Ph, zb, (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Ph, {
    number: (n) => lr(n, 0, t.relTol, t.absTol) ? !1 : P1(n),
    BigNumber: (n) => Qr(n, new n.constructor(0), t.relTol, t.absTol) ? !1 : !n.isNeg() && !n.isZero() && !n.isNaN(),
    bigint: (n) => n > 0n,
    Fraction: (n) => n.s > 0n && n.n > 0n,
    Unit: e.referToSelf((n) => (i) => e.find(n, i.valueType())(i.value)),
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), Bh = "isZero", Hb = ["typed", "equalScalar"], Gb = /* @__PURE__ */ W(Bh, Hb, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return e(Bh, {
    "number | BigNumber | Complex | Fraction": (n) => t(n, 0),
    bigint: (n) => n === 0n,
    Unit: e.referToSelf((n) => (i) => e.find(n, i.valueType())(i.value)),
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), Ih = "isNaN", $b = ["typed"], Vb = /* @__PURE__ */ W(Ih, $b, (r) => {
  var {
    typed: e
  } = r;
  return e(Ih, {
    number: B1,
    BigNumber: function(n) {
      return n.isNaN();
    },
    bigint: function(n) {
      return !1;
    },
    Fraction: function(n) {
      return !1;
    },
    Complex: function(n) {
      return n.isNaN();
    },
    Unit: function(n) {
      return Number.isNaN(n.value);
    },
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), Lh = "typeOf", qb = ["typed"], Wb = /* @__PURE__ */ W(Lh, qb, (r) => {
  var {
    typed: e
  } = r;
  return e(Lh, {
    any: Dt
  });
});
function Xb(r, e, t, n) {
  return lr(r.re, e.re, t, n) && lr(r.im, e.im, t, n);
}
var as = /* @__PURE__ */ W("compareUnits", ["typed"], (r) => {
  var {
    typed: e
  } = r;
  return {
    "Unit, Unit": e.referToSelf((t) => (n, i) => {
      if (!n.equalBase(i))
        throw new Error("Cannot compare units with different base");
      return e.find(t, [n.valueType(), i.valueType()])(n.value, i.value);
    })
  };
}), vu = "equalScalar", Yb = ["typed", "config"], Zb = /* @__PURE__ */ W(vu, Yb, (r) => {
  var {
    typed: e,
    config: t
  } = r, n = as({
    typed: e
  });
  return e(vu, {
    "boolean, boolean": function(a, s) {
      return a === s;
    },
    "number, number": function(a, s) {
      return lr(a, s, t.relTol, t.absTol);
    },
    "BigNumber, BigNumber": function(a, s) {
      return a.eq(s) || Qr(a, s, t.relTol, t.absTol);
    },
    "bigint, bigint": function(a, s) {
      return a === s;
    },
    "Fraction, Fraction": function(a, s) {
      return a.equals(s);
    },
    "Complex, Complex": function(a, s) {
      return Xb(a, s, t.relTol, t.absTol);
    }
  }, n);
});
W(vu, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(vu, {
    "number, number": function(i, a) {
      return lr(i, a, t.relTol, t.absTol);
    }
  });
});
var Kb = "SparseMatrix", Jb = ["typed", "equalScalar", "Matrix"], Qb = /* @__PURE__ */ W(Kb, Jb, (r) => {
  var {
    typed: e,
    equalScalar: t,
    Matrix: n
  } = r;
  function i(p, g) {
    if (!(this instanceof i))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (g && !sr(g))
      throw new Error("Invalid datatype: " + g);
    if (Ve(p))
      a(this, p, g);
    else if (p && Mt(p.index) && Mt(p.ptr) && Mt(p.size))
      this._values = p.values, this._index = p.index, this._ptr = p.ptr, this._size = p.size, this._datatype = g || p.datatype;
    else if (Mt(p))
      s(this, p, g);
    else {
      if (p)
        throw new TypeError("Unsupported type of data (" + Dt(p) + ")");
      this._values = [], this._index = [], this._ptr = [0], this._size = [0, 0], this._datatype = g;
    }
  }
  function a(p, g, v) {
    g.type === "SparseMatrix" ? (p._values = g._values ? Ye(g._values) : void 0, p._index = Ye(g._index), p._ptr = Ye(g._ptr), p._size = Ye(g._size), p._datatype = v || g._datatype) : s(p, g.valueOf(), v || g._datatype);
  }
  function s(p, g, v) {
    p._values = [], p._index = [], p._ptr = [], p._datatype = v;
    var S = g.length, x = 0, y = t, b = 0;
    if (sr(v) && (y = e.find(t, [v, v]) || t, b = e.convert(0, v)), S > 0) {
      var _ = 0;
      do {
        p._ptr.push(p._index.length);
        for (var M = 0; M < S; M++) {
          var A = g[M];
          if (Mt(A)) {
            if (_ === 0 && x < A.length && (x = A.length), _ < A.length) {
              var w = A[_];
              y(w, b) || (p._values.push(w), p._index.push(M));
            }
          } else
            _ === 0 && x < 1 && (x = 1), y(A, b) || (p._values.push(A), p._index.push(M));
        }
        _++;
      } while (_ < x);
    }
    p._ptr.push(p._index.length), p._size = [S, x];
  }
  i.prototype = new n(), i.prototype.createSparseMatrix = function(p, g) {
    return new i(p, g);
  }, Object.defineProperty(i, "name", {
    value: "SparseMatrix"
  }), i.prototype.constructor = i, i.prototype.type = "SparseMatrix", i.prototype.isSparseMatrix = !0, i.prototype.getDataType = function() {
    return Lu(this._values, Dt);
  }, i.prototype.storage = function() {
    return "sparse";
  }, i.prototype.datatype = function() {
    return this._datatype;
  }, i.prototype.create = function(p, g) {
    return new i(p, g);
  }, i.prototype.density = function() {
    var p = this._size[0], g = this._size[1];
    return p !== 0 && g !== 0 ? this._index.length / (p * g) : 0;
  }, i.prototype.subset = function(p, g, v) {
    if (!this._values)
      throw new Error("Cannot invoke subset on a Pattern only matrix");
    switch (arguments.length) {
      case 1:
        return o(this, p);
      // intentional fall through
      case 2:
      case 3:
        return l(this, p, g, v);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  };
  function o(p, g) {
    if (!Ls(g))
      throw new TypeError("Invalid index");
    var v = g.isScalar();
    if (v)
      return p.get(g.min());
    var S = g.size();
    if (S.length !== p._size.length)
      throw new st(S.length, p._size.length);
    var x, y, b, _, M = g.min(), A = g.max();
    for (x = 0, y = p._size.length; x < y; x++)
      Tt(M[x], p._size[x]), Tt(A[x], p._size[x]);
    var w = p._values, E = p._index, D = p._ptr, T = g.dimension(0), R = g.dimension(1), B = [], I = [];
    T.forEach(function(V, ee) {
      I[V] = ee[0], B[V] = !0;
    });
    var C = w ? [] : void 0, k = [], z = [];
    return R.forEach(function(V) {
      for (z.push(k.length), b = D[V], _ = D[V + 1]; b < _; b++)
        x = E[b], B[x] === !0 && (k.push(I[x]), C && C.push(w[b]));
    }), z.push(k.length), new i({
      values: C,
      index: k,
      ptr: z,
      size: S,
      datatype: p._datatype
    });
  }
  function l(p, g, v, S) {
    if (!g || g.isIndex !== !0)
      throw new TypeError("Invalid index");
    var x = g.size(), y = g.isScalar(), b;
    if (Ve(v) ? (b = v.size(), v = v.toArray()) : b = Je(v), y) {
      if (b.length !== 0)
        throw new TypeError("Scalar expected");
      p.set(g.min(), v, S);
    } else {
      if (x.length !== 1 && x.length !== 2)
        throw new st(x.length, p._size.length, "<");
      if (b.length < x.length) {
        for (var _ = 0, M = 0; x[_] === 1 && b[_] === 1; )
          _++;
        for (; x[_] === 1; )
          M++, _++;
        v = zg(v, x.length, M, b);
      }
      if (!qn(x, b))
        throw new st(x, b, ">");
      if (x.length === 1) {
        var A = g.dimension(0);
        A.forEach(function(D, T) {
          Tt(D), p.set([D, 0], v[T[0]], S);
        });
      } else {
        var w = g.dimension(0), E = g.dimension(1);
        w.forEach(function(D, T) {
          Tt(D), E.forEach(function(R, B) {
            Tt(R), p.set([D, R], v[T[0]][B[0]], S);
          });
        });
      }
    }
    return p;
  }
  i.prototype.get = function(p) {
    if (!Mt(p))
      throw new TypeError("Array expected");
    if (p.length !== this._size.length)
      throw new st(p.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke get on a Pattern only matrix");
    var g = p[0], v = p[1];
    Tt(g, this._size[0]), Tt(v, this._size[1]);
    var S = u(g, this._ptr[v], this._ptr[v + 1], this._index);
    return S < this._ptr[v + 1] && this._index[S] === g ? this._values[S] : 0;
  }, i.prototype.set = function(p, g, v) {
    if (!Mt(p))
      throw new TypeError("Array expected");
    if (p.length !== this._size.length)
      throw new st(p.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke set on a Pattern only matrix");
    var S = p[0], x = p[1], y = this._size[0], b = this._size[1], _ = t, M = 0;
    sr(this._datatype) && (_ = e.find(t, [this._datatype, this._datatype]) || t, M = e.convert(0, this._datatype)), (S > y - 1 || x > b - 1) && (h(this, Math.max(S + 1, y), Math.max(x + 1, b), v), y = this._size[0], b = this._size[1]), Tt(S, y), Tt(x, b);
    var A = u(S, this._ptr[x], this._ptr[x + 1], this._index);
    return A < this._ptr[x + 1] && this._index[A] === S ? _(g, M) ? c(A, x, this._values, this._index, this._ptr) : this._values[A] = g : _(g, M) || f(A, S, x, g, this._values, this._index, this._ptr), this;
  };
  function u(p, g, v, S) {
    if (v - g === 0)
      return v;
    for (var x = g; x < v; x++)
      if (S[x] === p)
        return x;
    return g;
  }
  function c(p, g, v, S, x) {
    v.splice(p, 1), S.splice(p, 1);
    for (var y = g + 1; y < x.length; y++)
      x[y]--;
  }
  function f(p, g, v, S, x, y, b) {
    x.splice(p, 0, S), y.splice(p, 0, g);
    for (var _ = v + 1; _ < b.length; _++)
      b[_]++;
  }
  i.prototype.resize = function(p, g, v) {
    if (!kr(p))
      throw new TypeError("Array or Matrix expected");
    var S = p.valueOf().map((y) => Array.isArray(y) && y.length === 1 ? y[0] : y);
    if (S.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    S.forEach(function(y) {
      if (!et(y) || !$e(y) || y < 0)
        throw new TypeError("Invalid size, must contain positive integers (size: " + lt(S) + ")");
    });
    var x = v ? this.clone() : this;
    return h(x, S[0], S[1], g);
  };
  function h(p, g, v, S) {
    var x = S || 0, y = t, b = 0;
    sr(p._datatype) && (y = e.find(t, [p._datatype, p._datatype]) || t, b = e.convert(0, p._datatype), x = e.convert(x, p._datatype));
    var _ = !y(x, b), M = p._size[0], A = p._size[1], w, E, D;
    if (v > A) {
      for (E = A; E < v; E++)
        if (p._ptr[E] = p._values.length, _)
          for (w = 0; w < M; w++)
            p._values.push(x), p._index.push(w);
      p._ptr[v] = p._values.length;
    } else v < A && (p._ptr.splice(v + 1, A - v), p._values.splice(p._ptr[v], p._values.length), p._index.splice(p._ptr[v], p._index.length));
    if (A = v, g > M) {
      if (_) {
        var T = 0;
        for (E = 0; E < A; E++) {
          p._ptr[E] = p._ptr[E] + T, D = p._ptr[E + 1] + T;
          var R = 0;
          for (w = M; w < g; w++, R++)
            p._values.splice(D + R, 0, x), p._index.splice(D + R, 0, w), T++;
        }
        p._ptr[A] = p._values.length;
      }
    } else if (g < M) {
      var B = 0;
      for (E = 0; E < A; E++) {
        p._ptr[E] = p._ptr[E] - B;
        var I = p._ptr[E], C = p._ptr[E + 1] - B;
        for (D = I; D < C; D++)
          w = p._index[D], w > g - 1 && (p._values.splice(D, 1), p._index.splice(D, 1), B++);
      }
      p._ptr[E] = p._values.length;
    }
    return p._size[0] = g, p._size[1] = v, p;
  }
  i.prototype.reshape = function(p, g) {
    if (!Mt(p))
      throw new TypeError("Array expected");
    if (p.length !== 2)
      throw new Error("Sparse matrices can only be reshaped in two dimensions");
    p.forEach(function(V) {
      if (!et(V) || !$e(V) || V <= -2 || V === 0)
        throw new TypeError("Invalid size, must contain positive integers or -1 (size: " + lt(p) + ")");
    });
    var v = this._size[0] * this._size[1];
    p = _f(p, v);
    var S = p[0] * p[1];
    if (v !== S)
      throw new Error("Reshaping sparse matrix will result in the wrong number of elements");
    var x = g ? this.clone() : this;
    if (this._size[0] === p[0] && this._size[1] === p[1])
      return x;
    for (var y = [], b = 0; b < x._ptr.length; b++)
      for (var _ = 0; _ < x._ptr[b + 1] - x._ptr[b]; _++)
        y.push(b);
    for (var M = x._values.slice(), A = x._index.slice(), w = 0; w < x._index.length; w++) {
      var E = A[w], D = y[w], T = E * x._size[1] + D;
      y[w] = T % p[1], A[w] = Math.floor(T / p[1]);
    }
    x._values.length = 0, x._index.length = 0, x._ptr.length = p[1] + 1, x._size = p.slice();
    for (var R = 0; R < x._ptr.length; R++)
      x._ptr[R] = 0;
    for (var B = 0; B < M.length; B++) {
      var I = A[B], C = y[B], k = M[B], z = u(I, x._ptr[C], x._ptr[C + 1], x._index);
      f(z, I, C, k, x._values, x._index, x._ptr);
    }
    return x;
  }, i.prototype.clone = function() {
    var p = new i({
      values: this._values ? Ye(this._values) : void 0,
      index: Ye(this._index),
      ptr: Ye(this._ptr),
      size: Ye(this._size),
      datatype: this._datatype
    });
    return p;
  }, i.prototype.size = function() {
    return this._size.slice(0);
  }, i.prototype.map = function(p, g) {
    if (!this._values)
      throw new Error("Cannot invoke map on a Pattern only matrix");
    var v = this, S = this._size[0], x = this._size[1], y = Yi(p, v, "map"), b = function(M, A, w) {
      return y.fn(M, [A, w], v);
    };
    return d(this, 0, S - 1, 0, x - 1, b, g);
  };
  function d(p, g, v, S, x, y, b) {
    var _ = [], M = [], A = [], w = t, E = 0;
    sr(p._datatype) && (w = e.find(t, [p._datatype, p._datatype]) || t, E = e.convert(0, p._datatype));
    for (var D = function(J, U, ue) {
      var oe = y(J, U, ue);
      w(oe, E) || (_.push(oe), M.push(U));
    }, T = S; T <= x; T++) {
      A.push(_.length);
      var R = p._ptr[T], B = p._ptr[T + 1];
      if (b)
        for (var I = R; I < B; I++) {
          var C = p._index[I];
          C >= g && C <= v && D(p._values[I], C - g, T - S);
        }
      else {
        for (var k = {}, z = R; z < B; z++) {
          var V = p._index[z];
          k[V] = p._values[z];
        }
        for (var ee = g; ee <= v; ee++) {
          var re = ee in k ? k[ee] : 0;
          D(re, ee - g, T - S);
        }
      }
    }
    return A.push(_.length), new i({
      values: _,
      index: M,
      ptr: A,
      size: [v - g + 1, x - S + 1]
    });
  }
  i.prototype.forEach = function(p, g) {
    if (!this._values)
      throw new Error("Cannot invoke forEach on a Pattern only matrix");
    for (var v = this, S = this._size[0], x = this._size[1], y = Yi(p, v, "forEach"), b = 0; b < x; b++) {
      var _ = this._ptr[b], M = this._ptr[b + 1];
      if (g)
        for (var A = _; A < M; A++) {
          var w = this._index[A];
          y.fn(this._values[A], [w, b], v);
        }
      else {
        for (var E = {}, D = _; D < M; D++) {
          var T = this._index[D];
          E[T] = this._values[D];
        }
        for (var R = 0; R < S; R++) {
          var B = R in E ? E[R] : 0;
          y.fn(B, [R, b], v);
        }
      }
    }
  }, i.prototype[Symbol.iterator] = function* () {
    if (!this._values)
      throw new Error("Cannot iterate a Pattern only matrix");
    for (var p = this._size[1], g = 0; g < p; g++)
      for (var v = this._ptr[g], S = this._ptr[g + 1], x = v; x < S; x++) {
        var y = this._index[x];
        yield {
          value: this._values[x],
          index: [y, g]
        };
      }
  }, i.prototype.toArray = function() {
    return m(this._values, this._index, this._ptr, this._size, !0);
  }, i.prototype.valueOf = function() {
    return m(this._values, this._index, this._ptr, this._size, !1);
  };
  function m(p, g, v, S, x) {
    var y = S[0], b = S[1], _ = [], M, A;
    for (M = 0; M < y; M++)
      for (_[M] = [], A = 0; A < b; A++)
        _[M][A] = 0;
    for (A = 0; A < b; A++)
      for (var w = v[A], E = v[A + 1], D = w; D < E; D++)
        M = g[D], _[M][A] = p ? x ? Ye(p[D]) : p[D] : 1;
    return _;
  }
  return i.prototype.format = function(p) {
    for (var g = this._size[0], v = this._size[1], S = this.density(), x = "Sparse Matrix [" + lt(g, p) + " x " + lt(v, p) + "] density: " + lt(S, p) + `
`, y = 0; y < v; y++)
      for (var b = this._ptr[y], _ = this._ptr[y + 1], M = b; M < _; M++) {
        var A = this._index[M];
        x += `
    (` + lt(A, p) + ", " + lt(y, p) + ") ==> " + (this._values ? lt(this._values[M], p) : "X");
      }
    return x;
  }, i.prototype.toString = function() {
    return lt(this.toArray());
  }, i.prototype.toJSON = function() {
    return {
      mathjs: "SparseMatrix",
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  }, i.prototype.diagonal = function(p) {
    if (p) {
      if (Qe(p) && (p = p.toNumber()), !et(p) || !$e(p))
        throw new TypeError("The parameter k must be an integer number");
    } else
      p = 0;
    var g = p > 0 ? p : 0, v = p < 0 ? -p : 0, S = this._size[0], x = this._size[1], y = Math.min(S - v, x - g), b = [], _ = [], M = [];
    M[0] = 0;
    for (var A = g; A < x && b.length < y; A++)
      for (var w = this._ptr[A], E = this._ptr[A + 1], D = w; D < E; D++) {
        var T = this._index[D];
        if (T === A - g + v) {
          b.push(this._values[D]), _[b.length - 1] = T - v;
          break;
        }
      }
    return M.push(b.length), new i({
      values: b,
      index: _,
      ptr: M,
      size: [y, 1]
    });
  }, i.fromJSON = function(p) {
    return new i(p);
  }, i.diagonal = function(p, g, v, S, x) {
    if (!Mt(p))
      throw new TypeError("Array expected, size parameter");
    if (p.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (p = p.map(function(V) {
      if (Qe(V) && (V = V.toNumber()), !et(V) || !$e(V) || V < 1)
        throw new Error("Size values must be positive integers");
      return V;
    }), v) {
      if (Qe(v) && (v = v.toNumber()), !et(v) || !$e(v))
        throw new TypeError("The parameter k must be an integer number");
    } else
      v = 0;
    var y = t, b = 0;
    sr(x) && (y = e.find(t, [x, x]) || t, b = e.convert(0, x));
    var _ = v > 0 ? v : 0, M = v < 0 ? -v : 0, A = p[0], w = p[1], E = Math.min(A - M, w - _), D;
    if (Mt(g)) {
      if (g.length !== E)
        throw new Error("Invalid value array length");
      D = function(ee) {
        return g[ee];
      };
    } else if (Ve(g)) {
      var T = g.size();
      if (T.length !== 1 || T[0] !== E)
        throw new Error("Invalid matrix length");
      D = function(ee) {
        return g.get([ee]);
      };
    } else
      D = function() {
        return g;
      };
    for (var R = [], B = [], I = [], C = 0; C < w; C++) {
      I.push(R.length);
      var k = C - _;
      if (k >= 0 && k < E) {
        var z = D(k);
        y(z, b) || (B.push(k + M), R.push(z));
      }
    }
    return I.push(R.length), new i({
      values: R,
      index: B,
      ptr: I,
      size: [A, w]
    });
  }, i.prototype.swapRows = function(p, g) {
    if (!et(p) || !$e(p) || !et(g) || !$e(g))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return Tt(p, this._size[0]), Tt(g, this._size[0]), i._swapRows(p, g, this._size[1], this._values, this._index, this._ptr), this;
  }, i._forEachRow = function(p, g, v, S, x) {
    for (var y = S[p], b = S[p + 1], _ = y; _ < b; _++)
      x(v[_], g[_]);
  }, i._swapRows = function(p, g, v, S, x, y) {
    for (var b = 0; b < v; b++) {
      var _ = y[b], M = y[b + 1], A = u(p, _, M, x), w = u(g, _, M, x);
      if (A < M && w < M && x[A] === p && x[w] === g) {
        if (S) {
          var E = S[A];
          S[A] = S[w], S[w] = E;
        }
        continue;
      }
      if (A < M && x[A] === p && (w >= M || x[w] !== g)) {
        var D = S ? S[A] : void 0;
        x.splice(w, 0, g), S && S.splice(w, 0, D), x.splice(w <= A ? A + 1 : A, 1), S && S.splice(w <= A ? A + 1 : A, 1);
        continue;
      }
      if (w < M && x[w] === g && (A >= M || x[A] !== p)) {
        var T = S ? S[w] : void 0;
        x.splice(A, 0, p), S && S.splice(A, 0, T), x.splice(A <= w ? w + 1 : w, 1), S && S.splice(A <= w ? w + 1 : w, 1);
      }
    }
  }, i;
}, {
  isClass: !0
}), jb = "number", ew = ["typed"];
function tw(r) {
  var e = r.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);
  if (e) {
    var t = {
      "0b": 2,
      "0o": 8,
      "0x": 16
    }[e[1]], n = e[2], i = e[3];
    return {
      input: r,
      radix: t,
      integerPart: n,
      fractionalPart: i
    };
  } else
    return null;
}
function rw(r) {
  for (var e = parseInt(r.integerPart, r.radix), t = 0, n = 0; n < r.fractionalPart.length; n++) {
    var i = parseInt(r.fractionalPart[n], r.radix);
    t += i / Math.pow(r.radix, n + 1);
  }
  var a = e + t;
  if (isNaN(a))
    throw new SyntaxError('String "' + r.input + '" is not a valid number');
  return a;
}
var nw = /* @__PURE__ */ W(jb, ew, (r) => {
  var {
    typed: e
  } = r, t = e("number", {
    "": function() {
      return 0;
    },
    number: function(i) {
      return i;
    },
    string: function(i) {
      if (i === "NaN") return NaN;
      var a = tw(i);
      if (a)
        return rw(a);
      var s = 0, o = i.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
      o && (s = Number(o[2]), i = o[1]);
      var l = Number(i);
      if (isNaN(l))
        throw new SyntaxError('String "' + i + '" is not a valid number');
      if (o) {
        if (l > 2 ** s - 1)
          throw new SyntaxError('String "'.concat(i, '" is out of range'));
        l >= 2 ** (s - 1) && (l = l - 2 ** s);
      }
      return l;
    },
    BigNumber: function(i) {
      return i.toNumber();
    },
    bigint: function(i) {
      return Number(i);
    },
    Fraction: function(i) {
      return i.valueOf();
    },
    Unit: e.referToSelf((n) => (i) => {
      var a = i.clone();
      return a.value = n(i.value), a;
    }),
    null: function(i) {
      return 0;
    },
    "Unit, string | Unit": function(i, a) {
      return i.toNumber(a);
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
  return t.fromJSON = function(n) {
    return parseFloat(n.value);
  }, t;
}), iw = "bigint", aw = ["typed"], sw = /* @__PURE__ */ W(iw, aw, (r) => {
  var {
    typed: e
  } = r, t = e("bigint", {
    "": function() {
      return 0n;
    },
    bigint: function(i) {
      return i;
    },
    number: function(i) {
      return BigInt(i.toFixed());
    },
    BigNumber: function(i) {
      return BigInt(i.round().toString());
    },
    Fraction: function(i) {
      return BigInt(i.valueOf().toFixed());
    },
    "string | boolean": function(i) {
      return BigInt(i);
    },
    null: function(i) {
      return 0n;
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
  return t.fromJSON = function(n) {
    return BigInt(n.value);
  }, t;
}), Uh = "string", ow = ["typed"], uw = /* @__PURE__ */ W(Uh, ow, (r) => {
  var {
    typed: e
  } = r;
  return e(Uh, {
    "": function() {
      return "";
    },
    number: Wi,
    null: function(n) {
      return "null";
    },
    boolean: function(n) {
      return n + "";
    },
    string: function(n) {
      return n;
    },
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t)),
    any: function(n) {
      return String(n);
    }
  });
}), zh = "boolean", lw = ["typed"], cw = /* @__PURE__ */ W(zh, lw, (r) => {
  var {
    typed: e
  } = r;
  return e(zh, {
    "": function() {
      return !1;
    },
    boolean: function(n) {
      return n;
    },
    number: function(n) {
      return !!n;
    },
    null: function(n) {
      return !1;
    },
    BigNumber: function(n) {
      return !n.isZero();
    },
    string: function(n) {
      var i = n.toLowerCase();
      if (i === "true")
        return !0;
      if (i === "false")
        return !1;
      var a = Number(n);
      if (n !== "" && !isNaN(a))
        return !!a;
      throw new Error('Cannot convert "' + n + '" to a boolean');
    },
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), fw = "bignumber", hw = ["typed", "BigNumber"], dw = /* @__PURE__ */ W(fw, hw, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e("bignumber", {
    "": function() {
      return new t(0);
    },
    number: function(i) {
      return new t(i + "");
    },
    string: function(i) {
      var a = i.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
      if (a) {
        var s = a[2], o = t(a[1]), l = new t(2).pow(Number(s));
        if (o.gt(l.sub(1)))
          throw new SyntaxError('String "'.concat(i, '" is out of range'));
        var u = new t(2).pow(Number(s) - 1);
        return o.gte(u) ? o.sub(l) : o;
      }
      return new t(i);
    },
    BigNumber: function(i) {
      return i;
    },
    bigint: function(i) {
      return new t(i.toString());
    },
    Unit: e.referToSelf((n) => (i) => {
      var a = i.clone();
      return a.value = n(i.value), a;
    }),
    Fraction: function(i) {
      return new t(String(i.n)).div(String(i.d)).times(String(i.s));
    },
    null: function(i) {
      return new t(0);
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), mw = "complex", pw = ["typed", "Complex"], vw = /* @__PURE__ */ W(mw, pw, (r) => {
  var {
    typed: e,
    Complex: t
  } = r;
  return e("complex", {
    "": function() {
      return t.ZERO;
    },
    number: function(i) {
      return new t(i, 0);
    },
    "number, number": function(i, a) {
      return new t(i, a);
    },
    // TODO: this signature should be redundant
    "BigNumber, BigNumber": function(i, a) {
      return new t(i.toNumber(), a.toNumber());
    },
    Fraction: function(i) {
      return new t(i.valueOf(), 0);
    },
    Complex: function(i) {
      return i.clone();
    },
    string: function(i) {
      return t(i);
    },
    null: function(i) {
      return t(0);
    },
    Object: function(i) {
      if ("re" in i && "im" in i)
        return new t(i.re, i.im);
      if ("r" in i && "phi" in i || "abs" in i && "arg" in i)
        return new t(i);
      throw new Error("Expected object with properties (re and im) or (r and phi) or (abs and arg)");
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), gw = "fraction", yw = ["typed", "Fraction"], xw = /* @__PURE__ */ W(gw, yw, (r) => {
  var {
    typed: e,
    Fraction: t
  } = r;
  return e("fraction", {
    number: function(i) {
      if (!isFinite(i) || isNaN(i))
        throw new Error(i + " cannot be represented as a fraction");
      return new t(i);
    },
    string: function(i) {
      return new t(i);
    },
    "number, number": function(i, a) {
      return new t(i, a);
    },
    "bigint, bigint": function(i, a) {
      return new t(i, a);
    },
    null: function(i) {
      return new t(0);
    },
    BigNumber: function(i) {
      return new t(i.toString());
    },
    bigint: function(i) {
      return new t(i.toString());
    },
    Fraction: function(i) {
      return i;
    },
    Unit: e.referToSelf((n) => (i) => {
      var a = i.clone();
      return a.value = n(i.value), a;
    }),
    Object: function(i) {
      return new t(i);
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), kh = "matrix", _w = ["typed", "Matrix", "DenseMatrix", "SparseMatrix"], bw = /* @__PURE__ */ W(kh, _w, (r) => {
  var {
    typed: e,
    Matrix: t,
    DenseMatrix: n,
    SparseMatrix: i
  } = r;
  return e(kh, {
    "": function() {
      return a([]);
    },
    string: function(o) {
      return a([], o);
    },
    "string, string": function(o, l) {
      return a([], o, l);
    },
    Array: function(o) {
      return a(o);
    },
    Matrix: function(o) {
      return a(o, o.storage());
    },
    "Array | Matrix, string": a,
    "Array | Matrix, string, string": a
  });
  function a(s, o, l) {
    if (o === "dense" || o === "default" || o === void 0)
      return new n(s, l);
    if (o === "sparse")
      return new i(s, l);
    throw new TypeError("Unknown matrix type " + JSON.stringify(o) + ".");
  }
}), Hh = "matrixFromFunction", ww = ["typed", "matrix", "isZero"], Sw = /* @__PURE__ */ W(Hh, ww, (r) => {
  var {
    typed: e,
    matrix: t,
    isZero: n
  } = r;
  return e(Hh, {
    "Array | Matrix, function, string, string": function(s, o, l, u) {
      return i(s, o, l, u);
    },
    "Array | Matrix, function, string": function(s, o, l) {
      return i(s, o, l);
    },
    "Matrix, function": function(s, o) {
      return i(s, o, "dense");
    },
    "Array, function": function(s, o) {
      return i(s, o, "dense").toArray();
    },
    "Array | Matrix, string, function": function(s, o, l) {
      return i(s, l, o);
    },
    "Array | Matrix, string, string, function": function(s, o, l, u) {
      return i(s, u, o, l);
    }
  });
  function i(a, s, o, l) {
    var u;
    return l !== void 0 ? u = t(o, l) : u = t(o), u.resize(a), u.forEach(function(c, f) {
      var h = s(f);
      n(h) || u.set(f, h);
    }), u;
  }
}), Gh = "matrixFromRows", Ew = ["typed", "matrix", "flatten", "size"], Mw = /* @__PURE__ */ W(Gh, Ew, (r) => {
  var {
    typed: e,
    matrix: t,
    flatten: n,
    size: i
  } = r;
  return e(Gh, {
    "...Array": function(l) {
      return a(l);
    },
    "...Matrix": function(l) {
      return t(a(l.map((u) => u.toArray())));
    }
    // TODO implement this properly for SparseMatrix
  });
  function a(o) {
    if (o.length === 0) throw new TypeError("At least one row is needed to construct a matrix.");
    var l = s(o[0]), u = [];
    for (var c of o) {
      var f = s(c);
      if (f !== l)
        throw new TypeError("The vectors had different length: " + (l | 0) + " ≠ " + (f | 0));
      u.push(n(c));
    }
    return u;
  }
  function s(o) {
    var l = i(o);
    if (l.length === 1)
      return l[0];
    if (l.length === 2) {
      if (l[0] === 1)
        return l[1];
      if (l[1] === 1)
        return l[0];
      throw new TypeError("At least one of the arguments is not a vector.");
    } else
      throw new TypeError("Only one- or two-dimensional vectors are supported.");
  }
}), $h = "matrixFromColumns", Aw = ["typed", "matrix", "flatten", "size"], Dw = /* @__PURE__ */ W($h, Aw, (r) => {
  var {
    typed: e,
    matrix: t,
    flatten: n,
    size: i
  } = r;
  return e($h, {
    "...Array": function(l) {
      return a(l);
    },
    "...Matrix": function(l) {
      return t(a(l.map((u) => u.toArray())));
    }
    // TODO implement this properly for SparseMatrix
  });
  function a(o) {
    if (o.length === 0) throw new TypeError("At least one column is needed to construct a matrix.");
    for (var l = s(o[0]), u = [], c = 0; c < l; c++)
      u[c] = [];
    for (var f of o) {
      var h = s(f);
      if (h !== l)
        throw new TypeError("The vectors had different length: " + (l | 0) + " ≠ " + (h | 0));
      for (var d = n(f), m = 0; m < l; m++)
        u[m].push(d[m]);
    }
    return u;
  }
  function s(o) {
    var l = i(o);
    if (l.length === 1)
      return l[0];
    if (l.length === 2) {
      if (l[0] === 1)
        return l[1];
      if (l[1] === 1)
        return l[0];
      throw new TypeError("At least one of the arguments is not a vector.");
    } else
      throw new TypeError("Only one- or two-dimensional vectors are supported.");
  }
}), Vh = "splitUnit", Cw = ["typed"], Tw = /* @__PURE__ */ W(Vh, Cw, (r) => {
  var {
    typed: e
  } = r;
  return e(Vh, {
    "Unit, Array": function(n, i) {
      return n.splitUnit(i);
    }
  });
}), qh = "unaryMinus", Nw = ["typed"], Rw = /* @__PURE__ */ W(qh, Nw, (r) => {
  var {
    typed: e
  } = r;
  return e(qh, {
    number: Jg,
    "Complex | BigNumber | Fraction": (t) => t.neg(),
    bigint: (t) => -t,
    Unit: e.referToSelf((t) => (n) => {
      var i = n.clone();
      return i.value = e.find(t, i.valueType())(n.value), i;
    }),
    // deep map collection, skip zeros since unaryMinus(0) = 0
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t, !0))
    // TODO: add support for string
  });
}), Wh = "unaryPlus", Fw = ["typed", "config", "numeric"], Ow = /* @__PURE__ */ W(Wh, Fw, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n
  } = r;
  return e(Wh, {
    number: Qg,
    Complex: function(a) {
      return a;
    },
    BigNumber: function(a) {
      return a;
    },
    bigint: function(a) {
      return a;
    },
    Fraction: function(a) {
      return a;
    },
    Unit: function(a) {
      return a.clone();
    },
    // deep map collection, skip zeros since unaryPlus(0) = 0
    "Array | Matrix": e.referToSelf((i) => (a) => nt(a, i, !0)),
    boolean: function(a) {
      return n(a ? 1 : 0, t.number);
    },
    string: function(a) {
      return n(a, xi(a, t));
    }
  });
}), Xh = "abs", Pw = ["typed"], Bw = /* @__PURE__ */ W(Xh, Pw, (r) => {
  var {
    typed: e
  } = r;
  return e(Xh, {
    number: Xg,
    "Complex | BigNumber | Fraction | Unit": (t) => t.abs(),
    bigint: (t) => t < 0n ? -t : t,
    // deep map collection, skip zeros since abs(0) = 0
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t, !0))
  });
}), Yh = "mapSlices", Iw = ["typed", "isInteger"], hc = /* @__PURE__ */ W(Yh, Iw, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r;
  return e(Yh, {
    "Array | Matrix, number | BigNumber, function": function(i, a, s) {
      if (!t(a))
        throw new TypeError("Integer number expected for dimension");
      var o = Array.isArray(i) ? Je(i) : i.size();
      if (a < 0 || a >= o.length)
        throw new jr(a, o.length);
      return Ve(i) ? i.create(gu(i.valueOf(), a, s), i.datatype()) : gu(i, a, s);
    }
  });
}, {
  formerly: "apply"
});
function gu(r, e, t) {
  var n, i, a;
  if (e <= 0)
    if (Array.isArray(r[0])) {
      for (a = Lw(r), i = [], n = 0; n < a.length; n++)
        i[n] = gu(a[n], e - 1, t);
      return i;
    } else
      return t(r);
  else {
    for (i = [], n = 0; n < r.length; n++)
      i[n] = gu(r[n], e - 1, t);
    return i;
  }
}
function Lw(r) {
  var e = r.length, t = r[0].length, n, i, a = [];
  for (i = 0; i < t; i++) {
    var s = [];
    for (n = 0; n < e; n++)
      s.push(r[n][i]);
    a.push(s);
  }
  return a;
}
var Zh = "addScalar", Uw = ["typed"], zw = /* @__PURE__ */ W(Zh, Uw, (r) => {
  var {
    typed: e
  } = r;
  return e(Zh, {
    "number, number": Yg,
    "Complex, Complex": function(n, i) {
      return n.add(i);
    },
    "BigNumber, BigNumber": function(n, i) {
      return n.plus(i);
    },
    "bigint, bigint": function(n, i) {
      return n + i;
    },
    "Fraction, Fraction": function(n, i) {
      return n.add(i);
    },
    "Unit, Unit": e.referToSelf((t) => (n, i) => {
      if (n.value === null || n.value === void 0)
        throw new Error("Parameter x contains a unit with undefined value");
      if (i.value === null || i.value === void 0)
        throw new Error("Parameter y contains a unit with undefined value");
      if (!n.equalBase(i)) throw new Error("Units do not match");
      var a = n.clone();
      return a.value = e.find(t, [a.valueType(), i.valueType()])(a.value, i.value), a.fixPrefix = !1, a;
    })
  });
}), Kh = "subtractScalar", kw = ["typed"], Hw = /* @__PURE__ */ W(Kh, kw, (r) => {
  var {
    typed: e
  } = r;
  return e(Kh, {
    "number, number": Zg,
    "Complex, Complex": function(n, i) {
      return n.sub(i);
    },
    "BigNumber, BigNumber": function(n, i) {
      return n.minus(i);
    },
    "bigint, bigint": function(n, i) {
      return n - i;
    },
    "Fraction, Fraction": function(n, i) {
      return n.sub(i);
    },
    "Unit, Unit": e.referToSelf((t) => (n, i) => {
      if (n.value === null || n.value === void 0)
        throw new Error("Parameter x contains a unit with undefined value");
      if (i.value === null || i.value === void 0)
        throw new Error("Parameter y contains a unit with undefined value");
      if (!n.equalBase(i)) throw new Error("Units do not match");
      var a = n.clone();
      return a.value = e.find(t, [a.valueType(), i.valueType()])(a.value, i.value), a.fixPrefix = !1, a;
    })
  });
}), Jh = "cbrt", Gw = ["config", "typed", "isNegative", "unaryMinus", "matrix", "Complex", "BigNumber", "Fraction"], $w = /* @__PURE__ */ W(Jh, Gw, (r) => {
  var {
    config: e,
    typed: t,
    isNegative: n,
    unaryMinus: i,
    matrix: a,
    Complex: s,
    BigNumber: o,
    Fraction: l
  } = r;
  return t(Jh, {
    number: xs,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: u,
    "Complex, boolean": u,
    BigNumber: function(h) {
      return h.cbrt();
    },
    Unit: c
  });
  function u(f, h) {
    var d = f.arg() / 3, m = f.abs(), p = new s(xs(m), 0).mul(new s(0, d).exp());
    if (h) {
      var g = [p, new s(xs(m), 0).mul(new s(0, d + Math.PI * 2 / 3).exp()), new s(xs(m), 0).mul(new s(0, d - Math.PI * 2 / 3).exp())];
      return e.matrix === "Array" ? g : a(g);
    } else
      return p;
  }
  function c(f) {
    if (f.value && fn(f.value)) {
      var h = f.clone();
      return h.value = 1, h = h.pow(1 / 3), h.value = u(f.value), h;
    } else {
      var d = n(f.value);
      d && (f.value = i(f.value));
      var m;
      Qe(f.value) ? m = new o(1).div(3) : Qi(f.value) ? m = new l(1, 3) : m = 1 / 3;
      var p = f.pow(m);
      return d && (p.value = i(p.value)), p;
    }
  }
}), Vw = "matAlgo11xS0s", qw = ["typed", "equalScalar"], cr = /* @__PURE__ */ W(Vw, qw, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s, o) {
    var l = i._values, u = i._index, c = i._ptr, f = i._size, h = i._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var d = f[0], m = f[1], p, g = t, v = 0, S = s;
    typeof h == "string" && (p = h, g = e.find(t, [p, p]), v = e.convert(0, p), a = e.convert(a, p), S = e.find(s, [p, p]));
    for (var x = [], y = [], b = [], _ = 0; _ < m; _++) {
      b[_] = y.length;
      for (var M = c[_], A = c[_ + 1], w = M; w < A; w++) {
        var E = u[w], D = o ? S(a, l[w]) : S(l[w], a);
        g(D, v) || (y.push(E), x.push(D));
      }
    }
    return b[m] = y.length, i.createSparseMatrix({
      values: x,
      index: y,
      ptr: b,
      size: [d, m],
      datatype: p
    });
  };
}), Ww = "matAlgo12xSfs", Xw = ["typed", "DenseMatrix"], Qt = /* @__PURE__ */ W(Ww, Xw, (r) => {
  var {
    typed: e,
    DenseMatrix: t
  } = r;
  return function(i, a, s, o) {
    var l = i._values, u = i._index, c = i._ptr, f = i._size, h = i._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var d = f[0], m = f[1], p, g = s;
    typeof h == "string" && (p = h, a = e.convert(a, p), g = e.find(s, [p, p]));
    for (var v = [], S = [], x = [], y = 0; y < m; y++) {
      for (var b = y + 1, _ = c[y], M = c[y + 1], A = _; A < M; A++) {
        var w = u[A];
        S[w] = l[A], x[w] = b;
      }
      for (var E = 0; E < d; E++)
        y === 0 && (v[E] = []), x[E] === b ? v[E][y] = o ? g(a, S[E]) : g(S[E], a) : v[E][y] = o ? g(a, 0) : g(0, a);
    }
    return new t({
      data: v,
      size: [d, m],
      datatype: p
    });
  };
}), Yw = "matAlgo14xDs", Zw = ["typed"], vn = /* @__PURE__ */ W(Yw, Zw, (r) => {
  var {
    typed: e
  } = r;
  return function(i, a, s, o) {
    var l = i._data, u = i._size, c = i._datatype, f, h = s;
    typeof c == "string" && (f = c, a = e.convert(a, f), h = e.find(s, [f, f]));
    var d = u.length > 0 ? t(h, 0, u, u[0], l, a, o) : [];
    return i.createDenseMatrix({
      data: d,
      size: Ye(u),
      datatype: f
    });
  };
  function t(n, i, a, s, o, l, u) {
    var c = [];
    if (i === a.length - 1)
      for (var f = 0; f < s; f++)
        c[f] = u ? n(l, o[f]) : n(o[f], l);
    else
      for (var h = 0; h < s; h++)
        c[h] = t(n, i + 1, a, a[i + 1], o[h], l, u);
    return c;
  }
}), dc = "ceil", Kw = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix"], Jw = new mi(10), Qw = /* @__PURE__ */ W(dc, ["typed", "config", "round"], (r) => {
  var {
    typed: e,
    config: t,
    round: n
  } = r;
  function i(a) {
    var s = Math.ceil(a), o = n(a);
    return s === o ? s : lr(a, o, t.relTol, t.absTol) && !lr(a, s, t.relTol, t.absTol) ? o : s;
  }
  return e(dc, {
    number: i,
    "number, number": function(s, o) {
      if (!$e(o))
        throw new RangeError("number of decimals in function ceil must be an integer");
      if (o < 0 || o > 15)
        throw new RangeError("number of decimals in ceil number must be in range 0-15");
      var l = 10 ** o;
      return i(s * l) / l;
    }
  });
}), jw = /* @__PURE__ */ W(dc, Kw, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: i,
    equalScalar: a,
    zeros: s,
    DenseMatrix: o
  } = r, l = cr({
    typed: e,
    equalScalar: a
  }), u = Qt({
    typed: e,
    DenseMatrix: o
  }), c = vn({
    typed: e
  }), f = Qw({
    typed: e,
    config: t,
    round: n
  });
  function h(d) {
    var m = (v, S) => Qr(v, S, t.relTol, t.absTol), p = d.ceil(), g = n(d);
    return p.eq(g) ? p : m(d, g) && !m(d, p) ? g : p;
  }
  return e("ceil", {
    number: f.signatures.number,
    "number,number": f.signatures["number,number"],
    Complex: function(m) {
      return m.ceil();
    },
    "Complex, number": function(m, p) {
      return m.ceil(p);
    },
    "Complex, BigNumber": function(m, p) {
      return m.ceil(p.toNumber());
    },
    BigNumber: h,
    "BigNumber, BigNumber": function(m, p) {
      var g = Jw.pow(p);
      return h(m.mul(g)).div(g);
    },
    bigint: (d) => d,
    "bigint, number": (d, m) => d,
    "bigint, BigNumber": (d, m) => d,
    Fraction: function(m) {
      return m.ceil();
    },
    "Fraction, number": function(m, p) {
      return m.ceil(p);
    },
    "Fraction, BigNumber": function(m, p) {
      return m.ceil(p.toNumber());
    },
    "Unit, number, Unit": e.referToSelf((d) => function(m, p, g) {
      var v = m.toNumeric(g);
      return g.multiply(d(v, p));
    }),
    "Unit, BigNumber, Unit": e.referToSelf((d) => (m, p, g) => d(m, p.toNumber(), g)),
    "Array | Matrix, number | BigNumber, Unit": e.referToSelf((d) => (m, p, g) => nt(m, (v) => d(v, p, g), !0)),
    "Array | Matrix | Unit, Unit": e.referToSelf((d) => (m, p) => d(m, 0, p)),
    "Array | Matrix": e.referToSelf((d) => (m) => nt(m, d, !0)),
    "Array, number | BigNumber": e.referToSelf((d) => (m, p) => nt(m, (g) => d(g, p), !0)),
    "SparseMatrix, number | BigNumber": e.referToSelf((d) => (m, p) => l(m, p, d, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((d) => (m, p) => c(m, p, d, !1)),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((d) => (m, p) => c(i(p), m, d, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((d) => (m, p) => a(m, 0) ? s(p.size(), p.storage()) : p.storage() === "dense" ? c(p, m, d, !0) : u(p, m, d, !0))
  });
}), Qh = "cube", eS = ["typed"], tS = /* @__PURE__ */ W(Qh, eS, (r) => {
  var {
    typed: e
  } = r;
  return e(Qh, {
    number: jg,
    Complex: function(n) {
      return n.mul(n).mul(n);
    },
    BigNumber: function(n) {
      return n.times(n).times(n);
    },
    bigint: function(n) {
      return n * n * n;
    },
    Fraction: function(n) {
      return n.pow(3);
    },
    Unit: function(n) {
      return n.pow(3);
    }
  });
}), jh = "exp", rS = ["typed"], nS = /* @__PURE__ */ W(jh, rS, (r) => {
  var {
    typed: e
  } = r;
  return e(jh, {
    number: e1,
    Complex: function(n) {
      return n.exp();
    },
    BigNumber: function(n) {
      return n.exp();
    }
  });
}), ed = "expm1", iS = ["typed", "Complex"], aS = /* @__PURE__ */ W(ed, iS, (r) => {
  var {
    typed: e,
    Complex: t
  } = r;
  return e(ed, {
    number: t1,
    Complex: function(i) {
      var a = Math.exp(i.re);
      return new t(a * Math.cos(i.im) - 1, a * Math.sin(i.im));
    },
    BigNumber: function(i) {
      return i.exp().minus(1);
    }
  });
}), mc = "fix", sS = ["typed", "Complex", "matrix", "ceil", "floor", "equalScalar", "zeros", "DenseMatrix"], oS = /* @__PURE__ */ W(mc, ["typed", "ceil", "floor"], (r) => {
  var {
    typed: e,
    ceil: t,
    floor: n
  } = r;
  return e(mc, {
    number: function(a) {
      return a > 0 ? n(a) : t(a);
    },
    "number, number": function(a, s) {
      return a > 0 ? n(a, s) : t(a, s);
    }
  });
}), uS = /* @__PURE__ */ W(mc, sS, (r) => {
  var {
    typed: e,
    Complex: t,
    matrix: n,
    ceil: i,
    floor: a,
    equalScalar: s,
    zeros: o,
    DenseMatrix: l
  } = r, u = Qt({
    typed: e,
    DenseMatrix: l
  }), c = vn({
    typed: e
  }), f = oS({
    typed: e,
    ceil: i,
    floor: a
  });
  return e("fix", {
    number: f.signatures.number,
    "number, number | BigNumber": f.signatures["number,number"],
    Complex: function(d) {
      return new t(d.re > 0 ? Math.floor(d.re) : Math.ceil(d.re), d.im > 0 ? Math.floor(d.im) : Math.ceil(d.im));
    },
    "Complex, number": function(d, m) {
      return new t(d.re > 0 ? a(d.re, m) : i(d.re, m), d.im > 0 ? a(d.im, m) : i(d.im, m));
    },
    "Complex, BigNumber": function(d, m) {
      var p = m.toNumber();
      return new t(d.re > 0 ? a(d.re, p) : i(d.re, p), d.im > 0 ? a(d.im, p) : i(d.im, p));
    },
    BigNumber: function(d) {
      return d.isNegative() ? i(d) : a(d);
    },
    "BigNumber, number | BigNumber": function(d, m) {
      return d.isNegative() ? i(d, m) : a(d, m);
    },
    bigint: (h) => h,
    "bigint, number": (h, d) => h,
    "bigint, BigNumber": (h, d) => h,
    Fraction: function(d) {
      return d.s < 0n ? d.ceil() : d.floor();
    },
    "Fraction, number | BigNumber": function(d, m) {
      return d.s < 0n ? i(d, m) : a(d, m);
    },
    "Unit, number, Unit": e.referToSelf((h) => function(d, m, p) {
      var g = d.toNumeric(p);
      return p.multiply(h(g, m));
    }),
    "Unit, BigNumber, Unit": e.referToSelf((h) => (d, m, p) => h(d, m.toNumber(), p)),
    "Array | Matrix, number | BigNumber, Unit": e.referToSelf((h) => (d, m, p) => nt(d, (g) => h(g, m, p), !0)),
    "Array | Matrix | Unit, Unit": e.referToSelf((h) => (d, m) => h(d, 0, m)),
    "Array | Matrix": e.referToSelf((h) => (d) => nt(d, h, !0)),
    "Array | Matrix, number | BigNumber": e.referToSelf((h) => (d, m) => nt(d, (p) => h(p, m), !0)),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((h) => (d, m) => c(n(m), d, h, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((h) => (d, m) => s(d, 0) ? o(m.size(), m.storage()) : m.storage() === "dense" ? c(m, d, h, !0) : u(m, d, h, !0))
  });
}), pc = "floor", lS = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix"], cS = new mi(10), fS = /* @__PURE__ */ W(pc, ["typed", "config", "round"], (r) => {
  var {
    typed: e,
    config: t,
    round: n
  } = r;
  function i(a) {
    var s = Math.floor(a), o = n(a);
    return s === o ? s : lr(a, o, t.relTol, t.absTol) && !lr(a, s, t.relTol, t.absTol) ? o : s;
  }
  return e(pc, {
    number: i,
    "number, number": function(s, o) {
      if (!$e(o))
        throw new RangeError("number of decimals in function floor must be an integer");
      if (o < 0 || o > 15)
        throw new RangeError("number of decimals in floor number must be in range 0 - 15");
      var l = 10 ** o;
      return i(s * l) / l;
    }
  });
}), I1 = /* @__PURE__ */ W(pc, lS, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: i,
    equalScalar: a,
    zeros: s,
    DenseMatrix: o
  } = r, l = cr({
    typed: e,
    equalScalar: a
  }), u = Qt({
    typed: e,
    DenseMatrix: o
  }), c = vn({
    typed: e
  }), f = fS({
    typed: e,
    config: t,
    round: n
  });
  function h(d) {
    var m = (v, S) => Qr(v, S, t.relTol, t.absTol), p = d.floor(), g = n(d);
    return p.eq(g) ? p : m(d, g) && !m(d, p) ? g : p;
  }
  return e("floor", {
    number: f.signatures.number,
    "number,number": f.signatures["number,number"],
    Complex: function(m) {
      return m.floor();
    },
    "Complex, number": function(m, p) {
      return m.floor(p);
    },
    "Complex, BigNumber": function(m, p) {
      return m.floor(p.toNumber());
    },
    BigNumber: h,
    "BigNumber, BigNumber": function(m, p) {
      var g = cS.pow(p);
      return h(m.mul(g)).div(g);
    },
    bigint: (d) => d,
    "bigint, number": (d, m) => d,
    "bigint, BigNumber": (d, m) => d,
    Fraction: function(m) {
      return m.floor();
    },
    "Fraction, number": function(m, p) {
      return m.floor(p);
    },
    "Fraction, BigNumber": function(m, p) {
      return m.floor(p.toNumber());
    },
    "Unit, number, Unit": e.referToSelf((d) => function(m, p, g) {
      var v = m.toNumeric(g);
      return g.multiply(d(v, p));
    }),
    "Unit, BigNumber, Unit": e.referToSelf((d) => (m, p, g) => d(m, p.toNumber(), g)),
    "Array | Matrix, number | BigNumber, Unit": e.referToSelf((d) => (m, p, g) => nt(m, (v) => d(v, p, g), !0)),
    "Array | Matrix | Unit, Unit": e.referToSelf((d) => (m, p) => d(m, 0, p)),
    "Array | Matrix": e.referToSelf((d) => (m) => nt(m, d, !0)),
    "Array, number | BigNumber": e.referToSelf((d) => (m, p) => nt(m, (g) => d(g, p), !0)),
    "SparseMatrix, number | BigNumber": e.referToSelf((d) => (m, p) => l(m, p, d, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((d) => (m, p) => c(m, p, d, !1)),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((d) => (m, p) => c(i(p), m, d, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((d) => (m, p) => a(m, 0) ? s(p.size(), p.storage()) : p.storage() === "dense" ? c(p, m, d, !0) : u(p, m, d, !0))
  });
}), hS = "matAlgo02xDS0", dS = ["typed", "equalScalar"], gn = /* @__PURE__ */ W(hS, dS, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s, o) {
    var l = i._data, u = i._size, c = i._datatype || i.getDataType(), f = a._values, h = a._index, d = a._ptr, m = a._size, p = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (u.length !== m.length)
      throw new st(u.length, m.length);
    if (u[0] !== m[0] || u[1] !== m[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + u + ") must match Matrix B (" + m + ")");
    if (!f)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var g = u[0], v = u[1], S, x = t, y = 0, b = s;
    typeof c == "string" && c === p && c !== "mixed" && (S = c, x = e.find(t, [S, S]), y = e.convert(0, S), b = e.find(s, [S, S]));
    for (var _ = [], M = [], A = [], w = 0; w < v; w++) {
      A[w] = M.length;
      for (var E = d[w], D = d[w + 1], T = E; T < D; T++) {
        var R = h[T], B = o ? b(f[T], l[R][w]) : b(l[R][w], f[T]);
        x(B, y) || (M.push(R), _.push(B));
      }
    }
    return A[v] = M.length, a.createSparseMatrix({
      values: _,
      index: M,
      ptr: A,
      size: [g, v],
      datatype: c === i._datatype && p === a._datatype ? S : void 0
    });
  };
}), mS = "matAlgo03xDSf", pS = ["typed"], Mr = /* @__PURE__ */ W(mS, pS, (r) => {
  var {
    typed: e
  } = r;
  return function(n, i, a, s) {
    var o = n._data, l = n._size, u = n._datatype || n.getDataType(), c = i._values, f = i._index, h = i._ptr, d = i._size, m = i._datatype || i._data === void 0 ? i._datatype : i.getDataType();
    if (l.length !== d.length)
      throw new st(l.length, d.length);
    if (l[0] !== d[0] || l[1] !== d[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + d + ")");
    if (!c)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var p = l[0], g = l[1], v, S = 0, x = a;
    typeof u == "string" && u === m && u !== "mixed" && (v = u, S = e.convert(0, v), x = e.find(a, [v, v]));
    for (var y = [], b = 0; b < p; b++)
      y[b] = [];
    for (var _ = [], M = [], A = 0; A < g; A++) {
      for (var w = A + 1, E = h[A], D = h[A + 1], T = E; T < D; T++) {
        var R = f[T];
        _[R] = s ? x(c[T], o[R][A]) : x(o[R][A], c[T]), M[R] = w;
      }
      for (var B = 0; B < p; B++)
        M[B] === w ? y[B][A] = _[B] : y[B][A] = s ? x(S, o[B][A]) : x(o[B][A], S);
    }
    return n.createDenseMatrix({
      data: y,
      size: [p, g],
      datatype: u === n._datatype && m === i._datatype ? v : void 0
    });
  };
}), vS = "matAlgo05xSfSf", gS = ["typed", "equalScalar"], zu = /* @__PURE__ */ W(vS, gS, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s) {
    var o = i._values, l = i._index, u = i._ptr, c = i._size, f = i._datatype || i._data === void 0 ? i._datatype : i.getDataType(), h = a._values, d = a._index, m = a._ptr, p = a._size, g = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (c.length !== p.length)
      throw new st(c.length, p.length);
    if (c[0] !== p[0] || c[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + c + ") must match Matrix B (" + p + ")");
    var v = c[0], S = c[1], x, y = t, b = 0, _ = s;
    typeof f == "string" && f === g && f !== "mixed" && (x = f, y = e.find(t, [x, x]), b = e.convert(0, x), _ = e.find(s, [x, x]));
    var M = o && h ? [] : void 0, A = [], w = [], E = M ? [] : void 0, D = M ? [] : void 0, T = [], R = [], B, I, C, k;
    for (I = 0; I < S; I++) {
      w[I] = A.length;
      var z = I + 1;
      for (C = u[I], k = u[I + 1]; C < k; C++)
        B = l[C], A.push(B), T[B] = z, E && (E[B] = o[C]);
      for (C = m[I], k = m[I + 1]; C < k; C++)
        B = d[C], T[B] !== z && A.push(B), R[B] = z, D && (D[B] = h[C]);
      if (M)
        for (C = w[I]; C < A.length; ) {
          B = A[C];
          var V = T[B], ee = R[B];
          if (V === z || ee === z) {
            var re = V === z ? E[B] : b, L = ee === z ? D[B] : b, J = _(re, L);
            y(J, b) ? A.splice(C, 1) : (M.push(J), C++);
          }
        }
    }
    return w[S] = A.length, i.createSparseMatrix({
      values: M,
      index: A,
      ptr: w,
      size: [v, S],
      datatype: f === i._datatype && g === a._datatype ? x : void 0
    });
  };
}), yS = "matAlgo13xDD", xS = ["typed"], _S = /* @__PURE__ */ W(yS, xS, (r) => {
  var {
    typed: e
  } = r;
  return function(i, a, s) {
    var o = i._data, l = i._size, u = i._datatype, c = a._data, f = a._size, h = a._datatype, d = [];
    if (l.length !== f.length)
      throw new st(l.length, f.length);
    for (var m = 0; m < l.length; m++) {
      if (l[m] !== f[m])
        throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + f + ")");
      d[m] = l[m];
    }
    var p, g = s;
    typeof u == "string" && u === h && (p = u, g = e.find(s, [p, p]));
    var v = d.length > 0 ? t(g, 0, d, d[0], o, c) : [];
    return i.createDenseMatrix({
      data: v,
      size: d,
      datatype: p
    });
  };
  function t(n, i, a, s, o, l) {
    var u = [];
    if (i === a.length - 1)
      for (var c = 0; c < s; c++)
        u[c] = n(o[c], l[c]);
    else
      for (var f = 0; f < s; f++)
        u[f] = t(n, i + 1, a, a[i + 1], o[f], l[f]);
    return u;
  }
});
function er(r, e) {
  if (qn(r.size(), e.size()))
    return [r, e];
  var t = bf(r.size(), e.size());
  return [r, e].map((n) => bS(n, t));
}
function bS(r, e) {
  return qn(r.size(), e) ? r : r.create(Gi(r.valueOf(), e), r.datatype());
}
var wS = "matrixAlgorithmSuite", SS = ["typed", "matrix"], Nt = /* @__PURE__ */ W(wS, SS, (r) => {
  var {
    typed: e,
    matrix: t
  } = r, n = _S({
    typed: e
  }), i = vn({
    typed: e
  });
  return function(s) {
    var o = s.elop, l = s.SD || s.DS, u;
    o ? (u = {
      "DenseMatrix, DenseMatrix": (d, m) => n(...er(d, m), o),
      "Array, Array": (d, m) => n(...er(t(d), t(m)), o).valueOf(),
      "Array, DenseMatrix": (d, m) => n(...er(t(d), m), o),
      "DenseMatrix, Array": (d, m) => n(...er(d, t(m)), o)
    }, s.SS && (u["SparseMatrix, SparseMatrix"] = (d, m) => s.SS(...er(d, m), o, !1)), s.DS && (u["DenseMatrix, SparseMatrix"] = (d, m) => s.DS(...er(d, m), o, !1), u["Array, SparseMatrix"] = (d, m) => s.DS(...er(t(d), m), o, !1)), l && (u["SparseMatrix, DenseMatrix"] = (d, m) => l(...er(m, d), o, !0), u["SparseMatrix, Array"] = (d, m) => l(...er(t(m), d), o, !0))) : (u = {
      "DenseMatrix, DenseMatrix": e.referToSelf((d) => (m, p) => n(...er(m, p), d)),
      "Array, Array": e.referToSelf((d) => (m, p) => n(...er(t(m), t(p)), d).valueOf()),
      "Array, DenseMatrix": e.referToSelf((d) => (m, p) => n(...er(t(m), p), d)),
      "DenseMatrix, Array": e.referToSelf((d) => (m, p) => n(...er(m, t(p)), d))
    }, s.SS && (u["SparseMatrix, SparseMatrix"] = e.referToSelf((d) => (m, p) => s.SS(...er(m, p), d, !1))), s.DS && (u["DenseMatrix, SparseMatrix"] = e.referToSelf((d) => (m, p) => s.DS(...er(m, p), d, !1)), u["Array, SparseMatrix"] = e.referToSelf((d) => (m, p) => s.DS(...er(t(m), p), d, !1))), l && (u["SparseMatrix, DenseMatrix"] = e.referToSelf((d) => (m, p) => l(...er(p, m), d, !0)), u["SparseMatrix, Array"] = e.referToSelf((d) => (m, p) => l(...er(t(p), m), d, !0))));
    var c = s.scalar || "any", f = s.Ds || s.Ss;
    f && (o ? (u["DenseMatrix," + c] = (d, m) => i(d, m, o, !1), u[c + ", DenseMatrix"] = (d, m) => i(m, d, o, !0), u["Array," + c] = (d, m) => i(t(d), m, o, !1).valueOf(), u[c + ", Array"] = (d, m) => i(t(m), d, o, !0).valueOf()) : (u["DenseMatrix," + c] = e.referToSelf((d) => (m, p) => i(m, p, d, !1)), u[c + ", DenseMatrix"] = e.referToSelf((d) => (m, p) => i(p, m, d, !0)), u["Array," + c] = e.referToSelf((d) => (m, p) => i(t(m), p, d, !1).valueOf()), u[c + ", Array"] = e.referToSelf((d) => (m, p) => i(t(p), m, d, !0).valueOf())));
    var h = s.sS !== void 0 ? s.sS : s.Ss;
    return o ? (s.Ss && (u["SparseMatrix," + c] = (d, m) => s.Ss(d, m, o, !1)), h && (u[c + ", SparseMatrix"] = (d, m) => h(m, d, o, !0))) : (s.Ss && (u["SparseMatrix," + c] = e.referToSelf((d) => (m, p) => s.Ss(m, p, d, !1))), h && (u[c + ", SparseMatrix"] = e.referToSelf((d) => (m, p) => h(p, m, d, !0)))), o && o.signatures && pg(u, o.signatures), u;
  };
}), td = "mod", ES = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], L1 = /* @__PURE__ */ W(td, ES, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: i,
    equalScalar: a,
    zeros: s,
    DenseMatrix: o,
    concat: l
  } = r, u = I1({
    typed: e,
    config: t,
    round: n,
    matrix: i,
    equalScalar: a,
    zeros: s,
    DenseMatrix: o
  }), c = gn({
    typed: e,
    equalScalar: a
  }), f = Mr({
    typed: e
  }), h = zu({
    typed: e,
    equalScalar: a
  }), d = cr({
    typed: e,
    equalScalar: a
  }), m = Qt({
    typed: e,
    DenseMatrix: o
  }), p = Nt({
    typed: e,
    matrix: i,
    concat: l
  });
  return e(td, {
    "number, number": g,
    "BigNumber, BigNumber": function(S, x) {
      return x.isZero() ? S : S.sub(x.mul(u(S.div(x))));
    },
    "bigint, bigint": function(S, x) {
      if (x === 0n)
        return S;
      if (S < 0) {
        var y = S % x;
        return y === 0n ? y : y + x;
      }
      return S % x;
    },
    "Fraction, Fraction": function(S, x) {
      return x.equals(0) ? S : S.sub(x.mul(u(S.div(x))));
    }
  }, p({
    SS: h,
    DS: f,
    SD: c,
    Ss: d,
    sS: m
  }));
  function g(v, S) {
    return S === 0 ? v : v - S * u(v / S);
  }
}), MS = "matAlgo01xDSid", AS = ["typed"], bi = /* @__PURE__ */ W(MS, AS, (r) => {
  var {
    typed: e
  } = r;
  return function(n, i, a, s) {
    var o = n._data, l = n._size, u = n._datatype || n.getDataType(), c = i._values, f = i._index, h = i._ptr, d = i._size, m = i._datatype || i._data === void 0 ? i._datatype : i.getDataType();
    if (l.length !== d.length)
      throw new st(l.length, d.length);
    if (l[0] !== d[0] || l[1] !== d[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + d + ")");
    if (!c)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var p = l[0], g = l[1], v = typeof u == "string" && u !== "mixed" && u === m ? u : void 0, S = v ? e.find(a, [v, v]) : a, x, y, b = [];
    for (x = 0; x < p; x++)
      b[x] = [];
    var _ = [], M = [];
    for (y = 0; y < g; y++) {
      for (var A = y + 1, w = h[y], E = h[y + 1], D = w; D < E; D++)
        x = f[D], _[x] = s ? S(c[D], o[x][y]) : S(o[x][y], c[D]), M[x] = A;
      for (x = 0; x < p; x++)
        M[x] === A ? b[x][y] = _[x] : b[x][y] = o[x][y];
    }
    return n.createDenseMatrix({
      data: b,
      size: [p, g],
      datatype: u === n._datatype && m === i._datatype ? v : void 0
    });
  };
}), DS = "matAlgo04xSidSid", CS = ["typed", "equalScalar"], Mf = /* @__PURE__ */ W(DS, CS, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s) {
    var o = i._values, l = i._index, u = i._ptr, c = i._size, f = i._datatype || i._data === void 0 ? i._datatype : i.getDataType(), h = a._values, d = a._index, m = a._ptr, p = a._size, g = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (c.length !== p.length)
      throw new st(c.length, p.length);
    if (c[0] !== p[0] || c[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + c + ") must match Matrix B (" + p + ")");
    var v = c[0], S = c[1], x, y = t, b = 0, _ = s;
    typeof f == "string" && f === g && f !== "mixed" && (x = f, y = e.find(t, [x, x]), b = e.convert(0, x), _ = e.find(s, [x, x]));
    var M = o && h ? [] : void 0, A = [], w = [], E = o && h ? [] : void 0, D = o && h ? [] : void 0, T = [], R = [], B, I, C, k, z;
    for (I = 0; I < S; I++) {
      w[I] = A.length;
      var V = I + 1;
      for (k = u[I], z = u[I + 1], C = k; C < z; C++)
        B = l[C], A.push(B), T[B] = V, E && (E[B] = o[C]);
      for (k = m[I], z = m[I + 1], C = k; C < z; C++)
        if (B = d[C], T[B] === V) {
          if (E) {
            var ee = _(E[B], h[C]);
            y(ee, b) ? T[B] = null : E[B] = ee;
          }
        } else
          A.push(B), R[B] = V, D && (D[B] = h[C]);
      if (E && D)
        for (C = w[I]; C < A.length; )
          B = A[C], T[B] === V ? (M[C] = E[B], C++) : R[B] === V ? (M[C] = D[B], C++) : A.splice(C, 1);
    }
    return w[S] = A.length, i.createSparseMatrix({
      values: M,
      index: A,
      ptr: w,
      size: [v, S],
      datatype: f === i._datatype && g === a._datatype ? x : void 0
    });
  };
}), TS = "matAlgo10xSids", NS = ["typed", "DenseMatrix"], ta = /* @__PURE__ */ W(TS, NS, (r) => {
  var {
    typed: e,
    DenseMatrix: t
  } = r;
  return function(i, a, s, o) {
    var l = i._values, u = i._index, c = i._ptr, f = i._size, h = i._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var d = f[0], m = f[1], p, g = s;
    typeof h == "string" && (p = h, a = e.convert(a, p), g = e.find(s, [p, p]));
    for (var v = [], S = [], x = [], y = 0; y < m; y++) {
      for (var b = y + 1, _ = c[y], M = c[y + 1], A = _; A < M; A++) {
        var w = u[A];
        S[w] = l[A], x[w] = b;
      }
      for (var E = 0; E < d; E++)
        y === 0 && (v[E] = []), x[E] === b ? v[E][y] = o ? g(a, S[E]) : g(S[E], a) : v[E][y] = a;
    }
    return new t({
      data: v,
      size: [d, m],
      datatype: p
    });
  };
});
function Xn(r, e, t, n) {
  if (!(this instanceof Xn))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.fn = r, this.count = e, this.min = t, this.max = n, this.message = "Wrong number of arguments in function " + r + " (" + e + " provided, " + t + (n != null ? "-" + n : "") + " expected)", this.stack = new Error().stack;
}
Xn.prototype = new Error();
Xn.prototype.constructor = Error;
Xn.prototype.name = "ArgumentsError";
Xn.prototype.isArgumentsError = !0;
var rd = "gcd", RS = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix", "concat"], cl = "number | BigNumber | Fraction | Matrix | Array", FS = "".concat(cl, ", ").concat(cl, ", ...").concat(cl);
function nd(r) {
  return !r.some((e) => Array.isArray(e));
}
var OS = /* @__PURE__ */ W(rd, RS, (r) => {
  var {
    typed: e,
    matrix: t,
    config: n,
    round: i,
    equalScalar: a,
    zeros: s,
    BigNumber: o,
    DenseMatrix: l,
    concat: u
  } = r, c = L1({
    typed: e,
    config: n,
    round: i,
    matrix: t,
    equalScalar: a,
    zeros: s,
    DenseMatrix: l,
    concat: u
  }), f = bi({
    typed: e
  }), h = Mf({
    typed: e,
    equalScalar: a
  }), d = ta({
    typed: e,
    DenseMatrix: l
  }), m = Nt({
    typed: e,
    matrix: t,
    concat: u
  });
  return e(rd, {
    "number, number": p,
    "BigNumber, BigNumber": g,
    "Fraction, Fraction": (v, S) => v.gcd(S)
  }, m({
    SS: h,
    DS: f,
    Ss: d
  }), {
    [FS]: e.referToSelf((v) => (S, x, y) => {
      for (var b = v(S, x), _ = 0; _ < y.length; _++)
        b = v(b, y[_]);
      return b;
    }),
    Array: e.referToSelf((v) => (S) => {
      if (S.length === 1 && Array.isArray(S[0]) && nd(S[0]))
        return v(...S[0]);
      if (nd(S))
        return v(...S);
      throw new Xn("gcd() supports only 1d matrices!");
    }),
    Matrix: e.referToSelf((v) => (S) => v(S.toArray()))
  });
  function p(v, S) {
    if (!$e(v) || !$e(S))
      throw new Error("Parameters in function gcd must be integer numbers");
    for (var x; S !== 0; )
      x = c(v, S), v = S, S = x;
    return v < 0 ? -v : v;
  }
  function g(v, S) {
    if (!v.isInt() || !S.isInt())
      throw new Error("Parameters in function gcd must be integer numbers");
    for (var x = new o(0); !S.isZero(); ) {
      var y = c(v, S);
      v = S, S = y;
    }
    return v.lt(x) ? v.neg() : v;
  }
}), PS = "matAlgo06xS0S0", BS = ["typed", "equalScalar"], ku = /* @__PURE__ */ W(PS, BS, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s) {
    var o = i._values, l = i._size, u = i._datatype || i._data === void 0 ? i._datatype : i.getDataType(), c = a._values, f = a._size, h = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (l.length !== f.length)
      throw new st(l.length, f.length);
    if (l[0] !== f[0] || l[1] !== f[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + f + ")");
    var d = l[0], m = l[1], p, g = t, v = 0, S = s;
    typeof u == "string" && u === h && u !== "mixed" && (p = u, g = e.find(t, [p, p]), v = e.convert(0, p), S = e.find(s, [p, p]));
    for (var x = o && c ? [] : void 0, y = [], b = [], _ = x ? [] : void 0, M = [], A = [], w = 0; w < m; w++) {
      b[w] = y.length;
      var E = w + 1;
      if (Ah(i, w, M, _, A, E, y, S), Ah(a, w, M, _, A, E, y, S), _)
        for (var D = b[w]; D < y.length; ) {
          var T = y[D];
          if (A[T] === E) {
            var R = _[T];
            g(R, v) ? y.splice(D, 1) : (x.push(R), D++);
          } else
            y.splice(D, 1);
        }
      else
        for (var B = b[w]; B < y.length; ) {
          var I = y[B];
          A[I] !== E ? y.splice(B, 1) : B++;
        }
    }
    return b[m] = y.length, i.createSparseMatrix({
      values: x,
      index: y,
      ptr: b,
      size: [d, m],
      datatype: u === i._datatype && h === a._datatype ? p : void 0
    });
  };
}), id = "lcm", IS = ["typed", "matrix", "equalScalar", "concat"], LS = /* @__PURE__ */ W(id, IS, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    concat: i
  } = r, a = gn({
    typed: e,
    equalScalar: n
  }), s = ku({
    typed: e,
    equalScalar: n
  }), o = cr({
    typed: e,
    equalScalar: n
  }), l = Nt({
    typed: e,
    matrix: t,
    concat: i
  }), u = "number | BigNumber | Fraction | Matrix | Array", c = {};
  return c["".concat(u, ", ").concat(u, ", ...").concat(u)] = e.referToSelf((h) => (d, m, p) => {
    for (var g = h(d, m), v = 0; v < p.length; v++)
      g = h(g, p[v]);
    return g;
  }), e(id, {
    "number, number": r1,
    "BigNumber, BigNumber": f,
    "Fraction, Fraction": (h, d) => h.lcm(d)
  }, l({
    SS: s,
    DS: a,
    Ss: o
  }), c);
  function f(h, d) {
    if (!h.isInt() || !d.isInt())
      throw new Error("Parameters in function lcm must be integer numbers");
    if (h.isZero())
      return h;
    if (d.isZero())
      return d;
    for (var m = h.times(d); !d.isZero(); ) {
      var p = d;
      d = h.mod(p), h = p;
    }
    return m.div(h).abs();
  }
});
function Af(r, e, t, n) {
  return function(i) {
    if (i > 0 || t.predictable) {
      if (i <= 0) return NaN;
      var a = i.toString(16), s = a.substring(0, 15);
      return r * (a.length - s.length) + e(+("0x" + s));
    }
    return n(i.toNumber());
  };
}
var ad = "log10", US = ["typed", "config", "Complex"], zS = du(16), kS = /* @__PURE__ */ W(ad, US, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  function i(s) {
    return s.log().div(Math.LN10);
  }
  function a(s) {
    return i(new n(s, 0));
  }
  return e(ad, {
    number: function(o) {
      return o >= 0 || t.predictable ? du(o) : a(o);
    },
    bigint: Af(zS, du, t, a),
    Complex: i,
    BigNumber: function(o) {
      return !o.isNegative() || t.predictable ? o.log() : a(o.toNumber());
    },
    "Array | Matrix": e.referToSelf((s) => (o) => nt(o, s))
  });
}), sd = "log2", HS = ["typed", "config", "Complex"], GS = /* @__PURE__ */ W(sd, HS, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  function i(s) {
    return a(new n(s, 0));
  }
  return e(sd, {
    number: function(o) {
      return o >= 0 || t.predictable ? oc(o) : i(o);
    },
    bigint: Af(4, oc, t, i),
    Complex: a,
    BigNumber: function(o) {
      return !o.isNegative() || t.predictable ? o.log(2) : i(o.toNumber());
    },
    "Array | Matrix": e.referToSelf((s) => (o) => nt(o, s))
  });
  function a(s) {
    var o = Math.sqrt(s.re * s.re + s.im * s.im);
    return new n(Math.log2 ? Math.log2(o) : Math.log(o) / Math.LN2, Math.atan2(s.im, s.re) / Math.LN2);
  }
}), $S = "multiplyScalar", VS = ["typed"], qS = /* @__PURE__ */ W($S, VS, (r) => {
  var {
    typed: e
  } = r;
  return e("multiplyScalar", {
    "number, number": Kg,
    "Complex, Complex": function(n, i) {
      return n.mul(i);
    },
    "BigNumber, BigNumber": function(n, i) {
      return n.times(i);
    },
    "bigint, bigint": function(n, i) {
      return n * i;
    },
    "Fraction, Fraction": function(n, i) {
      return n.mul(i);
    },
    "number | Fraction | BigNumber | Complex, Unit": (t, n) => n.multiply(t),
    "Unit, number | Fraction | BigNumber | Complex | Unit": (t, n) => t.multiply(n)
  });
}), od = "multiply", WS = ["typed", "matrix", "addScalar", "multiplyScalar", "equalScalar", "dot"], XS = /* @__PURE__ */ W(od, WS, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    multiplyScalar: i,
    equalScalar: a,
    dot: s
  } = r, o = cr({
    typed: e,
    equalScalar: a
  }), l = vn({
    typed: e
  });
  function u(b, _) {
    switch (b.length) {
      case 1:
        switch (_.length) {
          case 1:
            if (b[0] !== _[0])
              throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");
            break;
          case 2:
            if (b[0] !== _[0])
              throw new RangeError("Dimension mismatch in multiplication. Vector length (" + b[0] + ") must match Matrix rows (" + _[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + _.length + " dimensions)");
        }
        break;
      case 2:
        switch (_.length) {
          case 1:
            if (b[1] !== _[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix columns (" + b[1] + ") must match Vector length (" + _[0] + ")");
            break;
          case 2:
            if (b[1] !== _[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix A columns (" + b[1] + ") must match Matrix B rows (" + _[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + _.length + " dimensions)");
        }
        break;
      default:
        throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has " + b.length + " dimensions)");
    }
  }
  function c(b, _, M) {
    if (M === 0)
      throw new Error("Cannot multiply two empty vectors");
    return s(b, _);
  }
  function f(b, _) {
    if (_.storage() !== "dense")
      throw new Error("Support for SparseMatrix not implemented");
    return h(b, _);
  }
  function h(b, _) {
    var M = b._data, A = b._size, w = b._datatype || b.getDataType(), E = _._data, D = _._size, T = _._datatype || _.getDataType(), R = A[0], B = D[1], I, C = n, k = i;
    w && T && w === T && typeof w == "string" && w !== "mixed" && (I = w, C = e.find(n, [I, I]), k = e.find(i, [I, I]));
    for (var z = [], V = 0; V < B; V++) {
      for (var ee = k(M[0], E[0][V]), re = 1; re < R; re++)
        ee = C(ee, k(M[re], E[re][V]));
      z[V] = ee;
    }
    return b.createDenseMatrix({
      data: z,
      size: [B],
      datatype: w === b._datatype && T === _._datatype ? I : void 0
    });
  }
  var d = e("_multiplyMatrixVector", {
    "DenseMatrix, any": p,
    "SparseMatrix, any": S
  }), m = e("_multiplyMatrixMatrix", {
    "DenseMatrix, DenseMatrix": g,
    "DenseMatrix, SparseMatrix": v,
    "SparseMatrix, DenseMatrix": x,
    "SparseMatrix, SparseMatrix": y
  });
  function p(b, _) {
    var M = b._data, A = b._size, w = b._datatype || b.getDataType(), E = _._data, D = _._datatype || _.getDataType(), T = A[0], R = A[1], B, I = n, C = i;
    w && D && w === D && typeof w == "string" && w !== "mixed" && (B = w, I = e.find(n, [B, B]), C = e.find(i, [B, B]));
    for (var k = [], z = 0; z < T; z++) {
      for (var V = M[z], ee = C(V[0], E[0]), re = 1; re < R; re++)
        ee = I(ee, C(V[re], E[re]));
      k[z] = ee;
    }
    return b.createDenseMatrix({
      data: k,
      size: [T],
      datatype: w === b._datatype && D === _._datatype ? B : void 0
    });
  }
  function g(b, _) {
    var M = b._data, A = b._size, w = b._datatype || b.getDataType(), E = _._data, D = _._size, T = _._datatype || _.getDataType(), R = A[0], B = A[1], I = D[1], C, k = n, z = i;
    w && T && w === T && typeof w == "string" && w !== "mixed" && w !== "mixed" && (C = w, k = e.find(n, [C, C]), z = e.find(i, [C, C]));
    for (var V = [], ee = 0; ee < R; ee++) {
      var re = M[ee];
      V[ee] = [];
      for (var L = 0; L < I; L++) {
        for (var J = z(re[0], E[0][L]), U = 1; U < B; U++)
          J = k(J, z(re[U], E[U][L]));
        V[ee][L] = J;
      }
    }
    return b.createDenseMatrix({
      data: V,
      size: [R, I],
      datatype: w === b._datatype && T === _._datatype ? C : void 0
    });
  }
  function v(b, _) {
    var M = b._data, A = b._size, w = b._datatype || b.getDataType(), E = _._values, D = _._index, T = _._ptr, R = _._size, B = _._datatype || _._data === void 0 ? _._datatype : _.getDataType();
    if (!E)
      throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");
    var I = A[0], C = R[1], k, z = n, V = i, ee = a, re = 0;
    w && B && w === B && typeof w == "string" && w !== "mixed" && (k = w, z = e.find(n, [k, k]), V = e.find(i, [k, k]), ee = e.find(a, [k, k]), re = e.convert(0, k));
    for (var L = [], J = [], U = [], ue = _.createSparseMatrix({
      values: L,
      index: J,
      ptr: U,
      size: [I, C],
      datatype: w === b._datatype && B === _._datatype ? k : void 0
    }), oe = 0; oe < C; oe++) {
      U[oe] = J.length;
      var ie = T[oe], G = T[oe + 1];
      if (G > ie)
        for (var Z = 0, te = 0; te < I; te++) {
          for (var ne = te + 1, ae = void 0, xe = ie; xe < G; xe++) {
            var q = D[xe];
            Z !== ne ? (ae = V(M[te][q], E[xe]), Z = ne) : ae = z(ae, V(M[te][q], E[xe]));
          }
          Z === ne && !ee(ae, re) && (J.push(te), L.push(ae));
        }
    }
    return U[C] = J.length, ue;
  }
  function S(b, _) {
    var M = b._values, A = b._index, w = b._ptr, E = b._datatype || b._data === void 0 ? b._datatype : b.getDataType();
    if (!M)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var D = _._data, T = _._datatype || _.getDataType(), R = b._size[0], B = _._size[0], I = [], C = [], k = [], z, V = n, ee = i, re = a, L = 0;
    E && T && E === T && typeof E == "string" && E !== "mixed" && (z = E, V = e.find(n, [z, z]), ee = e.find(i, [z, z]), re = e.find(a, [z, z]), L = e.convert(0, z));
    var J = [], U = [];
    k[0] = 0;
    for (var ue = 0; ue < B; ue++) {
      var oe = D[ue];
      if (!re(oe, L))
        for (var ie = w[ue], G = w[ue + 1], Z = ie; Z < G; Z++) {
          var te = A[Z];
          U[te] ? J[te] = V(J[te], ee(oe, M[Z])) : (U[te] = !0, C.push(te), J[te] = ee(oe, M[Z]));
        }
    }
    for (var ne = C.length, ae = 0; ae < ne; ae++) {
      var xe = C[ae];
      I[ae] = J[xe];
    }
    return k[1] = C.length, b.createSparseMatrix({
      values: I,
      index: C,
      ptr: k,
      size: [R, 1],
      datatype: E === b._datatype && T === _._datatype ? z : void 0
    });
  }
  function x(b, _) {
    var M = b._values, A = b._index, w = b._ptr, E = b._datatype || b._data === void 0 ? b._datatype : b.getDataType();
    if (!M)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var D = _._data, T = _._datatype || _.getDataType(), R = b._size[0], B = _._size[0], I = _._size[1], C, k = n, z = i, V = a, ee = 0;
    E && T && E === T && typeof E == "string" && E !== "mixed" && (C = E, k = e.find(n, [C, C]), z = e.find(i, [C, C]), V = e.find(a, [C, C]), ee = e.convert(0, C));
    for (var re = [], L = [], J = [], U = b.createSparseMatrix({
      values: re,
      index: L,
      ptr: J,
      size: [R, I],
      datatype: E === b._datatype && T === _._datatype ? C : void 0
    }), ue = [], oe = [], ie = 0; ie < I; ie++) {
      J[ie] = L.length;
      for (var G = ie + 1, Z = 0; Z < B; Z++) {
        var te = D[Z][ie];
        if (!V(te, ee))
          for (var ne = w[Z], ae = w[Z + 1], xe = ne; xe < ae; xe++) {
            var q = A[xe];
            oe[q] !== G ? (oe[q] = G, L.push(q), ue[q] = z(te, M[xe])) : ue[q] = k(ue[q], z(te, M[xe]));
          }
      }
      for (var Ae = J[ie], De = L.length, Ne = Ae; Ne < De; Ne++) {
        var we = L[Ne];
        re[Ne] = ue[we];
      }
    }
    return J[I] = L.length, U;
  }
  function y(b, _) {
    var M = b._values, A = b._index, w = b._ptr, E = b._datatype || b._data === void 0 ? b._datatype : b.getDataType(), D = _._values, T = _._index, R = _._ptr, B = _._datatype || _._data === void 0 ? _._datatype : _.getDataType(), I = b._size[0], C = _._size[1], k = M && D, z, V = n, ee = i;
    E && B && E === B && typeof E == "string" && E !== "mixed" && (z = E, V = e.find(n, [z, z]), ee = e.find(i, [z, z]));
    for (var re = k ? [] : void 0, L = [], J = [], U = b.createSparseMatrix({
      values: re,
      index: L,
      ptr: J,
      size: [I, C],
      datatype: E === b._datatype && B === _._datatype ? z : void 0
    }), ue = k ? [] : void 0, oe = [], ie, G, Z, te, ne, ae, xe, q, Ae = 0; Ae < C; Ae++) {
      J[Ae] = L.length;
      var De = Ae + 1;
      for (ne = R[Ae], ae = R[Ae + 1], te = ne; te < ae; te++)
        if (q = T[te], k)
          for (G = w[q], Z = w[q + 1], ie = G; ie < Z; ie++)
            xe = A[ie], oe[xe] !== De ? (oe[xe] = De, L.push(xe), ue[xe] = ee(D[te], M[ie])) : ue[xe] = V(ue[xe], ee(D[te], M[ie]));
        else
          for (G = w[q], Z = w[q + 1], ie = G; ie < Z; ie++)
            xe = A[ie], oe[xe] !== De && (oe[xe] = De, L.push(xe));
      if (k)
        for (var Ne = J[Ae], we = L.length, Pe = Ne; Pe < we; Pe++) {
          var $ = L[Pe];
          re[Pe] = ue[$];
        }
    }
    return J[C] = L.length, U;
  }
  return e(od, i, {
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    "Array, Array": e.referTo("Matrix, Matrix", (b) => (_, M) => {
      u(Je(_), Je(M));
      var A = b(t(_), t(M));
      return Ve(A) ? A.valueOf() : A;
    }),
    "Matrix, Matrix": function(_, M) {
      var A = _.size(), w = M.size();
      return u(A, w), A.length === 1 ? w.length === 1 ? c(_, M, A[0]) : f(_, M) : w.length === 1 ? d(_, M) : m(_, M);
    },
    "Matrix, Array": e.referTo("Matrix,Matrix", (b) => (_, M) => b(_, t(M))),
    "Array, Matrix": e.referToSelf((b) => (_, M) => b(t(_, M.storage()), M)),
    "SparseMatrix, any": function(_, M) {
      return o(_, M, i, !1);
    },
    "DenseMatrix, any": function(_, M) {
      return l(_, M, i, !1);
    },
    "any, SparseMatrix": function(_, M) {
      return o(M, _, i, !0);
    },
    "any, DenseMatrix": function(_, M) {
      return l(M, _, i, !0);
    },
    "Array, any": function(_, M) {
      return l(t(_), M, i, !1).valueOf();
    },
    "any, Array": function(_, M) {
      return l(t(M), _, i, !0).valueOf();
    },
    "any, any": i,
    "any, any, ...any": e.referToSelf((b) => (_, M, A) => {
      for (var w = b(_, M), E = 0; E < A.length; E++)
        w = b(w, A[E]);
      return w;
    })
  });
}), ud = "nthRoot", YS = ["typed", "matrix", "equalScalar", "BigNumber", "concat"], ZS = /* @__PURE__ */ W(ud, YS, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    BigNumber: i,
    concat: a
  } = r, s = bi({
    typed: e
  }), o = gn({
    typed: e,
    equalScalar: n
  }), l = ku({
    typed: e,
    equalScalar: n
  }), u = cr({
    typed: e,
    equalScalar: n
  }), c = Nt({
    typed: e,
    matrix: t,
    concat: a
  });
  function f() {
    throw new Error("Complex number not supported in function nthRoot. Use nthRoots instead.");
  }
  return e(ud, {
    number: Th,
    "number, number": Th,
    BigNumber: (d) => h(d, new i(2)),
    "BigNumber, BigNumber": h,
    Complex: f,
    "Complex, number": f,
    Array: e.referTo("DenseMatrix,number", (d) => (m) => d(t(m), 2).valueOf()),
    DenseMatrix: e.referTo("DenseMatrix,number", (d) => (m) => d(m, 2)),
    SparseMatrix: e.referTo("SparseMatrix,number", (d) => (m) => d(m, 2)),
    "SparseMatrix, SparseMatrix": e.referToSelf((d) => (m, p) => {
      if (p.density() === 1)
        return l(m, p, d);
      throw new Error("Root must be non-zero");
    }),
    "DenseMatrix, SparseMatrix": e.referToSelf((d) => (m, p) => {
      if (p.density() === 1)
        return s(m, p, d, !1);
      throw new Error("Root must be non-zero");
    }),
    "Array, SparseMatrix": e.referTo("DenseMatrix,SparseMatrix", (d) => (m, p) => d(t(m), p)),
    "number | BigNumber, SparseMatrix": e.referToSelf((d) => (m, p) => {
      if (p.density() === 1)
        return u(p, m, d, !0);
      throw new Error("Root must be non-zero");
    })
  }, c({
    scalar: "number | BigNumber",
    SD: o,
    Ss: u,
    sS: !1
  }));
  function h(d, m) {
    var p = i.precision, g = i.clone({
      precision: p + 2
    }), v = new i(0), S = new g(1), x = m.isNegative();
    if (x && (m = m.neg()), m.isZero())
      throw new Error("Root must be non-zero");
    if (d.isNegative() && !m.abs().mod(2).equals(1))
      throw new Error("Root must be odd when a is negative.");
    if (d.isZero())
      return x ? new g(1 / 0) : 0;
    if (!d.isFinite())
      return x ? v : d;
    var y = d.abs().pow(S.div(m));
    return y = d.isNeg() ? y.neg() : y, new i((x ? S.div(y) : y).toPrecision(p));
  }
}), ld = "sign", KS = ["typed", "BigNumber", "Fraction", "complex"], JS = /* @__PURE__ */ W(ld, KS, (r) => {
  var {
    typed: e,
    BigNumber: t,
    complex: n,
    Fraction: i
  } = r;
  return e(ld, {
    number: uc,
    Complex: function(s) {
      return s.im === 0 ? n(uc(s.re)) : s.sign();
    },
    BigNumber: function(s) {
      return new t(s.cmp(0));
    },
    bigint: function(s) {
      return s > 0n ? 1n : s < 0n ? -1n : 0n;
    },
    Fraction: function(s) {
      return s.n === 0n ? new i(0) : new i(s.s);
    },
    // deep map collection, skip zeros since sign(0) = 0
    "Array | Matrix": e.referToSelf((a) => (s) => nt(s, a, !0)),
    Unit: e.referToSelf((a) => (s) => {
      if (!s._isDerived() && s.units[0].unit.offset !== 0)
        throw new TypeError("sign is ambiguous for units with offset");
      return e.find(a, s.valueType())(s.value);
    })
  });
}), QS = "sqrt", jS = ["config", "typed", "Complex"], eE = /* @__PURE__ */ W(QS, jS, (r) => {
  var {
    config: e,
    typed: t,
    Complex: n
  } = r;
  return t("sqrt", {
    number: i,
    Complex: function(s) {
      return s.sqrt();
    },
    BigNumber: function(s) {
      return !s.isNegative() || e.predictable ? s.sqrt() : i(s.toNumber());
    },
    Unit: function(s) {
      return s.pow(0.5);
    }
  });
  function i(a) {
    return isNaN(a) ? NaN : a >= 0 || e.predictable ? Math.sqrt(a) : new n(a, 0).sqrt();
  }
}), cd = "square", tE = ["typed"], rE = /* @__PURE__ */ W(cd, tE, (r) => {
  var {
    typed: e
  } = r;
  return e(cd, {
    number: n1,
    Complex: function(n) {
      return n.mul(n);
    },
    BigNumber: function(n) {
      return n.times(n);
    },
    bigint: function(n) {
      return n * n;
    },
    Fraction: function(n) {
      return n.mul(n);
    },
    Unit: function(n) {
      return n.pow(2);
    }
  });
}), fd = "subtract", nE = ["typed", "matrix", "equalScalar", "subtractScalar", "unaryMinus", "DenseMatrix", "concat"], iE = /* @__PURE__ */ W(fd, nE, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    subtractScalar: i,
    unaryMinus: a,
    DenseMatrix: s,
    concat: o
  } = r, l = bi({
    typed: e
  }), u = Mr({
    typed: e
  }), c = zu({
    typed: e,
    equalScalar: n
  }), f = ta({
    typed: e,
    DenseMatrix: s
  }), h = Qt({
    typed: e,
    DenseMatrix: s
  }), d = Nt({
    typed: e,
    matrix: t,
    concat: o
  });
  return e(fd, {
    "any, any": i
  }, d({
    elop: i,
    SS: c,
    DS: l,
    SD: u,
    Ss: h,
    sS: f
  }));
}), hd = "xgcd", aE = ["typed", "config", "matrix", "BigNumber"], sE = /* @__PURE__ */ W(hd, aE, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: i
  } = r;
  return e(hd, {
    "number, number": function(o, l) {
      var u = i1(o, l);
      return t.matrix === "Array" ? u : n(u);
    },
    "BigNumber, BigNumber": a
    // TODO: implement support for Fraction
  });
  function a(s, o) {
    var l, u, c, f = new i(0), h = new i(1), d = f, m = h, p = h, g = f;
    if (!s.isInt() || !o.isInt())
      throw new Error("Parameters in function xgcd must be integer numbers");
    for (; !o.isZero(); )
      u = s.div(o).floor(), c = s.mod(o), l = d, d = m.minus(u.times(d)), m = l, l = p, p = g.minus(u.times(p)), g = l, s = o, o = c;
    var v;
    return s.lt(f) ? v = [s.neg(), m.neg(), g.neg()] : v = [s, s.isZero() ? 0 : m, g], t.matrix === "Array" ? v : n(v);
  }
}), dd = "invmod", oE = ["typed", "config", "BigNumber", "xgcd", "equal", "smaller", "mod", "add", "isInteger"], uE = /* @__PURE__ */ W(dd, oE, (r) => {
  var {
    typed: e,
    config: t,
    BigNumber: n,
    xgcd: i,
    equal: a,
    smaller: s,
    mod: o,
    add: l,
    isInteger: u
  } = r;
  return e(dd, {
    "number, number": c,
    "BigNumber, BigNumber": c
  });
  function c(f, h) {
    if (!u(f) || !u(h)) throw new Error("Parameters in function invmod must be integer numbers");
    if (f = o(f, h), a(h, 0)) throw new Error("Divisor must be non zero");
    var d = i(f, h);
    d = d.valueOf();
    var [m, p] = d;
    return a(m, n(1)) ? (p = o(p, h), s(p, n(0)) && (p = l(p, h)), p) : NaN;
  }
}), lE = "matAlgo09xS0Sf", cE = ["typed", "equalScalar"], U1 = /* @__PURE__ */ W(lE, cE, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s) {
    var o = i._values, l = i._index, u = i._ptr, c = i._size, f = i._datatype || i._data === void 0 ? i._datatype : i.getDataType(), h = a._values, d = a._index, m = a._ptr, p = a._size, g = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (c.length !== p.length)
      throw new st(c.length, p.length);
    if (c[0] !== p[0] || c[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + c + ") must match Matrix B (" + p + ")");
    var v = c[0], S = c[1], x, y = t, b = 0, _ = s;
    typeof f == "string" && f === g && f !== "mixed" && (x = f, y = e.find(t, [x, x]), b = e.convert(0, x), _ = e.find(s, [x, x]));
    var M = o && h ? [] : void 0, A = [], w = [], E = M ? [] : void 0, D = [], T, R, B, I, C;
    for (R = 0; R < S; R++) {
      w[R] = A.length;
      var k = R + 1;
      if (E)
        for (I = m[R], C = m[R + 1], B = I; B < C; B++)
          T = d[B], D[T] = k, E[T] = h[B];
      for (I = u[R], C = u[R + 1], B = I; B < C; B++)
        if (T = l[B], E) {
          var z = D[T] === k ? E[T] : b, V = _(o[B], z);
          y(V, b) || (A.push(T), M.push(V));
        } else
          A.push(T);
    }
    return w[S] = A.length, i.createSparseMatrix({
      values: M,
      index: A,
      ptr: w,
      size: [v, S],
      datatype: f === i._datatype && g === a._datatype ? x : void 0
    });
  };
}), md = "dotMultiply", fE = ["typed", "matrix", "equalScalar", "multiplyScalar", "concat"], hE = /* @__PURE__ */ W(md, fE, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    multiplyScalar: i,
    concat: a
  } = r, s = gn({
    typed: e,
    equalScalar: n
  }), o = U1({
    typed: e,
    equalScalar: n
  }), l = cr({
    typed: e,
    equalScalar: n
  }), u = Nt({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(md, u({
    elop: i,
    SS: o,
    DS: s,
    Ss: l
  }));
});
function dE(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitAnd");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  if (r.isZero() || e.eq(-1) || r.eq(e))
    return r;
  if (e.isZero() || r.eq(-1))
    return e;
  if (!r.isFinite() || !e.isFinite()) {
    if (!r.isFinite() && !e.isFinite())
      return r.isNegative() === e.isNegative() ? r : new t(0);
    if (!r.isFinite())
      return e.isNegative() ? r : r.isNegative() ? new t(0) : e;
    if (!e.isFinite())
      return r.isNegative() ? e : e.isNegative() ? new t(0) : r;
  }
  return Df(r, e, function(n, i) {
    return n & i;
  });
}
function Rs(r) {
  if (r.isFinite() && !r.isInteger())
    throw new Error("Integer expected in function bitNot");
  var e = r.constructor, t = e.precision;
  e.config({
    precision: 1e9
  });
  var n = r.plus(new e(1));
  return n.s = -n.s || null, e.config({
    precision: t
  }), n;
}
function mE(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitOr");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  var n = new t(-1);
  return r.isZero() || e.eq(n) || r.eq(e) ? e : e.isZero() || r.eq(n) ? r : !r.isFinite() || !e.isFinite() ? !r.isFinite() && !r.isNegative() && e.isNegative() || r.isNegative() && !e.isNegative() && !e.isFinite() ? n : r.isNegative() && e.isNegative() ? r.isFinite() ? r : e : r.isFinite() ? e : r : Df(r, e, function(i, a) {
    return i | a;
  });
}
function Df(r, e, t) {
  var n = r.constructor, i, a, s = +(r.s < 0), o = +(e.s < 0);
  if (s) {
    i = no(Rs(r));
    for (var l = 0; l < i.length; ++l)
      i[l] ^= 1;
  } else
    i = no(r);
  if (o) {
    a = no(Rs(e));
    for (var u = 0; u < a.length; ++u)
      a[u] ^= 1;
  } else
    a = no(e);
  var c, f, h;
  i.length <= a.length ? (c = i, f = a, h = s) : (c = a, f = i, h = o);
  var d = c.length, m = f.length, p = t(s, o) ^ 1, g = new n(p ^ 1), v = new n(1), S = new n(2), x = n.precision;
  for (n.config({
    precision: 1e9
  }); d > 0; )
    t(c[--d], f[--m]) === p && (g = g.plus(v)), v = v.times(S);
  for (; m > 0; )
    t(h, f[--m]) === p && (g = g.plus(v)), v = v.times(S);
  return n.config({
    precision: x
  }), p === 0 && (g.s = -g.s), g;
}
function no(r) {
  for (var e = r.d, t = e[0] + "", n = 1; n < e.length; ++n) {
    for (var i = e[n] + "", a = 7 - i.length; a--; )
      i = "0" + i;
    t += i;
  }
  for (var s = t.length; t.charAt(s) === "0"; )
    s--;
  var o = r.e, l = t.slice(0, s + 1 || 1), u = l.length;
  if (o > 0)
    if (++o > u)
      for (o -= u; o--; )
        l += "0";
    else o < u && (l = l.slice(0, o) + "." + l.slice(o));
  for (var c = [0], f = 0; f < l.length; ) {
    for (var h = c.length; h--; )
      c[h] *= 10;
    c[0] += parseInt(l.charAt(f++));
    for (var d = 0; d < c.length; ++d)
      c[d] > 1 && ((c[d + 1] === null || c[d + 1] === void 0) && (c[d + 1] = 0), c[d + 1] += c[d] >> 1, c[d] &= 1);
  }
  return c.reverse();
}
function pE(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitXor");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  if (r.isZero())
    return e;
  if (e.isZero())
    return r;
  if (r.eq(e))
    return new t(0);
  var n = new t(-1);
  return r.eq(n) ? Rs(e) : e.eq(n) ? Rs(r) : !r.isFinite() || !e.isFinite() ? !r.isFinite() && !e.isFinite() ? n : new t(r.isNegative() === e.isNegative() ? 1 / 0 : -1 / 0) : Df(r, e, function(i, a) {
    return i ^ a;
  });
}
function vE(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function leftShift");
  var t = r.constructor;
  return r.isNaN() || e.isNaN() || e.isNegative() && !e.isZero() ? new t(NaN) : r.isZero() || e.isZero() ? r : !r.isFinite() && !e.isFinite() ? new t(NaN) : e.lt(55) ? r.times(Math.pow(2, e.toNumber()) + "") : r.times(new t(2).pow(e));
}
function gE(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function rightArithShift");
  var t = r.constructor;
  return r.isNaN() || e.isNaN() || e.isNegative() && !e.isZero() ? new t(NaN) : r.isZero() || e.isZero() ? r : e.isFinite() ? e.lt(55) ? r.div(Math.pow(2, e.toNumber()) + "").floor() : r.div(new t(2).pow(e)).floor() : r.isNegative() ? new t(-1) : r.isFinite() ? new t(0) : new t(NaN);
}
var pd = "bitAnd", yE = ["typed", "matrix", "equalScalar", "concat"], z1 = /* @__PURE__ */ W(pd, yE, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    concat: i
  } = r, a = gn({
    typed: e,
    equalScalar: n
  }), s = ku({
    typed: e,
    equalScalar: n
  }), o = cr({
    typed: e,
    equalScalar: n
  }), l = Nt({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(pd, {
    "number, number": s1,
    "BigNumber, BigNumber": dE,
    "bigint, bigint": (u, c) => u & c
  }, l({
    SS: s,
    DS: a,
    Ss: o
  }));
}), vd = "bitNot", xE = ["typed"], _E = /* @__PURE__ */ W(vd, xE, (r) => {
  var {
    typed: e
  } = r;
  return e(vd, {
    number: o1,
    BigNumber: Rs,
    bigint: (t) => ~t,
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), gd = "bitOr", bE = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], k1 = /* @__PURE__ */ W(gd, bE, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  } = r, s = bi({
    typed: e
  }), o = Mf({
    typed: e,
    equalScalar: n
  }), l = ta({
    typed: e,
    DenseMatrix: i
  }), u = Nt({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(gd, {
    "number, number": u1,
    "BigNumber, BigNumber": mE,
    "bigint, bigint": (c, f) => c | f
  }, u({
    SS: o,
    DS: s,
    Ss: l
  }));
}), wE = "matAlgo07xSSf", SE = ["typed", "SparseMatrix"], Dn = /* @__PURE__ */ W(wE, SE, (r) => {
  var {
    typed: e,
    SparseMatrix: t
  } = r;
  return function(a, s, o) {
    var l = a._size, u = a._datatype || a._data === void 0 ? a._datatype : a.getDataType(), c = s._size, f = s._datatype || s._data === void 0 ? s._datatype : s.getDataType();
    if (l.length !== c.length)
      throw new st(l.length, c.length);
    if (l[0] !== c[0] || l[1] !== c[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + c + ")");
    var h = l[0], d = l[1], m, p = 0, g = o;
    typeof u == "string" && u === f && u !== "mixed" && (m = u, p = e.convert(0, m), g = e.find(o, [m, m]));
    for (var v = [], S = [], x = new Array(d + 1).fill(0), y = [], b = [], _ = [], M = [], A = 0; A < d; A++) {
      var w = A + 1, E = 0;
      n(a, A, _, y, w), n(s, A, M, b, w);
      for (var D = 0; D < h; D++) {
        var T = _[D] === w ? y[D] : p, R = M[D] === w ? b[D] : p, B = g(T, R);
        B !== 0 && B !== !1 && (S.push(D), v.push(B), E++);
      }
      x[A + 1] = x[A] + E;
    }
    return new t({
      values: v,
      index: S,
      ptr: x,
      size: [h, d],
      datatype: u === a._datatype && f === s._datatype ? m : void 0
    });
  };
  function n(i, a, s, o, l) {
    for (var u = i._values, c = i._index, f = i._ptr, h = f[a], d = f[a + 1]; h < d; h++) {
      var m = c[h];
      s[m] = l, o[m] = u[h];
    }
  }
}), yd = "bitXor", EE = ["typed", "matrix", "DenseMatrix", "concat", "SparseMatrix"], ME = /* @__PURE__ */ W(yd, EE, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    concat: i,
    SparseMatrix: a
  } = r, s = Mr({
    typed: e
  }), o = Dn({
    typed: e,
    SparseMatrix: a
  }), l = Qt({
    typed: e,
    DenseMatrix: n
  }), u = Nt({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(yd, {
    "number, number": l1,
    "BigNumber, BigNumber": pE,
    "bigint, bigint": (c, f) => c ^ f
  }, u({
    SS: o,
    DS: s,
    Ss: l
  }));
}), xd = "arg", AE = ["typed"], DE = /* @__PURE__ */ W(xd, AE, (r) => {
  var {
    typed: e
  } = r;
  return e(xd, {
    number: function(n) {
      return Math.atan2(0, n);
    },
    BigNumber: function(n) {
      return n.constructor.atan2(0, n);
    },
    Complex: function(n) {
      return n.arg();
    },
    // TODO: implement BigNumber support for function arg
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), _d = "conj", CE = ["typed"], TE = /* @__PURE__ */ W(_d, CE, (r) => {
  var {
    typed: e
  } = r;
  return e(_d, {
    "number | BigNumber | Fraction": (t) => t,
    Complex: (t) => t.conjugate(),
    Unit: e.referToSelf((t) => (n) => new n.constructor(t(n.toNumeric()), n.formatUnits())),
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), bd = "im", NE = ["typed"], RE = /* @__PURE__ */ W(bd, NE, (r) => {
  var {
    typed: e
  } = r;
  return e(bd, {
    number: () => 0,
    "BigNumber | Fraction": (t) => t.mul(0),
    Complex: (t) => t.im,
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), wd = "re", FE = ["typed"], OE = /* @__PURE__ */ W(wd, FE, (r) => {
  var {
    typed: e
  } = r;
  return e(wd, {
    "number | BigNumber | Fraction": (t) => t,
    Complex: (t) => t.re,
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), Sd = "not", PE = ["typed"], BE = /* @__PURE__ */ W(Sd, PE, (r) => {
  var {
    typed: e
  } = r;
  return e(Sd, {
    "null | undefined": () => !0,
    number: m1,
    Complex: function(n) {
      return n.re === 0 && n.im === 0;
    },
    BigNumber: function(n) {
      return n.isZero() || n.isNaN();
    },
    bigint: (t) => !t,
    Unit: e.referToSelf((t) => (n) => e.find(t, n.valueType())(n.value)),
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), Ed = "or", IE = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], H1 = /* @__PURE__ */ W(Ed, IE, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  } = r, s = Mr({
    typed: e
  }), o = zu({
    typed: e,
    equalScalar: n
  }), l = Qt({
    typed: e,
    DenseMatrix: i
  }), u = Nt({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(Ed, {
    "number, number": lc,
    "Complex, Complex": function(f, h) {
      return f.re !== 0 || f.im !== 0 || h.re !== 0 || h.im !== 0;
    },
    "BigNumber, BigNumber": function(f, h) {
      return !f.isZero() && !f.isNaN() || !h.isZero() && !h.isNaN();
    },
    "bigint, bigint": lc,
    "Unit, Unit": e.referToSelf((c) => (f, h) => c(f.value || 0, h.value || 0))
  }, u({
    SS: o,
    DS: s,
    Ss: l
  }));
}), Md = "xor", LE = ["typed", "matrix", "DenseMatrix", "concat", "SparseMatrix"], UE = /* @__PURE__ */ W(Md, LE, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    concat: i,
    SparseMatrix: a
  } = r, s = Mr({
    typed: e
  }), o = Dn({
    typed: e,
    SparseMatrix: a
  }), l = Qt({
    typed: e,
    DenseMatrix: n
  }), u = Nt({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(Md, {
    "number, number": cc,
    "Complex, Complex": function(f, h) {
      return (f.re !== 0 || f.im !== 0) != (h.re !== 0 || h.im !== 0);
    },
    "bigint, bigint": cc,
    "BigNumber, BigNumber": function(f, h) {
      return (!f.isZero() && !f.isNaN()) != (!h.isZero() && !h.isNaN());
    },
    "Unit, Unit": e.referToSelf((c) => (f, h) => c(f.value || 0, h.value || 0))
  }, u({
    SS: o,
    DS: s,
    Ss: l
  }));
}), Ad = "concat", zE = ["typed", "matrix", "isInteger"], G1 = /* @__PURE__ */ W(Ad, zE, (r) => {
  var {
    typed: e,
    matrix: t,
    isInteger: n
  } = r;
  return e(Ad, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    "...Array | Matrix | number | BigNumber": function(a) {
      var s, o = a.length, l = -1, u, c = !1, f = [];
      for (s = 0; s < o; s++) {
        var h = a[s];
        if (Ve(h) && (c = !0), et(h) || Qe(h)) {
          if (s !== o - 1)
            throw new Error("Dimension must be specified as last argument");
          if (u = l, l = h.valueOf(), !n(l))
            throw new TypeError("Integer number expected for dimension");
          if (l < 0 || s > 0 && l > u)
            throw new jr(l, u + 1);
        } else {
          var d = Ye(h).valueOf(), m = Je(d);
          if (f[s] = d, u = l, l = m.length - 1, s > 0 && l !== u)
            throw new st(u + 1, l + 1);
        }
      }
      if (f.length === 0)
        throw new SyntaxError("At least one matrix expected");
      for (var p = f.shift(); f.length; )
        p = $g(p, f.shift(), l);
      return c ? t(p) : p;
    },
    "...string": function(a) {
      return a.join("");
    }
  });
}), Dd = "column", kE = ["typed", "Index", "matrix", "range"], $1 = /* @__PURE__ */ W(Dd, kE, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: i
  } = r;
  return e(Dd, {
    "Matrix, number": a,
    "Array, number": function(o, l) {
      return a(n(Ye(o)), l).valueOf();
    }
  });
  function a(s, o) {
    if (s.size().length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    Tt(o, s.size()[1]);
    var l = i(0, s.size()[0]), u = new t(l, o), c = s.subset(u);
    return Ve(c) ? c : n([[c]]);
  }
}), Cd = "count", HE = ["typed", "size", "prod"], GE = /* @__PURE__ */ W(Cd, HE, (r) => {
  var {
    typed: e,
    size: t,
    prod: n
  } = r;
  return e(Cd, {
    string: function(a) {
      return a.length;
    },
    "Matrix | Array": function(a) {
      return n(t(a));
    }
  });
}), Td = "cross", $E = ["typed", "matrix", "subtract", "multiply"], VE = /* @__PURE__ */ W(Td, $E, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    multiply: i
  } = r;
  return e(Td, {
    "Matrix, Matrix": function(o, l) {
      return t(a(o.toArray(), l.toArray()));
    },
    "Matrix, Array": function(o, l) {
      return t(a(o.toArray(), l));
    },
    "Array, Matrix": function(o, l) {
      return t(a(o, l.toArray()));
    },
    "Array, Array": a
  });
  function a(s, o) {
    var l = Math.max(Je(s).length, Je(o).length);
    s = cu(s), o = cu(o);
    var u = Je(s), c = Je(o);
    if (u.length !== 1 || c.length !== 1 || u[0] !== 3 || c[0] !== 3)
      throw new RangeError("Vectors with length 3 expected (Size A = [" + u.join(", ") + "], B = [" + c.join(", ") + "])");
    var f = [n(i(s[1], o[2]), i(s[2], o[1])), n(i(s[2], o[0]), i(s[0], o[2])), n(i(s[0], o[1]), i(s[1], o[0]))];
    return l > 1 ? [f] : f;
  }
}), Nd = "diag", qE = ["typed", "matrix", "DenseMatrix", "SparseMatrix"], WE = /* @__PURE__ */ W(Nd, qE, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    SparseMatrix: i
  } = r;
  return e(Nd, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function(u) {
      return a(u, 0, Je(u), null);
    },
    "Array, number": function(u, c) {
      return a(u, c, Je(u), null);
    },
    "Array, BigNumber": function(u, c) {
      return a(u, c.toNumber(), Je(u), null);
    },
    "Array, string": function(u, c) {
      return a(u, 0, Je(u), c);
    },
    "Array, number, string": function(u, c, f) {
      return a(u, c, Je(u), f);
    },
    "Array, BigNumber, string": function(u, c, f) {
      return a(u, c.toNumber(), Je(u), f);
    },
    Matrix: function(u) {
      return a(u, 0, u.size(), u.storage());
    },
    "Matrix, number": function(u, c) {
      return a(u, c, u.size(), u.storage());
    },
    "Matrix, BigNumber": function(u, c) {
      return a(u, c.toNumber(), u.size(), u.storage());
    },
    "Matrix, string": function(u, c) {
      return a(u, 0, u.size(), c);
    },
    "Matrix, number, string": function(u, c, f) {
      return a(u, c, u.size(), f);
    },
    "Matrix, BigNumber, string": function(u, c, f) {
      return a(u, c.toNumber(), u.size(), f);
    }
  });
  function a(l, u, c, f) {
    if (!$e(u))
      throw new TypeError("Second parameter in function diag must be an integer");
    var h = u > 0 ? u : 0, d = u < 0 ? -u : 0;
    switch (c.length) {
      case 1:
        return s(l, u, f, c[0], d, h);
      case 2:
        return o(l, u, f, c, d, h);
    }
    throw new RangeError("Matrix for function diag must be 2 dimensional");
  }
  function s(l, u, c, f, h, d) {
    var m = [f + h, f + d];
    if (c && c !== "sparse" && c !== "dense")
      throw new TypeError("Unknown matrix type ".concat(c, '"'));
    var p = c === "sparse" ? i.diagonal(m, l, u) : n.diagonal(m, l, u);
    return c !== null ? p : p.valueOf();
  }
  function o(l, u, c, f, h, d) {
    if (Ve(l)) {
      var m = l.diagonal(u);
      return c !== null ? c !== m.storage() ? t(m, c) : m : m.valueOf();
    }
    for (var p = Math.min(f[0] - h, f[1] - d), g = [], v = 0; v < p; v++)
      g[v] = l[v + h][v + d];
    return c !== null ? t(g) : g;
  }
}), XE = "filter", YE = ["typed"], V1 = /* @__PURE__ */ W(XE, YE, (r) => {
  var {
    typed: e
  } = r;
  return e("filter", {
    "Array, function": Rd,
    "Matrix, function": function(n, i) {
      return n.create(Rd(n.valueOf(), i), n.datatype());
    },
    "Array, RegExp": wh,
    "Matrix, RegExp": function(n, i) {
      return n.create(wh(n.valueOf(), i), n.datatype());
    }
  });
});
function Rd(r, e) {
  var t = Yi(e, r, "filter");
  return t.isUnary ? bh(r, t.fn) : bh(r, function(n, i, a) {
    return t.fn(n, [i], a);
  });
}
var Fd = "flatten", ZE = ["typed"], KE = /* @__PURE__ */ W(Fd, ZE, (r) => {
  var {
    typed: e
  } = r;
  return e(Fd, {
    Array: function(n) {
      return vt(n);
    },
    Matrix: function(n) {
      return n.create(vt(n.valueOf(), !0), n.datatype());
    }
  });
}), vc = "forEach", JE = ["typed"], q1 = /* @__PURE__ */ W(vc, JE, (r) => {
  var {
    typed: e
  } = r;
  return e(vc, {
    "Array, function": QE,
    "Matrix, function": function(n, i) {
      n.forEach(i);
    }
  });
});
function QE(r, e) {
  var t = Yi(e, r, vc);
  qg(r, t.fn, t.isUnary);
}
var Od = "getMatrixDataType", jE = ["typed"], eM = /* @__PURE__ */ W(Od, jE, (r) => {
  var {
    typed: e
  } = r;
  return e(Od, {
    Array: function(n) {
      return Lu(n, Dt);
    },
    Matrix: function(n) {
      return n.getDataType();
    }
  });
}), Pd = "identity", tM = ["typed", "config", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix"], rM = /* @__PURE__ */ W(Pd, tM, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: i,
    DenseMatrix: a,
    SparseMatrix: s
  } = r;
  return e(Pd, {
    "": function() {
      return t.matrix === "Matrix" ? n([]) : [];
    },
    string: function(c) {
      return n(c);
    },
    "number | BigNumber": function(c) {
      return l(c, c, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber, string": function(c, f) {
      return l(c, c, f);
    },
    "number | BigNumber, number | BigNumber": function(c, f) {
      return l(c, f, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber, number | BigNumber, string": function(c, f, h) {
      return l(c, f, h);
    },
    Array: function(c) {
      return o(c);
    },
    "Array, string": function(c, f) {
      return o(c, f);
    },
    Matrix: function(c) {
      return o(c.valueOf(), c.storage());
    },
    "Matrix, string": function(c, f) {
      return o(c.valueOf(), f);
    }
  });
  function o(u, c) {
    switch (u.length) {
      case 0:
        return c ? n(c) : [];
      case 1:
        return l(u[0], u[0], c);
      case 2:
        return l(u[0], u[1], c);
      default:
        throw new Error("Vector containing two values expected");
    }
  }
  function l(u, c, f) {
    var h = Qe(u) || Qe(c) ? i : null;
    if (Qe(u) && (u = u.toNumber()), Qe(c) && (c = c.toNumber()), !$e(u) || u < 1)
      throw new Error("Parameters in function identity must be positive integers");
    if (!$e(c) || c < 1)
      throw new Error("Parameters in function identity must be positive integers");
    var d = h ? new i(1) : 1, m = h ? new h(0) : 0, p = [u, c];
    if (f) {
      if (f === "sparse")
        return s.diagonal(p, d, 0, m);
      if (f === "dense")
        return a.diagonal(p, d, 0, m);
      throw new TypeError('Unknown matrix type "'.concat(f, '"'));
    }
    for (var g = $a([], p, m), v = u < c ? u : c, S = 0; S < v; S++)
      g[S][S] = d;
    return g;
  }
}), Bd = "kron", nM = ["typed", "matrix", "multiplyScalar"], iM = /* @__PURE__ */ W(Bd, nM, (r) => {
  var {
    typed: e,
    matrix: t,
    multiplyScalar: n
  } = r;
  return e(Bd, {
    "Matrix, Matrix": function(s, o) {
      return t(i(s.toArray(), o.toArray()));
    },
    "Matrix, Array": function(s, o) {
      return t(i(s.toArray(), o));
    },
    "Array, Matrix": function(s, o) {
      return t(i(s, o.toArray()));
    },
    "Array, Array": i
  });
  function i(a, s) {
    if (Je(a).length === 1 && (a = [a]), Je(s).length === 1 && (s = [s]), Je(a).length > 2 || Je(s).length > 2)
      throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = " + JSON.stringify(a.length) + ", y = " + JSON.stringify(s.length) + ")");
    var o = [], l = [];
    return a.map(function(u) {
      return s.map(function(c) {
        return l = [], o.push(l), u.map(function(f) {
          return c.map(function(h) {
            return l.push(n(f, h));
          });
        });
      });
    }) && o;
  }
}), fl = "map", aM = ["typed"], W1 = /* @__PURE__ */ W(fl, aM, (r) => {
  var {
    typed: e
  } = r;
  return e(fl, {
    "Array, function": n,
    "Matrix, function": function(a, s) {
      return a.map(s);
    },
    "Array|Matrix, Array|Matrix, ...Array|Matrix|function": (i, a, s) => t([i, a, ...s.slice(0, s.length - 1)], s[s.length - 1])
  });
  function t(i, a) {
    if (typeof a != "function")
      throw new Error("Last argument must be a callback function");
    var s = i[0].isMatrix, o = bf(...i.map((y) => y.isMatrix ? y.size() : Je(y))), l = s ? (y, b) => y.get(b) : wf, u = s ? i.map((y) => y.isMatrix ? y.create(Gi(y.toArray(), o), y.datatype()) : i[0].create(Gi(y.valueOf(), o))) : i.map((y) => y.isMatrix ? Gi(y.toArray(), o) : Gi(y, o)), c;
    if (e.isTypedFunction(a)) {
      var f = o.map(() => 0), h = u.map((y) => l(y, f)), d = x(a, h, f, u);
      c = v(d);
    } else {
      var m = i.length, p = S(a, m);
      c = v(p);
    }
    var g = (y, b) => c([y, ...u.slice(1).map((_) => l(_, b))], b);
    if (s)
      return u[0].map(g);
    return n(u[0], g);
    function v(y) {
      switch (y) {
        case 0:
          return (b) => a(...b);
        case 1:
          return (b, _) => a(...b, _);
        case 2:
          return (b, _) => a(...b, _, ...u);
      }
    }
    function S(y, b) {
      return y.length > b + 1 ? 2 : y.length === b + 1 ? 1 : 0;
    }
    function x(y, b, _, M) {
      return e.resolve(y, [...b, _, ...M]) !== null ? 2 : e.resolve(y, [...b, _]) !== null ? 1 : (e.resolve(y, b) !== null, 0);
    }
  }
  function n(i, a) {
    var s = Yi(a, i, fl);
    return sc(i, s.fn, s.isUnary);
  }
}), Id = "diff", sM = ["typed", "matrix", "subtract", "number"], X1 = /* @__PURE__ */ W(Id, sM, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    number: i
  } = r;
  return e(Id, {
    "Array | Matrix": function(c) {
      return Ve(c) ? t(s(c.toArray())) : s(c);
    },
    "Array | Matrix, number": function(c, f) {
      if (!$e(f)) throw new RangeError("Dimension must be a whole number");
      return Ve(c) ? t(a(c.toArray(), f)) : a(c, f);
    },
    "Array, BigNumber": e.referTo("Array,number", (u) => (c, f) => u(c, i(f))),
    "Matrix, BigNumber": e.referTo("Matrix,number", (u) => (c, f) => u(c, i(f)))
  });
  function a(u, c) {
    if (Ve(u) && (u = u.toArray()), !Array.isArray(u))
      throw RangeError("Array/Matrix does not have that many dimensions");
    if (c > 0) {
      var f = [];
      return u.forEach((h) => {
        f.push(a(h, c - 1));
      }), f;
    } else {
      if (c === 0)
        return s(u);
      throw RangeError("Cannot have negative dimension");
    }
  }
  function s(u) {
    for (var c = [], f = u.length, h = 1; h < f; h++)
      c.push(o(u[h - 1], u[h]));
    return c;
  }
  function o(u, c) {
    Ve(u) && (u = u.toArray()), Ve(c) && (c = c.toArray());
    var f = Array.isArray(u), h = Array.isArray(c);
    if (f && h)
      return l(u, c);
    if (!f && !h)
      return n(c, u);
    throw TypeError("Cannot calculate difference between 1 array and 1 non-array");
  }
  function l(u, c) {
    if (u.length !== c.length)
      throw RangeError("Not all sub-arrays have the same length");
    for (var f = [], h = u.length, d = 0; d < h; d++)
      f.push(o(u[d], c[d]));
    return f;
  }
}), oM = "ones", uM = ["typed", "config", "matrix", "BigNumber"], lM = /* @__PURE__ */ W(oM, uM, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: i
  } = r;
  return e("ones", {
    "": function() {
      return t.matrix === "Array" ? a([]) : a([], "default");
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    "...number | BigNumber | string": function(u) {
      var c = u[u.length - 1];
      if (typeof c == "string") {
        var f = u.pop();
        return a(u, f);
      } else return t.matrix === "Array" ? a(u) : a(u, "default");
    },
    Array: a,
    Matrix: function(u) {
      var c = u.storage();
      return a(u.valueOf(), c);
    },
    "Array | Matrix, string": function(u, c) {
      return a(u.valueOf(), c);
    }
  });
  function a(l, u) {
    var c = s(l), f = c ? new i(1) : 1;
    if (o(l), u) {
      var h = n(u);
      return l.length > 0 ? h.resize(l, f) : h;
    } else {
      var d = [];
      return l.length > 0 ? $a(d, l, f) : d;
    }
  }
  function s(l) {
    var u = !1;
    return l.forEach(function(c, f, h) {
      Qe(c) && (u = !0, h[f] = c.toNumber());
    }), u;
  }
  function o(l) {
    l.forEach(function(u) {
      if (typeof u != "number" || !$e(u) || u < 0)
        throw new Error("Parameters in function ones must be positive integers");
    });
  }
});
function Cf() {
  throw new Error('No "bignumber" implementation available');
}
function Y1() {
  throw new Error('No "fraction" implementation available');
}
function Z1() {
  throw new Error('No "matrix" implementation available');
}
var Ld = "range", cM = ["typed", "config", "?matrix", "?bignumber", "smaller", "smallerEq", "larger", "largerEq", "add", "isPositive"], K1 = /* @__PURE__ */ W(Ld, cM, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    bignumber: i,
    smaller: a,
    smallerEq: s,
    larger: o,
    largerEq: l,
    add: u,
    isPositive: c
  } = r;
  return e(Ld, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    string: h,
    "string, boolean": h,
    number: function(g) {
      throw new TypeError("Too few arguments to function range(): ".concat(g));
    },
    boolean: function(g) {
      throw new TypeError("Unexpected type of argument 1 to function range(): ".concat(g, ", number|bigint|BigNumber|Fraction"));
    },
    "number, number": function(g, v) {
      return f(d(g, v, 1, !1));
    },
    "number, number, number": function(g, v, S) {
      return f(d(g, v, S, !1));
    },
    "number, number, boolean": function(g, v, S) {
      return f(d(g, v, 1, S));
    },
    "number, number, number, boolean": function(g, v, S, x) {
      return f(d(g, v, S, x));
    },
    // Handle bigints; if either limit is bigint, range should be too
    "bigint, bigint|number": function(g, v) {
      return f(d(g, v, 1n, !1));
    },
    "number, bigint": function(g, v) {
      return f(d(BigInt(g), v, 1n, !1));
    },
    "bigint, bigint|number, bigint|number": function(g, v, S) {
      return f(d(g, v, BigInt(S), !1));
    },
    "number, bigint, bigint|number": function(g, v, S) {
      return f(d(BigInt(g), v, BigInt(S), !1));
    },
    "bigint, bigint|number, boolean": function(g, v, S) {
      return f(d(g, v, 1n, S));
    },
    "number, bigint, boolean": function(g, v, S) {
      return f(d(BigInt(g), v, 1n, S));
    },
    "bigint, bigint|number, bigint|number, boolean": function(g, v, S, x) {
      return f(d(g, v, BigInt(S), x));
    },
    "number, bigint, bigint|number, boolean": function(g, v, S, x) {
      return f(d(BigInt(g), v, BigInt(S), x));
    },
    "BigNumber, BigNumber": function(g, v) {
      var S = g.constructor;
      return f(d(g, v, new S(1), !1));
    },
    "BigNumber, BigNumber, BigNumber": function(g, v, S) {
      return f(d(g, v, S, !1));
    },
    "BigNumber, BigNumber, boolean": function(g, v, S) {
      var x = g.constructor;
      return f(d(g, v, new x(1), S));
    },
    "BigNumber, BigNumber, BigNumber, boolean": function(g, v, S, x) {
      return f(d(g, v, S, x));
    },
    "Fraction, Fraction": function(g, v) {
      return f(d(g, v, 1, !1));
    },
    "Fraction, Fraction, Fraction": function(g, v, S) {
      return f(d(g, v, S, !1));
    },
    "Fraction, Fraction, boolean": function(g, v, S) {
      return f(d(g, v, 1, S));
    },
    "Fraction, Fraction, Fraction, boolean": function(g, v, S, x) {
      return f(d(g, v, S, x));
    },
    "Unit, Unit, Unit": function(g, v, S) {
      return f(d(g, v, S, !1));
    },
    "Unit, Unit, Unit, boolean": function(g, v, S, x) {
      return f(d(g, v, S, x));
    }
  });
  function f(p) {
    return t.matrix === "Matrix" ? n ? n(p) : Z1() : p;
  }
  function h(p, g) {
    var v = m(p);
    if (!v)
      throw new SyntaxError('String "' + p + '" is no valid range');
    return t.number === "BigNumber" ? (i === void 0 && Cf(), f(d(i(v.start), i(v.end), i(v.step)))) : f(d(v.start, v.end, v.step, g));
  }
  function d(p, g, v, S) {
    for (var x = [], y = c(v) ? S ? s : a : S ? l : o, b = p; y(b, g); )
      x.push(b), b = u(b, v);
    return x;
  }
  function m(p) {
    var g = p.split(":"), v = g.map(function(x) {
      return Number(x);
    }), S = v.some(function(x) {
      return isNaN(x);
    });
    if (S)
      return null;
    switch (v.length) {
      case 2:
        return {
          start: v[0],
          end: v[1],
          step: 1
        };
      case 3:
        return {
          start: v[0],
          end: v[2],
          step: v[1]
        };
      default:
        return null;
    }
  }
}), Ud = "reshape", fM = ["typed", "isInteger", "matrix"], hM = /* @__PURE__ */ W(Ud, fM, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r;
  return e(Ud, {
    "Matrix, Array": function(i, a) {
      return i.reshape(a, !0);
    },
    "Array, Array": function(i, a) {
      return a.forEach(function(s) {
        if (!t(s))
          throw new TypeError("Invalid size for dimension: " + s);
      }), xf(i, a);
    }
  });
}), dM = "resize", mM = ["config", "matrix"], pM = /* @__PURE__ */ W(dM, mM, (r) => {
  var {
    config: e,
    matrix: t
  } = r;
  return function(a, s, o) {
    if (arguments.length !== 2 && arguments.length !== 3)
      throw new Xn("resize", arguments.length, 2, 3);
    if (Ve(s) && (s = s.valueOf()), Qe(s[0]) && (s = s.map(function(c) {
      return Qe(c) ? c.toNumber() : c;
    })), Ve(a))
      return a.resize(s, o, !0);
    if (typeof a == "string")
      return n(a, s, o);
    var l = Array.isArray(a) ? !1 : e.matrix !== "Array";
    if (s.length === 0) {
      for (; Array.isArray(a); )
        a = a[0];
      return Ye(a);
    } else {
      Array.isArray(a) || (a = [a]), a = Ye(a);
      var u = $a(a, s, o);
      return l ? t(u) : u;
    }
  };
  function n(i, a, s) {
    if (s !== void 0) {
      if (typeof s != "string" || s.length !== 1)
        throw new TypeError("Single character expected as defaultValue");
    } else
      s = " ";
    if (a.length !== 1)
      throw new st(a.length, 1);
    var o = a[0];
    if (typeof o != "number" || !$e(o))
      throw new TypeError("Invalid size, must contain positive integers (size: " + lt(a) + ")");
    if (i.length > o)
      return i.substring(0, o);
    if (i.length < o) {
      for (var l = i, u = 0, c = o - i.length; u < c; u++)
        l += s;
      return l;
    } else
      return i;
  }
}), zd = "rotate", vM = ["typed", "multiply", "rotationMatrix"], gM = /* @__PURE__ */ W(zd, vM, (r) => {
  var {
    typed: e,
    multiply: t,
    rotationMatrix: n
  } = r;
  return e(zd, {
    "Array , number | BigNumber | Complex | Unit": function(s, o) {
      i(s, 2);
      var l = t(n(o), s);
      return l.toArray();
    },
    "Matrix , number | BigNumber | Complex | Unit": function(s, o) {
      return i(s, 2), t(n(o), s);
    },
    "Array, number | BigNumber | Complex | Unit, Array | Matrix": function(s, o, l) {
      i(s, 3);
      var u = t(n(o, l), s);
      return u;
    },
    "Matrix, number | BigNumber | Complex | Unit, Array | Matrix": function(s, o, l) {
      return i(s, 3), t(n(o, l), s);
    }
  });
  function i(a, s) {
    var o = Array.isArray(a) ? Je(a) : a.size();
    if (o.length > 2)
      throw new RangeError("Vector must be of dimensions 1x".concat(s));
    if (o.length === 2 && o[1] !== 1)
      throw new RangeError("Vector must be of dimensions 1x".concat(s));
    if (o[0] !== s)
      throw new RangeError("Vector must be of dimensions 1x".concat(s));
  }
}), kd = "rotationMatrix", yM = ["typed", "config", "multiplyScalar", "addScalar", "unaryMinus", "norm", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix", "cos", "sin"], xM = /* @__PURE__ */ W(kd, yM, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    addScalar: i,
    unaryMinus: a,
    norm: s,
    BigNumber: o,
    matrix: l,
    DenseMatrix: u,
    SparseMatrix: c,
    cos: f,
    sin: h
  } = r;
  return e(kd, {
    "": function() {
      return t.matrix === "Matrix" ? l([]) : [];
    },
    string: function(x) {
      return l(x);
    },
    "number | BigNumber | Complex | Unit": function(x) {
      return d(x, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber | Complex | Unit, string": function(x, y) {
      return d(x, y);
    },
    "number | BigNumber | Complex | Unit, Array": function(x, y) {
      var b = l(y);
      return m(b), v(x, b, void 0);
    },
    "number | BigNumber | Complex | Unit, Matrix": function(x, y) {
      m(y);
      var b = y.storage() || (t.matrix === "Matrix" ? "dense" : void 0);
      return v(x, y, b);
    },
    "number | BigNumber | Complex | Unit, Array, string": function(x, y, b) {
      var _ = l(y);
      return m(_), v(x, _, b);
    },
    "number | BigNumber | Complex | Unit, Matrix, string": function(x, y, b) {
      return m(y), v(x, y, b);
    }
  });
  function d(S, x) {
    var y = Qe(S), b = y ? new o(-1) : -1, _ = f(S), M = h(S), A = [[_, n(b, M)], [M, _]];
    return g(A, x);
  }
  function m(S) {
    var x = S.size();
    if (x.length < 1 || x[0] !== 3)
      throw new RangeError("Vector must be of dimensions 1x3");
  }
  function p(S) {
    return S.reduce((x, y) => n(x, y));
  }
  function g(S, x) {
    if (x) {
      if (x === "sparse")
        return new c(S);
      if (x === "dense")
        return new u(S);
      throw new TypeError('Unknown matrix type "'.concat(x, '"'));
    }
    return S;
  }
  function v(S, x, y) {
    var b = s(x);
    if (b === 0)
      throw new RangeError("Rotation around zero vector");
    var _ = Qe(S) ? o : null, M = _ ? new _(1) : 1, A = _ ? new _(-1) : -1, w = _ ? new _(x.get([0]) / b) : x.get([0]) / b, E = _ ? new _(x.get([1]) / b) : x.get([1]) / b, D = _ ? new _(x.get([2]) / b) : x.get([2]) / b, T = f(S), R = i(M, a(T)), B = h(S), I = i(T, p([w, w, R])), C = i(p([w, E, R]), p([A, D, B])), k = i(p([w, D, R]), p([E, B])), z = i(p([w, E, R]), p([D, B])), V = i(T, p([E, E, R])), ee = i(p([E, D, R]), p([A, w, B])), re = i(p([w, D, R]), p([A, E, B])), L = i(p([E, D, R]), p([w, B])), J = i(T, p([D, D, R])), U = [[I, C, k], [z, V, ee], [re, L, J]];
    return g(U, y);
  }
}), Hd = "row", _M = ["typed", "Index", "matrix", "range"], J1 = /* @__PURE__ */ W(Hd, _M, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: i
  } = r;
  return e(Hd, {
    "Matrix, number": a,
    "Array, number": function(o, l) {
      return a(n(Ye(o)), l).valueOf();
    }
  });
  function a(s, o) {
    if (s.size().length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    Tt(o, s.size()[0]);
    var l = i(0, s.size()[1]), u = new t(o, l), c = s.subset(u);
    return Ve(c) ? c : n([[c]]);
  }
}), Gd = "size", bM = ["typed", "config", "?matrix"], wM = /* @__PURE__ */ W(Gd, bM, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n
  } = r;
  return e(Gd, {
    Matrix: function(a) {
      return a.create(a.size(), "number");
    },
    Array: Je,
    string: function(a) {
      return t.matrix === "Array" ? [a.length] : n([a.length], "dense", "number");
    },
    "number | Complex | BigNumber | Unit | boolean | null": function(a) {
      return t.matrix === "Array" ? [] : n ? n([], "dense", "number") : Z1();
    }
  });
}), $d = "squeeze", SM = ["typed"], EM = /* @__PURE__ */ W($d, SM, (r) => {
  var {
    typed: e
  } = r;
  return e($d, {
    Array: function(n) {
      return cu(Ye(n));
    },
    Matrix: function(n) {
      var i = cu(n.toArray());
      return Array.isArray(i) ? n.create(i, n.datatype()) : i;
    },
    any: function(n) {
      return Ye(n);
    }
  });
}), Vd = "subset", MM = ["typed", "matrix", "zeros", "add"], Q1 = /* @__PURE__ */ W(Vd, MM, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: i
  } = r;
  return e(Vd, {
    // get subset
    "Matrix, Index": function(o, l) {
      return Ga(l) ? t() : (lu(o, l), o.subset(l));
    },
    "Array, Index": e.referTo("Matrix, Index", function(s) {
      return function(o, l) {
        var u = s(t(o), l);
        return l.isScalar() ? u : u.valueOf();
      };
    }),
    "Object, Index": DM,
    "string, Index": AM,
    // set subset
    "Matrix, Index, any, any": function(o, l, u, c) {
      return Ga(l) ? o : (lu(o, l), o.clone().subset(l, a(u, l), c));
    },
    "Array, Index, any, any": e.referTo("Matrix, Index, any, any", function(s) {
      return function(o, l, u, c) {
        var f = s(t(o), l, u, c);
        return f.isMatrix ? f.valueOf() : f;
      };
    }),
    "Array, Index, any": e.referTo("Matrix, Index, any, any", function(s) {
      return function(o, l, u) {
        return s(t(o), l, u, void 0).valueOf();
      };
    }),
    "Matrix, Index, any": e.referTo("Matrix, Index, any, any", function(s) {
      return function(o, l, u) {
        return s(o, l, u, void 0);
      };
    }),
    "string, Index, string": qd,
    "string, Index, string, string": qd,
    "Object, Index, any": CM
  });
  function a(s, o) {
    if (typeof s == "string")
      throw new Error("can't boradcast a string");
    if (o._isScalar)
      return s;
    var l = o.size();
    if (l.every((u) => u > 0))
      try {
        return i(s, n(l));
      } catch {
        return s;
      }
    else
      return s;
  }
});
function AM(r, e) {
  if (!Ls(e))
    throw new TypeError("Index expected");
  if (Ga(e))
    return "";
  if (lu(Array.from(r), e), e.size().length !== 1)
    throw new st(e.size().length, 1);
  var t = r.length;
  Tt(e.min()[0], t), Tt(e.max()[0], t);
  var n = e.dimension(0), i = "";
  return n.forEach(function(a) {
    i += r.charAt(a);
  }), i;
}
function qd(r, e, t, n) {
  if (!e || e.isIndex !== !0)
    throw new TypeError("Index expected");
  if (Ga(e))
    return r;
  if (lu(Array.from(r), e), e.size().length !== 1)
    throw new st(e.size().length, 1);
  if (n !== void 0) {
    if (typeof n != "string" || n.length !== 1)
      throw new TypeError("Single character expected as defaultValue");
  } else
    n = " ";
  var i = e.dimension(0), a = i.size()[0];
  if (a !== t.length)
    throw new st(i.size()[0], t.length);
  var s = r.length;
  Tt(e.min()[0]), Tt(e.max()[0]);
  for (var o = [], l = 0; l < s; l++)
    o[l] = r.charAt(l);
  if (i.forEach(function(f, h) {
    o[f] = t.charAt(h[0]);
  }), o.length > s)
    for (var u = s - 1, c = o.length; u < c; u++)
      o[u] || (o[u] = n);
  return o.join("");
}
function DM(r, e) {
  if (!Ga(e)) {
    if (e.size().length !== 1)
      throw new st(e.size(), 1);
    var t = e.dimension(0);
    if (typeof t != "string")
      throw new TypeError("String expected as index to retrieve an object property");
    return Sr(r, t);
  }
}
function CM(r, e, t) {
  if (Ga(e))
    return r;
  if (e.size().length !== 1)
    throw new st(e.size(), 1);
  var n = e.dimension(0);
  if (typeof n != "string")
    throw new TypeError("String expected as index to retrieve an object property");
  var i = Ye(r);
  return ka(i, n, t), i;
}
var Wd = "transpose", TM = ["typed", "matrix"], NM = /* @__PURE__ */ W(Wd, TM, (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return e(Wd, {
    Array: (s) => n(t(s)).valueOf(),
    Matrix: n,
    any: Ye
    // scalars
  });
  function n(s) {
    var o = s.size(), l;
    switch (o.length) {
      case 1:
        l = s.clone();
        break;
      case 2:
        {
          var u = o[0], c = o[1];
          if (c === 0)
            throw new RangeError("Cannot transpose a 2D matrix with no columns (size: " + lt(o) + ")");
          switch (s.storage()) {
            case "dense":
              l = i(s, u, c);
              break;
            case "sparse":
              l = a(s, u, c);
              break;
          }
        }
        break;
      default:
        throw new RangeError("Matrix must be a vector or two dimensional (size: " + lt(o) + ")");
    }
    return l;
  }
  function i(s, o, l) {
    for (var u = s._data, c = [], f, h = 0; h < l; h++) {
      f = c[h] = [];
      for (var d = 0; d < o; d++)
        f[d] = Ye(u[d][h]);
    }
    return s.createDenseMatrix({
      data: c,
      size: [l, o],
      datatype: s._datatype
    });
  }
  function a(s, o, l) {
    for (var u = s._values, c = s._index, f = s._ptr, h = u ? [] : void 0, d = [], m = [], p = [], g = 0; g < o; g++)
      p[g] = 0;
    var v, S, x;
    for (v = 0, S = c.length; v < S; v++)
      p[c[v]]++;
    for (var y = 0, b = 0; b < o; b++)
      m.push(y), y += p[b], p[b] = m[b];
    for (m.push(y), x = 0; x < l; x++)
      for (var _ = f[x], M = f[x + 1], A = _; A < M; A++) {
        var w = p[c[A]]++;
        d[w] = x, u && (h[w] = Ye(u[A]));
      }
    return s.createSparseMatrix({
      values: h,
      index: d,
      ptr: m,
      size: [l, o],
      datatype: s._datatype
    });
  }
}), Xd = "ctranspose", RM = ["typed", "transpose", "conj"], FM = /* @__PURE__ */ W(Xd, RM, (r) => {
  var {
    typed: e,
    transpose: t,
    conj: n
  } = r;
  return e(Xd, {
    any: function(a) {
      return n(t(a));
    }
  });
}), Yd = "zeros", OM = ["typed", "config", "matrix", "BigNumber"], PM = /* @__PURE__ */ W(Yd, OM, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: i
  } = r;
  return e(Yd, {
    "": function() {
      return t.matrix === "Array" ? a([]) : a([], "default");
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    "...number | BigNumber | string": function(u) {
      var c = u[u.length - 1];
      if (typeof c == "string") {
        var f = u.pop();
        return a(u, f);
      } else return t.matrix === "Array" ? a(u) : a(u, "default");
    },
    Array: a,
    Matrix: function(u) {
      var c = u.storage();
      return a(u.valueOf(), c);
    },
    "Array | Matrix, string": function(u, c) {
      return a(u.valueOf(), c);
    }
  });
  function a(l, u) {
    var c = s(l), f = c ? new i(0) : 0;
    if (o(l), u) {
      var h = n(u);
      return l.length > 0 ? h.resize(l, f) : h;
    } else {
      var d = [];
      return l.length > 0 ? $a(d, l, f) : d;
    }
  }
  function s(l) {
    var u = !1;
    return l.forEach(function(c, f, h) {
      Qe(c) && (u = !0, h[f] = c.toNumber());
    }), u;
  }
  function o(l) {
    l.forEach(function(u) {
      if (typeof u != "number" || !$e(u) || u < 0)
        throw new Error("Parameters in function zeros must be positive integers");
    });
  }
}), Zd = "fft", BM = ["typed", "matrix", "addScalar", "multiplyScalar", "divideScalar", "exp", "tau", "i", "dotDivide", "conj", "pow", "ceil", "log2"], IM = /* @__PURE__ */ W(Zd, BM, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    multiplyScalar: i,
    divideScalar: a,
    exp: s,
    tau: o,
    i: l,
    dotDivide: u,
    conj: c,
    pow: f,
    ceil: h,
    log2: d
  } = r;
  return e(Zd, {
    Array: m,
    Matrix: function(x) {
      return x.create(m(x.valueOf()), x.datatype());
    }
  });
  function m(S) {
    var x = Je(S);
    return x.length === 1 ? v(S, x[0]) : p(S.map((y) => m(y, x.slice(1))), 0);
  }
  function p(S, x) {
    var y = Je(S);
    if (x !== 0) return new Array(y[0]).fill(0).map((_, M) => p(S[M], x - 1));
    if (y.length === 1) return v(S);
    function b(_) {
      var M = Je(_);
      return new Array(M[1]).fill(0).map((A, w) => new Array(M[0]).fill(0).map((E, D) => _[D][w]));
    }
    return b(p(b(S), 1));
  }
  function g(S) {
    for (var x = S.length, y = s(a(i(-1, i(l, o)), x)), b = [], _ = 1 - x; _ < x; _++)
      b.push(f(y, a(f(_, 2), 2)));
    for (var M = f(2, h(d(x + x - 1))), A = [...new Array(x).fill(0).map((C, k) => i(S[k], b[x - 1 + k])), ...new Array(M - x).fill(0)], w = [...new Array(x + x - 1).fill(0).map((C, k) => a(1, b[k])), ...new Array(M - (x + x - 1)).fill(0)], E = v(A), D = v(w), T = new Array(M).fill(0).map((C, k) => i(E[k], D[k])), R = u(c(m(c(T))), M), B = [], I = x - 1; I < x + x - 1; I++)
      B.push(i(R[I], b[I]));
    return B;
  }
  function v(S) {
    var x = S.length;
    if (x === 1) return [S[0]];
    if (x % 2 === 0) {
      for (var y = [...v(S.filter((A, w) => w % 2 === 0)), ...v(S.filter((A, w) => w % 2 === 1))], b = 0; b < x / 2; b++) {
        var _ = y[b], M = i(y[b + x / 2], s(i(i(o, l), a(-b, x))));
        y[b] = n(_, M), y[b + x / 2] = n(_, i(-1, M));
      }
      return y;
    } else
      return g(S);
  }
}), Kd = "ifft", LM = ["typed", "fft", "dotDivide", "conj"], UM = /* @__PURE__ */ W(Kd, LM, (r) => {
  var {
    typed: e,
    fft: t,
    dotDivide: n,
    conj: i
  } = r;
  return e(Kd, {
    "Array | Matrix": function(s) {
      var o = Ve(s) ? s.size() : Je(s);
      return n(i(t(i(s))), o.reduce((l, u) => l * u, 1));
    }
  });
});
function Fs(r) {
  "@babel/helpers - typeof";
  return Fs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, Fs(r);
}
function zM(r, e) {
  if (Fs(r) != "object" || !r) return r;
  var t = r[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(r, e);
    if (Fs(n) != "object") return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(r);
}
function kM(r) {
  var e = zM(r, "string");
  return Fs(e) == "symbol" ? e : e + "";
}
function qt(r, e, t) {
  return (e = kM(e)) in r ? Object.defineProperty(r, e, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : r[e] = t, r;
}
function Jd(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(i) {
      return Object.getOwnPropertyDescriptor(r, i).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function HM(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? Jd(Object(t), !0).forEach(function(n) {
      qt(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : Jd(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var GM = "solveODE", $M = ["typed", "add", "subtract", "multiply", "divide", "max", "map", "abs", "isPositive", "isNegative", "larger", "smaller", "matrix", "bignumber", "unaryMinus"], VM = /* @__PURE__ */ W(GM, $M, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: i,
    divide: a,
    max: s,
    map: o,
    abs: l,
    isPositive: u,
    isNegative: c,
    larger: f,
    smaller: h,
    matrix: d,
    bignumber: m,
    unaryMinus: p
  } = r;
  function g(A) {
    return function(w, E, D, T) {
      var R = !(E.length === 2 && (E.every(_) || E.every(wr)));
      if (R)
        throw new Error('"tspan" must be an Array of two numeric values or two units [tStart, tEnd]');
      var B = E[0], I = E[1], C = f(I, B), k = T.firstStep;
      if (k !== void 0 && !u(k))
        throw new Error('"firstStep" must be positive');
      var z = T.maxStep;
      if (z !== void 0 && !u(z))
        throw new Error('"maxStep" must be positive');
      var V = T.minStep;
      if (V && c(V))
        throw new Error('"minStep" must be positive or zero');
      var ee = [B, I, k, V, z].filter((F) => F !== void 0);
      if (!(ee.every(_) || ee.every(wr)))
        throw new Error('Inconsistent type of "t" dependant variables');
      for (var re = 1, L = T.tol ? T.tol : 1e-4, J = T.minDelta ? T.minDelta : 0.2, U = T.maxDelta ? T.maxDelta : 5, ue = T.maxIter ? T.maxIter : 1e4, oe = [B, I, ...D, z, V].some(Qe), [ie, G, Z, te] = oe ? [m(A.a), m(A.c), m(A.b), m(A.bp)] : [A.a, A.c, A.b, A.bp], ne = k ? C ? k : p(k) : a(n(I, B), re), ae = [B], xe = [D], q = n(Z, te), Ae = 0, De = 0, Ne = y(C), we = b(C); Ne(ae[Ae], I); ) {
        var Pe = [];
        ne = we(ae[Ae], I, ne), Pe.push(w(ae[Ae], xe[Ae]));
        for (var $ = 1; $ < G.length; ++$)
          Pe.push(w(t(ae[Ae], i(G[$], ne)), t(xe[Ae], i(ne, ie[$], Pe))));
        var P = s(l(o(i(q, Pe), (F) => wr(F) ? F.value : F)));
        P < L && L / P > 1 / 4 && (ae.push(t(ae[Ae], ne)), xe.push(t(xe[Ae], i(ne, Z, Pe))), Ae++);
        var O = 0.84 * (L / P) ** (1 / 5);
        if (h(O, J) ? O = J : f(O, U) && (O = U), O = oe ? m(O) : O, ne = i(ne, O), z && f(l(ne), z) ? ne = C ? z : p(z) : V && h(l(ne), V) && (ne = C ? V : p(V)), De++, De > ue)
          throw new Error("Maximum number of iterations reached, try changing options");
      }
      return {
        t: ae,
        y: xe
      };
    };
  }
  function v(A, w, E, D) {
    var T = [[], [0.5], [0, 0.75], [0.2222222222222222, 0.3333333333333333, 0.4444444444444444]], R = [null, 1 / 2, 3 / 4, 1], B = [2 / 9, 1 / 3, 4 / 9, 0], I = [7 / 24, 1 / 4, 1 / 3, 1 / 8], C = {
      a: T,
      c: R,
      b: B,
      bp: I
    };
    return g(C)(A, w, E, D);
  }
  function S(A, w, E, D) {
    var T = [[], [0.2], [0.075, 0.225], [0.9777777777777777, -3.7333333333333334, 3.5555555555555554], [2.9525986892242035, -11.595793324188385, 9.822892851699436, -0.2908093278463649], [2.8462752525252526, -10.757575757575758, 8.906422717743473, 0.2784090909090909, -0.2735313036020583], [0.09114583333333333, 0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096]], R = [null, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1], B = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0], I = [5179 / 57600, 0, 7571 / 16695, 393 / 640, -92097 / 339200, 187 / 2100, 1 / 40], C = {
      a: T,
      c: R,
      b: B,
      bp: I
    };
    return g(C)(A, w, E, D);
  }
  function x(A, w, E, D) {
    var T = D.method ? D.method : "RK45", R = {
      RK23: v,
      RK45: S
    };
    if (T.toUpperCase() in R) {
      var B = HM({}, D);
      return delete B.method, R[T.toUpperCase()](A, w, E, B);
    } else {
      var I = Object.keys(R).map((k) => '"'.concat(k, '"')), C = "".concat(I.slice(0, -1).join(", "), " and ").concat(I.slice(-1));
      throw new Error('Unavailable method "'.concat(T, '". Available methods are ').concat(C));
    }
  }
  function y(A) {
    return A ? h : f;
  }
  function b(A) {
    var w = A ? f : h;
    return function(E, D, T) {
      var R = t(E, T);
      return w(R, D) ? n(D, E) : T;
    };
  }
  function _(A) {
    return Qe(A) || et(A);
  }
  function M(A, w, E, D) {
    var T = x(A, w.toArray(), E.toArray(), D);
    return {
      t: d(T.t),
      y: d(T.y)
    };
  }
  return e("solveODE", {
    "function, Array, Array, Object": x,
    "function, Matrix, Matrix, Object": M,
    "function, Array, Array": (A, w, E) => x(A, w, E, {}),
    "function, Matrix, Matrix": (A, w, E) => M(A, w, E, {}),
    "function, Array, number | BigNumber | Unit": (A, w, E) => {
      var D = x(A, w, [E], {});
      return {
        t: D.t,
        y: D.y.map((T) => T[0])
      };
    },
    "function, Matrix, number | BigNumber | Unit": (A, w, E) => {
      var D = x(A, w.toArray(), [E], {});
      return {
        t: d(D.t),
        y: d(D.y.map((T) => T[0]))
      };
    },
    "function, Array, number | BigNumber | Unit, Object": (A, w, E, D) => {
      var T = x(A, w, [E], D);
      return {
        t: T.t,
        y: T.y.map((R) => R[0])
      };
    },
    "function, Matrix, number | BigNumber | Unit, Object": (A, w, E, D) => {
      var T = x(A, w.toArray(), [E], D);
      return {
        t: d(T.t),
        y: d(T.y.map((R) => R[0]))
      };
    }
  });
}), qM = "erf", WM = ["typed"], XM = /* @__PURE__ */ W(qM, WM, (r) => {
  var {
    typed: e
  } = r;
  return e("name", {
    number: function(s) {
      var o = Math.abs(s);
      return o >= KM ? si(s) : o <= YM ? si(s) * t(o) : o <= 4 ? si(s) * (1 - n(o)) : si(s) * (1 - i(o));
    },
    "Array | Matrix": e.referToSelf((a) => (s) => nt(s, a))
    // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)
  });
  function t(a) {
    var s = a * a, o = Nn[0][4] * s, l = s, u;
    for (u = 0; u < 3; u += 1)
      o = (o + Nn[0][u]) * s, l = (l + la[0][u]) * s;
    return a * (o + Nn[0][3]) / (l + la[0][3]);
  }
  function n(a) {
    var s = Nn[1][8] * a, o = a, l;
    for (l = 0; l < 7; l += 1)
      s = (s + Nn[1][l]) * a, o = (o + la[1][l]) * a;
    var u = (s + Nn[1][7]) / (o + la[1][7]), c = parseInt(a * 16) / 16, f = (a - c) * (a + c);
    return Math.exp(-c * c) * Math.exp(-f) * u;
  }
  function i(a) {
    var s = 1 / (a * a), o = Nn[2][5] * s, l = s, u;
    for (u = 0; u < 4; u += 1)
      o = (o + Nn[2][u]) * s, l = (l + la[2][u]) * s;
    var c = s * (o + Nn[2][4]) / (l + la[2][4]);
    c = (ZM - c) / a, s = parseInt(a * 16) / 16;
    var f = (a - s) * (a + s);
    return Math.exp(-s * s) * Math.exp(-f) * c;
  }
}), YM = 0.46875, ZM = 0.5641895835477563, Nn = [[3.1611237438705655, 113.86415415105016, 377.485237685302, 3209.3775891384694, 0.18577770618460315], [0.5641884969886701, 8.883149794388377, 66.11919063714163, 298.6351381974001, 881.952221241769, 1712.0476126340707, 2051.0783778260716, 1230.3393547979972, 21531153547440383e-24], [0.30532663496123236, 0.36034489994980445, 0.12578172611122926, 0.016083785148742275, 6587491615298378e-19, 0.016315387137302097]], la = [[23.601290952344122, 244.02463793444417, 1282.6165260773723, 2844.236833439171], [15.744926110709835, 117.6939508913125, 537.1811018620099, 1621.3895745666903, 3290.7992357334597, 4362.619090143247, 3439.3676741437216, 1230.3393548037495], [2.568520192289822, 1.8729528499234604, 0.5279051029514285, 0.06051834131244132, 0.0023352049762686918]], KM = Math.pow(2, 53), Qd = "zeta", JM = ["typed", "config", "multiply", "pow", "divide", "factorial", "equal", "smallerEq", "isNegative", "gamma", "sin", "subtract", "add", "?Complex", "?BigNumber", "pi"], QM = /* @__PURE__ */ W(Qd, JM, (r) => {
  var {
    typed: e,
    config: t,
    multiply: n,
    pow: i,
    divide: a,
    factorial: s,
    equal: o,
    smallerEq: l,
    isNegative: u,
    gamma: c,
    sin: f,
    subtract: h,
    add: d,
    Complex: m,
    BigNumber: p,
    pi: g
  } = r;
  return e(Qd, {
    number: (_) => v(_, (M) => M, () => 20),
    BigNumber: (_) => v(_, (M) => new p(M), () => Math.abs(Math.log10(t.relTol))),
    Complex: S
  });
  function v(_, M, A) {
    return o(_, 0) ? M(-0.5) : o(_, 1) ? M(NaN) : isFinite(_) ? x(_, M, A, (w) => w) : u(_) ? M(NaN) : M(1);
  }
  function S(_) {
    return _.re === 0 && _.im === 0 ? new m(-0.5) : _.re === 1 ? new m(NaN, NaN) : _.re === 1 / 0 && _.im === 0 ? new m(1) : _.im === 1 / 0 || _.re === -1 / 0 ? new m(NaN, NaN) : x(_, (M) => M, (M) => Math.round(1.3 * 15 + 0.9 * Math.abs(M.im)), (M) => M.re);
  }
  function x(_, M, A, w) {
    var E = A(_);
    if (w(_) > -(E - 1) / 2)
      return b(_, M(E), M);
    var D = n(i(2, _), i(M(g), h(_, 1)));
    return D = n(D, f(n(a(M(g), 2), _))), D = n(D, c(h(1, _))), n(D, x(h(1, _), M, A, w));
  }
  function y(_, M) {
    for (var A = _, w = _; l(w, M); w = d(w, 1)) {
      var E = a(n(s(d(M, h(w, 1))), i(4, w)), n(s(h(M, w)), s(n(2, w))));
      A = d(A, E);
    }
    return n(M, A);
  }
  function b(_, M, A) {
    for (var w = a(1, n(y(A(0), M), h(1, i(2, h(1, _))))), E = A(0), D = A(1); l(D, M); D = d(D, 1))
      E = d(E, a(n((-1) ** (D - 1), y(D, M)), i(D, _)));
    return n(w, E);
  }
}), jd = "mode", jM = ["typed", "isNaN", "isNumeric"], e2 = /* @__PURE__ */ W(jd, jM, (r) => {
  var {
    typed: e,
    isNaN: t,
    isNumeric: n
  } = r;
  return e(jd, {
    "Array | Matrix": i,
    "...": function(s) {
      return i(s);
    }
  });
  function i(a) {
    a = vt(a.valueOf());
    var s = a.length;
    if (s === 0)
      throw new Error("Cannot calculate mode of an empty array");
    for (var o = {}, l = [], u = 0, c = 0; c < a.length; c++) {
      var f = a[c];
      if (n(f) && t(f))
        throw new Error("Cannot calculate mode of an array containing NaN values");
      f in o || (o[f] = 0), o[f]++, o[f] === u ? l.push(f) : o[f] > u && (u = o[f], l = [f]);
    }
    return l;
  }
});
function Er(r, e, t) {
  var n;
  return String(r).includes("Unexpected type") ? (n = arguments.length > 2 ? " (type: " + Dt(t) + ", value: " + JSON.stringify(t) + ")" : " (type: " + r.data.actual + ")", new TypeError("Cannot calculate " + e + ", unexpected type of argument" + n)) : String(r).includes("complex numbers") ? (n = arguments.length > 2 ? " (type: " + Dt(t) + ", value: " + JSON.stringify(t) + ")" : "", new TypeError("Cannot calculate " + e + ", no ordering relation is defined for complex numbers" + n)) : r;
}
var em = "prod", t2 = ["typed", "config", "multiplyScalar", "numeric"], r2 = /* @__PURE__ */ W(em, t2, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    numeric: i
  } = r;
  return e(em, {
    // prod([a, b, c, d, ...])
    "Array | Matrix": a,
    // prod([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(o, l) {
      throw new Error("prod(A, dim) is not yet supported");
    },
    // prod(a, b, c, d, ...)
    "...": function(o) {
      return a(o);
    }
  });
  function a(s) {
    var o;
    if (pi(s, function(l) {
      try {
        o = o === void 0 ? l : n(o, l);
      } catch (u) {
        throw Er(u, "prod", l);
      }
    }), typeof o == "string" && (o = i(o, xi(o, t))), o === void 0)
      throw new Error("Cannot calculate prod of an empty array");
    return o;
  }
}), tm = "format", n2 = ["typed"], i2 = /* @__PURE__ */ W(tm, n2, (r) => {
  var {
    typed: e
  } = r;
  return e(tm, {
    any: lt,
    "any, Object | function | number | BigNumber": lt
  });
}), rm = "bin", a2 = ["typed", "format"], s2 = W(rm, a2, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(rm, {
    "number | BigNumber": function(i) {
      return t(i, {
        notation: "bin"
      });
    },
    "number | BigNumber, number | BigNumber": function(i, a) {
      return t(i, {
        notation: "bin",
        wordSize: a
      });
    }
  });
}), nm = "oct", o2 = ["typed", "format"], u2 = W(nm, o2, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(nm, {
    "number | BigNumber": function(i) {
      return t(i, {
        notation: "oct"
      });
    },
    "number | BigNumber, number | BigNumber": function(i, a) {
      return t(i, {
        notation: "oct",
        wordSize: a
      });
    }
  });
}), im = "hex", l2 = ["typed", "format"], c2 = W(im, l2, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(im, {
    "number | BigNumber": function(i) {
      return t(i, {
        notation: "hex"
      });
    },
    "number | BigNumber, number | BigNumber": function(i, a) {
      return t(i, {
        notation: "hex",
        wordSize: a
      });
    }
  });
}), j1 = /\$([\w.]+)/g, am = "print", f2 = ["typed"], ey = /* @__PURE__ */ W(am, f2, (r) => {
  var {
    typed: e
  } = r;
  return e(am, {
    // note: Matrix will be converted automatically to an Array
    "string, Object | Array": sm,
    "string, Object | Array, number | Object": sm
  });
});
function sm(r, e, t) {
  return r.replace(j1, function(n, i) {
    var a = i.split("."), s = e[a.shift()];
    for (s !== void 0 && s.isMatrix && (s = s.toArray()); a.length && s !== void 0; ) {
      var o = a.shift();
      s = o ? s[o] : s + ".";
    }
    return s !== void 0 ? sr(s) ? s : lt(s, t) : n;
  });
}
var om = "to", h2 = ["typed", "matrix", "concat"], d2 = /* @__PURE__ */ W(om, h2, (r) => {
  var {
    typed: e,
    matrix: t,
    concat: n
  } = r, i = Nt({
    typed: e,
    matrix: t,
    concat: n
  });
  return e(om, {
    "Unit, Unit | string": (a, s) => a.to(s)
  }, i({
    Ds: !0
  }));
}), um = "toBest", m2 = ["typed"], p2 = /* @__PURE__ */ W(um, m2, (r) => {
  var {
    typed: e
  } = r;
  return e(um, {
    Unit: (t) => t.toBest(),
    "Unit, string": (t, n) => t.toBest(n.split(",")),
    "Unit, string, Object": (t, n, i) => t.toBest(n.split(","), i),
    "Unit, Array": (t, n) => t.toBest(n),
    "Unit, Array, Object": (t, n, i) => t.toBest(n, i)
  });
}), lm = "isPrime", v2 = ["typed"], g2 = /* @__PURE__ */ W(lm, v2, (r) => {
  var {
    typed: e
  } = r;
  return e(lm, {
    number: function(n) {
      if (n <= 3)
        return n > 1;
      if (n % 2 === 0 || n % 3 === 0)
        return !1;
      for (var i = 5; i * i <= n; i += 6)
        if (n % i === 0 || n % (i + 2) === 0)
          return !1;
      return !0;
    },
    bigint: function(n) {
      if (n <= 3n)
        return n > 1n;
      if (n % 2n === 0n || n % 3n === 0n)
        return !1;
      for (var i = 5n; i * i <= n; i += 6n)
        if (n % i === 0n || n % (i + 2n) === 0n)
          return !1;
      return !0;
    },
    BigNumber: function(n) {
      if (n.lte(3)) return n.gt(1);
      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return !1;
      if (n.lt(Math.pow(2, 32))) {
        for (var i = n.toNumber(), a = 5; a * a <= i; a += 6)
          if (i % a === 0 || i % (a + 2) === 0)
            return !1;
        return !0;
      }
      function s(S, x, y) {
        for (var b = 1; !x.eq(0); )
          x.mod(2).eq(0) ? (x = x.div(2), S = S.mul(S).mod(y)) : (x = x.sub(1), b = S.mul(b).mod(y));
        return b;
      }
      var o = n.constructor.clone({
        precision: n.toFixed(0).length * 2
      });
      n = new o(n);
      for (var l = 0, u = n.sub(1); u.mod(2).eq(0); )
        u = u.div(2), l += 1;
      var c = null;
      if (n.lt("3317044064679887385961981"))
        c = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter((S) => S < n);
      else {
        var f = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
        c = [];
        for (var h = 2; h <= f; h += 1)
          c.push(f);
      }
      for (var d = 0; d < c.length; d += 1) {
        var m = c[d], p = s(n.sub(n).add(m), u, n);
        if (!p.eq(1)) {
          for (var g = 0, v = p; !v.eq(n.sub(1)); g += 1, v = v.mul(v).mod(n))
            if (g === l - 1)
              return !1;
        }
      }
      return !0;
    },
    "Array | Matrix": e.referToSelf((t) => (n) => nt(n, t))
  });
}), y2 = "numeric", x2 = ["number", "?bignumber", "?fraction"], _2 = /* @__PURE__ */ W(y2, x2, (r) => {
  var {
    number: e,
    bignumber: t,
    fraction: n
  } = r, i = {
    string: !0,
    number: !0,
    BigNumber: !0,
    Fraction: !0
  }, a = {
    number: (s) => e(s),
    BigNumber: t ? (s) => t(s) : Cf,
    bigint: (s) => BigInt(s),
    Fraction: n ? (s) => n(s) : Y1
  };
  return function(o) {
    var l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "number", u = arguments.length > 2 ? arguments[2] : void 0;
    if (u !== void 0)
      throw new SyntaxError("numeric() takes one or two arguments");
    var c = Dt(o);
    if (!(c in i))
      throw new TypeError("Cannot convert " + o + ' of type "' + c + '"; valid input types are ' + Object.keys(i).join(", "));
    if (!(l in a))
      throw new TypeError("Cannot convert " + o + ' to type "' + l + '"; valid output types are ' + Object.keys(a).join(", "));
    return l === c ? o : a[l](o);
  };
}), cm = "divideScalar", b2 = ["typed", "numeric"], w2 = /* @__PURE__ */ W(cm, b2, (r) => {
  var {
    typed: e,
    numeric: t
  } = r;
  return e(cm, {
    "number, number": function(i, a) {
      return i / a;
    },
    "Complex, Complex": function(i, a) {
      return i.div(a);
    },
    "BigNumber, BigNumber": function(i, a) {
      return i.div(a);
    },
    "bigint, bigint": function(i, a) {
      return i / a;
    },
    "Fraction, Fraction": function(i, a) {
      return i.div(a);
    },
    "Unit, number | Complex | Fraction | BigNumber | Unit": (n, i) => n.divide(i),
    "number | Fraction | Complex | BigNumber, Unit": (n, i) => i.divideInto(n)
  });
}), fm = "pow", S2 = ["typed", "config", "identity", "multiply", "matrix", "inv", "fraction", "number", "Complex"], E2 = /* @__PURE__ */ W(fm, S2, (r) => {
  var {
    typed: e,
    config: t,
    identity: n,
    multiply: i,
    matrix: a,
    inv: s,
    number: o,
    fraction: l,
    Complex: u
  } = r;
  return e(fm, {
    "number, number": c,
    "Complex, Complex": function(m, p) {
      return m.pow(p);
    },
    "BigNumber, BigNumber": function(m, p) {
      return p.isInteger() || m >= 0 || t.predictable ? m.pow(p) : new u(m.toNumber(), 0).pow(p.toNumber(), 0);
    },
    "bigint, bigint": (d, m) => d ** m,
    "Fraction, Fraction": function(m, p) {
      var g = m.pow(p);
      if (g != null)
        return g;
      if (t.predictable)
        throw new Error("Result of pow is non-rational and cannot be expressed as a fraction");
      return c(m.valueOf(), p.valueOf());
    },
    "Array, number": f,
    "Array, BigNumber": function(m, p) {
      return f(m, p.toNumber());
    },
    "Matrix, number": h,
    "Matrix, BigNumber": function(m, p) {
      return h(m, p.toNumber());
    },
    "Unit, number | BigNumber": function(m, p) {
      return m.pow(p);
    }
  });
  function c(d, m) {
    if (t.predictable && !$e(m) && d < 0)
      try {
        var p = l(m), g = o(p);
        if ((m === g || Math.abs((m - g) / m) < 1e-14) && p.d % 2n === 1n)
          return (p.n % 2n === 0n ? 1 : -1) * Math.pow(-d, m);
      } catch {
      }
    return t.predictable && (d < -1 && m === 1 / 0 || d > -1 && d < 0 && m === -1 / 0) ? NaN : $e(m) || d >= 0 || t.predictable ? a1(d, m) : d * d < 1 && m === 1 / 0 || d * d > 1 && m === -1 / 0 ? 0 : new u(d, 0).pow(m, 0);
  }
  function f(d, m) {
    if (!$e(m))
      throw new TypeError("For A^b, b must be an integer (value is " + m + ")");
    var p = Je(d);
    if (p.length !== 2)
      throw new Error("For A^b, A must be 2 dimensional (A has " + p.length + " dimensions)");
    if (p[0] !== p[1])
      throw new Error("For A^b, A must be square (size is " + p[0] + "x" + p[1] + ")");
    if (m < 0)
      try {
        return f(s(d), -m);
      } catch (S) {
        throw S.message === "Cannot calculate inverse, determinant is zero" ? new TypeError("For A^b, when A is not invertible, b must be a positive integer (value is " + m + ")") : S;
      }
    for (var g = n(p[0]).valueOf(), v = d; m >= 1; )
      (m & 1) === 1 && (g = i(v, g)), m >>= 1, v = i(v, v);
    return g;
  }
  function h(d, m) {
    return a(f(d.valueOf(), m));
  }
}), ca = "Number of decimals in function round must be an integer", hm = "round", M2 = ["typed", "config", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix"], A2 = /* @__PURE__ */ W(hm, M2, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    equalScalar: i,
    zeros: a,
    BigNumber: s,
    DenseMatrix: o
  } = r, l = cr({
    typed: e,
    equalScalar: i
  }), u = Qt({
    typed: e,
    DenseMatrix: o
  }), c = vn({
    typed: e
  });
  function f(h) {
    return Math.abs(zs(h).exponent);
  }
  return e(hm, {
    number: function(d) {
      var m = ds(d, f(t.relTol)), p = lr(d, m, t.relTol, t.absTol) ? m : d;
      return ds(p);
    },
    "number, number": function(d, m) {
      var p = f(t.relTol);
      if (m >= p)
        return ds(d, m);
      var g = ds(d, p), v = lr(d, g, t.relTol, t.absTol) ? g : d;
      return ds(v, m);
    },
    "number, BigNumber": function(d, m) {
      if (!m.isInteger())
        throw new TypeError(ca);
      return new s(d).toDecimalPlaces(m.toNumber());
    },
    Complex: function(d) {
      return d.round();
    },
    "Complex, number": function(d, m) {
      if (m % 1)
        throw new TypeError(ca);
      return d.round(m);
    },
    "Complex, BigNumber": function(d, m) {
      if (!m.isInteger())
        throw new TypeError(ca);
      var p = m.toNumber();
      return d.round(p);
    },
    BigNumber: function(d) {
      var m = new s(d).toDecimalPlaces(f(t.relTol)), p = Qr(d, m, t.relTol, t.absTol) ? m : d;
      return p.toDecimalPlaces(0);
    },
    "BigNumber, BigNumber": function(d, m) {
      if (!m.isInteger())
        throw new TypeError(ca);
      var p = f(t.relTol);
      if (m >= p)
        return d.toDecimalPlaces(m.toNumber());
      var g = d.toDecimalPlaces(p), v = Qr(d, g, t.relTol, t.absTol) ? g : d;
      return v.toDecimalPlaces(m.toNumber());
    },
    // bigints can't be rounded
    bigint: (h) => h,
    "bigint, number": (h, d) => h,
    "bigint, BigNumber": (h, d) => h,
    Fraction: function(d) {
      return d.round();
    },
    "Fraction, number": function(d, m) {
      if (m % 1)
        throw new TypeError(ca);
      return d.round(m);
    },
    "Fraction, BigNumber": function(d, m) {
      if (!m.isInteger())
        throw new TypeError(ca);
      return d.round(m.toNumber());
    },
    "Unit, number, Unit": e.referToSelf((h) => function(d, m, p) {
      var g = d.toNumeric(p);
      return p.multiply(h(g, m));
    }),
    "Unit, BigNumber, Unit": e.referToSelf((h) => (d, m, p) => h(d, m.toNumber(), p)),
    "Array | Matrix, number | BigNumber, Unit": e.referToSelf((h) => (d, m, p) => nt(d, (g) => h(g, m, p), !0)),
    "Array | Matrix | Unit, Unit": e.referToSelf((h) => (d, m) => h(d, 0, m)),
    "Array | Matrix": e.referToSelf((h) => (d) => nt(d, h, !0)),
    "SparseMatrix, number | BigNumber": e.referToSelf((h) => (d, m) => l(d, m, h, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((h) => (d, m) => c(d, m, h, !1)),
    "Array, number | BigNumber": e.referToSelf((h) => (d, m) => c(n(d), m, h, !1).valueOf()),
    "number | Complex | BigNumber | Fraction, SparseMatrix": e.referToSelf((h) => (d, m) => i(d, 0) ? a(m.size(), m.storage()) : u(m, d, h, !0)),
    "number | Complex | BigNumber | Fraction, DenseMatrix": e.referToSelf((h) => (d, m) => i(d, 0) ? a(m.size(), m.storage()) : c(m, d, h, !0)),
    "number | Complex | BigNumber | Fraction, Array": e.referToSelf((h) => (d, m) => c(n(m), d, h, !0).valueOf())
  });
}), dm = "log", D2 = ["config", "typed", "typeOf", "divideScalar", "Complex"], C2 = Math.log(16), T2 = /* @__PURE__ */ W(dm, D2, (r) => {
  var {
    typed: e,
    typeOf: t,
    config: n,
    divideScalar: i,
    Complex: a
  } = r;
  function s(l) {
    return l.log();
  }
  function o(l) {
    return s(new a(l, 0));
  }
  return e(dm, {
    number: function(u) {
      return u >= 0 || n.predictable ? Ch(u) : o(u);
    },
    bigint: Af(C2, Ch, n, o),
    Complex: s,
    BigNumber: function(u) {
      return !u.isNegative() || n.predictable ? u.ln() : o(u.toNumber());
    },
    "any, any": e.referToSelf((l) => (u, c) => {
      if (t(u) === "Fraction" && t(c) === "Fraction") {
        var f = u.log(c);
        if (f !== null)
          return f;
      }
      return i(l(u), l(c));
    })
  });
}), mm = "log1p", N2 = ["typed", "config", "divideScalar", "log", "Complex"], R2 = /* @__PURE__ */ W(mm, N2, (r) => {
  var {
    typed: e,
    config: t,
    divideScalar: n,
    log: i,
    Complex: a
  } = r;
  return e(mm, {
    number: function(l) {
      return l >= -1 || t.predictable ? Ax(l) : s(new a(l, 0));
    },
    Complex: s,
    BigNumber: function(l) {
      var u = l.plus(1);
      return !u.isNegative() || t.predictable ? u.ln() : s(new a(l.toNumber(), 0));
    },
    "Array | Matrix": e.referToSelf((o) => (l) => nt(l, o)),
    "any, any": e.referToSelf((o) => (l, u) => n(o(l), i(u)))
  });
  function s(o) {
    var l = o.re + 1;
    return new a(Math.log(Math.sqrt(l * l + o.im * o.im)), Math.atan2(o.im, l));
  }
}), pm = "nthRoots", F2 = ["config", "typed", "divideScalar", "Complex"], O2 = /* @__PURE__ */ W(pm, F2, (r) => {
  var {
    typed: e,
    config: t,
    divideScalar: n,
    Complex: i
  } = r, a = [function(l) {
    return new i(l, 0);
  }, function(l) {
    return new i(0, l);
  }, function(l) {
    return new i(-l, 0);
  }, function(l) {
    return new i(0, -l);
  }];
  function s(o, l) {
    if (l < 0) throw new Error("Root must be greater than zero");
    if (l === 0) throw new Error("Root must be non-zero");
    if (l % 1 !== 0) throw new Error("Root must be an integer");
    if (o === 0 || o.abs() === 0) return [new i(0, 0)];
    var u = typeof o == "number", c;
    (u || o.re === 0 || o.im === 0) && (u ? c = 2 * +(o < 0) : o.im === 0 ? c = 2 * +(o.re < 0) : c = 2 * +(o.im < 0) + 1);
    for (var f = o.arg(), h = o.abs(), d = [], m = Math.pow(h, 1 / l), p = 0; p < l; p++) {
      var g = (c + 4 * p) / l;
      if (g === Math.round(g)) {
        d.push(a[g % 4](m));
        continue;
      }
      d.push(new i({
        r: m,
        phi: (f + 2 * Math.PI * p) / l
      }));
    }
    return d;
  }
  return e(pm, {
    Complex: function(l) {
      return s(l, 2);
    },
    "Complex, number": s
  });
}), vm = "dotPow", P2 = ["typed", "equalScalar", "matrix", "pow", "DenseMatrix", "concat", "SparseMatrix"], B2 = /* @__PURE__ */ W(vm, P2, (r) => {
  var {
    typed: e,
    equalScalar: t,
    matrix: n,
    pow: i,
    DenseMatrix: a,
    concat: s,
    SparseMatrix: o
  } = r, l = Mr({
    typed: e
  }), u = Dn({
    typed: e,
    SparseMatrix: o
  }), c = cr({
    typed: e,
    equalScalar: t
  }), f = Qt({
    typed: e,
    DenseMatrix: a
  }), h = Nt({
    typed: e,
    matrix: n,
    concat: s
  }), d = {};
  for (var m in i.signatures)
    Object.prototype.hasOwnProperty.call(i.signatures, m) && !m.includes("Matrix") && !m.includes("Array") && (d[m] = i.signatures[m]);
  var p = e(d);
  return e(vm, h({
    elop: p,
    SS: u,
    DS: l,
    Ss: c,
    sS: f
  }));
}), gm = "dotDivide", I2 = ["typed", "matrix", "equalScalar", "divideScalar", "DenseMatrix", "concat", "SparseMatrix"], L2 = /* @__PURE__ */ W(gm, I2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    divideScalar: i,
    DenseMatrix: a,
    concat: s,
    SparseMatrix: o
  } = r, l = gn({
    typed: e,
    equalScalar: n
  }), u = Mr({
    typed: e
  }), c = Dn({
    typed: e,
    SparseMatrix: o
  }), f = cr({
    typed: e,
    equalScalar: n
  }), h = Qt({
    typed: e,
    DenseMatrix: a
  }), d = Nt({
    typed: e,
    matrix: t,
    concat: s
  });
  return e(gm, d({
    elop: i,
    SS: c,
    DS: u,
    SD: l,
    Ss: f,
    sS: h
  }));
});
function ks(r) {
  var {
    DenseMatrix: e
  } = r;
  return function(n, i, a) {
    var s = n.size();
    if (s.length !== 2)
      throw new RangeError("Matrix must be two dimensional (size: " + lt(s) + ")");
    var o = s[0], l = s[1];
    if (o !== l)
      throw new RangeError("Matrix must be square (size: " + lt(s) + ")");
    var u = [];
    if (Ve(i)) {
      var c = i.size(), f = i._data;
      if (c.length === 1) {
        if (c[0] !== o)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var h = 0; h < o; h++)
          u[h] = [f[h]];
        return new e({
          data: u,
          size: [o, 1],
          datatype: i._datatype
        });
      }
      if (c.length === 2) {
        if (c[0] !== o || c[1] !== 1)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        if (Ds(i)) {
          if (a) {
            u = [];
            for (var d = 0; d < o; d++)
              u[d] = [f[d][0]];
            return new e({
              data: u,
              size: [o, 1],
              datatype: i._datatype
            });
          }
          return i;
        }
        if (ai(i)) {
          for (var m = 0; m < o; m++)
            u[m] = [0];
          for (var p = i._values, g = i._index, v = i._ptr, S = v[1], x = v[0]; x < S; x++) {
            var y = g[x];
            u[y][0] = p[x];
          }
          return new e({
            data: u,
            size: [o, 1],
            datatype: i._datatype
          });
        }
      }
      throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.");
    }
    if (Mt(i)) {
      var b = Je(i);
      if (b.length === 1) {
        if (b[0] !== o)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var _ = 0; _ < o; _++)
          u[_] = [i[_]];
        return new e({
          data: u,
          size: [o, 1]
        });
      }
      if (b.length === 2) {
        if (b[0] !== o || b[1] !== 1)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var M = 0; M < o; M++)
          u[M] = [i[M][0]];
        return new e({
          data: u,
          size: [o, 1]
        });
      }
      throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.");
    }
  };
}
var ym = "lsolve", U2 = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], z2 = /* @__PURE__ */ W(ym, U2, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: i,
    subtractScalar: a,
    equalScalar: s,
    DenseMatrix: o
  } = r, l = ks({
    DenseMatrix: o
  });
  return e(ym, {
    "SparseMatrix, Array | Matrix": function(h, d) {
      return c(h, d);
    },
    "DenseMatrix, Array | Matrix": function(h, d) {
      return u(h, d);
    },
    "Array, Array | Matrix": function(h, d) {
      var m = t(h), p = u(m, d);
      return p.valueOf();
    }
  });
  function u(f, h) {
    h = l(f, h, !0);
    for (var d = h._data, m = f._size[0], p = f._size[1], g = [], v = f._data, S = 0; S < p; S++) {
      var x = d[S][0] || 0, y = void 0;
      if (s(x, 0))
        y = 0;
      else {
        var b = v[S][S];
        if (s(b, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        y = n(x, b);
        for (var _ = S + 1; _ < m; _++)
          d[_] = [a(d[_][0] || 0, i(y, v[_][S]))];
      }
      g[S] = [y];
    }
    return new o({
      data: g,
      size: [m, 1]
    });
  }
  function c(f, h) {
    h = l(f, h, !0);
    for (var d = h._data, m = f._size[0], p = f._size[1], g = f._values, v = f._index, S = f._ptr, x = [], y = 0; y < p; y++) {
      var b = d[y][0] || 0;
      if (s(b, 0))
        x[y] = [0];
      else {
        for (var _ = 0, M = [], A = [], w = S[y], E = S[y + 1], D = w; D < E; D++) {
          var T = v[D];
          T === y ? _ = g[D] : T > y && (M.push(g[D]), A.push(T));
        }
        if (s(_, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        for (var R = n(b, _), B = 0, I = A.length; B < I; B++) {
          var C = A[B];
          d[C] = [a(d[C][0] || 0, i(R, M[B]))];
        }
        x[y] = [R];
      }
    }
    return new o({
      data: x,
      size: [m, 1]
    });
  }
}), xm = "usolve", k2 = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], H2 = /* @__PURE__ */ W(xm, k2, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: i,
    subtractScalar: a,
    equalScalar: s,
    DenseMatrix: o
  } = r, l = ks({
    DenseMatrix: o
  });
  return e(xm, {
    "SparseMatrix, Array | Matrix": function(h, d) {
      return c(h, d);
    },
    "DenseMatrix, Array | Matrix": function(h, d) {
      return u(h, d);
    },
    "Array, Array | Matrix": function(h, d) {
      var m = t(h), p = u(m, d);
      return p.valueOf();
    }
  });
  function u(f, h) {
    h = l(f, h, !0);
    for (var d = h._data, m = f._size[0], p = f._size[1], g = [], v = f._data, S = p - 1; S >= 0; S--) {
      var x = d[S][0] || 0, y = void 0;
      if (s(x, 0))
        y = 0;
      else {
        var b = v[S][S];
        if (s(b, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        y = n(x, b);
        for (var _ = S - 1; _ >= 0; _--)
          d[_] = [a(d[_][0] || 0, i(y, v[_][S]))];
      }
      g[S] = [y];
    }
    return new o({
      data: g,
      size: [m, 1]
    });
  }
  function c(f, h) {
    h = l(f, h, !0);
    for (var d = h._data, m = f._size[0], p = f._size[1], g = f._values, v = f._index, S = f._ptr, x = [], y = p - 1; y >= 0; y--) {
      var b = d[y][0] || 0;
      if (s(b, 0))
        x[y] = [0];
      else {
        for (var _ = 0, M = [], A = [], w = S[y], E = S[y + 1], D = E - 1; D >= w; D--) {
          var T = v[D];
          T === y ? _ = g[D] : T < y && (M.push(g[D]), A.push(T));
        }
        if (s(_, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        for (var R = n(b, _), B = 0, I = A.length; B < I; B++) {
          var C = A[B];
          d[C] = [a(d[C][0], i(R, M[B]))];
        }
        x[y] = [R];
      }
    }
    return new o({
      data: x,
      size: [m, 1]
    });
  }
}), _m = "lsolveAll", G2 = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], $2 = /* @__PURE__ */ W(_m, G2, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: i,
    subtractScalar: a,
    equalScalar: s,
    DenseMatrix: o
  } = r, l = ks({
    DenseMatrix: o
  });
  return e(_m, {
    "SparseMatrix, Array | Matrix": function(h, d) {
      return c(h, d);
    },
    "DenseMatrix, Array | Matrix": function(h, d) {
      return u(h, d);
    },
    "Array, Array | Matrix": function(h, d) {
      var m = t(h), p = u(m, d);
      return p.map((g) => g.valueOf());
    }
  });
  function u(f, h) {
    for (var d = [l(f, h, !0)._data.map((A) => A[0])], m = f._data, p = f._size[0], g = f._size[1], v = 0; v < g; v++)
      for (var S = d.length, x = 0; x < S; x++) {
        var y = d[x];
        if (s(m[v][v], 0))
          if (s(y[v], 0)) {
            if (x === 0) {
              var _ = [...y];
              _[v] = 1;
              for (var M = v + 1; M < g; M++)
                _[M] = a(_[M], m[M][v]);
              d.push(_);
            }
          } else {
            if (x === 0)
              return [];
            d.splice(x, 1), x -= 1, S -= 1;
          }
        else {
          y[v] = n(y[v], m[v][v]);
          for (var b = v + 1; b < g; b++)
            y[b] = a(y[b], i(y[v], m[b][v]));
        }
      }
    return d.map((A) => new o({
      data: A.map((w) => [w]),
      size: [p, 1]
    }));
  }
  function c(f, h) {
    for (var d = [l(f, h, !0)._data.map((re) => re[0])], m = f._size[0], p = f._size[1], g = f._values, v = f._index, S = f._ptr, x = 0; x < p; x++)
      for (var y = d.length, b = 0; b < y; b++) {
        for (var _ = d[b], M = [], A = [], w = S[x], E = S[x + 1], D = 0, T = w; T < E; T++) {
          var R = v[T];
          R === x ? D = g[T] : R > x && (M.push(g[T]), A.push(R));
        }
        if (s(D, 0))
          if (s(_[x], 0)) {
            if (b === 0) {
              var k = [..._];
              k[x] = 1;
              for (var z = 0, V = A.length; z < V; z++) {
                var ee = A[z];
                k[ee] = a(k[ee], M[z]);
              }
              d.push(k);
            }
          } else {
            if (b === 0)
              return [];
            d.splice(b, 1), b -= 1, y -= 1;
          }
        else {
          _[x] = n(_[x], D);
          for (var B = 0, I = A.length; B < I; B++) {
            var C = A[B];
            _[C] = a(_[C], i(_[x], M[B]));
          }
        }
      }
    return d.map((re) => new o({
      data: re.map((L) => [L]),
      size: [m, 1]
    }));
  }
}), bm = "usolveAll", V2 = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], q2 = /* @__PURE__ */ W(bm, V2, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: i,
    subtractScalar: a,
    equalScalar: s,
    DenseMatrix: o
  } = r, l = ks({
    DenseMatrix: o
  });
  return e(bm, {
    "SparseMatrix, Array | Matrix": function(h, d) {
      return c(h, d);
    },
    "DenseMatrix, Array | Matrix": function(h, d) {
      return u(h, d);
    },
    "Array, Array | Matrix": function(h, d) {
      var m = t(h), p = u(m, d);
      return p.map((g) => g.valueOf());
    }
  });
  function u(f, h) {
    for (var d = [l(f, h, !0)._data.map((A) => A[0])], m = f._data, p = f._size[0], g = f._size[1], v = g - 1; v >= 0; v--)
      for (var S = d.length, x = 0; x < S; x++) {
        var y = d[x];
        if (s(m[v][v], 0))
          if (s(y[v], 0)) {
            if (x === 0) {
              var _ = [...y];
              _[v] = 1;
              for (var M = v - 1; M >= 0; M--)
                _[M] = a(_[M], m[M][v]);
              d.push(_);
            }
          } else {
            if (x === 0)
              return [];
            d.splice(x, 1), x -= 1, S -= 1;
          }
        else {
          y[v] = n(y[v], m[v][v]);
          for (var b = v - 1; b >= 0; b--)
            y[b] = a(y[b], i(y[v], m[b][v]));
        }
      }
    return d.map((A) => new o({
      data: A.map((w) => [w]),
      size: [p, 1]
    }));
  }
  function c(f, h) {
    for (var d = [l(f, h, !0)._data.map((re) => re[0])], m = f._size[0], p = f._size[1], g = f._values, v = f._index, S = f._ptr, x = p - 1; x >= 0; x--)
      for (var y = d.length, b = 0; b < y; b++) {
        for (var _ = d[b], M = [], A = [], w = S[x], E = S[x + 1], D = 0, T = E - 1; T >= w; T--) {
          var R = v[T];
          R === x ? D = g[T] : R < x && (M.push(g[T]), A.push(R));
        }
        if (s(D, 0))
          if (s(_[x], 0)) {
            if (b === 0) {
              var k = [..._];
              k[x] = 1;
              for (var z = 0, V = A.length; z < V; z++) {
                var ee = A[z];
                k[ee] = a(k[ee], M[z]);
              }
              d.push(k);
            }
          } else {
            if (b === 0)
              return [];
            d.splice(b, 1), b -= 1, y -= 1;
          }
        else {
          _[x] = n(_[x], D);
          for (var B = 0, I = A.length; B < I; B++) {
            var C = A[B];
            _[C] = a(_[C], i(_[x], M[B]));
          }
        }
      }
    return d.map((re) => new o({
      data: re.map((L) => [L]),
      size: [m, 1]
    }));
  }
}), W2 = "matAlgo08xS0Sid", X2 = ["typed", "equalScalar"], Tf = /* @__PURE__ */ W(W2, X2, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(i, a, s) {
    var o = i._values, l = i._index, u = i._ptr, c = i._size, f = i._datatype || i._data === void 0 ? i._datatype : i.getDataType(), h = a._values, d = a._index, m = a._ptr, p = a._size, g = a._datatype || a._data === void 0 ? a._datatype : a.getDataType();
    if (c.length !== p.length)
      throw new st(c.length, p.length);
    if (c[0] !== p[0] || c[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + c + ") must match Matrix B (" + p + ")");
    if (!o || !h)
      throw new Error("Cannot perform operation on Pattern Sparse Matrices");
    var v = c[0], S = c[1], x, y = t, b = 0, _ = s;
    typeof f == "string" && f === g && f !== "mixed" && (x = f, y = e.find(t, [x, x]), b = e.convert(0, x), _ = e.find(s, [x, x]));
    for (var M = [], A = [], w = [], E = [], D = [], T, R, B, I, C = 0; C < S; C++) {
      w[C] = A.length;
      var k = C + 1;
      for (R = u[C], B = u[C + 1], T = R; T < B; T++)
        I = l[T], D[I] = k, E[I] = o[T], A.push(I);
      for (R = m[C], B = m[C + 1], T = R; T < B; T++)
        I = d[T], D[I] === k && (E[I] = _(E[I], h[T]));
      for (T = w[C]; T < A.length; ) {
        I = A[T];
        var z = E[I];
        y(z, b) ? A.splice(T, 1) : (M.push(z), T++);
      }
    }
    return w[S] = A.length, i.createSparseMatrix({
      values: M,
      index: A,
      ptr: w,
      size: [v, S],
      datatype: f === i._datatype && g === a._datatype ? x : void 0
    });
  };
}), Nf = /* @__PURE__ */ W("useMatrixForArrayScalar", ["typed", "matrix"], (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return {
    "Array, number": e.referTo("DenseMatrix, number", (n) => (i, a) => n(t(i), a).valueOf()),
    "Array, BigNumber": e.referTo("DenseMatrix, BigNumber", (n) => (i, a) => n(t(i), a).valueOf()),
    "number, Array": e.referTo("number, DenseMatrix", (n) => (i, a) => n(i, t(a)).valueOf()),
    "BigNumber, Array": e.referTo("BigNumber, DenseMatrix", (n) => (i, a) => n(i, t(a)).valueOf())
  };
}), wm = "leftShift", Y2 = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], Z2 = /* @__PURE__ */ W(wm, Y2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    DenseMatrix: a,
    concat: s
  } = r, o = bi({
    typed: e
  }), l = gn({
    typed: e,
    equalScalar: n
  }), u = Tf({
    typed: e,
    equalScalar: n
  }), c = ta({
    typed: e,
    DenseMatrix: a
  }), f = cr({
    typed: e,
    equalScalar: n
  }), h = vn({
    typed: e
  }), d = Nt({
    typed: e,
    matrix: t,
    concat: s
  }), m = Nf({
    typed: e,
    matrix: t
  });
  return e(wm, {
    "number, number": c1,
    "BigNumber, BigNumber": vE,
    "bigint, bigint": (p, g) => p << g,
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : f(g, v, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : h(g, v, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : c(v, g, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : h(v, g, p, !0))
  }, m, d({
    SS: u,
    DS: o,
    SD: l
  }));
}), Sm = "rightArithShift", K2 = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], J2 = /* @__PURE__ */ W(Sm, K2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    DenseMatrix: a,
    concat: s
  } = r, o = bi({
    typed: e
  }), l = gn({
    typed: e,
    equalScalar: n
  }), u = Tf({
    typed: e,
    equalScalar: n
  }), c = ta({
    typed: e,
    DenseMatrix: a
  }), f = cr({
    typed: e,
    equalScalar: n
  }), h = vn({
    typed: e
  }), d = Nt({
    typed: e,
    matrix: t,
    concat: s
  }), m = Nf({
    typed: e,
    matrix: t
  });
  return e(Sm, {
    "number, number": f1,
    "BigNumber, BigNumber": gE,
    "bigint, bigint": (p, g) => p >> g,
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : f(g, v, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : h(g, v, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : c(v, g, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : h(v, g, p, !0))
  }, m, d({
    SS: u,
    DS: o,
    SD: l
  }));
}), Em = "rightLogShift", Q2 = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], j2 = /* @__PURE__ */ W(Em, Q2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    DenseMatrix: a,
    concat: s
  } = r, o = bi({
    typed: e
  }), l = gn({
    typed: e,
    equalScalar: n
  }), u = Tf({
    typed: e,
    equalScalar: n
  }), c = ta({
    typed: e,
    DenseMatrix: a
  }), f = cr({
    typed: e,
    equalScalar: n
  }), h = vn({
    typed: e
  }), d = Nt({
    typed: e,
    matrix: t,
    concat: s
  }), m = Nf({
    typed: e,
    matrix: t
  });
  return e(Em, {
    "number, number": h1,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : f(g, v, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (g, v) => n(v, 0) ? g.clone() : h(g, v, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : c(v, g, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (g, v) => n(g, 0) ? i(v.size(), v.storage()) : h(v, g, p, !0))
  }, m, d({
    SS: u,
    DS: o,
    SD: l
  }));
}), Mm = "and", eA = ["typed", "matrix", "equalScalar", "zeros", "not", "concat"], ty = /* @__PURE__ */ W(Mm, eA, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    not: a,
    concat: s
  } = r, o = gn({
    typed: e,
    equalScalar: n
  }), l = ku({
    typed: e,
    equalScalar: n
  }), u = cr({
    typed: e,
    equalScalar: n
  }), c = vn({
    typed: e
  }), f = Nt({
    typed: e,
    matrix: t,
    concat: s
  });
  return e(Mm, {
    "number, number": fc,
    "Complex, Complex": function(d, m) {
      return (d.re !== 0 || d.im !== 0) && (m.re !== 0 || m.im !== 0);
    },
    "BigNumber, BigNumber": function(d, m) {
      return !d.isZero() && !m.isZero() && !d.isNaN() && !m.isNaN();
    },
    "bigint, bigint": fc,
    "Unit, Unit": e.referToSelf((h) => (d, m) => h(d.value || 0, m.value || 0)),
    "SparseMatrix, any": e.referToSelf((h) => (d, m) => a(m) ? i(d.size(), d.storage()) : u(d, m, h, !1)),
    "DenseMatrix, any": e.referToSelf((h) => (d, m) => a(m) ? i(d.size(), d.storage()) : c(d, m, h, !1)),
    "any, SparseMatrix": e.referToSelf((h) => (d, m) => a(d) ? i(d.size(), d.storage()) : u(m, d, h, !0)),
    "any, DenseMatrix": e.referToSelf((h) => (d, m) => a(d) ? i(d.size(), d.storage()) : c(m, d, h, !0)),
    "Array, any": e.referToSelf((h) => (d, m) => h(t(d), m).valueOf()),
    "any, Array": e.referToSelf((h) => (d, m) => h(d, t(m)).valueOf())
  }, f({
    SS: l,
    DS: o
  }));
}), yu = "compare", tA = ["typed", "config", "matrix", "equalScalar", "BigNumber", "Fraction", "DenseMatrix", "concat"], rA = /* @__PURE__ */ W(yu, tA, (r) => {
  var {
    typed: e,
    config: t,
    equalScalar: n,
    matrix: i,
    BigNumber: a,
    Fraction: s,
    DenseMatrix: o,
    concat: l
  } = r, u = Mr({
    typed: e
  }), c = zu({
    typed: e,
    equalScalar: n
  }), f = Qt({
    typed: e,
    DenseMatrix: o
  }), h = Nt({
    typed: e,
    matrix: i,
    concat: l
  }), d = as({
    typed: e
  });
  return e(yu, nA({
    typed: e,
    config: t
  }), {
    "boolean, boolean": function(p, g) {
      return p === g ? 0 : p > g ? 1 : -1;
    },
    "BigNumber, BigNumber": function(p, g) {
      return Qr(p, g, t.relTol, t.absTol) ? new a(0) : new a(p.cmp(g));
    },
    "bigint, bigint": function(p, g) {
      return p === g ? 0n : p > g ? 1n : -1n;
    },
    "Fraction, Fraction": function(p, g) {
      return new s(p.compare(g));
    },
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, d, h({
    SS: c,
    DS: u,
    Ss: f
  }));
}), nA = /* @__PURE__ */ W(yu, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(yu, {
    "number, number": function(i, a) {
      return lr(i, a, t.relTol, t.absTol) ? 0 : i > a ? 1 : -1;
    }
  });
});
function Hu(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
function iA(r) {
  if (Object.prototype.hasOwnProperty.call(r, "__esModule")) return r;
  var e = r.default;
  if (typeof e == "function") {
    var t = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(r).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(r, n);
    Object.defineProperty(t, n, i.get ? i : {
      enumerable: !0,
      get: function() {
        return r[n];
      }
    });
  }), t;
}
var hl, Am;
function aA() {
  return Am || (Am = 1, hl = function r(e, t) {
    var n = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, i = /(^[ ]*|[ ]*$)/g, a = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/, s = /^0x[0-9a-f]+$/i, o = /^0/, l = function(x) {
      return r.insensitive && ("" + x).toLowerCase() || "" + x;
    }, u = l(e).replace(i, "") || "", c = l(t).replace(i, "") || "", f = u.replace(n, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"), h = c.replace(n, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"), d = parseInt(u.match(s), 16) || f.length !== 1 && u.match(a) && Date.parse(u), m = parseInt(c.match(s), 16) || d && c.match(a) && Date.parse(c) || null, p, g;
    if (m) {
      if (d < m)
        return -1;
      if (d > m)
        return 1;
    }
    for (var v = 0, S = Math.max(f.length, h.length); v < S; v++) {
      if (p = !(f[v] || "").match(o) && parseFloat(f[v]) || f[v] || 0, g = !(h[v] || "").match(o) && parseFloat(h[v]) || h[v] || 0, isNaN(p) !== isNaN(g))
        return isNaN(p) ? 1 : -1;
      if (typeof p != typeof g && (p += "", g += ""), p < g)
        return -1;
      if (p > g)
        return 1;
    }
    return 0;
  }), hl;
}
var sA = aA();
const fa = /* @__PURE__ */ Hu(sA);
var Dm = "compareNatural", oA = ["typed", "compare"], uA = /* @__PURE__ */ W(Dm, oA, (r) => {
  var {
    typed: e,
    compare: t
  } = r, n = t.signatures["boolean,boolean"];
  return e(Dm, {
    "any, any": i
  });
  function i(l, u) {
    var c = Dt(l), f = Dt(u), h;
    if ((c === "number" || c === "BigNumber" || c === "Fraction") && (f === "number" || f === "BigNumber" || f === "Fraction"))
      return h = t(l, u), h.toString() !== "0" ? h > 0 ? 1 : -1 : fa(c, f);
    var d = ["Array", "DenseMatrix", "SparseMatrix"];
    if (d.includes(c) || d.includes(f))
      return h = a(i, l, u), h !== 0 ? h : fa(c, f);
    if (c !== f)
      return fa(c, f);
    if (c === "Complex")
      return lA(l, u);
    if (c === "Unit")
      return l.equalBase(u) ? i(l.value, u.value) : s(i, l.formatUnits(), u.formatUnits());
    if (c === "boolean")
      return n(l, u);
    if (c === "string")
      return fa(l, u);
    if (c === "Object")
      return o(i, l, u);
    if (c === "null" || c === "undefined")
      return 0;
    throw new TypeError('Unsupported type of value "' + c + '"');
  }
  function a(l, u, c) {
    return ai(u) && ai(c) ? s(l, u.toJSON().values, c.toJSON().values) : ai(u) ? a(l, u.toArray(), c) : ai(c) ? a(l, u, c.toArray()) : Ds(u) ? a(l, u.toJSON().data, c) : Ds(c) ? a(l, u, c.toJSON().data) : Array.isArray(u) ? Array.isArray(c) ? s(l, u, c) : a(l, u, [c]) : a(l, [u], c);
  }
  function s(l, u, c) {
    for (var f = 0, h = Math.min(u.length, c.length); f < h; f++) {
      var d = l(u[f], c[f]);
      if (d !== 0)
        return d;
    }
    return u.length > c.length ? 1 : u.length < c.length ? -1 : 0;
  }
  function o(l, u, c) {
    var f = Object.keys(u), h = Object.keys(c);
    f.sort(fa), h.sort(fa);
    var d = s(l, f, h);
    if (d !== 0)
      return d;
    for (var m = 0; m < f.length; m++) {
      var p = l(u[f[m]], c[h[m]]);
      if (p !== 0)
        return p;
    }
    return 0;
  }
});
function lA(r, e) {
  return r.re > e.re ? 1 : r.re < e.re ? -1 : r.im > e.im ? 1 : r.im < e.im ? -1 : 0;
}
var Cm = "compareText", cA = ["typed", "matrix", "concat"];
ic.signature = "any, any";
var fA = /* @__PURE__ */ W(Cm, cA, (r) => {
  var {
    typed: e,
    matrix: t,
    concat: n
  } = r, i = Nt({
    typed: e,
    matrix: t,
    concat: n
  });
  return e(Cm, ic, i({
    elop: ic,
    Ds: !0
  }));
}), xu = "equal", hA = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat", "SparseMatrix"], dA = /* @__PURE__ */ W(xu, hA, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a,
    SparseMatrix: s
  } = r, o = Mr({
    typed: e
  }), l = Dn({
    typed: e,
    SparseMatrix: s
  }), u = Qt({
    typed: e,
    DenseMatrix: i
  }), c = Nt({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(xu, mA({
    typed: e,
    equalScalar: n
  }), c({
    elop: n,
    SS: l,
    DS: o,
    Ss: u
  }));
}), mA = W(xu, ["typed", "equalScalar"], (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return e(xu, {
    "any, any": function(i, a) {
      return i === null ? a === null : a === null ? i === null : i === void 0 ? a === void 0 : a === void 0 ? i === void 0 : t(i, a);
    }
  });
}), Tm = "equalText", pA = ["typed", "compareText", "isZero"], vA = /* @__PURE__ */ W(Tm, pA, (r) => {
  var {
    typed: e,
    compareText: t,
    isZero: n
  } = r;
  return e(Tm, {
    "any, any": function(a, s) {
      return n(t(a, s));
    }
  });
}), _u = "smaller", gA = ["typed", "config", "bignumber", "matrix", "DenseMatrix", "concat", "SparseMatrix"], yA = /* @__PURE__ */ W(_u, gA, (r) => {
  var {
    typed: e,
    config: t,
    bignumber: n,
    matrix: i,
    DenseMatrix: a,
    concat: s,
    SparseMatrix: o
  } = r, l = Mr({
    typed: e
  }), u = Dn({
    typed: e,
    SparseMatrix: o
  }), c = Qt({
    typed: e,
    DenseMatrix: a
  }), f = Nt({
    typed: e,
    matrix: i,
    concat: s
  }), h = as({
    typed: e
  });
  function d(m, p) {
    return m.lt(p) && !Qr(m, p, t.relTol, t.absTol);
  }
  return e(_u, xA({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (m, p) => m < p,
    "BigNumber, BigNumber": d,
    "bigint, bigint": (m, p) => m < p,
    "Fraction, Fraction": (m, p) => m.compare(p) === -1,
    "Fraction, BigNumber": function(p, g) {
      return d(n(p), g);
    },
    "BigNumber, Fraction": function(p, g) {
      return d(p, n(g));
    },
    "Complex, Complex": function(p, g) {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, h, f({
    SS: u,
    DS: l,
    Ss: c
  }));
}), xA = /* @__PURE__ */ W(_u, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(_u, {
    "number, number": function(i, a) {
      return i < a && !lr(i, a, t.relTol, t.absTol);
    }
  });
}), bu = "smallerEq", _A = ["typed", "config", "matrix", "DenseMatrix", "concat", "SparseMatrix"], bA = /* @__PURE__ */ W(bu, _A, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: i,
    concat: a,
    SparseMatrix: s
  } = r, o = Mr({
    typed: e
  }), l = Dn({
    typed: e,
    SparseMatrix: s
  }), u = Qt({
    typed: e,
    DenseMatrix: i
  }), c = Nt({
    typed: e,
    matrix: n,
    concat: a
  }), f = as({
    typed: e
  });
  return e(bu, wA({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (h, d) => h <= d,
    "BigNumber, BigNumber": function(d, m) {
      return d.lte(m) || Qr(d, m, t.relTol, t.absTol);
    },
    "bigint, bigint": (h, d) => h <= d,
    "Fraction, Fraction": (h, d) => h.compare(d) !== 1,
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, f, c({
    SS: l,
    DS: o,
    Ss: u
  }));
}), wA = /* @__PURE__ */ W(bu, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(bu, {
    "number, number": function(i, a) {
      return i <= a || lr(i, a, t.relTol, t.absTol);
    }
  });
}), wu = "larger", SA = ["typed", "config", "bignumber", "matrix", "DenseMatrix", "concat", "SparseMatrix"], EA = /* @__PURE__ */ W(wu, SA, (r) => {
  var {
    typed: e,
    config: t,
    bignumber: n,
    matrix: i,
    DenseMatrix: a,
    concat: s,
    SparseMatrix: o
  } = r, l = Mr({
    typed: e
  }), u = Dn({
    typed: e,
    SparseMatrix: o
  }), c = Qt({
    typed: e,
    DenseMatrix: a
  }), f = Nt({
    typed: e,
    matrix: i,
    concat: s
  }), h = as({
    typed: e
  });
  function d(m, p) {
    return m.gt(p) && !Qr(m, p, t.relTol, t.absTol);
  }
  return e(wu, MA({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (m, p) => m > p,
    "BigNumber, BigNumber": d,
    "bigint, bigint": (m, p) => m > p,
    "Fraction, Fraction": (m, p) => m.compare(p) === 1,
    "Fraction, BigNumber": function(p, g) {
      return d(n(p), g);
    },
    "BigNumber, Fraction": function(p, g) {
      return d(p, n(g));
    },
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, h, f({
    SS: u,
    DS: l,
    Ss: c
  }));
}), MA = /* @__PURE__ */ W(wu, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(wu, {
    "number, number": function(i, a) {
      return i > a && !lr(i, a, t.relTol, t.absTol);
    }
  });
}), Su = "largerEq", AA = ["typed", "config", "matrix", "DenseMatrix", "concat", "SparseMatrix"], DA = /* @__PURE__ */ W(Su, AA, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: i,
    concat: a,
    SparseMatrix: s
  } = r, o = Mr({
    typed: e
  }), l = Dn({
    typed: e,
    SparseMatrix: s
  }), u = Qt({
    typed: e,
    DenseMatrix: i
  }), c = Nt({
    typed: e,
    matrix: n,
    concat: a
  }), f = as({
    typed: e
  });
  return e(Su, CA({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (h, d) => h >= d,
    "BigNumber, BigNumber": function(d, m) {
      return d.gte(m) || Qr(d, m, t.relTol, t.absTol);
    },
    "bigint, bigint": function(d, m) {
      return d >= m;
    },
    "Fraction, Fraction": (h, d) => h.compare(d) !== -1,
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, f, c({
    SS: l,
    DS: o,
    Ss: u
  }));
}), CA = /* @__PURE__ */ W(Su, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Su, {
    "number, number": function(i, a) {
      return i >= a || lr(i, a, t.relTol, t.absTol);
    }
  });
}), Nm = "deepEqual", TA = ["typed", "equal"], NA = /* @__PURE__ */ W(Nm, TA, (r) => {
  var {
    typed: e,
    equal: t
  } = r;
  return e(Nm, {
    "any, any": function(a, s) {
      return n(a.valueOf(), s.valueOf());
    }
  });
  function n(i, a) {
    if (Array.isArray(i))
      if (Array.isArray(a)) {
        var s = i.length;
        if (s !== a.length)
          return !1;
        for (var o = 0; o < s; o++)
          if (!n(i[o], a[o]))
            return !1;
        return !0;
      } else
        return !1;
    else
      return Array.isArray(a) ? !1 : t(i, a);
  }
}), Eu = "unequal", RA = ["typed", "config", "equalScalar", "matrix", "DenseMatrix", "concat", "SparseMatrix"], FA = /* @__PURE__ */ W(Eu, RA, (r) => {
  var {
    typed: e,
    config: t,
    equalScalar: n,
    matrix: i,
    DenseMatrix: a,
    concat: s,
    SparseMatrix: o
  } = r, l = Mr({
    typed: e
  }), u = Dn({
    typed: e,
    SparseMatrix: o
  }), c = Qt({
    typed: e,
    DenseMatrix: a
  }), f = Nt({
    typed: e,
    matrix: i,
    concat: s
  });
  return e(Eu, OA({
    typed: e,
    equalScalar: n
  }), f({
    elop: h,
    SS: u,
    DS: l,
    Ss: c
  }));
  function h(d, m) {
    return !n(d, m);
  }
}), OA = W(Eu, ["typed", "equalScalar"], (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return e(Eu, {
    "any, any": function(i, a) {
      return i === null ? a !== null : a === null ? i !== null : i === void 0 ? a !== void 0 : a === void 0 ? i !== void 0 : !t(i, a);
    }
  });
}), Rm = "partitionSelect", PA = ["typed", "isNumeric", "isNaN", "compare"], BA = /* @__PURE__ */ W(Rm, PA, (r) => {
  var {
    typed: e,
    isNumeric: t,
    isNaN: n,
    compare: i
  } = r, a = i, s = (u, c) => -i(u, c);
  return e(Rm, {
    "Array | Matrix, number": function(c, f) {
      return o(c, f, a);
    },
    "Array | Matrix, number, string": function(c, f, h) {
      if (h === "asc")
        return o(c, f, a);
      if (h === "desc")
        return o(c, f, s);
      throw new Error('Compare string must be "asc" or "desc"');
    },
    "Array | Matrix, number, function": o
  });
  function o(u, c, f) {
    if (!$e(c) || c < 0)
      throw new Error("k must be a non-negative integer");
    if (Ve(u)) {
      var h = u.size();
      if (h.length > 1)
        throw new Error("Only one dimensional matrices supported");
      return l(u.valueOf(), c, f);
    }
    if (Array.isArray(u))
      return l(u, c, f);
  }
  function l(u, c, f) {
    if (c >= u.length)
      throw new Error("k out of bounds");
    for (var h = 0; h < u.length; h++)
      if (t(u[h]) && n(u[h]))
        return u[h];
    for (var d = 0, m = u.length - 1; d < m; ) {
      for (var p = d, g = m, v = u[Math.floor(Math.random() * (m - d + 1)) + d]; p < g; )
        if (f(u[p], v) >= 0) {
          var S = u[g];
          u[g] = u[p], u[p] = S, --g;
        } else
          ++p;
      f(u[p], v) > 0 && --p, c <= p ? m = p : d = p + 1;
    }
    return u[c];
  }
}), Fm = "sort", IA = ["typed", "matrix", "compare", "compareNatural"], LA = /* @__PURE__ */ W(Fm, IA, (r) => {
  var {
    typed: e,
    matrix: t,
    compare: n,
    compareNatural: i
  } = r, a = n, s = (c, f) => -n(c, f);
  return e(Fm, {
    Array: function(f) {
      return l(f), f.sort(a);
    },
    Matrix: function(f) {
      return u(f), t(f.toArray().sort(a), f.storage());
    },
    "Array, function": function(f, h) {
      return l(f), f.sort(h);
    },
    "Matrix, function": function(f, h) {
      return u(f), t(f.toArray().sort(h), f.storage());
    },
    "Array, string": function(f, h) {
      return l(f), f.sort(o(h));
    },
    "Matrix, string": function(f, h) {
      return u(f), t(f.toArray().sort(o(h)), f.storage());
    }
  });
  function o(c) {
    if (c === "asc")
      return a;
    if (c === "desc")
      return s;
    if (c === "natural")
      return i;
    throw new Error('String "asc", "desc", or "natural" expected');
  }
  function l(c) {
    if (Je(c).length !== 1)
      throw new Error("One dimensional array expected");
  }
  function u(c) {
    if (c.size().length !== 1)
      throw new Error("One dimensional matrix expected");
  }
}), Om = "max", UA = ["typed", "config", "numeric", "larger", "isNaN"], ry = /* @__PURE__ */ W(Om, UA, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    larger: i,
    isNaN: a
  } = r;
  return e(Om, {
    // max([a, b, c, d, ...])
    "Array | Matrix": o,
    // max([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(u, c) {
      return Uu(u, c.valueOf(), s);
    },
    // max(a, b, c, d, ...)
    "...": function(u) {
      if (rs(u))
        throw new TypeError("Scalar values expected in function max");
      return o(u);
    }
  });
  function s(l, u) {
    try {
      return i(l, u) ? l : u;
    } catch (c) {
      throw Er(c, "max", u);
    }
  }
  function o(l) {
    var u;
    if (pi(l, function(c) {
      try {
        (a(c) || u === void 0 || i(c, u)) && (u = c);
      } catch (f) {
        throw Er(f, "max", c);
      }
    }), u === void 0)
      throw new Error("Cannot calculate max of an empty array");
    return typeof u == "string" && (u = n(u, xi(u, t))), u;
  }
}), Pm = "min", zA = ["typed", "config", "numeric", "smaller", "isNaN"], ny = /* @__PURE__ */ W(Pm, zA, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    smaller: i,
    isNaN: a
  } = r;
  return e(Pm, {
    // min([a, b, c, d, ...])
    "Array | Matrix": o,
    // min([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(u, c) {
      return Uu(u, c.valueOf(), s);
    },
    // min(a, b, c, d, ...)
    "...": function(u) {
      if (rs(u))
        throw new TypeError("Scalar values expected in function min");
      return o(u);
    }
  });
  function s(l, u) {
    try {
      return i(l, u) ? l : u;
    } catch (c) {
      throw Er(c, "min", u);
    }
  }
  function o(l) {
    var u;
    if (pi(l, function(c) {
      try {
        (a(c) || u === void 0 || i(c, u)) && (u = c);
      } catch (f) {
        throw Er(f, "min", c);
      }
    }), u === void 0)
      throw new Error("Cannot calculate min of an empty array");
    return typeof u == "string" && (u = n(u, xi(u, t))), u;
  }
}), kA = "ImmutableDenseMatrix", HA = ["smaller", "DenseMatrix"], GA = /* @__PURE__ */ W(kA, HA, (r) => {
  var {
    smaller: e,
    DenseMatrix: t
  } = r;
  function n(i, a) {
    if (!(this instanceof n))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (a && !sr(a))
      throw new Error("Invalid datatype: " + a);
    if (Ve(i) || Mt(i)) {
      var s = new t(i, a);
      this._data = s._data, this._size = s._size, this._datatype = s._datatype, this._min = null, this._max = null;
    } else if (i && Mt(i.data) && Mt(i.size))
      this._data = i.data, this._size = i.size, this._datatype = i.datatype, this._min = typeof i.min < "u" ? i.min : null, this._max = typeof i.max < "u" ? i.max : null;
    else {
      if (i)
        throw new TypeError("Unsupported type of data (" + Dt(i) + ")");
      this._data = [], this._size = [0], this._datatype = a, this._min = null, this._max = null;
    }
  }
  return n.prototype = new t(), n.prototype.type = "ImmutableDenseMatrix", n.prototype.isImmutableDenseMatrix = !0, n.prototype.subset = function(i) {
    switch (arguments.length) {
      case 1: {
        var a = t.prototype.subset.call(this, i);
        return Ve(a) ? new n({
          data: a._data,
          size: a._size,
          datatype: a._datatype
        }) : a;
      }
      // intentional fall through
      case 2:
      case 3:
        throw new Error("Cannot invoke set subset on an Immutable Matrix instance");
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, n.prototype.set = function() {
    throw new Error("Cannot invoke set on an Immutable Matrix instance");
  }, n.prototype.resize = function() {
    throw new Error("Cannot invoke resize on an Immutable Matrix instance");
  }, n.prototype.reshape = function() {
    throw new Error("Cannot invoke reshape on an Immutable Matrix instance");
  }, n.prototype.clone = function() {
    return new n({
      data: Ye(this._data),
      size: Ye(this._size),
      datatype: this._datatype
    });
  }, n.prototype.toJSON = function() {
    return {
      mathjs: "ImmutableDenseMatrix",
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  }, n.fromJSON = function(i) {
    return new n(i);
  }, n.prototype.swapRows = function() {
    throw new Error("Cannot invoke swapRows on an Immutable Matrix instance");
  }, n.prototype.min = function() {
    if (this._min === null) {
      var i = null;
      this.forEach(function(a) {
        (i === null || e(a, i)) && (i = a);
      }), this._min = i !== null ? i : void 0;
    }
    return this._min;
  }, n.prototype.max = function() {
    if (this._max === null) {
      var i = null;
      this.forEach(function(a) {
        (i === null || e(i, a)) && (i = a);
      }), this._max = i !== null ? i : void 0;
    }
    return this._max;
  }, n;
}, {
  isClass: !0
}), $A = "Index", VA = ["ImmutableDenseMatrix", "getMatrixDataType"], qA = /* @__PURE__ */ W($A, VA, (r) => {
  var {
    ImmutableDenseMatrix: e,
    getMatrixDataType: t
  } = r;
  function n(a) {
    if (!(this instanceof n))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._dimensions = [], this._sourceSize = [], this._isScalar = !0;
    for (var s = 0, o = arguments.length; s < o; s++) {
      var l = arguments[s], u = Mt(l), c = Ve(l), f = typeof l, h = null;
      if (Fu(l))
        this._dimensions.push(l), this._isScalar = !1;
      else if (u || c) {
        var d = void 0;
        t(l) === "boolean" ? (u && (d = i(Bm(l).valueOf())), c && (d = i(Bm(l._data).valueOf())), h = l.valueOf().length) : d = i(l.valueOf()), this._dimensions.push(d);
        var m = d.size();
        (m.length !== 1 || m[0] !== 1 || h !== null) && (this._isScalar = !1);
      } else if (f === "number")
        this._dimensions.push(i([l]));
      else if (f === "bigint")
        this._dimensions.push(i([Number(l)]));
      else if (f === "string")
        this._dimensions.push(l);
      else
        throw new TypeError("Dimension must be an Array, Matrix, number, bigint, string, or Range");
      this._sourceSize.push(h);
    }
  }
  n.prototype.type = "Index", n.prototype.isIndex = !0;
  function i(a) {
    for (var s = 0, o = a.length; s < o; s++)
      if (typeof a[s] != "number" || !$e(a[s]))
        throw new TypeError("Index parameters must be positive integer numbers");
    return new e(a);
  }
  return n.prototype.clone = function() {
    var a = new n();
    return a._dimensions = Ye(this._dimensions), a._isScalar = this._isScalar, a._sourceSize = this._sourceSize, a;
  }, n.create = function(a) {
    var s = new n();
    return n.apply(s, a), s;
  }, n.prototype.size = function() {
    for (var a = [], s = 0, o = this._dimensions.length; s < o; s++) {
      var l = this._dimensions[s];
      a[s] = typeof l == "string" ? 1 : l.size()[0];
    }
    return a;
  }, n.prototype.max = function() {
    for (var a = [], s = 0, o = this._dimensions.length; s < o; s++) {
      var l = this._dimensions[s];
      a[s] = typeof l == "string" ? l : l.max();
    }
    return a;
  }, n.prototype.min = function() {
    for (var a = [], s = 0, o = this._dimensions.length; s < o; s++) {
      var l = this._dimensions[s];
      a[s] = typeof l == "string" ? l : l.min();
    }
    return a;
  }, n.prototype.forEach = function(a) {
    for (var s = 0, o = this._dimensions.length; s < o; s++)
      a(this._dimensions[s], s, this);
  }, n.prototype.dimension = function(a) {
    return typeof a != "number" ? null : this._dimensions[a] || null;
  }, n.prototype.isObjectProperty = function() {
    return this._dimensions.length === 1 && typeof this._dimensions[0] == "string";
  }, n.prototype.getObjectProperty = function() {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  }, n.prototype.isScalar = function() {
    return this._isScalar;
  }, n.prototype.toArray = function() {
    for (var a = [], s = 0, o = this._dimensions.length; s < o; s++) {
      var l = this._dimensions[s];
      a.push(typeof l == "string" ? l : l.toArray());
    }
    return a;
  }, n.prototype.valueOf = n.prototype.toArray, n.prototype.toString = function() {
    for (var a = [], s = 0, o = this._dimensions.length; s < o; s++) {
      var l = this._dimensions[s];
      typeof l == "string" ? a.push(JSON.stringify(l)) : a.push(l.toString());
    }
    return "[" + a.join(", ") + "]";
  }, n.prototype.toJSON = function() {
    return {
      mathjs: "Index",
      dimensions: this._dimensions
    };
  }, n.fromJSON = function(a) {
    return n.create(a.dimensions);
  }, n;
}, {
  isClass: !0
});
function Bm(r) {
  var e = [];
  return r.forEach((t, n) => {
    t && e.push(n);
  }), e;
}
var WA = "FibonacciHeap", XA = ["smaller", "larger"], YA = /* @__PURE__ */ W(WA, XA, (r) => {
  var {
    smaller: e,
    larger: t
  } = r, n = 1 / Math.log((1 + Math.sqrt(5)) / 2);
  function i() {
    if (!(this instanceof i))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._minimum = null, this._size = 0;
  }
  i.prototype.type = "FibonacciHeap", i.prototype.isFibonacciHeap = !0, i.prototype.insert = function(c, f) {
    var h = {
      key: c,
      value: f,
      degree: 0
    };
    if (this._minimum) {
      var d = this._minimum;
      h.left = d, h.right = d.right, d.right = h, h.right.left = h, e(c, d.key) && (this._minimum = h);
    } else
      h.left = h, h.right = h, this._minimum = h;
    return this._size++, h;
  }, i.prototype.size = function() {
    return this._size;
  }, i.prototype.clear = function() {
    this._minimum = null, this._size = 0;
  }, i.prototype.isEmpty = function() {
    return this._size === 0;
  }, i.prototype.extractMinimum = function() {
    var c = this._minimum;
    if (c === null)
      return c;
    for (var f = this._minimum, h = c.degree, d = c.child; h > 0; ) {
      var m = d.right;
      d.left.right = d.right, d.right.left = d.left, d.left = f, d.right = f.right, f.right = d, d.right.left = d, d.parent = null, d = m, h--;
    }
    return c.left.right = c.right, c.right.left = c.left, c === c.right ? f = null : (f = c.right, f = u(f, this._size)), this._size--, this._minimum = f, c;
  }, i.prototype.remove = function(c) {
    this._minimum = a(this._minimum, c, -1), this.extractMinimum();
  };
  function a(c, f, h) {
    f.key = h;
    var d = f.parent;
    return d && e(f.key, d.key) && (s(c, f, d), o(c, d)), e(f.key, c.key) && (c = f), c;
  }
  function s(c, f, h) {
    f.left.right = f.right, f.right.left = f.left, h.degree--, h.child === f && (h.child = f.right), h.degree === 0 && (h.child = null), f.left = c, f.right = c.right, c.right = f, f.right.left = f, f.parent = null, f.mark = !1;
  }
  function o(c, f) {
    var h = f.parent;
    h && (f.mark ? (s(c, f, h), o(h)) : f.mark = !0);
  }
  var l = function(f, h) {
    f.left.right = f.right, f.right.left = f.left, f.parent = h, h.child ? (f.left = h.child, f.right = h.child.right, h.child.right = f, f.right.left = f) : (h.child = f, f.right = f, f.left = f), h.degree++, f.mark = !1;
  };
  function u(c, f) {
    var h = Math.floor(Math.log(f) * n) + 1, d = new Array(h), m = 0, p = c;
    if (p)
      for (m++, p = p.right; p !== c; )
        m++, p = p.right;
    for (var g; m > 0; ) {
      for (var v = p.degree, S = p.right; g = d[v], !!g; ) {
        if (t(p.key, g.key)) {
          var x = g;
          g = p, p = x;
        }
        l(g, p), d[v] = null, v++;
      }
      d[v] = p, p = S, m--;
    }
    c = null;
    for (var y = 0; y < h; y++)
      g = d[y], g && (c ? (g.left.right = g.right, g.right.left = g.left, g.left = c, g.right = c.right, c.right = g, g.right.left = g, e(g.key, c.key) && (c = g)) : c = g);
    return c;
  }
  return i;
}, {
  isClass: !0
}), ZA = "Spa", KA = ["addScalar", "equalScalar", "FibonacciHeap"], JA = /* @__PURE__ */ W(ZA, KA, (r) => {
  var {
    addScalar: e,
    equalScalar: t,
    FibonacciHeap: n
  } = r;
  function i() {
    if (!(this instanceof i))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._values = [], this._heap = new n();
  }
  return i.prototype.type = "Spa", i.prototype.isSpa = !0, i.prototype.set = function(a, s) {
    if (this._values[a])
      this._values[a].value = s;
    else {
      var o = this._heap.insert(a, s);
      this._values[a] = o;
    }
  }, i.prototype.get = function(a) {
    var s = this._values[a];
    return s ? s.value : 0;
  }, i.prototype.accumulate = function(a, s) {
    var o = this._values[a];
    o ? o.value = e(o.value, s) : (o = this._heap.insert(a, s), this._values[a] = o);
  }, i.prototype.forEach = function(a, s, o) {
    var l = this._heap, u = this._values, c = [], f = l.extractMinimum();
    for (f && c.push(f); f && f.key <= s; )
      f.key >= a && (t(f.value, 0) || o(f.key, f.value, this)), f = l.extractMinimum(), f && c.push(f);
    for (var h = 0; h < c.length; h++) {
      var d = c[h];
      f = l.insert(d.key, d.value), u[f.key] = f;
    }
  }, i.prototype.swap = function(a, s) {
    var o = this._values[a], l = this._values[s];
    if (!o && l)
      o = this._heap.insert(a, l.value), this._heap.remove(l), this._values[a] = o, this._values[s] = void 0;
    else if (o && !l)
      l = this._heap.insert(s, o.value), this._heap.remove(o), this._values[s] = l, this._values[a] = void 0;
    else if (o && l) {
      var u = o.value;
      o.value = l.value, l.value = u;
    }
  }, i;
}, {
  isClass: !0
});
function QA(r) {
  var e = 0, t = 1, n = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), a = 0, s = function(l) {
    var u = i[l];
    if (u && (delete n[u], delete i[l], --e, t === u)) {
      if (!e) {
        a = 0, t = 1;
        return;
      }
      for (; !Object.prototype.hasOwnProperty.call(n, ++t); )
        ;
    }
  };
  return r = Math.abs(r), {
    hit: function(l) {
      var u = i[l], c = ++a;
      if (n[c] = l, i[l] = c, !u)
        return ++e, e <= r ? void 0 : (l = n[t], s(l), l);
      if (delete n[u], t === u)
        for (; !Object.prototype.hasOwnProperty.call(n, ++t); )
          ;
    },
    delete: s,
    clear: function() {
      e = a = 0, t = 1, n = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null);
    }
  };
}
function Hs(r) {
  var {
    hasher: e,
    limit: t
  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return t = t ?? Number.POSITIVE_INFINITY, e = e ?? JSON.stringify, function n() {
    typeof n.cache != "object" && (n.cache = {
      values: /* @__PURE__ */ new Map(),
      lru: QA(t || Number.POSITIVE_INFINITY)
    });
    for (var i = [], a = 0; a < arguments.length; a++)
      i[a] = arguments[a];
    var s = e(i);
    if (n.cache.values.has(s))
      return n.cache.lru.hit(s), n.cache.values.get(s);
    var o = r.apply(r, i);
    return n.cache.values.set(s, o), n.cache.values.delete(n.cache.lru.hit(s)), o;
  };
}
var jA = Hs(function(r) {
  return new r(1).exp();
}, {
  hasher: Gu
}), eD = Hs(function(r) {
  return new r(1).plus(new r(5).sqrt()).div(2);
}, {
  hasher: Gu
}), Rf = Hs(function(r) {
  return r.acos(-1);
}, {
  hasher: Gu
}), tD = Hs(function(r) {
  return Rf(r).times(2);
}, {
  hasher: Gu
});
function Gu(r) {
  return r[0].precision;
}
function Im(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(i) {
      return Object.getOwnPropertyDescriptor(r, i).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function dl(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? Im(Object(t), !0).forEach(function(n) {
      qt(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : Im(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var rD = "Unit", nD = ["?on", "config", "addScalar", "subtractScalar", "multiplyScalar", "divideScalar", "pow", "abs", "fix", "round", "equal", "isNumeric", "format", "toBest", "number", "Complex", "BigNumber", "Fraction"], iD = /* @__PURE__ */ W(rD, nD, (r) => {
  var {
    on: e,
    config: t,
    addScalar: n,
    subtractScalar: i,
    multiplyScalar: a,
    divideScalar: s,
    pow: o,
    abs: l,
    fix: u,
    round: c,
    equal: f,
    isNumeric: h,
    format: d,
    toBest: m,
    number: p,
    Complex: g,
    BigNumber: v,
    Fraction: S
  } = r, x = p;
  function y($, P) {
    if (!(this instanceof y))
      throw new Error("Constructor must be called with the new operator");
    if (!($ == null || h($) || fn($)))
      throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");
    if (this.fixPrefix = !1, this.skipAutomaticSimplification = !0, P === void 0)
      this.units = [], this.dimensions = J.map((F) => 0);
    else if (typeof P == "string") {
      var O = y.parse(P);
      this.units = O.units, this.dimensions = O.dimensions;
    } else if (wr(P) && P.value === null)
      this.fixPrefix = P.fixPrefix, this.skipAutomaticSimplification = P.skipAutomaticSimplification, this.dimensions = P.dimensions.slice(0), this.units = P.units.map((F) => pr({}, F));
    else
      throw new TypeError("Second parameter in Unit constructor must be a string or valueless Unit");
    this.value = this._normalize($);
  }
  Object.defineProperty(y, "name", {
    value: "Unit"
  }), y.prototype.constructor = y, y.prototype.type = "Unit", y.prototype.isUnit = !0;
  var b, _, M;
  function A() {
    for (; M === " " || M === "	"; )
      D();
  }
  function w($) {
    return $ >= "0" && $ <= "9" || $ === ".";
  }
  function E($) {
    return $ >= "0" && $ <= "9";
  }
  function D() {
    _++, M = b.charAt(_);
  }
  function T($) {
    _ = $, M = b.charAt(_);
  }
  function R() {
    var $ = "", P = _;
    if (M === "+" ? D() : M === "-" && ($ += M, D()), !w(M))
      return T(P), null;
    if (M === ".") {
      if ($ += M, D(), !E(M))
        return T(P), null;
    } else {
      for (; E(M); )
        $ += M, D();
      M === "." && ($ += M, D());
    }
    for (; E(M); )
      $ += M, D();
    if (M === "E" || M === "e") {
      var O = "", F = _;
      if (O += M, D(), (M === "+" || M === "-") && (O += M, D()), !E(M))
        return T(F), $;
      for ($ = $ + O; E(M); )
        $ += M, D();
    }
    return $;
  }
  function B() {
    for (var $ = ""; E(M) || y.isValidAlpha(M); )
      $ += M, D();
    var P = $.charAt(0);
    return y.isValidAlpha(P) ? $ : null;
  }
  function I($) {
    return M === $ ? (D(), $) : null;
  }
  y.parse = function($, P) {
    if (P = P || {}, b = $, _ = -1, M = "", typeof b != "string")
      throw new TypeError("Invalid argument in Unit.parse, string expected");
    var O = new y();
    O.units = [];
    var F = 1, H = !1;
    D(), A();
    var X = R(), K = null;
    if (X) {
      if (t.number === "BigNumber")
        K = new v(X);
      else if (t.number === "Fraction")
        try {
          K = new S(X);
        } catch {
          K = parseFloat(X);
        }
      else
        K = parseFloat(X);
      A(), I("*") ? (F = 1, H = !0) : I("/") && (F = -1, H = !0);
    }
    for (var se = [], le = 1; ; ) {
      for (A(); M === "("; )
        se.push(F), le *= F, F = 1, D(), A();
      var ge = void 0;
      if (M) {
        var be = M;
        if (ge = B(), ge === null)
          throw new SyntaxError('Unexpected "' + be + '" in "' + b + '" at index ' + _.toString());
      } else
        break;
      var he = C(ge);
      if (he === null)
        throw new SyntaxError('Unit "' + ge + '" not found.');
      var ye = F * le;
      if (A(), I("^")) {
        A();
        var Oe = R();
        if (Oe === null)
          throw new SyntaxError('In "' + $ + '", "^" must be followed by a floating-point number');
        ye *= Oe;
      }
      O.units.push({
        unit: he.unit,
        prefix: he.prefix,
        power: ye
      });
      for (var Te = 0; Te < J.length; Te++)
        O.dimensions[Te] += (he.unit.dimensions[Te] || 0) * ye;
      for (A(); M === ")"; ) {
        if (se.length === 0)
          throw new SyntaxError('Unmatched ")" in "' + b + '" at index ' + _.toString());
        le /= se.pop(), D(), A();
      }
      if (H = !1, I("*") ? (F = 1, H = !0) : I("/") ? (F = -1, H = !0) : F = 1, he.unit.base) {
        var Fe = he.unit.base.key;
        ne.auto[Fe] = {
          unit: he.unit,
          prefix: he.prefix
        };
      }
    }
    if (A(), M)
      throw new SyntaxError('Could not parse: "' + $ + '"');
    if (H)
      throw new SyntaxError('Trailing characters: "' + $ + '"');
    if (se.length !== 0)
      throw new SyntaxError('Unmatched "(" in "' + b + '"');
    if (O.units.length === 0 && !P.allowNoUnits)
      throw new SyntaxError('"' + $ + '" contains no units');
    return O.value = K !== void 0 ? O._normalize(K) : null, O;
  }, y.prototype.clone = function() {
    var $ = new y();
    $.fixPrefix = this.fixPrefix, $.skipAutomaticSimplification = this.skipAutomaticSimplification, $.value = Ye(this.value), $.dimensions = this.dimensions.slice(0), $.units = [];
    for (var P = 0; P < this.units.length; P++) {
      $.units[P] = {};
      for (var O in this.units[P])
        Ue(this.units[P], O) && ($.units[P][O] = this.units[P][O]);
    }
    return $;
  }, y.prototype.valueType = function() {
    return Dt(this.value);
  }, y.prototype._isDerived = function() {
    return this.units.length === 0 ? !1 : this.units.length > 1 || Math.abs(this.units[0].power - 1) > 1e-15;
  }, y.prototype._normalize = function($) {
    if ($ == null || this.units.length === 0)
      return $;
    for (var P = $, O = y._getNumberConverter(Dt($)), F = 0; F < this.units.length; F++) {
      var H = O(this.units[F].unit.value), X = O(this.units[F].prefix.value), K = O(this.units[F].power);
      P = a(P, o(a(H, X), K));
    }
    return P;
  }, y.prototype._denormalize = function($, P) {
    if ($ == null || this.units.length === 0)
      return $;
    for (var O = $, F = y._getNumberConverter(Dt($)), H = 0; H < this.units.length; H++) {
      var X = F(this.units[H].unit.value), K = F(this.units[H].prefix.value), se = F(this.units[H].power);
      O = s(O, o(a(X, K), se));
    }
    return O;
  };
  var C = Hs(($) => {
    if (Ue(G, $)) {
      var P = G[$], O = P.prefixes[""];
      return {
        unit: P,
        prefix: O
      };
    }
    for (var F in G)
      if (Ue(G, F) && ub($, F)) {
        var H = G[F], X = $.length - F.length, K = $.substring(0, X), se = Ue(H.prefixes, K) ? H.prefixes[K] : void 0;
        if (se !== void 0)
          return {
            unit: H,
            prefix: se
          };
      }
    return null;
  }, {
    hasher: ($) => $[0],
    limit: 100
  });
  y.isValuelessUnit = function($) {
    return C($) !== null;
  }, y.prototype.hasBase = function($) {
    if (typeof $ == "string" && ($ = U[$]), !$)
      return !1;
    for (var P = 0; P < J.length; P++)
      if (Math.abs((this.dimensions[P] || 0) - ($.dimensions[P] || 0)) > 1e-12)
        return !1;
    return !0;
  }, y.prototype.equalBase = function($) {
    for (var P = 0; P < J.length; P++)
      if (Math.abs((this.dimensions[P] || 0) - ($.dimensions[P] || 0)) > 1e-12)
        return !1;
    return !0;
  }, y.prototype.equals = function($) {
    return this.equalBase($) && f(this.value, $.value);
  }, y.prototype.multiply = function($) {
    for (var P = this.clone(), O = wr($) ? $ : new y($), F = 0; F < J.length; F++)
      P.dimensions[F] = (this.dimensions[F] || 0) + (O.dimensions[F] || 0);
    for (var H = 0; H < O.units.length; H++) {
      var X = dl({}, O.units[H]);
      P.units.push(X);
    }
    if (this.value !== null || O.value !== null) {
      var K = this.value === null ? this._normalize(z(O.value)) : this.value, se = O.value === null ? O._normalize(z(this.value)) : O.value;
      P.value = a(K, se);
    } else
      P.value = null;
    return wr($) && (P.skipAutomaticSimplification = !1), k(P);
  }, y.prototype.divideInto = function($) {
    return new y($).divide(this);
  }, y.prototype.divide = function($) {
    for (var P = this.clone(), O = wr($) ? $ : new y($), F = 0; F < J.length; F++)
      P.dimensions[F] = (this.dimensions[F] || 0) - (O.dimensions[F] || 0);
    for (var H = 0; H < O.units.length; H++) {
      var X = dl(dl({}, O.units[H]), {}, {
        power: -O.units[H].power
      });
      P.units.push(X);
    }
    if (this.value !== null || O.value !== null) {
      var K = this.value === null ? this._normalize(z(O.value)) : this.value, se = O.value === null ? O._normalize(z(this.value)) : O.value;
      P.value = s(K, se);
    } else
      P.value = null;
    return wr($) && (P.skipAutomaticSimplification = !1), k(P);
  }, y.prototype.pow = function($) {
    for (var P = this.clone(), O = 0; O < J.length; O++)
      P.dimensions[O] = (this.dimensions[O] || 0) * $;
    for (var F = 0; F < P.units.length; F++)
      P.units[F].power *= $;
    return P.value !== null ? P.value = o(P.value, $) : P.value = null, P.skipAutomaticSimplification = !1, k(P);
  };
  function k($) {
    return $.equalBase(U.NONE) && $.value !== null && !t.predictable ? $.value : $;
  }
  function z($) {
    var P = y._getNumberConverter(Dt($));
    return P(1);
  }
  y.prototype.abs = function() {
    var $ = this.clone();
    if ($.value !== null)
      if ($._isDerived() || $.units.length === 0 || $.units[0].unit.offset === 0)
        $.value = l($.value);
      else {
        var P = $._numberConverter(), O = P($.units[0].unit.value), F = P($.units[0].unit.offset), H = a(O, F);
        $.value = i(l(n($.value, H)), H);
      }
    for (var X in $.units)
      ($.units[X].unit.name === "VA" || $.units[X].unit.name === "VAR") && ($.units[X].unit = G.W);
    return $;
  }, y.prototype.to = function($) {
    var P = this.value === null ? this._normalize(1) : this.value, O;
    if (typeof $ == "string")
      O = y.parse($);
    else if (wr($))
      O = $.clone();
    else
      throw new Error("String or Unit expected as parameter");
    if (!this.equalBase(O))
      throw new Error("Units do not match ('".concat(O.toString(), "' != '").concat(this.toString(), "')"));
    if (O.value !== null)
      throw new Error("Cannot convert to a unit with a value");
    if (this.value === null || this._isDerived() || this.units.length === 0 || O.units.length === 0 || this.units[0].unit.offset === O.units[0].unit.offset)
      O.value = Ye(P);
    else {
      var F = y._getNumberConverter(Dt(P)), H = this.units[0].unit.value, X = this.units[0].unit.offset, K = a(H, X), se = O.units[0].unit.value, le = O.units[0].unit.offset, ge = a(se, le);
      O.value = n(P, F(i(K, ge)));
    }
    return O.fixPrefix = !0, O.skipAutomaticSimplification = !0, O;
  }, y.prototype.toNumber = function($) {
    return x(this.toNumeric($));
  }, y.prototype.toNumeric = function($) {
    var P;
    return $ ? P = this.to($) : P = this.clone(), P._isDerived() || P.units.length === 0 ? P._denormalize(P.value) : P._denormalize(P.value, P.units[0].prefix.value);
  }, y.prototype.toString = function() {
    return this.format();
  }, y.prototype.toJSON = function() {
    return {
      mathjs: "Unit",
      value: this._denormalize(this.value),
      unit: this.units.length > 0 ? this.formatUnits() : null,
      fixPrefix: this.fixPrefix
    };
  }, y.fromJSON = function($) {
    var P, O = new y($.value, (P = $.unit) !== null && P !== void 0 ? P : void 0);
    return O.fixPrefix = $.fixPrefix || !1, O;
  }, y.prototype.valueOf = y.prototype.toString, y.prototype.simplify = function() {
    var $ = this.clone(), P = [], O;
    for (var F in ae)
      if (Ue(ae, F) && $.hasBase(U[F])) {
        O = F;
        break;
      }
    if (O === "NONE")
      $.units = [];
    else {
      var H;
      if (O && Ue(ae, O) && (H = ae[O]), H)
        $.units = [{
          unit: H.unit,
          prefix: H.prefix,
          power: 1
        }];
      else {
        for (var X = !1, K = 0; K < J.length; K++) {
          var se = J[K];
          Math.abs($.dimensions[K] || 0) > 1e-12 && (Ue(ae, se) ? P.push({
            unit: ae[se].unit,
            prefix: ae[se].prefix,
            power: $.dimensions[K] || 0
          }) : X = !0);
        }
        P.length < $.units.length && !X && ($.units = P);
      }
    }
    return $;
  }, y.prototype.toSI = function() {
    for (var $ = this.clone(), P = [], O = 0; O < J.length; O++) {
      var F = J[O];
      if (Math.abs($.dimensions[O] || 0) > 1e-12)
        if (Ue(ne.si, F))
          P.push({
            unit: ne.si[F].unit,
            prefix: ne.si[F].prefix,
            power: $.dimensions[O] || 0
          });
        else
          throw new Error("Cannot express custom unit " + F + " in SI units");
    }
    return $.units = P, $.fixPrefix = !0, $.skipAutomaticSimplification = !0, this.value !== null ? ($.value = null, this.to($)) : $;
  }, y.prototype.formatUnits = function() {
    for (var $ = "", P = "", O = 0, F = 0, H = 0; H < this.units.length; H++)
      this.units[H].power > 0 ? (O++, $ += " " + this.units[H].prefix.name + this.units[H].unit.name, Math.abs(this.units[H].power - 1) > 1e-15 && ($ += "^" + this.units[H].power)) : this.units[H].power < 0 && F++;
    if (F > 0)
      for (var X = 0; X < this.units.length; X++)
        this.units[X].power < 0 && (O > 0 ? (P += " " + this.units[X].prefix.name + this.units[X].unit.name, Math.abs(this.units[X].power + 1) > 1e-15 && (P += "^" + -this.units[X].power)) : (P += " " + this.units[X].prefix.name + this.units[X].unit.name, P += "^" + this.units[X].power));
    $ = $.substr(1), P = P.substr(1), O > 1 && F > 0 && ($ = "(" + $ + ")"), F > 1 && O > 0 && (P = "(" + P + ")");
    var K = $;
    return O > 0 && F > 0 && (K += " / "), K += P, K;
  }, y.prototype.toBest = function() {
    var $ = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], P = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if ($ && !Array.isArray($))
      throw new Error("Invalid unit type. Expected string or Unit.");
    var O = this.units[0].unit.prefixes;
    if ($ && $.length > 0) {
      var F = $.map((K) => {
        var se = null;
        if (typeof K == "string") {
          if (se = y.parse(K), !se)
            throw new Error("Invalid unit type. Expected compatible string or Unit.");
        } else if (!wr(K))
          throw new Error("Invalid unit type. Expected compatible string or Unit.");
        se === null && (se = K.clone());
        try {
          return this.to(se.formatUnits()), se;
        } catch {
          throw new Error("Invalid unit type. Expected compatible string or Unit.");
        }
      }), H = F.map((K) => K.units[0].prefix);
      this.units[0].unit.prefixes = H.reduce((K, se) => (K[se.name] = se, K), {}), this.units[0].prefix = H[0];
    }
    var X = V(this, P).simp;
    return this.units[0].unit.prefixes = O, X.fixPrefix = !0, X;
  }, y.prototype.format = function($) {
    var {
      simp: P,
      valueStr: O,
      unitStr: F
    } = V(this, $), H = O;
    return P.value && fn(P.value) && (H = "(" + H + ")"), F.length > 0 && H.length > 0 && (H += " "), H += F, H;
  };
  function V($) {
    var P = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, O = $.skipAutomaticSimplification || $.value === null ? $.clone() : $.simplify();
    ee(O), re(O, P.offset);
    var F = O._denormalize(O.value), H = O.value !== null ? d(F, P || {}) : "", X = O.formatUnits();
    return {
      simp: O,
      valueStr: H,
      unitStr: X
    };
  }
  function ee($) {
    var P = !1;
    typeof $.value < "u" && $.value !== null && fn($.value) && (P = Math.abs($.value.re) < 1e-14);
    for (var O in $.units)
      Ue($.units, O) && $.units[O].unit && ($.units[O].unit.name === "VA" && P ? $.units[O].unit = G.VAR : $.units[O].unit.name === "VAR" && !P && ($.units[O].unit = G.VA));
  }
  function re($, P) {
    $.units.length === 1 && !$.fixPrefix && Math.abs($.units[0].power - Math.round($.units[0].power)) < 1e-14 && ($.units[0].prefix = $._bestPrefix(P));
  }
  y.prototype._bestPrefix = function() {
    var $ = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1.2;
    if (this.units.length !== 1)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    var P = this.value !== null ? l(this.value) : 0, O = l(this.units[0].unit.value), F = this.units[0].prefix;
    if (P === 0)
      return F;
    var H = this.units[0].power, X = Math.log(P / Math.pow(F.value * O, H)) / Math.LN10 - $;
    if (X > -2.200001 && X < 1.800001) return F;
    X = Math.abs(X);
    var K = this.units[0].unit.prefixes;
    for (var se in K)
      if (Ue(K, se)) {
        var le = K[se];
        if (le.scientific) {
          var ge = Math.abs(Math.log(P / Math.pow(le.value * O, H)) / Math.LN10 - $);
          (ge < X || ge === X && le.name.length < F.name.length) && (F = le, X = ge);
        }
      }
    return F;
  }, y.prototype.splitUnit = function($) {
    for (var P = this.clone(), O = [], F = 0; F < $.length && (P = P.to($[F]), F !== $.length - 1); F++) {
      var H = P.toNumeric(), X = c(H), K = void 0, se = f(X, H);
      se ? K = X : K = u(P.toNumeric());
      var le = new y(K, $[F].toString());
      O.push(le), P = i(P, le);
    }
    for (var ge = 0, be = 0; be < O.length; be++)
      ge = n(ge, O[be].value);
    return f(ge, this.value) && (P.value = 0), O.push(P), O;
  };
  var L = {
    NONE: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      }
    },
    SHORT: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 10,
        scientific: !1
      },
      h: {
        name: "h",
        value: 100,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e3,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e6,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e9,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e12,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e15,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e18,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e21,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e24,
        scientific: !0
      },
      R: {
        name: "R",
        value: 1e27,
        scientific: !0
      },
      Q: {
        name: "Q",
        value: 1e30,
        scientific: !0
      },
      d: {
        name: "d",
        value: 0.1,
        scientific: !1
      },
      c: {
        name: "c",
        value: 0.01,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-3,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-6,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-9,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-12,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-15,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-18,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-21,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-24,
        scientific: !0
      },
      r: {
        name: "r",
        value: 1e-27,
        scientific: !0
      },
      q: {
        name: "q",
        value: 1e-30,
        scientific: !0
      }
    },
    LONG: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      deca: {
        name: "deca",
        value: 10,
        scientific: !1
      },
      hecto: {
        name: "hecto",
        value: 100,
        scientific: !1
      },
      kilo: {
        name: "kilo",
        value: 1e3,
        scientific: !0
      },
      mega: {
        name: "mega",
        value: 1e6,
        scientific: !0
      },
      giga: {
        name: "giga",
        value: 1e9,
        scientific: !0
      },
      tera: {
        name: "tera",
        value: 1e12,
        scientific: !0
      },
      peta: {
        name: "peta",
        value: 1e15,
        scientific: !0
      },
      exa: {
        name: "exa",
        value: 1e18,
        scientific: !0
      },
      zetta: {
        name: "zetta",
        value: 1e21,
        scientific: !0
      },
      yotta: {
        name: "yotta",
        value: 1e24,
        scientific: !0
      },
      ronna: {
        name: "ronna",
        value: 1e27,
        scientific: !0
      },
      quetta: {
        name: "quetta",
        value: 1e30,
        scientific: !0
      },
      deci: {
        name: "deci",
        value: 0.1,
        scientific: !1
      },
      centi: {
        name: "centi",
        value: 0.01,
        scientific: !1
      },
      milli: {
        name: "milli",
        value: 1e-3,
        scientific: !0
      },
      micro: {
        name: "micro",
        value: 1e-6,
        scientific: !0
      },
      nano: {
        name: "nano",
        value: 1e-9,
        scientific: !0
      },
      pico: {
        name: "pico",
        value: 1e-12,
        scientific: !0
      },
      femto: {
        name: "femto",
        value: 1e-15,
        scientific: !0
      },
      atto: {
        name: "atto",
        value: 1e-18,
        scientific: !0
      },
      zepto: {
        name: "zepto",
        value: 1e-21,
        scientific: !0
      },
      yocto: {
        name: "yocto",
        value: 1e-24,
        scientific: !0
      },
      ronto: {
        name: "ronto",
        value: 1e-27,
        scientific: !0
      },
      quecto: {
        name: "quecto",
        value: 1e-30,
        scientific: !0
      }
    },
    SQUARED: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 100,
        scientific: !1
      },
      h: {
        name: "h",
        value: 1e4,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e6,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e12,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e18,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e24,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e30,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e36,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e42,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e48,
        scientific: !0
      },
      R: {
        name: "R",
        value: 1e54,
        scientific: !0
      },
      Q: {
        name: "Q",
        value: 1e60,
        scientific: !0
      },
      d: {
        name: "d",
        value: 0.01,
        scientific: !1
      },
      c: {
        name: "c",
        value: 1e-4,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-6,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-12,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-18,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-24,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-30,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-36,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-42,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-48,
        scientific: !0
      },
      r: {
        name: "r",
        value: 1e-54,
        scientific: !0
      },
      q: {
        name: "q",
        value: 1e-60,
        scientific: !0
      }
    },
    CUBIC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 1e3,
        scientific: !1
      },
      h: {
        name: "h",
        value: 1e6,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e9,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e18,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e27,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e36,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e45,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e54,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e63,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e72,
        scientific: !0
      },
      R: {
        name: "R",
        value: 1e81,
        scientific: !0
      },
      Q: {
        name: "Q",
        value: 1e90,
        scientific: !0
      },
      d: {
        name: "d",
        value: 1e-3,
        scientific: !1
      },
      c: {
        name: "c",
        value: 1e-6,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-9,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-18,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-27,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-36,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-45,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-54,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-63,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-72,
        scientific: !0
      },
      r: {
        name: "r",
        value: 1e-81,
        scientific: !0
      },
      q: {
        name: "q",
        value: 1e-90,
        scientific: !0
      }
    },
    BINARY_SHORT_SI: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      k: {
        name: "k",
        value: 1e3,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e6,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e9,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e12,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e15,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e18,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e21,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e24,
        scientific: !0
      }
    },
    BINARY_SHORT_IEC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      Ki: {
        name: "Ki",
        value: 1024,
        scientific: !0
      },
      Mi: {
        name: "Mi",
        value: Math.pow(1024, 2),
        scientific: !0
      },
      Gi: {
        name: "Gi",
        value: Math.pow(1024, 3),
        scientific: !0
      },
      Ti: {
        name: "Ti",
        value: Math.pow(1024, 4),
        scientific: !0
      },
      Pi: {
        name: "Pi",
        value: Math.pow(1024, 5),
        scientific: !0
      },
      Ei: {
        name: "Ei",
        value: Math.pow(1024, 6),
        scientific: !0
      },
      Zi: {
        name: "Zi",
        value: Math.pow(1024, 7),
        scientific: !0
      },
      Yi: {
        name: "Yi",
        value: Math.pow(1024, 8),
        scientific: !0
      }
    },
    BINARY_LONG_SI: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      kilo: {
        name: "kilo",
        value: 1e3,
        scientific: !0
      },
      mega: {
        name: "mega",
        value: 1e6,
        scientific: !0
      },
      giga: {
        name: "giga",
        value: 1e9,
        scientific: !0
      },
      tera: {
        name: "tera",
        value: 1e12,
        scientific: !0
      },
      peta: {
        name: "peta",
        value: 1e15,
        scientific: !0
      },
      exa: {
        name: "exa",
        value: 1e18,
        scientific: !0
      },
      zetta: {
        name: "zetta",
        value: 1e21,
        scientific: !0
      },
      yotta: {
        name: "yotta",
        value: 1e24,
        scientific: !0
      }
    },
    BINARY_LONG_IEC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      kibi: {
        name: "kibi",
        value: 1024,
        scientific: !0
      },
      mebi: {
        name: "mebi",
        value: Math.pow(1024, 2),
        scientific: !0
      },
      gibi: {
        name: "gibi",
        value: Math.pow(1024, 3),
        scientific: !0
      },
      tebi: {
        name: "tebi",
        value: Math.pow(1024, 4),
        scientific: !0
      },
      pebi: {
        name: "pebi",
        value: Math.pow(1024, 5),
        scientific: !0
      },
      exi: {
        name: "exi",
        value: Math.pow(1024, 6),
        scientific: !0
      },
      zebi: {
        name: "zebi",
        value: Math.pow(1024, 7),
        scientific: !0
      },
      yobi: {
        name: "yobi",
        value: Math.pow(1024, 8),
        scientific: !0
      }
    },
    BTU: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      MM: {
        name: "MM",
        value: 1e6,
        scientific: !0
      }
    }
  };
  L.SHORTLONG = pr({}, L.SHORT, L.LONG), L.BINARY_SHORT = pr({}, L.BINARY_SHORT_SI, L.BINARY_SHORT_IEC), L.BINARY_LONG = pr({}, L.BINARY_LONG_SI, L.BINARY_LONG_IEC);
  var J = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"], U = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };
  for (var ue in U)
    Ue(U, ue) && (U[ue].key = ue);
  var oe = {}, ie = {
    name: "",
    base: oe,
    value: 1,
    offset: 0,
    dimensions: J.map(($) => 0)
  }, G = {
    // length
    meter: {
      name: "meter",
      base: U.LENGTH,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: "inch",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: "foot",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: "yard",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: "mile",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: "link",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: "rod",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: "chain",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: "angstrom",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: "m",
      base: U.LENGTH,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    in: {
      name: "in",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: "ft",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: "yd",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: "mi",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: "li",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: "rd",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 5.02921,
      offset: 0
    },
    ch: {
      name: "ch",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: "mil",
      base: U.LENGTH,
      prefixes: L.NONE,
      value: 254e-7,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: "m2",
      base: U.SURFACE,
      prefixes: L.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: "sqin",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 64516e-8,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: "sqft",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: "sqyd",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: "sqmi",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 2589988110336e-6,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: "sqrd",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: "sqch",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: "sqmil",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 64516e-14,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: "acre",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: "hectare",
      base: U.SURFACE,
      prefixes: L.NONE,
      value: 1e4,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: "m3",
      base: U.VOLUME,
      prefixes: L.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: "L",
      base: U.VOLUME,
      prefixes: L.SHORT,
      value: 1e-3,
      offset: 0
    },
    // litre
    l: {
      name: "l",
      base: U.VOLUME,
      prefixes: L.SHORT,
      value: 1e-3,
      offset: 0
    },
    // litre
    litre: {
      name: "litre",
      base: U.VOLUME,
      prefixes: L.LONG,
      value: 1e-3,
      offset: 0
    },
    cuin: {
      name: "cuin",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 16387064e-12,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: "cuft",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: "cuyd",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: "teaspoon",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 5e-6,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: "tablespoon",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 15e-6,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: "drop",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: "gtt",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: "minim",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 61611519921875e-21,
      offset: 0
    },
    // 1/61440 gallons
    fluiddram: {
      name: "fluiddram",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 36966911953125e-19,
      offset: 0
    },
    // 1/1024 gallons
    fluidounce: {
      name: "fluidounce",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 295735295625e-16,
      offset: 0
    },
    // 1/128 gallons
    gill: {
      name: "gill",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 11829411825e-14,
      offset: 0
    },
    // 1/32 gallons
    cc: {
      name: "cc",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: "cup",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 2365882365e-13,
      offset: 0
    },
    // 1/16 gallons
    pint: {
      name: "pint",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 473176473e-12,
      offset: 0
    },
    // 1/8 gallons
    quart: {
      name: "quart",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 946352946e-12,
      offset: 0
    },
    // 1/4 gallons
    gallon: {
      name: "gallon",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.003785411784,
      offset: 0
    },
    // 3.785411784 L
    beerbarrel: {
      name: "beerbarrel",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.117347765304,
      offset: 0
    },
    // 31 gallons
    oilbarrel: {
      name: "oilbarrel",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.158987294928,
      offset: 0
    },
    // 42 gallons
    hogshead: {
      name: "hogshead",
      base: U.VOLUME,
      prefixes: L.NONE,
      value: 0.238480942392,
      offset: 0
    },
    // 63 gallons
    // Mass
    g: {
      name: "g",
      base: U.MASS,
      prefixes: L.SHORT,
      value: 1e-3,
      offset: 0
    },
    gram: {
      name: "gram",
      base: U.MASS,
      prefixes: L.LONG,
      value: 1e-3,
      offset: 0
    },
    ton: {
      name: "ton",
      base: U.MASS,
      prefixes: L.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: "t",
      base: U.MASS,
      prefixes: L.SHORT,
      value: 1e3,
      offset: 0
    },
    tonne: {
      name: "tonne",
      base: U.MASS,
      prefixes: L.LONG,
      value: 1e3,
      offset: 0
    },
    grain: {
      name: "grain",
      base: U.MASS,
      prefixes: L.NONE,
      value: 6479891e-11,
      offset: 0
    },
    dram: {
      name: "dram",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.0017718451953125,
      offset: 0
    },
    ounce: {
      name: "ounce",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.028349523125,
      offset: 0
    },
    poundmass: {
      name: "poundmass",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.45359237,
      offset: 0
    },
    hundredweight: {
      name: "hundredweight",
      base: U.MASS,
      prefixes: L.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: "stick",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.115,
      offset: 0
    },
    stone: {
      name: "stone",
      base: U.MASS,
      prefixes: L.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: "gr",
      base: U.MASS,
      prefixes: L.NONE,
      value: 6479891e-11,
      offset: 0
    },
    dr: {
      name: "dr",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.0017718451953125,
      offset: 0
    },
    oz: {
      name: "oz",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.028349523125,
      offset: 0
    },
    lbm: {
      name: "lbm",
      base: U.MASS,
      prefixes: L.NONE,
      value: 0.45359237,
      offset: 0
    },
    cwt: {
      name: "cwt",
      base: U.MASS,
      prefixes: L.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: "s",
      base: U.TIME,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: "min",
      base: U.TIME,
      prefixes: L.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: "h",
      base: U.TIME,
      prefixes: L.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: "second",
      base: U.TIME,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: "sec",
      base: U.TIME,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: "minute",
      base: U.TIME,
      prefixes: L.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: "hour",
      base: U.TIME,
      prefixes: L.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: "day",
      base: U.TIME,
      prefixes: L.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: "week",
      base: U.TIME,
      prefixes: L.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: "month",
      base: U.TIME,
      prefixes: L.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: "year",
      base: U.TIME,
      prefixes: L.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: "decade",
      base: U.TIME,
      prefixes: L.NONE,
      value: 315576e3,
      // Julian decade
      offset: 0
    },
    century: {
      name: "century",
      base: U.TIME,
      prefixes: L.NONE,
      value: 315576e4,
      // Julian century
      offset: 0
    },
    millennium: {
      name: "millennium",
      base: U.TIME,
      prefixes: L.NONE,
      value: 315576e5,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: "Hertz",
      base: U.FREQUENCY,
      prefixes: L.LONG,
      value: 1,
      offset: 0,
      reciprocal: !0
    },
    Hz: {
      name: "Hz",
      base: U.FREQUENCY,
      prefixes: L.SHORT,
      value: 1,
      offset: 0,
      reciprocal: !0
    },
    // Angle
    rad: {
      name: "rad",
      base: U.ANGLE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: "radian",
      base: U.ANGLE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: "deg",
      base: U.ANGLE,
      prefixes: L.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: "degree",
      base: U.ANGLE,
      prefixes: L.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: "grad",
      base: U.ANGLE,
      prefixes: L.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: "gradian",
      base: U.ANGLE,
      prefixes: L.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: "cycle",
      base: U.ANGLE,
      prefixes: L.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: "arcsec",
      base: U.ANGLE,
      prefixes: L.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: "arcmin",
      base: U.ANGLE,
      prefixes: L.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: "A",
      base: U.CURRENT,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: "ampere",
      base: U.CURRENT,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) * (5 / 9)
    // K(R) = °R * (5 / 9)
    K: {
      name: "K",
      base: U.TEMPERATURE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    degC: {
      name: "degC",
      base: U.TEMPERATURE,
      prefixes: L.SHORT,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: "degF",
      base: U.TEMPERATURE,
      prefixes: L.SHORT,
      value: new S(5, 9),
      offset: 459.67
    },
    degR: {
      name: "degR",
      base: U.TEMPERATURE,
      prefixes: L.SHORT,
      value: new S(5, 9),
      offset: 0
    },
    kelvin: {
      name: "kelvin",
      base: U.TEMPERATURE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    celsius: {
      name: "celsius",
      base: U.TEMPERATURE,
      prefixes: L.LONG,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: "fahrenheit",
      base: U.TEMPERATURE,
      prefixes: L.LONG,
      value: new S(5, 9),
      offset: 459.67
    },
    rankine: {
      name: "rankine",
      base: U.TEMPERATURE,
      prefixes: L.LONG,
      value: new S(5, 9),
      offset: 0
    },
    // amount of substance
    mol: {
      name: "mol",
      base: U.AMOUNT_OF_SUBSTANCE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: "mole",
      base: U.AMOUNT_OF_SUBSTANCE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: "cd",
      base: U.LUMINOUS_INTENSITY,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: "candela",
      base: U.LUMINOUS_INTENSITY,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: "N",
      base: U.FORCE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: "newton",
      base: U.FORCE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: "dyn",
      base: U.FORCE,
      prefixes: L.SHORT,
      value: 1e-5,
      offset: 0
    },
    dyne: {
      name: "dyne",
      base: U.FORCE,
      prefixes: L.LONG,
      value: 1e-5,
      offset: 0
    },
    lbf: {
      name: "lbf",
      base: U.FORCE,
      prefixes: L.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: "poundforce",
      base: U.FORCE,
      prefixes: L.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: "kip",
      base: U.FORCE,
      prefixes: L.LONG,
      value: 4448.2216,
      offset: 0
    },
    kilogramforce: {
      name: "kilogramforce",
      base: U.FORCE,
      prefixes: L.NONE,
      value: 9.80665,
      offset: 0
    },
    // Energy
    J: {
      name: "J",
      base: U.ENERGY,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: "joule",
      base: U.ENERGY,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    erg: {
      name: "erg",
      base: U.ENERGY,
      prefixes: L.SHORTLONG,
      // Both kiloerg and kerg are acceptable
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: "Wh",
      base: U.ENERGY,
      prefixes: L.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: "BTU",
      base: U.ENERGY,
      prefixes: L.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: "eV",
      base: U.ENERGY,
      prefixes: L.SHORT,
      value: 1602176565e-28,
      offset: 0
    },
    electronvolt: {
      name: "electronvolt",
      base: U.ENERGY,
      prefixes: L.LONG,
      value: 1602176565e-28,
      offset: 0
    },
    // Power
    W: {
      name: "W",
      base: U.POWER,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: "watt",
      base: U.POWER,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: "hp",
      base: U.POWER,
      prefixes: L.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: "VAR",
      base: U.POWER,
      prefixes: L.SHORT,
      value: g.I,
      offset: 0
    },
    VA: {
      name: "VA",
      base: U.POWER,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: "Pa",
      base: U.PRESSURE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: "psi",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: "atm",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: "bar",
      base: U.PRESSURE,
      prefixes: L.SHORTLONG,
      value: 1e5,
      offset: 0
    },
    torr: {
      name: "torr",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: "mmHg",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: "mmH2O",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: "cmH2O",
      base: U.PRESSURE,
      prefixes: L.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: "coulomb",
      base: U.ELECTRIC_CHARGE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: "C",
      base: U.ELECTRIC_CHARGE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: "farad",
      base: U.ELECTRIC_CAPACITANCE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: "F",
      base: U.ELECTRIC_CAPACITANCE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: "volt",
      base: U.ELECTRIC_POTENTIAL,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: "V",
      base: U.ELECTRIC_POTENTIAL,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: "ohm",
      base: U.ELECTRIC_RESISTANCE,
      prefixes: L.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },
    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: "henry",
      base: U.ELECTRIC_INDUCTANCE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: "H",
      base: U.ELECTRIC_INDUCTANCE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: "siemens",
      base: U.ELECTRIC_CONDUCTANCE,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: "S",
      base: U.ELECTRIC_CONDUCTANCE,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: "weber",
      base: U.MAGNETIC_FLUX,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: "Wb",
      base: U.MAGNETIC_FLUX,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: "tesla",
      base: U.MAGNETIC_FLUX_DENSITY,
      prefixes: L.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: "T",
      base: U.MAGNETIC_FLUX_DENSITY,
      prefixes: L.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: "b",
      base: U.BIT,
      prefixes: L.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: "bits",
      base: U.BIT,
      prefixes: L.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: "B",
      base: U.BIT,
      prefixes: L.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: "bytes",
      base: U.BIT,
      prefixes: L.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }, Z = {
    meters: "meter",
    inches: "inch",
    feet: "foot",
    yards: "yard",
    miles: "mile",
    links: "link",
    rods: "rod",
    chains: "chain",
    angstroms: "angstrom",
    lt: "l",
    litres: "litre",
    liter: "litre",
    liters: "litre",
    teaspoons: "teaspoon",
    tablespoons: "tablespoon",
    minims: "minim",
    fldr: "fluiddram",
    fluiddrams: "fluiddram",
    floz: "fluidounce",
    fluidounces: "fluidounce",
    gi: "gill",
    gills: "gill",
    cp: "cup",
    cups: "cup",
    pt: "pint",
    pints: "pint",
    qt: "quart",
    quarts: "quart",
    gal: "gallon",
    gallons: "gallon",
    bbl: "beerbarrel",
    beerbarrels: "beerbarrel",
    obl: "oilbarrel",
    oilbarrels: "oilbarrel",
    hogsheads: "hogshead",
    gtts: "gtt",
    grams: "gram",
    tons: "ton",
    tonnes: "tonne",
    grains: "grain",
    drams: "dram",
    ounces: "ounce",
    poundmasses: "poundmass",
    hundredweights: "hundredweight",
    sticks: "stick",
    lb: "lbm",
    lbs: "lbm",
    kips: "kip",
    kgf: "kilogramforce",
    acres: "acre",
    hectares: "hectare",
    sqfeet: "sqft",
    sqyard: "sqyd",
    sqmile: "sqmi",
    sqmiles: "sqmi",
    mmhg: "mmHg",
    mmh2o: "mmH2O",
    cmh2o: "cmH2O",
    seconds: "second",
    secs: "second",
    minutes: "minute",
    mins: "minute",
    hours: "hour",
    hr: "hour",
    hrs: "hour",
    days: "day",
    weeks: "week",
    months: "month",
    years: "year",
    decades: "decade",
    centuries: "century",
    millennia: "millennium",
    hertz: "hertz",
    radians: "radian",
    degrees: "degree",
    gradians: "gradian",
    cycles: "cycle",
    arcsecond: "arcsec",
    arcseconds: "arcsec",
    arcminute: "arcmin",
    arcminutes: "arcmin",
    BTUs: "BTU",
    watts: "watt",
    joules: "joule",
    amperes: "ampere",
    amps: "ampere",
    amp: "ampere",
    coulombs: "coulomb",
    volts: "volt",
    ohms: "ohm",
    farads: "farad",
    webers: "weber",
    teslas: "tesla",
    electronvolts: "electronvolt",
    moles: "mole",
    bit: "bits",
    byte: "bytes"
  };
  function te($) {
    if ($.number === "BigNumber") {
      var P = Rf(v);
      G.rad.value = new v(1), G.deg.value = P.div(180), G.grad.value = P.div(200), G.cycle.value = P.times(2), G.arcsec.value = P.div(648e3), G.arcmin.value = P.div(10800);
    } else
      G.rad.value = 1, G.deg.value = Math.PI / 180, G.grad.value = Math.PI / 200, G.cycle.value = Math.PI * 2, G.arcsec.value = Math.PI / 648e3, G.arcmin.value = Math.PI / 10800;
    G.radian.value = G.rad.value, G.degree.value = G.deg.value, G.gradian.value = G.grad.value;
  }
  te(t), e && e("config", function($, P) {
    $.number !== P.number && te($);
  });
  var ne = {
    si: {
      // Base units
      NONE: {
        unit: ie,
        prefix: L.NONE[""]
      },
      LENGTH: {
        unit: G.m,
        prefix: L.SHORT[""]
      },
      MASS: {
        unit: G.g,
        prefix: L.SHORT.k
      },
      TIME: {
        unit: G.s,
        prefix: L.SHORT[""]
      },
      CURRENT: {
        unit: G.A,
        prefix: L.SHORT[""]
      },
      TEMPERATURE: {
        unit: G.K,
        prefix: L.SHORT[""]
      },
      LUMINOUS_INTENSITY: {
        unit: G.cd,
        prefix: L.SHORT[""]
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: G.mol,
        prefix: L.SHORT[""]
      },
      ANGLE: {
        unit: G.rad,
        prefix: L.SHORT[""]
      },
      BIT: {
        unit: G.bits,
        prefix: L.SHORT[""]
      },
      // Derived units
      FORCE: {
        unit: G.N,
        prefix: L.SHORT[""]
      },
      ENERGY: {
        unit: G.J,
        prefix: L.SHORT[""]
      },
      POWER: {
        unit: G.W,
        prefix: L.SHORT[""]
      },
      PRESSURE: {
        unit: G.Pa,
        prefix: L.SHORT[""]
      },
      ELECTRIC_CHARGE: {
        unit: G.C,
        prefix: L.SHORT[""]
      },
      ELECTRIC_CAPACITANCE: {
        unit: G.F,
        prefix: L.SHORT[""]
      },
      ELECTRIC_POTENTIAL: {
        unit: G.V,
        prefix: L.SHORT[""]
      },
      ELECTRIC_RESISTANCE: {
        unit: G.ohm,
        prefix: L.SHORT[""]
      },
      ELECTRIC_INDUCTANCE: {
        unit: G.H,
        prefix: L.SHORT[""]
      },
      ELECTRIC_CONDUCTANCE: {
        unit: G.S,
        prefix: L.SHORT[""]
      },
      MAGNETIC_FLUX: {
        unit: G.Wb,
        prefix: L.SHORT[""]
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: G.T,
        prefix: L.SHORT[""]
      },
      FREQUENCY: {
        unit: G.Hz,
        prefix: L.SHORT[""]
      }
    }
  };
  ne.cgs = JSON.parse(JSON.stringify(ne.si)), ne.cgs.LENGTH = {
    unit: G.m,
    prefix: L.SHORT.c
  }, ne.cgs.MASS = {
    unit: G.g,
    prefix: L.SHORT[""]
  }, ne.cgs.FORCE = {
    unit: G.dyn,
    prefix: L.SHORT[""]
  }, ne.cgs.ENERGY = {
    unit: G.erg,
    prefix: L.NONE[""]
  }, ne.us = JSON.parse(JSON.stringify(ne.si)), ne.us.LENGTH = {
    unit: G.ft,
    prefix: L.NONE[""]
  }, ne.us.MASS = {
    unit: G.lbm,
    prefix: L.NONE[""]
  }, ne.us.TEMPERATURE = {
    unit: G.degF,
    prefix: L.NONE[""]
  }, ne.us.FORCE = {
    unit: G.lbf,
    prefix: L.NONE[""]
  }, ne.us.ENERGY = {
    unit: G.BTU,
    prefix: L.BTU[""]
  }, ne.us.POWER = {
    unit: G.hp,
    prefix: L.NONE[""]
  }, ne.us.PRESSURE = {
    unit: G.psi,
    prefix: L.NONE[""]
  }, ne.auto = JSON.parse(JSON.stringify(ne.si));
  var ae = ne.auto;
  y.setUnitSystem = function($) {
    if (Ue(ne, $))
      ae = ne[$];
    else
      throw new Error("Unit system " + $ + " does not exist. Choices are: " + Object.keys(ne).join(", "));
  }, y.getUnitSystem = function() {
    for (var $ in ne)
      if (Ue(ne, $) && ne[$] === ae)
        return $;
  }, y.typeConverters = {
    BigNumber: function(P) {
      return P != null && P.isFraction ? new v(String(P.n)).div(String(P.d)).times(String(P.s)) : new v(P + "");
    },
    Fraction: function(P) {
      return new S(P);
    },
    Complex: function(P) {
      return P;
    },
    number: function(P) {
      return P != null && P.isFraction ? p(P) : P;
    }
  }, y.prototype._numberConverter = function() {
    var $ = y.typeConverters[this.valueType()];
    if ($)
      return $;
    throw new TypeError('Unsupported Unit value type "' + this.valueType() + '"');
  }, y._getNumberConverter = function($) {
    if (!y.typeConverters[$])
      throw new TypeError('Unsupported type "' + $ + '"');
    return y.typeConverters[$];
  };
  for (var xe in G)
    if (Ue(G, xe)) {
      var q = G[xe];
      q.dimensions = q.base.dimensions;
    }
  for (var Ae in Z)
    if (Ue(Z, Ae)) {
      var De = G[Z[Ae]], Ne = {};
      for (var we in De)
        Ue(De, we) && (Ne[we] = De[we]);
      Ne.name = Ae, G[Ae] = Ne;
    }
  y.isValidAlpha = function(P) {
    return /^[a-zA-Z]$/.test(P);
  };
  function Pe($) {
    for (var P = 0; P < $.length; P++) {
      if (M = $.charAt(P), P === 0 && !y.isValidAlpha(M))
        throw new Error('Invalid unit name (must begin with alpha character): "' + $ + '"');
      if (P > 0 && !(y.isValidAlpha(M) || E(M)))
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + $ + '"');
    }
  }
  return y.createUnit = function($, P) {
    if (typeof $ != "object")
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    if (P && P.override) {
      for (var O in $)
        if (Ue($, O) && y.deleteUnit(O), $[O].aliases)
          for (var F = 0; F < $[O].aliases.length; F++)
            y.deleteUnit($[O].aliases[F]);
    }
    var H;
    for (var X in $)
      Ue($, X) && (H = y.createUnitSingle(X, $[X]));
    return H;
  }, y.createUnitSingle = function($, P) {
    if ((typeof P > "u" || P === null) && (P = {}), typeof $ != "string")
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    if (Ue(G, $))
      throw new Error('Cannot create unit "' + $ + '": a unit with that name already exists');
    Pe($);
    var O = null, F = [], H = 0, X, K, se;
    if (P && P.type === "Unit")
      O = P.clone();
    else if (typeof P == "string")
      P !== "" && (X = P);
    else if (typeof P == "object")
      X = P.definition, K = P.prefixes, H = P.offset, se = P.baseName, P.aliases && (F = P.aliases.valueOf());
    else
      throw new TypeError('Cannot create unit "' + $ + '" from "' + P.toString() + '": expecting "string" or "Unit" or "Object"');
    if (F) {
      for (var le = 0; le < F.length; le++)
        if (Ue(G, F[le]))
          throw new Error('Cannot create alias "' + F[le] + '": a unit with that name already exists');
    }
    if (X && typeof X == "string" && !O)
      try {
        O = y.parse(X, {
          allowNoUnits: !0
        });
      } catch (Ee) {
        throw Ee.message = 'Could not create unit "' + $ + '" from "' + X + '": ' + Ee.message, Ee;
      }
    else X && X.type === "Unit" && (O = X.clone());
    F = F || [], H = H || 0, K && K.toUpperCase ? K = L[K.toUpperCase()] || L.NONE : K = L.NONE;
    var ge = {};
    if (O) {
      ge = {
        name: $,
        value: O.value,
        dimensions: O.dimensions.slice(0),
        prefixes: K,
        offset: H
      };
      var Oe = !1;
      for (var Te in U)
        if (Ue(U, Te)) {
          for (var Fe = !0, N = 0; N < J.length; N++)
            if (Math.abs((ge.dimensions[N] || 0) - (U[Te].dimensions[N] || 0)) > 1e-12) {
              Fe = !1;
              break;
            }
          if (Fe) {
            Oe = !0, ge.base = U[Te];
            break;
          }
        }
      if (!Oe) {
        se = se || $ + "_STUFF";
        var j = {
          dimensions: O.dimensions.slice(0)
        };
        j.key = se, U[se] = j, ae[se] = {
          unit: ge,
          prefix: L.NONE[""]
        }, ge.base = U[se];
      }
    } else {
      if (se = se || $ + "_STUFF", J.indexOf(se) >= 0)
        throw new Error('Cannot create new base unit "' + $ + '": a base unit with that name already exists (and cannot be overridden)');
      J.push(se);
      for (var be in U)
        Ue(U, be) && (U[be].dimensions[J.length - 1] = 0);
      for (var he = {
        dimensions: []
      }, ye = 0; ye < J.length; ye++)
        he.dimensions[ye] = 0;
      he.dimensions[J.length - 1] = 1, he.key = se, U[se] = he, ge = {
        name: $,
        value: 1,
        dimensions: U[se].dimensions.slice(0),
        prefixes: K,
        offset: H,
        base: U[se]
      }, ae[se] = {
        unit: ge,
        prefix: L.NONE[""]
      };
    }
    y.UNITS[$] = ge;
    for (var de = 0; de < F.length; de++) {
      var Q = F[de], Se = {};
      for (var pe in ge)
        Ue(ge, pe) && (Se[pe] = ge[pe]);
      Se.name = Q, y.UNITS[Q] = Se;
    }
    return delete C.cache, new y(null, $);
  }, y.deleteUnit = function($) {
    delete y.UNITS[$], delete C.cache;
  }, y.PREFIXES = L, y.BASE_DIMENSIONS = J, y.BASE_UNITS = U, y.UNIT_SYSTEMS = ne, y.UNITS = G, y;
}, {
  isClass: !0
}), Lm = "unit", aD = ["typed", "Unit"], sD = /* @__PURE__ */ W(Lm, aD, (r) => {
  var {
    typed: e,
    Unit: t
  } = r;
  return e(Lm, {
    Unit: function(i) {
      return i.clone();
    },
    string: function(i) {
      return t.isValuelessUnit(i) ? new t(null, i) : t.parse(i, {
        allowNoUnits: !0
      });
    },
    "number | BigNumber | Fraction | Complex, string | Unit": function(i, a) {
      return new t(i, a);
    },
    "number | BigNumber | Fraction": function(i) {
      return new t(i);
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), Um = "sparse", oD = ["typed", "SparseMatrix"], uD = /* @__PURE__ */ W(Um, oD, (r) => {
  var {
    typed: e,
    SparseMatrix: t
  } = r;
  return e(Um, {
    "": function() {
      return new t([]);
    },
    string: function(i) {
      return new t([], i);
    },
    "Array | Matrix": function(i) {
      return new t(i);
    },
    "Array | Matrix, string": function(i, a) {
      return new t(i, a);
    }
  });
}), zm = "createUnit", lD = ["typed", "Unit"], cD = /* @__PURE__ */ W(zm, lD, (r) => {
  var {
    typed: e,
    Unit: t
  } = r;
  return e(zm, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    "Object, Object": function(i, a) {
      return t.createUnit(i, a);
    },
    // Same as above but without the options.
    Object: function(i) {
      return t.createUnit(i, {});
    },
    // Shortcut method for creating one unit.
    "string, Unit | string | Object, Object": function(i, a, s) {
      var o = {};
      return o[i] = a, t.createUnit(o, s);
    },
    // Same as above but without the options.
    "string, Unit | string | Object": function(i, a) {
      var s = {};
      return s[i] = a, t.createUnit(s, {});
    },
    // Without a definition, creates a base unit.
    string: function(i) {
      var a = {};
      return a[i] = {}, t.createUnit(a, {});
    }
  });
}), km = "acos", fD = ["typed", "config", "Complex"], hD = /* @__PURE__ */ W(km, fD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(km, {
    number: function(a) {
      return a >= -1 && a <= 1 || t.predictable ? Math.acos(a) : new n(a, 0).acos();
    },
    Complex: function(a) {
      return a.acos();
    },
    BigNumber: function(a) {
      return a.acos();
    }
  });
}), Hm = "acosh", dD = ["typed", "config", "Complex"], mD = /* @__PURE__ */ W(Hm, dD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Hm, {
    number: function(a) {
      return a >= 1 || t.predictable ? g1(a) : a <= -1 ? new n(Math.log(Math.sqrt(a * a - 1) - a), Math.PI) : new n(a, 0).acosh();
    },
    Complex: function(a) {
      return a.acosh();
    },
    BigNumber: function(a) {
      return a.acosh();
    }
  });
}), Gm = "acot", pD = ["typed", "BigNumber"], vD = /* @__PURE__ */ W(Gm, pD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(Gm, {
    number: y1,
    Complex: function(i) {
      return i.acot();
    },
    BigNumber: function(i) {
      return new t(1).div(i).atan();
    }
  });
}), $m = "acoth", gD = ["typed", "config", "Complex", "BigNumber"], yD = /* @__PURE__ */ W($m, gD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: i
  } = r;
  return e($m, {
    number: function(s) {
      return s >= 1 || s <= -1 || t.predictable ? x1(s) : new n(s, 0).acoth();
    },
    Complex: function(s) {
      return s.acoth();
    },
    BigNumber: function(s) {
      return new i(1).div(s).atanh();
    }
  });
}), Vm = "acsc", xD = ["typed", "config", "Complex", "BigNumber"], _D = /* @__PURE__ */ W(Vm, xD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: i
  } = r;
  return e(Vm, {
    number: function(s) {
      return s <= -1 || s >= 1 || t.predictable ? _1(s) : new n(s, 0).acsc();
    },
    Complex: function(s) {
      return s.acsc();
    },
    BigNumber: function(s) {
      return new i(1).div(s).asin();
    }
  });
}), qm = "acsch", bD = ["typed", "BigNumber"], wD = /* @__PURE__ */ W(qm, bD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(qm, {
    number: b1,
    Complex: function(i) {
      return i.acsch();
    },
    BigNumber: function(i) {
      return new t(1).div(i).asinh();
    }
  });
}), Wm = "asec", SD = ["typed", "config", "Complex", "BigNumber"], ED = /* @__PURE__ */ W(Wm, SD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: i
  } = r;
  return e(Wm, {
    number: function(s) {
      return s <= -1 || s >= 1 || t.predictable ? w1(s) : new n(s, 0).asec();
    },
    Complex: function(s) {
      return s.asec();
    },
    BigNumber: function(s) {
      return new i(1).div(s).acos();
    }
  });
}), Xm = "asech", MD = ["typed", "config", "Complex", "BigNumber"], AD = /* @__PURE__ */ W(Xm, MD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: i
  } = r;
  return e(Xm, {
    number: function(s) {
      if (s <= 1 && s >= -1 || t.predictable) {
        var o = 1 / s;
        if (o > 0 || t.predictable)
          return S1(s);
        var l = Math.sqrt(o * o - 1);
        return new n(Math.log(l - o), Math.PI);
      }
      return new n(s, 0).asech();
    },
    Complex: function(s) {
      return s.asech();
    },
    BigNumber: function(s) {
      return new i(1).div(s).acosh();
    }
  });
}), Ym = "asin", DD = ["typed", "config", "Complex"], CD = /* @__PURE__ */ W(Ym, DD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Ym, {
    number: function(a) {
      return a >= -1 && a <= 1 || t.predictable ? Math.asin(a) : new n(a, 0).asin();
    },
    Complex: function(a) {
      return a.asin();
    },
    BigNumber: function(a) {
      return a.asin();
    }
  });
}), TD = "asinh", ND = ["typed"], RD = /* @__PURE__ */ W(TD, ND, (r) => {
  var {
    typed: e
  } = r;
  return e("asinh", {
    number: E1,
    Complex: function(n) {
      return n.asinh();
    },
    BigNumber: function(n) {
      return n.asinh();
    }
  });
}), FD = "atan", OD = ["typed"], PD = /* @__PURE__ */ W(FD, OD, (r) => {
  var {
    typed: e
  } = r;
  return e("atan", {
    number: function(n) {
      return Math.atan(n);
    },
    Complex: function(n) {
      return n.atan();
    },
    BigNumber: function(n) {
      return n.atan();
    }
  });
}), Zm = "atan2", BD = ["typed", "matrix", "equalScalar", "BigNumber", "DenseMatrix", "concat"], ID = /* @__PURE__ */ W(Zm, BD, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    BigNumber: i,
    DenseMatrix: a,
    concat: s
  } = r, o = gn({
    typed: e,
    equalScalar: n
  }), l = Mr({
    typed: e
  }), u = U1({
    typed: e,
    equalScalar: n
  }), c = cr({
    typed: e,
    equalScalar: n
  }), f = Qt({
    typed: e,
    DenseMatrix: a
  }), h = Nt({
    typed: e,
    matrix: t,
    concat: s
  });
  return e(Zm, {
    "number, number": Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored
    // the imaginary.
    "BigNumber, BigNumber": (d, m) => i.atan2(d, m)
  }, h({
    scalar: "number | BigNumber",
    SS: u,
    DS: l,
    SD: o,
    Ss: c,
    sS: f
  }));
}), Km = "atanh", LD = ["typed", "config", "Complex"], UD = /* @__PURE__ */ W(Km, LD, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Km, {
    number: function(a) {
      return a <= 1 && a >= -1 || t.predictable ? M1(a) : new n(a, 0).atanh();
    },
    Complex: function(a) {
      return a.atanh();
    },
    BigNumber: function(a) {
      return a.atanh();
    }
  });
}), ss = /* @__PURE__ */ W("trigUnit", ["typed"], (r) => {
  var {
    typed: e
  } = r;
  return {
    Unit: e.referToSelf((t) => (n) => {
      if (!n.hasBase(n.constructor.BASE_UNITS.ANGLE))
        throw new TypeError("Unit in function cot is no angle");
      return e.find(t, n.valueType())(n.value);
    })
  };
}), Jm = "cos", zD = ["typed"], kD = /* @__PURE__ */ W(Jm, zD, (r) => {
  var {
    typed: e
  } = r, t = ss({
    typed: e
  });
  return e(Jm, {
    number: Math.cos,
    "Complex | BigNumber": (n) => n.cos()
  }, t);
}), Qm = "cosh", HD = ["typed"], GD = /* @__PURE__ */ W(Qm, HD, (r) => {
  var {
    typed: e
  } = r;
  return e(Qm, {
    number: Bx,
    "Complex | BigNumber": (t) => t.cosh()
  });
}), jm = "cot", $D = ["typed", "BigNumber"], VD = /* @__PURE__ */ W(jm, $D, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ss({
    typed: e
  });
  return e(jm, {
    number: A1,
    Complex: (i) => i.cot(),
    BigNumber: (i) => new t(1).div(i.tan())
  }, n);
}), ep = "coth", qD = ["typed", "BigNumber"], WD = /* @__PURE__ */ W(ep, qD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(ep, {
    number: D1,
    Complex: (n) => n.coth(),
    BigNumber: (n) => new t(1).div(n.tanh())
  });
}), tp = "csc", XD = ["typed", "BigNumber"], YD = /* @__PURE__ */ W(tp, XD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ss({
    typed: e
  });
  return e(tp, {
    number: C1,
    Complex: (i) => i.csc(),
    BigNumber: (i) => new t(1).div(i.sin())
  }, n);
}), rp = "csch", ZD = ["typed", "BigNumber"], KD = /* @__PURE__ */ W(rp, ZD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(rp, {
    number: T1,
    Complex: (n) => n.csch(),
    BigNumber: (n) => new t(1).div(n.sinh())
  });
}), np = "sec", JD = ["typed", "BigNumber"], QD = /* @__PURE__ */ W(np, JD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ss({
    typed: e
  });
  return e(np, {
    number: N1,
    Complex: (i) => i.sec(),
    BigNumber: (i) => new t(1).div(i.cos())
  }, n);
}), ip = "sech", jD = ["typed", "BigNumber"], eC = /* @__PURE__ */ W(ip, jD, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(ip, {
    number: R1,
    Complex: (n) => n.sech(),
    BigNumber: (n) => new t(1).div(n.cosh())
  });
}), ap = "sin", tC = ["typed"], rC = /* @__PURE__ */ W(ap, tC, (r) => {
  var {
    typed: e
  } = r, t = ss({
    typed: e
  });
  return e(ap, {
    number: Math.sin,
    "Complex | BigNumber": (n) => n.sin()
  }, t);
}), sp = "sinh", nC = ["typed"], iC = /* @__PURE__ */ W(sp, nC, (r) => {
  var {
    typed: e
  } = r;
  return e(sp, {
    number: F1,
    "Complex | BigNumber": (t) => t.sinh()
  });
}), op = "tan", aC = ["typed"], sC = /* @__PURE__ */ W(op, aC, (r) => {
  var {
    typed: e
  } = r, t = ss({
    typed: e
  });
  return e(op, {
    number: Math.tan,
    "Complex | BigNumber": (n) => n.tan()
  }, t);
}), oC = "tanh", uC = ["typed"], lC = /* @__PURE__ */ W(oC, uC, (r) => {
  var {
    typed: e
  } = r;
  return e("tanh", {
    number: Lx,
    "Complex | BigNumber": (t) => t.tanh()
  });
}), up = "setCartesian", cC = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], fC = /* @__PURE__ */ W(up, cC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a,
    DenseMatrix: s
  } = r;
  return e(up, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var c = [];
      if (n(t(l), new a(0)) !== 0 && n(t(u), new a(0)) !== 0) {
        var f = vt(Array.isArray(l) ? l : l.toArray()).sort(i), h = vt(Array.isArray(u) ? u : u.toArray()).sort(i);
        c = [];
        for (var d = 0; d < f.length; d++)
          for (var m = 0; m < h.length; m++)
            c.push([f[d], h[m]]);
      }
      return Array.isArray(l) && Array.isArray(u) ? c : new s(c);
    }
  });
}), lp = "setDifference", hC = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], dC = /* @__PURE__ */ W(lp, hC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a,
    DenseMatrix: s
  } = r;
  return e(lp, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var c;
      if (n(t(l), new a(0)) === 0)
        c = [];
      else {
        if (n(t(u), new a(0)) === 0)
          return vt(l.toArray());
        var f = Va(vt(Array.isArray(l) ? l : l.toArray()).sort(i)), h = Va(vt(Array.isArray(u) ? u : u.toArray()).sort(i));
        c = [];
        for (var d, m = 0; m < f.length; m++) {
          d = !1;
          for (var p = 0; p < h.length; p++)
            if (i(f[m].value, h[p].value) === 0 && f[m].identifier === h[p].identifier) {
              d = !0;
              break;
            }
          d || c.push(f[m]);
        }
      }
      return Array.isArray(l) && Array.isArray(u) ? fu(c) : new s(fu(c));
    }
  });
}), cp = "setDistinct", mC = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], pC = /* @__PURE__ */ W(cp, mC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a,
    DenseMatrix: s
  } = r;
  return e(cp, {
    "Array | Matrix": function(l) {
      var u;
      if (n(t(l), new a(0)) === 0)
        u = [];
      else {
        var c = vt(Array.isArray(l) ? l : l.toArray()).sort(i);
        u = [], u.push(c[0]);
        for (var f = 1; f < c.length; f++)
          i(c[f], c[f - 1]) !== 0 && u.push(c[f]);
      }
      return Array.isArray(l) ? u : new s(u);
    }
  });
}), fp = "setIntersect", vC = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], gC = /* @__PURE__ */ W(fp, vC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a,
    DenseMatrix: s
  } = r;
  return e(fp, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var c;
      if (n(t(l), new a(0)) === 0 || n(t(u), new a(0)) === 0)
        c = [];
      else {
        var f = Va(vt(Array.isArray(l) ? l : l.toArray()).sort(i)), h = Va(vt(Array.isArray(u) ? u : u.toArray()).sort(i));
        c = [];
        for (var d = 0; d < f.length; d++)
          for (var m = 0; m < h.length; m++)
            if (i(f[d].value, h[m].value) === 0 && f[d].identifier === h[m].identifier) {
              c.push(f[d]);
              break;
            }
      }
      return Array.isArray(l) && Array.isArray(u) ? fu(c) : new s(fu(c));
    }
  });
}), hp = "setIsSubset", yC = ["typed", "size", "subset", "compareNatural", "Index"], xC = /* @__PURE__ */ W(hp, yC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a
  } = r;
  return e(hp, {
    "Array | Matrix, Array | Matrix": function(o, l) {
      if (n(t(o), new a(0)) === 0)
        return !0;
      if (n(t(l), new a(0)) === 0)
        return !1;
      for (var u = Va(vt(Array.isArray(o) ? o : o.toArray()).sort(i)), c = Va(vt(Array.isArray(l) ? l : l.toArray()).sort(i)), f, h = 0; h < u.length; h++) {
        f = !1;
        for (var d = 0; d < c.length; d++)
          if (i(u[h].value, c[d].value) === 0 && u[h].identifier === c[d].identifier) {
            f = !0;
            break;
          }
        if (f === !1)
          return !1;
      }
      return !0;
    }
  });
}), dp = "setMultiplicity", _C = ["typed", "size", "subset", "compareNatural", "Index"], bC = /* @__PURE__ */ W(dp, _C, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a
  } = r;
  return e(dp, {
    "number | BigNumber | Fraction | Complex, Array | Matrix": function(o, l) {
      if (n(t(l), new a(0)) === 0)
        return 0;
      for (var u = vt(Array.isArray(l) ? l : l.toArray()), c = 0, f = 0; f < u.length; f++)
        i(u[f], o) === 0 && c++;
      return c;
    }
  });
}), mp = "setPowerset", wC = ["typed", "size", "subset", "compareNatural", "Index"], SC = /* @__PURE__ */ W(mp, wC, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: i,
    Index: a
  } = r;
  return e(mp, {
    "Array | Matrix": function(u) {
      if (n(t(u), new a(0)) === 0)
        return [];
      for (var c = vt(Array.isArray(u) ? u : u.toArray()).sort(i), f = [], h = 0; h.toString(2).length <= c.length; )
        f.push(s(c, h.toString(2).split("").reverse())), h++;
      return o(f);
    }
  });
  function s(l, u) {
    for (var c = [], f = 0; f < u.length; f++)
      u[f] === "1" && c.push(l[f]);
    return c;
  }
  function o(l) {
    for (var u = [], c = l.length - 1; c > 0; c--)
      for (var f = 0; f < c; f++)
        l[f].length > l[f + 1].length && (u = l[f], l[f] = l[f + 1], l[f + 1] = u);
    return l;
  }
}), pp = "setSize", EC = ["typed", "compareNatural"], MC = /* @__PURE__ */ W(pp, EC, (r) => {
  var {
    typed: e,
    compareNatural: t
  } = r;
  return e(pp, {
    "Array | Matrix": function(i) {
      return Array.isArray(i) ? vt(i).length : vt(i.toArray()).length;
    },
    "Array | Matrix, boolean": function(i, a) {
      if (a === !1 || i.length === 0)
        return Array.isArray(i) ? vt(i).length : vt(i.toArray()).length;
      for (var s = vt(Array.isArray(i) ? i : i.toArray()).sort(t), o = 1, l = 1; l < s.length; l++)
        t(s[l], s[l - 1]) !== 0 && o++;
      return o;
    }
  });
}), vp = "setSymDifference", AC = ["typed", "size", "concat", "subset", "setDifference", "Index"], DC = /* @__PURE__ */ W(vp, AC, (r) => {
  var {
    typed: e,
    size: t,
    concat: n,
    subset: i,
    setDifference: a,
    Index: s
  } = r;
  return e(vp, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      if (i(t(l), new s(0)) === 0)
        return vt(u);
      if (i(t(u), new s(0)) === 0)
        return vt(l);
      var c = vt(l), f = vt(u);
      return n(a(c, f), a(f, c));
    }
  });
}), gp = "setUnion", CC = ["typed", "size", "concat", "subset", "setIntersect", "setSymDifference", "Index"], TC = /* @__PURE__ */ W(gp, CC, (r) => {
  var {
    typed: e,
    size: t,
    concat: n,
    subset: i,
    setIntersect: a,
    setSymDifference: s,
    Index: o
  } = r;
  return e(gp, {
    "Array | Matrix, Array | Matrix": function(u, c) {
      if (i(t(u), new o(0)) === 0)
        return vt(c);
      if (i(t(c), new o(0)) === 0)
        return vt(u);
      var f = vt(u), h = vt(c);
      return n(s(f, h), a(f, h));
    }
  });
}), yp = "add", NC = ["typed", "matrix", "addScalar", "equalScalar", "DenseMatrix", "SparseMatrix", "concat"], RC = /* @__PURE__ */ W(yp, NC, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    equalScalar: i,
    DenseMatrix: a,
    SparseMatrix: s,
    concat: o
  } = r, l = bi({
    typed: e
  }), u = Mf({
    typed: e,
    equalScalar: i
  }), c = ta({
    typed: e,
    DenseMatrix: a
  }), f = Nt({
    typed: e,
    matrix: t,
    concat: o
  });
  return e(yp, {
    "any, any": n,
    "any, any, ...any": e.referToSelf((h) => (d, m, p) => {
      for (var g = h(d, m), v = 0; v < p.length; v++)
        g = h(g, p[v]);
      return g;
    })
  }, f({
    elop: n,
    DS: l,
    SS: u,
    Ss: c
  }));
}), xp = "hypot", FC = ["typed", "abs", "addScalar", "divideScalar", "multiplyScalar", "sqrt", "smaller", "isPositive"], OC = /* @__PURE__ */ W(xp, FC, (r) => {
  var {
    typed: e,
    abs: t,
    addScalar: n,
    divideScalar: i,
    multiplyScalar: a,
    sqrt: s,
    smaller: o,
    isPositive: l
  } = r;
  return e(xp, {
    "... number | BigNumber": u,
    Array: u,
    Matrix: (c) => u(vt(c.toArray(), !0))
  });
  function u(c) {
    for (var f = 0, h = 0, d = 0; d < c.length; d++) {
      if (fn(c[d]))
        throw new TypeError("Unexpected type of argument to hypot");
      var m = t(c[d]);
      o(h, m) ? (f = a(f, a(i(h, m), i(h, m))), f = n(f, 1), h = m) : f = n(f, l(m) ? a(i(m, h), i(m, h)) : m);
    }
    return a(h, s(f));
  }
}), _p = "norm", PC = ["typed", "abs", "add", "pow", "conj", "sqrt", "multiply", "equalScalar", "larger", "smaller", "matrix", "ctranspose", "eigs"], BC = /* @__PURE__ */ W(_p, PC, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    pow: i,
    conj: a,
    sqrt: s,
    multiply: o,
    equalScalar: l,
    larger: u,
    smaller: c,
    matrix: f,
    ctranspose: h,
    eigs: d
  } = r;
  return e(_p, {
    number: Math.abs,
    Complex: function(A) {
      return A.abs();
    },
    BigNumber: function(A) {
      return A.abs();
    },
    boolean: function(A) {
      return Math.abs(A);
    },
    Array: function(A) {
      return _(f(A), 2);
    },
    Matrix: function(A) {
      return _(A, 2);
    },
    "Array, number | BigNumber | string": function(A, w) {
      return _(f(A), w);
    },
    "Matrix, number | BigNumber | string": function(A, w) {
      return _(A, w);
    }
  });
  function m(M) {
    var A = 0;
    return M.forEach(function(w) {
      var E = t(w);
      u(E, A) && (A = E);
    }, !0), A;
  }
  function p(M) {
    var A;
    return M.forEach(function(w) {
      var E = t(w);
      (!A || c(E, A)) && (A = E);
    }, !0), A || 0;
  }
  function g(M, A) {
    if (A === Number.POSITIVE_INFINITY || A === "inf")
      return m(M);
    if (A === Number.NEGATIVE_INFINITY || A === "-inf")
      return p(M);
    if (A === "fro")
      return _(M, 2);
    if (typeof A == "number" && !isNaN(A)) {
      if (!l(A, 0)) {
        var w = 0;
        return M.forEach(function(E) {
          w = n(i(t(E), A), w);
        }, !0), i(w, 1 / A);
      }
      return Number.POSITIVE_INFINITY;
    }
    throw new Error("Unsupported parameter value");
  }
  function v(M) {
    var A = 0;
    return M.forEach(function(w, E) {
      A = n(A, o(w, a(w)));
    }), t(s(A));
  }
  function S(M) {
    var A = [], w = 0;
    return M.forEach(function(E, D) {
      var T = D[1], R = n(A[T] || 0, t(E));
      u(R, w) && (w = R), A[T] = R;
    }, !0), w;
  }
  function x(M) {
    var A = M.size();
    if (A[0] !== A[1])
      throw new RangeError("Invalid matrix dimensions");
    var w = h(M), E = o(w, M), D = d(E).values.toArray(), T = D[D.length - 1];
    return t(s(T));
  }
  function y(M) {
    var A = [], w = 0;
    return M.forEach(function(E, D) {
      var T = D[0], R = n(A[T] || 0, t(E));
      u(R, w) && (w = R), A[T] = R;
    }, !0), w;
  }
  function b(M, A) {
    if (A === 1)
      return S(M);
    if (A === Number.POSITIVE_INFINITY || A === "inf")
      return y(M);
    if (A === "fro")
      return v(M);
    if (A === 2)
      return x(M);
    throw new Error("Unsupported parameter value " + A);
  }
  function _(M, A) {
    var w = M.size();
    if (w.length === 1)
      return g(M, A);
    if (w.length === 2) {
      if (w[0] && w[1])
        return b(M, A);
      throw new RangeError("Invalid matrix dimensions");
    }
  }
}), bp = "dot", IC = ["typed", "addScalar", "multiplyScalar", "conj", "size"], LC = /* @__PURE__ */ W(bp, IC, (r) => {
  var {
    typed: e,
    addScalar: t,
    multiplyScalar: n,
    conj: i,
    size: a
  } = r;
  return e(bp, {
    "Array | DenseMatrix, Array | DenseMatrix": o,
    "SparseMatrix, SparseMatrix": l
  });
  function s(c, f) {
    var h = u(c), d = u(f), m, p;
    if (h.length === 1)
      m = h[0];
    else if (h.length === 2 && h[1] === 1)
      m = h[0];
    else
      throw new RangeError("Expected a column vector, instead got a matrix of size (" + h.join(", ") + ")");
    if (d.length === 1)
      p = d[0];
    else if (d.length === 2 && d[1] === 1)
      p = d[0];
    else
      throw new RangeError("Expected a column vector, instead got a matrix of size (" + d.join(", ") + ")");
    if (m !== p) throw new RangeError("Vectors must have equal length (" + m + " != " + p + ")");
    if (m === 0) throw new RangeError("Cannot calculate the dot product of empty vectors");
    return m;
  }
  function o(c, f) {
    var h = s(c, f), d = Ve(c) ? c._data : c, m = Ve(c) ? c._datatype || c.getDataType() : void 0, p = Ve(f) ? f._data : f, g = Ve(f) ? f._datatype || f.getDataType() : void 0, v = u(c).length === 2, S = u(f).length === 2, x = t, y = n;
    if (m && g && m === g && typeof m == "string" && m !== "mixed") {
      var b = m;
      x = e.find(t, [b, b]), y = e.find(n, [b, b]);
    }
    if (!v && !S) {
      for (var _ = y(i(d[0]), p[0]), M = 1; M < h; M++)
        _ = x(_, y(i(d[M]), p[M]));
      return _;
    }
    if (!v && S) {
      for (var A = y(i(d[0]), p[0][0]), w = 1; w < h; w++)
        A = x(A, y(i(d[w]), p[w][0]));
      return A;
    }
    if (v && !S) {
      for (var E = y(i(d[0][0]), p[0]), D = 1; D < h; D++)
        E = x(E, y(i(d[D][0]), p[D]));
      return E;
    }
    if (v && S) {
      for (var T = y(i(d[0][0]), p[0][0]), R = 1; R < h; R++)
        T = x(T, y(i(d[R][0]), p[R][0]));
      return T;
    }
  }
  function l(c, f) {
    s(c, f);
    for (var h = c._index, d = c._values, m = f._index, p = f._values, g = 0, v = t, S = n, x = 0, y = 0; x < h.length && y < m.length; ) {
      var b = h[x], _ = m[y];
      if (b < _) {
        x++;
        continue;
      }
      if (b > _) {
        y++;
        continue;
      }
      b === _ && (g = v(g, S(d[x], p[y])), x++, y++);
    }
    return g;
  }
  function u(c) {
    return Ve(c) ? c.size() : a(c);
  }
}), UC = "trace", zC = ["typed", "matrix", "add"], kC = /* @__PURE__ */ W(UC, zC, (r) => {
  var {
    typed: e,
    matrix: t,
    add: n
  } = r;
  return e("trace", {
    Array: function(o) {
      return i(t(o));
    },
    SparseMatrix: a,
    DenseMatrix: i,
    any: Ye
  });
  function i(s) {
    var o = s._size, l = s._data;
    switch (o.length) {
      case 1:
        if (o[0] === 1)
          return Ye(l[0]);
        throw new RangeError("Matrix must be square (size: " + lt(o) + ")");
      case 2: {
        var u = o[0], c = o[1];
        if (u === c) {
          for (var f = 0, h = 0; h < u; h++)
            f = n(f, l[h][h]);
          return f;
        } else
          throw new RangeError("Matrix must be square (size: " + lt(o) + ")");
      }
      default:
        throw new RangeError("Matrix must be two dimensional (size: " + lt(o) + ")");
    }
  }
  function a(s) {
    var o = s._values, l = s._index, u = s._ptr, c = s._size, f = c[0], h = c[1];
    if (f === h) {
      var d = 0;
      if (o.length > 0)
        for (var m = 0; m < h; m++)
          for (var p = u[m], g = u[m + 1], v = p; v < g; v++) {
            var S = l[v];
            if (S === m) {
              d = n(d, o[v]);
              break;
            }
            if (S > m)
              break;
          }
      return d;
    }
    throw new RangeError("Matrix must be square (size: " + lt(c) + ")");
  }
}), wp = "index", HC = ["typed", "Index"], GC = /* @__PURE__ */ W(wp, HC, (r) => {
  var {
    typed: e,
    Index: t
  } = r;
  return e(wp, {
    "...number | string | BigNumber | Range | Array | Matrix": function(i) {
      var a = i.map(function(o) {
        return Qe(o) ? o.toNumber() : Mt(o) || Ve(o) ? o.map(function(l) {
          return Qe(l) ? l.toNumber() : l;
        }) : o;
      }), s = new t();
      return t.apply(s, a), s;
    }
  });
}), iy = /* @__PURE__ */ new Set(["end"]), $C = "Node", VC = ["mathWithTransform"], qC = /* @__PURE__ */ W($C, VC, (r) => {
  var {
    mathWithTransform: e
  } = r;
  function t(i) {
    for (var a of [...iy])
      if (i.has(a))
        throw new Error('Scope contains an illegal symbol, "' + a + '" is a reserved keyword');
  }
  class n {
    get type() {
      return "Node";
    }
    get isNode() {
      return !0;
    }
    /**
     * Evaluate the node
     * @param {Object} [scope]  Scope to read/write variables
     * @return {*}              Returns the result
     */
    evaluate(a) {
      return this.compile().evaluate(a);
    }
    /**
     * Compile the node into an optimized, evauatable JavaScript function
     * @return {{evaluate: function([Object])}} object
     *                Returns an object with a function 'evaluate',
     *                which can be invoked as expr.evaluate([scope: Object]),
     *                where scope is an optional object with
     *                variables.
     */
    compile() {
      var a = this._compile(e, {}), s = {}, o = null;
      function l(u) {
        var c = Fa(u);
        return t(c), a(c, s, o);
      }
      return {
        evaluate: l
      };
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      throw new Error("Method _compile must be implemented by type " + this.type);
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      throw new Error("Cannot run forEach on a Node interface");
    }
    /**
     * Create a new Node whose children are the results of calling the
     * provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */
    map(a) {
      throw new Error("Cannot run map on a Node interface");
    }
    /**
     * Validate whether an object is a Node, for use with map
     * @param {Node} node
     * @returns {Node} Returns the input if it's a node, else throws an Error
     * @protected
     */
    _ifNode(a) {
      if (!bt(a))
        throw new TypeError("Callback function must return a Node");
      return a;
    }
    /**
     * Recursively traverse all nodes in a node tree. Executes given callback for
     * this node and each of its child nodes.
     * @param {function(node: Node, path: string, parent: Node)} callback
     *          A callback called for every node in the node tree.
     */
    traverse(a) {
      a(this, null, null);
      function s(o, l) {
        o.forEach(function(u, c, f) {
          l(u, c, f), s(u, l);
        });
      }
      s(this, a);
    }
    /**
     * Recursively transform a node tree via a transform function.
     *
     * For example, to replace all nodes of type SymbolNode having name 'x' with
     * a ConstantNode with value 2:
     *
     *     const res = Node.transform(function (node, path, parent) {
     *       if (node && node.isSymbolNode) && (node.name === 'x')) {
     *         return new ConstantNode(2)
     *       }
     *       else {
     *         return node
     *       }
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *          A mapping function accepting a node, and returning
     *          a replacement for the node or the original node. The "signature"
     *          of the callback must be:
     *          callback(node: Node, index: string, parent: Node) : Node
     * @return {Node} Returns the original node or its replacement
     */
    transform(a) {
      function s(o, l, u) {
        var c = a(o, l, u);
        return c !== o ? c : o.map(s);
      }
      return s(this, null, null);
    }
    /**
     * Find any node in the node tree matching given filter function. For
     * example, to find all nodes of type SymbolNode having name 'x':
     *
     *     const results = Node.filter(function (node) {
     *       return (node && node.isSymbolNode) && (node.name === 'x')
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *            A test function returning true when a node matches, and false
     *            otherwise. Function signature:
     *            callback(node: Node, index: string, parent: Node) : boolean
     * @return {Node[]} nodes
     *            An array with nodes matching given filter criteria
     */
    filter(a) {
      var s = [];
      return this.traverse(function(o, l, u) {
        a(o, l, u) && s.push(o);
      }), s;
    }
    /**
     * Create a shallow clone of this node
     * @return {Node}
     */
    clone() {
      throw new Error("Cannot clone a Node interface");
    }
    /**
     * Create a deep clone of this node
     * @return {Node}
     */
    cloneDeep() {
      return this.map(function(a) {
        return a.cloneDeep();
      });
    }
    /**
     * Deep compare this node with another node.
     * @param {Node} other
     * @return {boolean} Returns true when both nodes are of the same type and
     *                   contain the same values (as do their childs)
     */
    equals(a) {
      return a ? this.type === a.type && qn(this, a) : !1;
    }
    /**
     * Get string representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toString(a) {
      var s = this._getCustomString(a);
      return typeof s < "u" ? s : this._toString(a);
    }
    /**
     * Internal function to generate the string output.
     * This has to be implemented by every Node
     *
     * @throws {Error}
     */
    _toString() {
      throw new Error("_toString not implemented for " + this.type);
    }
    /**
     * Get a JSON representation of the node
     * Both .toJSON() and the static .fromJSON(json) should be implemented by all
     * implementations of Node
     * @returns {Object}
     */
    toJSON() {
      throw new Error("Cannot serialize object: toJSON not implemented by " + this.type);
    }
    /**
     * Get HTML representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)" or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toHTML(a) {
      var s = this._getCustomString(a);
      return typeof s < "u" ? s : this._toHTML(a);
    }
    /**
     * Internal function to generate the HTML output.
     * This has to be implemented by every Node
     *
     * @throws {Error}
     */
    _toHTML() {
      throw new Error("_toHTML not implemented for " + this.type);
    }
    /**
     * Get LaTeX representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toTex(a) {
      var s = this._getCustomString(a);
      return typeof s < "u" ? s : this._toTex(a);
    }
    /**
     * Internal function to generate the LaTeX output.
     * This has to be implemented by every Node
     *
     * @param {Object} [options]
     * @throws {Error}
     */
    _toTex(a) {
      throw new Error("_toTex not implemented for " + this.type);
    }
    /**
     * Helper used by `to...` functions.
     */
    _getCustomString(a) {
      if (a && typeof a == "object")
        switch (typeof a.handler) {
          case "object":
          case "undefined":
            return;
          case "function":
            return a.handler(this, a);
          default:
            throw new TypeError("Object or function expected as callback");
        }
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type;
    }
    /**
     * Get the content of the current Node.
     * @return {Node} node
     **/
    getContent() {
      return this;
    }
  }
  return n;
}, {
  isClass: !0,
  isNode: !0
});
function Ar(r) {
  return r && r.isIndexError ? new jr(r.index + 1, r.min + 1, r.max !== void 0 ? r.max + 1 : void 0) : r;
}
function ay(r) {
  var {
    subset: e
  } = r;
  return function(n, i) {
    try {
      if (Array.isArray(n))
        return e(n, i);
      if (n && typeof n.subset == "function")
        return n.subset(i);
      if (typeof n == "string")
        return e(n, i);
      if (typeof n == "object") {
        if (!i.isObjectProperty())
          throw new TypeError("Cannot apply a numeric index as object property");
        return Sr(n, i.getObjectProperty());
      } else
        throw new TypeError("Cannot apply index: unsupported type of object");
    } catch (a) {
      throw Ar(a);
    }
  };
}
var io = "AccessorNode", WC = ["subset", "Node"], XC = /* @__PURE__ */ W(io, WC, (r) => {
  var {
    subset: e,
    Node: t
  } = r, n = ay({
    subset: e
  });
  function i(s) {
    return !(hi(s) || Ur(s) || ht(s) || Vn(s) || Us(s) || En(s) || Zt(s));
  }
  class a extends t {
    /**
     * @constructor AccessorNode
     * @extends {Node}
     * Access an object property or get a matrix subset
     *
     * @param {Node} object                 The object from which to retrieve
     *                                      a property or subset.
     * @param {IndexNode} index             IndexNode containing ranges
     */
    constructor(o, l) {
      if (super(), !bt(o))
        throw new TypeError('Node expected for parameter "object"');
      if (!ea(l))
        throw new TypeError('IndexNode expected for parameter "index"');
      this.object = o, this.index = l;
    }
    // readonly property name
    get name() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }
    get type() {
      return io;
    }
    get isAccessorNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(o, l) {
      var u = this.object._compile(o, l), c = this.index._compile(o, l);
      if (this.index.isObjectProperty()) {
        var f = this.index.getObjectProperty();
        return function(d, m, p) {
          return Sr(u(d, m, p), f);
        };
      } else
        return function(d, m, p) {
          var g = u(d, m, p), v = c(d, m, g);
          return n(g, v);
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(o) {
      o(this.object, "object", this), o(this.index, "index", this);
    }
    /**
     * Create a new AccessorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AccessorNode} Returns a transformed copy of the node
     */
    map(o) {
      return new a(this._ifNode(o(this.object, "object", this)), this._ifNode(o(this.index, "index", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {AccessorNode}
     */
    clone() {
      return new a(this.object, this.index);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */
    _toString(o) {
      var l = this.object.toString(o);
      return i(this.object) && (l = "(" + l + ")"), l + this.index.toString(o);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */
    _toHTML(o) {
      var l = this.object.toHTML(o);
      return i(this.object) && (l = '<span class="math-parenthesis math-round-parenthesis">(</span>' + l + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l + this.index.toHTML(o);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */
    _toTex(o) {
      var l = this.object.toTex(o);
      return i(this.object) && (l = "\\left(' + object + '\\right)"), l + this.index.toTex(o);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: io,
        object: this.object,
        index: this.index
      };
    }
    /**
     * Instantiate an AccessorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AccessorNode", object: ..., index: ...}`,
     *     where mathjs is optional
     * @returns {AccessorNode}
     */
    static fromJSON(o) {
      return new a(o.object, o.index);
    }
  }
  return qt(a, "name", io), a;
}, {
  isClass: !0,
  isNode: !0
}), ao = "ArrayNode", YC = ["Node"], ZC = /* @__PURE__ */ W(ao, YC, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ArrayNode
     * @extends {Node}
     * Holds an 1-dimensional array with items
     * @param {Node[]} [items]   1 dimensional array with items
     */
    constructor(i) {
      if (super(), this.items = i || [], !Array.isArray(this.items) || !this.items.every(bt))
        throw new TypeError("Array containing Nodes expected");
    }
    get type() {
      return ao;
    }
    get isArrayNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, a) {
      var s = li(this.items, function(u) {
        return u._compile(i, a);
      }), o = i.config.matrix !== "Array";
      if (o) {
        var l = i.matrix;
        return function(c, f, h) {
          return l(li(s, function(d) {
            return d(c, f, h);
          }));
        };
      } else
        return function(c, f, h) {
          return li(s, function(d) {
            return d(c, f, h);
          });
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      for (var a = 0; a < this.items.length; a++) {
        var s = this.items[a];
        i(s, "items[" + a + "]", this);
      }
    }
    /**
     * Create a new ArrayNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ArrayNode} Returns a transformed copy of the node
     */
    map(i) {
      for (var a = [], s = 0; s < this.items.length; s++)
        a[s] = this._ifNode(i(this.items[s], "items[" + s + "]", this));
      return new t(a);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ArrayNode}
     */
    clone() {
      return new t(this.items.slice(0));
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(i) {
      var a = this.items.map(function(s) {
        return s.toString(i);
      });
      return "[" + a.join(", ") + "]";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: ao,
        items: this.items
      };
    }
    /**
     * Instantiate an ArrayNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ArrayNode", items: [...]}`,
     *                       where mathjs is optional
     * @returns {ArrayNode}
     */
    static fromJSON(i) {
      return new t(i.items);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toHTML(i) {
      var a = this.items.map(function(s) {
        return s.toHTML(i);
      });
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + a.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      function a(s, o) {
        var l = s.some(Ur) && !s.every(Ur), u = o || l, c = u ? "&" : "\\\\", f = s.map(function(h) {
          return h.items ? a(h.items, !o) : h.toTex(i);
        }).join(c);
        return l || !u || u && !o ? "\\begin{bmatrix}" + f + "\\end{bmatrix}" : f;
      }
      return a(this.items, !1);
    }
  }
  return qt(t, "name", ao), t;
}, {
  isClass: !0,
  isNode: !0
});
function KC(r) {
  var {
    subset: e,
    matrix: t
  } = r;
  return function(i, a, s) {
    try {
      if (Array.isArray(i)) {
        var o = t(i).subset(a, s).valueOf();
        return o.forEach((l, u) => {
          i[u] = l;
        }), i;
      } else {
        if (i && typeof i.subset == "function")
          return i.subset(a, s);
        if (typeof i == "string")
          return e(i, a, s);
        if (typeof i == "object") {
          if (!a.isObjectProperty())
            throw TypeError("Cannot apply a numeric index as object property");
          return ka(i, a.getObjectProperty(), s), i;
        } else
          throw new TypeError("Cannot apply index: unsupported type of object");
      }
    } catch (l) {
      throw Ar(l);
    }
  };
}
var un = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: !1,
    latexRightParens: !1,
    latexParens: !1
    // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional
  }
}, {
  // logical or
  "OperatorNode:or": {
    op: "or",
    associativity: "left",
    associativeWith: []
  }
}, {
  // logical xor
  "OperatorNode:xor": {
    op: "xor",
    associativity: "left",
    associativeWith: []
  }
}, {
  // logical and
  "OperatorNode:and": {
    op: "and",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise or
  "OperatorNode:bitOr": {
    op: "|",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise xor
  "OperatorNode:bitXor": {
    op: "^|",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise and
  "OperatorNode:bitAnd": {
    op: "&",
    associativity: "left",
    associativeWith: []
  }
}, {
  // relational operators
  "OperatorNode:equal": {
    op: "==",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:unequal": {
    op: "!=",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:smaller": {
    op: "<",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:larger": {
    op: ">",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:smallerEq": {
    op: "<=",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:largerEq": {
    op: ">=",
    associativity: "left",
    associativeWith: []
  },
  RelationalNode: {
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitshift operators
  "OperatorNode:leftShift": {
    op: "<<",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:rightArithShift": {
    op: ">>",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:rightLogShift": {
    op: ">>>",
    associativity: "left",
    associativeWith: []
  }
}, {
  // unit conversion
  "OperatorNode:to": {
    op: "to",
    associativity: "left",
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  "OperatorNode:add": {
    op: "+",
    associativity: "left",
    associativeWith: ["OperatorNode:add", "OperatorNode:subtract"]
  },
  "OperatorNode:subtract": {
    op: "-",
    associativity: "left",
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  "OperatorNode:multiply": {
    op: "*",
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "Operator:dotMultiply", "Operator:dotDivide"]
  },
  "OperatorNode:divide": {
    op: "/",
    associativity: "left",
    associativeWith: [],
    latexLeftParens: !1,
    latexRightParens: !1,
    latexParens: !1
    // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX
  },
  "OperatorNode:dotMultiply": {
    op: ".*",
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "OperatorNode:dotMultiply", "OperatorNode:doDivide"]
  },
  "OperatorNode:dotDivide": {
    op: "./",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:mod": {
    op: "mod",
    associativity: "left",
    associativeWith: []
  }
}, {
  // Repeat multiplication for implicit multiplication
  "OperatorNode:multiply": {
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "Operator:dotMultiply", "Operator:dotDivide"]
  }
}, {
  // unary prefix operators
  "OperatorNode:unaryPlus": {
    op: "+",
    associativity: "right"
  },
  "OperatorNode:unaryMinus": {
    op: "-",
    associativity: "right"
  },
  "OperatorNode:bitNot": {
    op: "~",
    associativity: "right"
  },
  "OperatorNode:not": {
    op: "not",
    associativity: "right"
  }
}, {
  // exponentiation
  "OperatorNode:pow": {
    op: "^",
    associativity: "right",
    associativeWith: [],
    latexRightParens: !1
    // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)
  },
  "OperatorNode:dotPow": {
    op: ".^",
    associativity: "right",
    associativeWith: []
  }
}, {
  // factorial
  "OperatorNode:factorial": {
    op: "!",
    associativity: "left"
  }
}, {
  // matrix transpose
  "OperatorNode:ctranspose": {
    op: "'",
    associativity: "left"
  }
}];
function so(r, e) {
  if (!e || e !== "auto") return r;
  for (var t = r; En(t); ) t = t.content;
  return t;
}
function At(r, e, t, n) {
  var i = r;
  e !== "keep" && (i = r.getContent());
  for (var a = i.getIdentifier(), s = null, o = 0; o < un.length; o++)
    if (a in un[o]) {
      s = o;
      break;
    }
  if (a === "OperatorNode:multiply" && i.implicit && t !== "show") {
    var l = so(i.args[0], e);
    !(ht(l) && n && n.getIdentifier() === "OperatorNode:divide" && Ql(so(n.args[0], e))) && !(l.getIdentifier() === "OperatorNode:divide" && Ql(so(l.args[0], e)) && ht(so(l.args[1]))) && (s += 1);
  }
  return s;
}
function ms(r, e) {
  var t = r;
  e !== "keep" && (t = r.getContent());
  var n = t.getIdentifier(), i = At(t, e);
  if (i === null)
    return null;
  var a = un[i][n];
  if (Ue(a, "associativity")) {
    if (a.associativity === "left")
      return "left";
    if (a.associativity === "right")
      return "right";
    throw Error("'" + n + "' has the invalid associativity '" + a.associativity + "'.");
  }
  return null;
}
function ml(r, e, t) {
  var n = t !== "keep" ? r.getContent() : r, i = t !== "keep" ? r.getContent() : e, a = n.getIdentifier(), s = i.getIdentifier(), o = At(n, t);
  if (o === null)
    return null;
  var l = un[o][a];
  if (Ue(l, "associativeWith") && l.associativeWith instanceof Array) {
    for (var u = 0; u < l.associativeWith.length; u++)
      if (l.associativeWith[u] === s)
        return !0;
    return !1;
  }
  return null;
}
function JC(r) {
  var e = "OperatorNode:" + r;
  for (var t of un)
    if (e in t)
      return t[e].op;
  return null;
}
var oo = "AssignmentNode", QC = [
  "subset",
  "?matrix",
  // FIXME: should not be needed at all, should be handled by subset
  "Node"
], jC = /* @__PURE__ */ W(oo, QC, (r) => {
  var {
    subset: e,
    matrix: t,
    Node: n
  } = r, i = ay({
    subset: e
  }), a = KC({
    subset: e,
    matrix: t
  });
  function s(l, u, c) {
    u || (u = "keep");
    var f = At(l, u, c), h = At(l.value, u, c);
    return u === "all" || h !== null && h <= f;
  }
  class o extends n {
    /**
     * @constructor AssignmentNode
     * @extends {Node}
     *
     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
     * replace a subset of a matrix like `A[2,2]=42`.
     *
     * Syntax:
     *
     *     new AssignmentNode(symbol, value)
     *     new AssignmentNode(object, index, value)
     *
     * Usage:
     *
     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode('b'),
     *                       new ConstantNode(2))   // a.b=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode(1, 2),
     *                       new ConstantNode(3))  // a[1,2]=3
     *
     * @param {SymbolNode | AccessorNode} object
     *     Object on which to assign a value
     * @param {IndexNode} [index=null]
     *     Index, property name or matrix index. Optional. If not provided
     *     and `object` is a SymbolNode, the property is assigned to the
     *     global scope.
     * @param {Node} value
     *     The value to be assigned
     */
    constructor(u, c, f) {
      if (super(), this.object = u, this.index = f ? c : null, this.value = f || c, !Zt(u) && !hi(u))
        throw new TypeError('SymbolNode or AccessorNode expected as "object"');
      if (Zt(u) && u.name === "end")
        throw new Error('Cannot assign to symbol "end"');
      if (this.index && !ea(this.index))
        throw new TypeError('IndexNode expected as "index"');
      if (!bt(this.value))
        throw new TypeError('Node expected as "value"');
    }
    // class name for typing purposes:
    // readonly property name
    get name() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }
    get type() {
      return oo;
    }
    get isAssignmentNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(u, c) {
      var f = this.object._compile(u, c), h = this.index ? this.index._compile(u, c) : null, d = this.value._compile(u, c), m = this.object.name;
      if (this.index)
        if (this.index.isObjectProperty()) {
          var p = this.index.getObjectProperty();
          return function(y, b, _) {
            var M = f(y, b, _), A = d(y, b, _);
            return ka(M, p, A), A;
          };
        } else {
          if (Zt(this.object))
            return function(y, b, _) {
              var M = f(y, b, _), A = d(y, b, _), w = h(y, b, M);
              return y.set(m, a(M, w, A)), A;
            };
          var g = this.object.object._compile(u, c);
          if (this.object.index.isObjectProperty()) {
            var v = this.object.index.getObjectProperty();
            return function(y, b, _) {
              var M = g(y, b, _), A = Sr(M, v), w = h(y, b, A), E = d(y, b, _);
              return ka(M, v, a(A, w, E)), E;
            };
          } else {
            var S = this.object.index._compile(u, c);
            return function(y, b, _) {
              var M = g(y, b, _), A = S(y, b, M), w = i(M, A), E = h(y, b, w), D = d(y, b, _);
              return a(M, A, a(w, E, D)), D;
            };
          }
        }
      else {
        if (!Zt(this.object))
          throw new TypeError("SymbolNode expected as object");
        return function(y, b, _) {
          var M = d(y, b, _);
          return y.set(m, M), M;
        };
      }
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(u) {
      u(this.object, "object", this), this.index && u(this.index, "index", this), u(this.value, "value", this);
    }
    /**
     * Create a new AssignmentNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AssignmentNode} Returns a transformed copy of the node
     */
    map(u) {
      var c = this._ifNode(u(this.object, "object", this)), f = this.index ? this._ifNode(u(this.index, "index", this)) : null, h = this._ifNode(u(this.value, "value", this));
      return new o(c, f, h);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {AssignmentNode}
     */
    clone() {
      return new o(this.object, this.index, this.value);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */
    _toString(u) {
      var c = this.object.toString(u), f = this.index ? this.index.toString(u) : "", h = this.value.toString(u);
      return s(this, u && u.parenthesis, u && u.implicit) && (h = "(" + h + ")"), c + f + " = " + h;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: oo,
        object: this.object,
        index: this.index,
        value: this.value
      };
    }
    /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
     *     where mathjs is optional
     * @returns {AssignmentNode}
     */
    static fromJSON(u) {
      return new o(u.object, u.index, u.value);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */
    _toHTML(u) {
      var c = this.object.toHTML(u), f = this.index ? this.index.toHTML(u) : "", h = this.value.toHTML(u);
      return s(this, u && u.parenthesis, u && u.implicit) && (h = '<span class="math-paranthesis math-round-parenthesis">(</span>' + h + '<span class="math-paranthesis math-round-parenthesis">)</span>'), c + f + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + h;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */
    _toTex(u) {
      var c = this.object.toTex(u), f = this.index ? this.index.toTex(u) : "", h = this.value.toTex(u);
      return s(this, u && u.parenthesis, u && u.implicit) && (h = "\\left(".concat(h, "\\right)")), c + f + "=" + h;
    }
  }
  return qt(o, "name", oo), o;
}, {
  isClass: !0,
  isNode: !0
}), uo = "BlockNode", eT = ["ResultSet", "Node"], tT = /* @__PURE__ */ W(uo, eT, (r) => {
  var {
    ResultSet: e,
    Node: t
  } = r;
  class n extends t {
    /**
     * @constructor BlockNode
     * @extends {Node}
     * Holds a set with blocks
     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
     *            An array with blocks, where a block is constructed as an
     *            Object with properties block, which is a Node, and visible,
     *            which is a boolean. The property visible is optional and
     *            is true by default
     */
    constructor(a) {
      if (super(), !Array.isArray(a)) throw new Error("Array expected");
      this.blocks = a.map(function(s) {
        var o = s && s.node, l = s && s.visible !== void 0 ? s.visible : !0;
        if (!bt(o)) throw new TypeError('Property "node" must be a Node');
        if (typeof l != "boolean")
          throw new TypeError('Property "visible" must be a boolean');
        return {
          node: o,
          visible: l
        };
      });
    }
    get type() {
      return uo;
    }
    get isBlockNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      var o = li(this.blocks, function(l) {
        return {
          evaluate: l.node._compile(a, s),
          visible: l.visible
        };
      });
      return function(u, c, f) {
        var h = [];
        return Hg(o, function(m) {
          var p = m.evaluate(u, c, f);
          m.visible && h.push(p);
        }), new e(h);
      };
    }
    /**
     * Execute a callback for each of the child blocks of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      for (var s = 0; s < this.blocks.length; s++)
        a(this.blocks[s].node, "blocks[" + s + "].node", this);
    }
    /**
     * Create a new BlockNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {BlockNode} Returns a transformed copy of the node
     */
    map(a) {
      for (var s = [], o = 0; o < this.blocks.length; o++) {
        var l = this.blocks[o], u = this._ifNode(a(l.node, "blocks[" + o + "].node", this));
        s[o] = {
          node: u,
          visible: l.visible
        };
      }
      return new n(s);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {BlockNode}
     */
    clone() {
      var a = this.blocks.map(function(s) {
        return {
          node: s.node,
          visible: s.visible
        };
      });
      return new n(a);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(a) {
      return this.blocks.map(function(s) {
        return s.node.toString(a) + (s.visible ? "" : ";");
      }).join(`
`);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: uo,
        blocks: this.blocks
      };
    }
    /**
     * Instantiate an BlockNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
     *     where mathjs is optional
     * @returns {BlockNode}
     */
    static fromJSON(a) {
      return new n(a.blocks);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toHTML(a) {
      return this.blocks.map(function(s) {
        return s.node.toHTML(a) + (s.visible ? "" : '<span class="math-separator">;</span>');
      }).join('<span class="math-separator"><br /></span>');
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      return this.blocks.map(function(s) {
        return s.node.toTex(a) + (s.visible ? "" : ";");
      }).join(`\\;\\;
`);
    }
  }
  return qt(n, "name", uo), n;
}, {
  isClass: !0,
  isNode: !0
}), lo = "ConditionalNode", rT = ["Node"], nT = /* @__PURE__ */ W(lo, rT, (r) => {
  var {
    Node: e
  } = r;
  function t(i) {
    if (typeof i == "number" || typeof i == "boolean" || typeof i == "string")
      return !!i;
    if (i) {
      if (Qe(i))
        return !i.isZero();
      if (fn(i))
        return !!(i.re || i.im);
      if (wr(i))
        return !!i.value;
    }
    if (i == null)
      return !1;
    throw new TypeError('Unsupported type of condition "' + Dt(i) + '"');
  }
  class n extends e {
    /**
     * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
     *
     * @param {Node} condition   Condition, must result in a boolean
     * @param {Node} trueExpr    Expression evaluated when condition is true
     * @param {Node} falseExpr   Expression evaluated when condition is true
     *
     * @constructor ConditionalNode
     * @extends {Node}
     */
    constructor(a, s, o) {
      if (super(), !bt(a))
        throw new TypeError("Parameter condition must be a Node");
      if (!bt(s))
        throw new TypeError("Parameter trueExpr must be a Node");
      if (!bt(o))
        throw new TypeError("Parameter falseExpr must be a Node");
      this.condition = a, this.trueExpr = s, this.falseExpr = o;
    }
    get type() {
      return lo;
    }
    get isConditionalNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      var o = this.condition._compile(a, s), l = this.trueExpr._compile(a, s), u = this.falseExpr._compile(a, s);
      return function(f, h, d) {
        return t(o(f, h, d)) ? l(f, h, d) : u(f, h, d);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      a(this.condition, "condition", this), a(this.trueExpr, "trueExpr", this), a(this.falseExpr, "falseExpr", this);
    }
    /**
     * Create a new ConditionalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ConditionalNode} Returns a transformed copy of the node
     */
    map(a) {
      return new n(this._ifNode(a(this.condition, "condition", this)), this._ifNode(a(this.trueExpr, "trueExpr", this)), this._ifNode(a(this.falseExpr, "falseExpr", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ConditionalNode}
     */
    clone() {
      return new n(this.condition, this.trueExpr, this.falseExpr);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(a) {
      var s = a && a.parenthesis ? a.parenthesis : "keep", o = At(this, s, a && a.implicit), l = this.condition.toString(a), u = At(this.condition, s, a && a.implicit);
      (s === "all" || this.condition.type === "OperatorNode" || u !== null && u <= o) && (l = "(" + l + ")");
      var c = this.trueExpr.toString(a), f = At(this.trueExpr, s, a && a.implicit);
      (s === "all" || this.trueExpr.type === "OperatorNode" || f !== null && f <= o) && (c = "(" + c + ")");
      var h = this.falseExpr.toString(a), d = At(this.falseExpr, s, a && a.implicit);
      return (s === "all" || this.falseExpr.type === "OperatorNode" || d !== null && d <= o) && (h = "(" + h + ")"), l + " ? " + c + " : " + h;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: lo,
        condition: this.condition,
        trueExpr: this.trueExpr,
        falseExpr: this.falseExpr
      };
    }
    /**
     * Instantiate an ConditionalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "ConditionalNode",
     *      "condition": ...,
     *      "trueExpr": ...,
     *      "falseExpr": ...}
     *     ```
     *     where mathjs is optional
     * @returns {ConditionalNode}
     */
    static fromJSON(a) {
      return new n(a.condition, a.trueExpr, a.falseExpr);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(a) {
      var s = a && a.parenthesis ? a.parenthesis : "keep", o = At(this, s, a && a.implicit), l = this.condition.toHTML(a), u = At(this.condition, s, a && a.implicit);
      (s === "all" || this.condition.type === "OperatorNode" || u !== null && u <= o) && (l = '<span class="math-parenthesis math-round-parenthesis">(</span>' + l + '<span class="math-parenthesis math-round-parenthesis">)</span>');
      var c = this.trueExpr.toHTML(a), f = At(this.trueExpr, s, a && a.implicit);
      (s === "all" || this.trueExpr.type === "OperatorNode" || f !== null && f <= o) && (c = '<span class="math-parenthesis math-round-parenthesis">(</span>' + c + '<span class="math-parenthesis math-round-parenthesis">)</span>');
      var h = this.falseExpr.toHTML(a), d = At(this.falseExpr, s, a && a.implicit);
      return (s === "all" || this.falseExpr.type === "OperatorNode" || d !== null && d <= o) && (h = '<span class="math-parenthesis math-round-parenthesis">(</span>' + h + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l + '<span class="math-operator math-conditional-operator">?</span>' + c + '<span class="math-operator math-conditional-operator">:</span>' + h;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      return "\\begin{cases} {" + this.trueExpr.toTex(a) + "}, &\\quad{\\text{if }\\;" + this.condition.toTex(a) + "}\\\\{" + this.falseExpr.toTex(a) + "}, &\\quad{\\text{otherwise}}\\end{cases}";
    }
  }
  return qt(n, "name", lo), n;
}, {
  isClass: !0,
  isNode: !0
}), pl, Sp;
function iT() {
  if (Sp) return pl;
  Sp = 1;
  var r = Object.assign || function(i) {
    for (var a = 1; a < arguments.length; a++) {
      var s = arguments[a];
      for (var o in s)
        Object.prototype.hasOwnProperty.call(s, o) && (i[o] = s[o]);
    }
    return i;
  }, e = {
    "{": "\\{",
    "}": "\\}",
    "\\": "\\textbackslash{}",
    "#": "\\#",
    $: "\\$",
    "%": "\\%",
    "&": "\\&",
    "^": "\\textasciicircum{}",
    _: "\\_",
    "~": "\\textasciitilde{}"
  }, t = {
    "–": "\\--",
    "—": "\\---",
    " ": "~",
    "	": "\\qquad{}",
    "\r\n": "\\newline{}",
    "\n": "\\newline{}"
  }, n = function(a, s) {
    return r({}, a, s);
  };
  return pl = function(i) {
    for (var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = a.preserveFormatting, o = s === void 0 ? !1 : s, l = a.escapeMapFn, u = l === void 0 ? n : l, c = String(i), f = "", h = u(r({}, e), o ? r({}, t) : {}), d = Object.keys(h), m = function() {
      var g = !1;
      d.forEach(function(v, S) {
        g || c.length >= v.length && c.slice(0, v.length) === v && (f += h[d[S]], c = c.slice(v.length, c.length), g = !0);
      }), g || (f += c.slice(0, 1), c = c.slice(1, c.length));
    }; c; )
      m();
    return f;
  }, pl;
}
var aT = iT();
const sT = /* @__PURE__ */ Hu(aT);
var gc = {
  // GREEK LETTERS
  Alpha: "A",
  alpha: "\\alpha",
  Beta: "B",
  beta: "\\beta",
  Gamma: "\\Gamma",
  gamma: "\\gamma",
  Delta: "\\Delta",
  delta: "\\delta",
  Epsilon: "E",
  epsilon: "\\epsilon",
  varepsilon: "\\varepsilon",
  Zeta: "Z",
  zeta: "\\zeta",
  Eta: "H",
  eta: "\\eta",
  Theta: "\\Theta",
  theta: "\\theta",
  vartheta: "\\vartheta",
  Iota: "I",
  iota: "\\iota",
  Kappa: "K",
  kappa: "\\kappa",
  varkappa: "\\varkappa",
  Lambda: "\\Lambda",
  lambda: "\\lambda",
  Mu: "M",
  mu: "\\mu",
  Nu: "N",
  nu: "\\nu",
  Xi: "\\Xi",
  xi: "\\xi",
  Omicron: "O",
  omicron: "o",
  Pi: "\\Pi",
  pi: "\\pi",
  varpi: "\\varpi",
  Rho: "P",
  rho: "\\rho",
  varrho: "\\varrho",
  Sigma: "\\Sigma",
  sigma: "\\sigma",
  varsigma: "\\varsigma",
  Tau: "T",
  tau: "\\tau",
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: "\\Phi",
  phi: "\\phi",
  varphi: "\\varphi",
  Chi: "X",
  chi: "\\chi",
  Psi: "\\Psi",
  psi: "\\psi",
  Omega: "\\Omega",
  omega: "\\omega",
  // logic
  true: "\\mathrm{True}",
  false: "\\mathrm{False}",
  // other
  i: "i",
  // TODO use \i ??
  inf: "\\infty",
  Inf: "\\infty",
  infinity: "\\infty",
  Infinity: "\\infty",
  oo: "\\infty",
  lim: "\\lim",
  undefined: "\\mathbf{?}"
}, pt = {
  transpose: "^\\top",
  ctranspose: "^H",
  factorial: "!",
  pow: "^",
  dotPow: ".^\\wedge",
  // TODO find ideal solution
  unaryPlus: "+",
  unaryMinus: "-",
  bitNot: "\\~",
  // TODO find ideal solution
  not: "\\neg",
  multiply: "\\cdot",
  divide: "\\frac",
  // TODO how to handle that properly?
  dotMultiply: ".\\cdot",
  // TODO find ideal solution
  dotDivide: ".:",
  // TODO find ideal solution
  mod: "\\mod",
  add: "+",
  subtract: "-",
  to: "\\rightarrow",
  leftShift: "<<",
  rightArithShift: ">>",
  rightLogShift: ">>>",
  equal: "=",
  unequal: "\\neq",
  smaller: "<",
  larger: ">",
  smallerEq: "\\leq",
  largerEq: "\\geq",
  bitAnd: "\\&",
  bitXor: "\\underline{|}",
  bitOr: "|",
  and: "\\wedge",
  xor: "\\veebar",
  or: "\\vee"
}, Ep = {
  // arithmetic
  abs: {
    1: "\\left|${args[0]}\\right|"
  },
  add: {
    2: "\\left(${args[0]}".concat(pt.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: "\\sqrt[3]{${args[0]}}"
  },
  ceil: {
    1: "\\left\\lceil${args[0]}\\right\\rceil"
  },
  cube: {
    1: "\\left(${args[0]}\\right)^3"
  },
  divide: {
    2: "\\frac{${args[0]}}{${args[1]}}"
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(pt.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(pt.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(pt.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: "\\exp\\left(${args[0]}\\right)"
  },
  expm1: "\\left(e".concat(pt.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
  },
  floor: {
    1: "\\left\\lfloor${args[0]}\\right\\rfloor"
  },
  fraction: {
    2: "\\frac{${args[0]}}{${args[1]}}"
  },
  gcd: "\\gcd\\left(${args}\\right)",
  hypot: "\\hypot\\left(${args}\\right)",
  log: {
    1: "\\ln\\left(${args[0]}\\right)",
    2: "\\log_{${args[1]}}\\left(${args[0]}\\right)"
  },
  log10: {
    1: "\\log_{10}\\left(${args[0]}\\right)"
  },
  log1p: {
    1: "\\ln\\left(${args[0]}+1\\right)",
    2: "\\log_{${args[1]}}\\left(${args[0]}+1\\right)"
  },
  log2: "\\log_{2}\\left(${args[0]}\\right)",
  mod: {
    2: "\\left(${args[0]}".concat(pt.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(pt.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: "\\left\\|${args[0]}\\right\\|",
    2: void 0
    // use default template
  },
  nthRoot: {
    2: "\\sqrt[${args[1]}]{${args[0]}}"
  },
  nthRoots: {
    2: "\\{y : y^${args[1]} = {${args[0]}}\\}"
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(pt.pow, "{${args[1]}}")
  },
  round: {
    1: "\\left\\lfloor${args[0]}\\right\\rceil",
    2: void 0
    // use default template
  },
  sign: {
    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
  },
  sqrt: {
    1: "\\sqrt{${args[0]}}"
  },
  square: {
    1: "\\left(${args[0]}\\right)^2"
  },
  subtract: {
    2: "\\left(${args[0]}".concat(pt.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(pt.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(pt.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(pt.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: pt.bitNot + "\\left(${args[0]}\\right)"
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(pt.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(pt.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(pt.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(pt.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(pt.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: "\\mathrm{B}_{${args[0]}}"
  },
  catalan: {
    1: "\\mathrm{C}_{${args[0]}}"
  },
  stirlingS2: {
    2: "\\mathrm{S}\\left(${args}\\right)"
  },
  // complex
  arg: {
    1: "\\arg\\left(${args[0]}\\right)"
  },
  conj: {
    1: "\\left(${args[0]}\\right)^*"
  },
  im: {
    1: "\\Im\\left\\lbrace${args[0]}\\right\\rbrace"
  },
  re: {
    1: "\\Re\\left\\lbrace${args[0]}\\right\\rbrace"
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(pt.and, "${args[1]}\\right)")
  },
  not: {
    1: pt.not + "\\left(${args[0]}\\right)"
  },
  or: {
    2: "\\left(${args[0]}".concat(pt.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(pt.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: "\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(pt.ctranspose)
  },
  det: {
    1: "\\det\\left(${args[0]}\\right)"
  },
  dot: {
    2: "\\left(${args[0]}\\cdot${args[1]}\\right)"
  },
  expm: {
    1: "\\exp\\left(${args[0]}\\right)"
  },
  inv: {
    1: "\\left(${args[0]}\\right)^{-1}"
  },
  pinv: {
    1: "\\left(${args[0]}\\right)^{+}"
  },
  sqrtm: {
    1: "{${args[0]}}".concat(pt.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: "\\mathrm{tr}\\left(${args[0]}\\right)"
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(pt.transpose)
  },
  // probability
  combinations: {
    2: "\\binom{${args[0]}}{${args[1]}}"
  },
  combinationsWithRep: {
    2: "\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)"
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(pt.factorial)
  },
  gamma: {
    1: "\\Gamma\\left(${args[0]}\\right)"
  },
  lgamma: {
    1: "\\ln\\Gamma\\left(${args[0]}\\right)"
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(pt.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(pt.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(pt.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(pt.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(pt.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(pt.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: "erf\\left(${args[0]}\\right)"
  },
  // statistics
  max: "\\max\\left(${args}\\right)",
  min: "\\min\\left(${args}\\right)",
  variance: "\\mathrm{Var}\\left(${args}\\right)",
  // trigonometry
  acos: {
    1: "\\cos^{-1}\\left(${args[0]}\\right)"
  },
  acosh: {
    1: "\\cosh^{-1}\\left(${args[0]}\\right)"
  },
  acot: {
    1: "\\cot^{-1}\\left(${args[0]}\\right)"
  },
  acoth: {
    1: "\\coth^{-1}\\left(${args[0]}\\right)"
  },
  acsc: {
    1: "\\csc^{-1}\\left(${args[0]}\\right)"
  },
  acsch: {
    1: "\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"
  },
  asec: {
    1: "\\sec^{-1}\\left(${args[0]}\\right)"
  },
  asech: {
    1: "\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"
  },
  asin: {
    1: "\\sin^{-1}\\left(${args[0]}\\right)"
  },
  asinh: {
    1: "\\sinh^{-1}\\left(${args[0]}\\right)"
  },
  atan: {
    1: "\\tan^{-1}\\left(${args[0]}\\right)"
  },
  atan2: {
    2: "\\mathrm{atan2}\\left(${args}\\right)"
  },
  atanh: {
    1: "\\tanh^{-1}\\left(${args[0]}\\right)"
  },
  cos: {
    1: "\\cos\\left(${args[0]}\\right)"
  },
  cosh: {
    1: "\\cosh\\left(${args[0]}\\right)"
  },
  cot: {
    1: "\\cot\\left(${args[0]}\\right)"
  },
  coth: {
    1: "\\coth\\left(${args[0]}\\right)"
  },
  csc: {
    1: "\\csc\\left(${args[0]}\\right)"
  },
  csch: {
    1: "\\mathrm{csch}\\left(${args[0]}\\right)"
  },
  sec: {
    1: "\\sec\\left(${args[0]}\\right)"
  },
  sech: {
    1: "\\mathrm{sech}\\left(${args[0]}\\right)"
  },
  sin: {
    1: "\\sin\\left(${args[0]}\\right)"
  },
  sinh: {
    1: "\\sinh\\left(${args[0]}\\right)"
  },
  tan: {
    1: "\\tan\\left(${args[0]}\\right)"
  },
  tanh: {
    1: "\\tanh\\left(${args[0]}\\right)"
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(pt.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function(e, t) {
    return e.args[0].toTex();
  },
  // type
  number: {
    0: "0",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
  },
  string: {
    0: '\\mathtt{""}',
    1: "\\mathrm{string}\\left(${args[0]}\\right)"
  },
  bignumber: {
    0: "0",
    1: "\\left(${args[0]}\\right)"
  },
  bigint: {
    0: "0",
    1: "\\left(${args[0]}\\right)"
  },
  complex: {
    0: "0",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)+".concat(gc.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: "\\begin{bmatrix}\\end{bmatrix}",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(${args[0]}\\right)"
  },
  sparse: {
    0: "\\begin{bsparse}\\end{bsparse}",
    1: "\\left(${args[0]}\\right)"
  },
  unit: {
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
  }
}, oT = "\\mathrm{${name}}\\left(${args}\\right)", Mp = {
  deg: "^\\circ"
};
function yc(r) {
  return sT(r, {
    preserveFormatting: !0
  });
}
function sy(r, e) {
  return e = typeof e > "u" ? !1 : e, e ? Ue(Mp, r) ? Mp[r] : "\\mathrm{" + yc(r) + "}" : Ue(gc, r) ? gc[r] : yc(r);
}
var co = "ConstantNode", uT = ["Node"], lT = /* @__PURE__ */ W(co, uT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * A ConstantNode holds a constant value like a number or string.
     *
     * Usage:
     *
     *     new ConstantNode(2.3)
     *     new ConstantNode('hello')
     *
     * @param {*} value    Value can be any type (number, BigNumber, bigint, string, ...)
     * @constructor ConstantNode
     * @extends {Node}
     */
    constructor(i) {
      super(), this.value = i;
    }
    get type() {
      return co;
    }
    get isConstantNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, a) {
      var s = this.value;
      return function() {
        return s;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
    }
    /**
     * Create a new ConstantNode with children produced by the given callback.
     * Trivial because there are no children.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ConstantNode} Returns a clone of the node
     */
    map(i) {
      return this.clone();
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ConstantNode}
     */
    clone() {
      return new t(this.value);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(i) {
      return lt(this.value, i);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(i) {
      var a = this._toString(i);
      switch (Dt(this.value)) {
        case "number":
        case "bigint":
        case "BigNumber":
        case "Fraction":
          return '<span class="math-number">' + a + "</span>";
        case "string":
          return '<span class="math-string">' + a + "</span>";
        case "boolean":
          return '<span class="math-boolean">' + a + "</span>";
        case "null":
          return '<span class="math-null-symbol">' + a + "</span>";
        case "undefined":
          return '<span class="math-undefined">' + a + "</span>";
        default:
          return '<span class="math-symbol">' + a + "</span>";
      }
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: co,
        value: this.value
      };
    }
    /**
     * Instantiate a ConstantNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", value: 2.3}`,
     *                       where mathjs is optional
     * @returns {ConstantNode}
     */
    static fromJSON(i) {
      return new t(i.value);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      var a = this._toString(i), s = Dt(this.value);
      switch (s) {
        case "string":
          return "\\mathtt{" + yc(a) + "}";
        case "number":
        case "BigNumber": {
          var o = s === "BigNumber" ? this.value.isFinite() : isFinite(this.value);
          if (!o)
            return this.value.valueOf() < 0 ? "-\\infty" : "\\infty";
          var l = a.toLowerCase().indexOf("e");
          return l !== -1 ? a.substring(0, l) + "\\cdot10^{" + a.substring(l + 1) + "}" : a;
        }
        case "bigint":
          return a.toString();
        case "Fraction":
          return this.value.toLatex();
        default:
          return a;
      }
    }
  }
  return qt(t, "name", co), t;
}, {
  isClass: !0,
  isNode: !0
}), fo = "FunctionAssignmentNode", cT = ["typed", "Node"], fT = /* @__PURE__ */ W(fo, cT, (r) => {
  var {
    typed: e,
    Node: t
  } = r;
  function n(a, s, o) {
    var l = At(a, s, o), u = At(a.expr, s, o);
    return s === "all" || u !== null && u <= l;
  }
  class i extends t {
    /**
     * @constructor FunctionAssignmentNode
     * @extends {Node}
     * Function assignment
     *
     * @param {string} name           Function name
     * @param {string[] | Array.<{name: string, type: string}>} params
     *                                Array with function parameter names, or an
     *                                array with objects containing the name
     *                                and type of the parameter
     * @param {Node} expr             The function expression
     */
    constructor(s, o, l) {
      if (super(), typeof s != "string")
        throw new TypeError('String expected for parameter "name"');
      if (!Array.isArray(o))
        throw new TypeError('Array containing strings or objects expected for parameter "params"');
      if (!bt(l))
        throw new TypeError('Node expected for parameter "expr"');
      if (iy.has(s))
        throw new Error('Illegal function name, "' + s + '" is a reserved keyword');
      var u = /* @__PURE__ */ new Set();
      for (var c of o) {
        var f = typeof c == "string" ? c : c.name;
        if (u.has(f))
          throw new Error('Duplicate parameter name "'.concat(f, '"'));
        u.add(f);
      }
      this.name = s, this.params = o.map(function(h) {
        return h && h.name || h;
      }), this.types = o.map(function(h) {
        return h && h.type || "any";
      }), this.expr = l;
    }
    get type() {
      return fo;
    }
    get isFunctionAssignmentNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(s, o) {
      var l = Object.create(o);
      Hg(this.params, function(m) {
        l[m] = !0;
      });
      var u = this.expr._compile(s, l), c = this.name, f = this.params, h = Sh(this.types, ","), d = c + "(" + Sh(this.params, ", ") + ")";
      return function(p, g, v) {
        var S = {};
        S[h] = function() {
          for (var y = Object.create(g), b = 0; b < f.length; b++)
            y[f[b]] = arguments[b];
          return u(p, y, v);
        };
        var x = e(c, S);
        return x.syntax = d, p.set(c, x), x;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(s) {
      s(this.expr, "expr", this);
    }
    /**
     * Create a new FunctionAssignmentNode whose children are the results of
     * calling the provided callback function for each child of the original
     * node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
     */
    map(s) {
      var o = this._ifNode(s(this.expr, "expr", this));
      return new i(this.name, this.params.slice(0), o);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionAssignmentNode}
     */
    clone() {
      return new i(this.name, this.params.slice(0), this.expr);
    }
    /**
     * get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(s) {
      var o = s && s.parenthesis ? s.parenthesis : "keep", l = this.expr.toString(s);
      return n(this, o, s && s.implicit) && (l = "(" + l + ")"), this.name + "(" + this.params.join(", ") + ") = " + l;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      var s = this.types;
      return {
        mathjs: fo,
        name: this.name,
        params: this.params.map(function(o, l) {
          return {
            name: o,
            type: s[l]
          };
        }),
        expr: this.expr
      };
    }
    /**
     * Instantiate an FunctionAssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "FunctionAssignmentNode",
     *      name: ..., params: ..., expr: ...}
     *     ```
     *     where mathjs is optional
     * @returns {FunctionAssignmentNode}
     */
    static fromJSON(s) {
      return new i(s.name, s.params, s.expr);
    }
    /**
     * get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(s) {
      for (var o = s && s.parenthesis ? s.parenthesis : "keep", l = [], u = 0; u < this.params.length; u++)
        l.push('<span class="math-symbol math-parameter">' + Jr(this.params[u]) + "</span>");
      var c = this.expr.toHTML(s);
      return n(this, o, s && s.implicit) && (c = '<span class="math-parenthesis math-round-parenthesis">(</span>' + c + '<span class="math-parenthesis math-round-parenthesis">)</span>'), '<span class="math-function">' + Jr(this.name) + '</span><span class="math-parenthesis math-round-parenthesis">(</span>' + l.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + c;
    }
    /**
     * get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(s) {
      var o = s && s.parenthesis ? s.parenthesis : "keep", l = this.expr.toTex(s);
      return n(this, o, s && s.implicit) && (l = "\\left(".concat(l, "\\right)")), "\\mathrm{" + this.name + "}\\left(" + this.params.map(sy).join(",") + "\\right)=" + l;
    }
  }
  return qt(i, "name", fo), i;
}, {
  isClass: !0,
  isNode: !0
}), ho = "IndexNode", hT = ["Node", "size"], dT = /* @__PURE__ */ W(ho, hT, (r) => {
  var {
    Node: e,
    size: t
  } = r;
  class n extends e {
    /**
     * @constructor IndexNode
     * @extends Node
     *
     * Describes a subset of a matrix or an object property.
     * Cannot be used on its own, needs to be used within an AccessorNode or
     * AssignmentNode.
     *
     * @param {Node[]} dimensions
     * @param {boolean} [dotNotation=false]
     *     Optional property describing whether this index was written using dot
     *     notation like `a.b`, or using bracket notation like `a["b"]`
     *     (which is the default). This property is used for string conversion.
     */
    constructor(a, s) {
      if (super(), this.dimensions = a, this.dotNotation = s || !1, !Array.isArray(a) || !a.every(bt))
        throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
      if (this.dotNotation && !this.isObjectProperty())
        throw new Error("dotNotation only applicable for object properties");
    }
    get type() {
      return ho;
    }
    get isIndexNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      var o = li(this.dimensions, function(u, c) {
        var f = u.filter((m) => m.isSymbolNode && m.name === "end").length > 0;
        if (f) {
          var h = Object.create(s);
          h.end = !0;
          var d = u._compile(a, h);
          return function(p, g, v) {
            if (!Ve(v) && !Mt(v) && !sr(v))
              throw new TypeError('Cannot resolve "end": context must be a Matrix, Array, or string but is ' + Dt(v));
            var S = t(v).valueOf(), x = Object.create(g);
            return x.end = S[c], d(p, x, v);
          };
        } else
          return u._compile(a, s);
      }), l = Sr(a, "index");
      return function(c, f, h) {
        var d = li(o, function(m) {
          return m(c, f, h);
        });
        return l(...d);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      for (var s = 0; s < this.dimensions.length; s++)
        a(this.dimensions[s], "dimensions[" + s + "]", this);
    }
    /**
     * Create a new IndexNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {IndexNode} Returns a transformed copy of the node
     */
    map(a) {
      for (var s = [], o = 0; o < this.dimensions.length; o++)
        s[o] = this._ifNode(a(this.dimensions[o], "dimensions[" + o + "]", this));
      return new n(s, this.dotNotation);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {IndexNode}
     */
    clone() {
      return new n(this.dimensions.slice(0), this.dotNotation);
    }
    /**
     * Test whether this IndexNode contains a single property name
     * @return {boolean}
     */
    isObjectProperty() {
      return this.dimensions.length === 1 && ht(this.dimensions[0]) && typeof this.dimensions[0].value == "string";
    }
    /**
     * Returns the property name if IndexNode contains a property.
     * If not, returns null.
     * @return {string | null}
     */
    getObjectProperty() {
      return this.isObjectProperty() ? this.dimensions[0].value : null;
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(a) {
      return this.dotNotation ? "." + this.getObjectProperty() : "[" + this.dimensions.join(", ") + "]";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: ho,
        dimensions: this.dimensions,
        dotNotation: this.dotNotation
      };
    }
    /**
     * Instantiate an IndexNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
     *     where mathjs is optional
     * @returns {IndexNode}
     */
    static fromJSON(a) {
      return new n(a.dimensions, a.dotNotation);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(a) {
      for (var s = [], o = 0; o < this.dimensions.length; o++)
        s[o] = this.dimensions[o].toHTML();
      return this.dotNotation ? '<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">' + Jr(this.getObjectProperty()) + "</span>" : '<span class="math-parenthesis math-square-parenthesis">[</span>' + s.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      var s = this.dimensions.map(function(o) {
        return o.toTex(a);
      });
      return this.dotNotation ? "." + this.getObjectProperty() : "_{" + s.join(",") + "}";
    }
  }
  return qt(n, "name", ho), n;
}, {
  isClass: !0,
  isNode: !0
}), mo = "ObjectNode", mT = ["Node"], pT = /* @__PURE__ */ W(mo, mT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ObjectNode
     * @extends {Node}
     * Holds an object with keys/values
     * @param {Object.<string, Node>} [properties]   object with key/value pairs
     */
    constructor(i) {
      if (super(), this.properties = i || {}, i && (typeof i != "object" || !Object.keys(i).every(function(a) {
        return bt(i[a]);
      })))
        throw new TypeError("Object containing Nodes expected");
    }
    get type() {
      return mo;
    }
    get isObjectNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, a) {
      var s = {};
      for (var o in this.properties)
        if (Ue(this.properties, o)) {
          var l = Na(o), u = JSON.parse(l), c = Sr(this.properties, o);
          s[u] = c._compile(i, a);
        }
      return function(h, d, m) {
        var p = {};
        for (var g in s)
          Ue(s, g) && (p[g] = s[g](h, d, m));
        return p;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      for (var a in this.properties)
        Ue(this.properties, a) && i(this.properties[a], "properties[" + Na(a) + "]", this);
    }
    /**
     * Create a new ObjectNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ObjectNode} Returns a transformed copy of the node
     */
    map(i) {
      var a = {};
      for (var s in this.properties)
        Ue(this.properties, s) && (a[s] = this._ifNode(i(this.properties[s], "properties[" + Na(s) + "]", this)));
      return new t(a);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ObjectNode}
     */
    clone() {
      var i = {};
      for (var a in this.properties)
        Ue(this.properties, a) && (i[a] = this.properties[a]);
      return new t(i);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(i) {
      var a = [];
      for (var s in this.properties)
        Ue(this.properties, s) && a.push(Na(s) + ": " + this.properties[s].toString(i));
      return "{" + a.join(", ") + "}";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: mo,
        properties: this.properties
      };
    }
    /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
     *                       where mathjs is optional
     * @returns {ObjectNode}
     */
    static fromJSON(i) {
      return new t(i.properties);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toHTML(i) {
      var a = [];
      for (var s in this.properties)
        Ue(this.properties, s) && a.push('<span class="math-symbol math-property">' + Jr(s) + '</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[s].toHTML(i));
      return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + a.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      var a = [];
      for (var s in this.properties)
        Ue(this.properties, s) && a.push("\\mathbf{" + s + ":} & " + this.properties[s].toTex(i) + "\\\\");
      var o = "\\left\\{\\begin{array}{ll}" + a.join(`
`) + "\\end{array}\\right\\}";
      return o;
    }
  }
  return qt(t, "name", mo), t;
}, {
  isClass: !0,
  isNode: !0
});
function _s(r, e) {
  return new tg(r, new Ru(e), new Set(Object.keys(e)));
}
var po = "OperatorNode", vT = ["Node"], gT = /* @__PURE__ */ W(po, vT, (r) => {
  var {
    Node: e
  } = r;
  function t(a, s) {
    var o = a;
    if (s === "auto")
      for (; En(o); ) o = o.content;
    return ht(o) ? !0 : kt(o) ? t(o.args[0], s) : !1;
  }
  function n(a, s, o, l, u) {
    var c = At(a, s, o), f = ms(a, s);
    if (s === "all" || l.length > 2 && a.getIdentifier() !== "OperatorNode:add" && a.getIdentifier() !== "OperatorNode:multiply")
      return l.map(function(E) {
        switch (E.getContent().type) {
          // Nodes that don't need extra parentheses
          case "ArrayNode":
          case "ConstantNode":
          case "SymbolNode":
          case "ParenthesisNode":
            return !1;
          default:
            return !0;
        }
      });
    var h;
    switch (l.length) {
      case 0:
        h = [];
        break;
      case 1:
        {
          var d = At(l[0], s, o, a);
          if (u && d !== null) {
            var m, p;
            if (s === "keep" ? (m = l[0].getIdentifier(), p = a.getIdentifier()) : (m = l[0].getContent().getIdentifier(), p = a.getContent().getIdentifier()), un[c][p].latexLeftParens === !1) {
              h = [!1];
              break;
            }
            if (un[d][m].latexParens === !1) {
              h = [!1];
              break;
            }
          }
          if (d === null) {
            h = [!1];
            break;
          }
          if (d <= c) {
            h = [!0];
            break;
          }
          h = [!1];
        }
        break;
      case 2:
        {
          var g, v = At(l[0], s, o, a), S = ml(a, l[0], s);
          v === null ? g = !1 : v === c && f === "right" && !S || v < c ? g = !0 : g = !1;
          var x, y = At(l[1], s, o, a), b = ml(a, l[1], s);
          if (y === null ? x = !1 : y === c && f === "left" && !b || y < c ? x = !0 : x = !1, u) {
            var _, M, A;
            s === "keep" ? (_ = a.getIdentifier(), M = a.args[0].getIdentifier(), A = a.args[1].getIdentifier()) : (_ = a.getContent().getIdentifier(), M = a.args[0].getContent().getIdentifier(), A = a.args[1].getContent().getIdentifier()), v !== null && (un[c][_].latexLeftParens === !1 && (g = !1), un[v][M].latexParens === !1 && (g = !1)), y !== null && (un[c][_].latexRightParens === !1 && (x = !1), un[y][A].latexParens === !1 && (x = !1));
          }
          h = [g, x];
        }
        break;
      default:
        (a.getIdentifier() === "OperatorNode:add" || a.getIdentifier() === "OperatorNode:multiply") && (h = l.map(function(E) {
          var D = At(E, s, o, a), T = ml(a, E, s), R = ms(E, s);
          return D === null ? !1 : c === D && f === R && !T ? !0 : D < c;
        }));
        break;
    }
    if (l.length >= 2 && a.getIdentifier() === "OperatorNode:multiply" && a.implicit && s !== "all" && o === "hide")
      for (var w = 1; w < h.length; ++w)
        t(l[w], s) && !h[w - 1] && (s !== "keep" || !En(l[w - 1])) && (h[w] = !0);
    return h;
  }
  class i extends e {
    /**
     * @constructor OperatorNode
     * @extends {Node}
     * An operator with two arguments, like 2+3
     *
     * @param {string} op           Operator name, for example '+'
     * @param {string} fn           Function name, for example 'add'
     * @param {Node[]} args         Operator arguments
     * @param {boolean} [implicit]  Is this an implicit multiplication?
     * @param {boolean} [isPercentage] Is this an percentage Operation?
     */
    constructor(s, o, l, u, c) {
      if (super(), typeof s != "string")
        throw new TypeError('string expected for parameter "op"');
      if (typeof o != "string")
        throw new TypeError('string expected for parameter "fn"');
      if (!Array.isArray(l) || !l.every(bt))
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      this.implicit = u === !0, this.isPercentage = c === !0, this.op = s, this.fn = o, this.args = l || [];
    }
    get type() {
      return po;
    }
    get isOperatorNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(s, o) {
      if (typeof this.fn != "string" || !mf(s, this.fn))
        throw s[this.fn] ? new Error('No access to function "' + this.fn + '"') : new Error("Function " + this.fn + ' missing in provided namespace "math"');
      var l = Sr(s, this.fn), u = li(this.args, function(m) {
        return m._compile(s, o);
      });
      if (typeof l == "function" && l.rawArgs === !0) {
        var c = this.args;
        return function(p, g, v) {
          return l(c, s, _s(p, g));
        };
      } else if (u.length === 1) {
        var f = u[0];
        return function(p, g, v) {
          return l(f(p, g, v));
        };
      } else if (u.length === 2) {
        var h = u[0], d = u[1];
        return function(p, g, v) {
          return l(h(p, g, v), d(p, g, v));
        };
      } else
        return function(p, g, v) {
          return l.apply(null, li(u, function(S) {
            return S(p, g, v);
          }));
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(s) {
      for (var o = 0; o < this.args.length; o++)
        s(this.args[o], "args[" + o + "]", this);
    }
    /**
     * Create a new OperatorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */
    map(s) {
      for (var o = [], l = 0; l < this.args.length; l++)
        o[l] = this._ifNode(s(this.args[l], "args[" + l + "]", this));
      return new i(this.op, this.fn, o, this.implicit, this.isPercentage);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {OperatorNode}
     */
    clone() {
      return new i(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
    }
    /**
     * Check whether this is an unary OperatorNode:
     * has exactly one argument, like `-a`.
     * @return {boolean}
     *     Returns true when an unary operator node, false otherwise.
     */
    isUnary() {
      return this.args.length === 1;
    }
    /**
     * Check whether this is a binary OperatorNode:
     * has exactly two arguments, like `a + b`.
     * @return {boolean}
     *     Returns true when a binary operator node, false otherwise.
     */
    isBinary() {
      return this.args.length === 2;
    }
    /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */
    _toString(s) {
      var o = s && s.parenthesis ? s.parenthesis : "keep", l = s && s.implicit ? s.implicit : "hide", u = this.args, c = n(this, o, l, u, !1);
      if (u.length === 1) {
        var f = ms(this, o), h = u[0].toString(s);
        c[0] && (h = "(" + h + ")");
        var d = /[a-zA-Z]+/.test(this.op);
        return f === "right" ? this.op + (d ? " " : "") + h : f === "left" ? h + (d ? " " : "") + this.op : h + this.op;
      } else if (u.length === 2) {
        var m = u[0].toString(s), p = u[1].toString(s);
        return c[0] && (m = "(" + m + ")"), c[1] && (p = "(" + p + ")"), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? m + " " + p : m + " " + this.op + " " + p;
      } else if (u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
        var g = u.map(function(v, S) {
          return v = v.toString(s), c[S] && (v = "(" + v + ")"), v;
        });
        return this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? g.join(" ") : g.join(" " + this.op + " ");
      } else
        return this.fn + "(" + this.args.join(", ") + ")";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: po,
        op: this.op,
        fn: this.fn,
        args: this.args,
        implicit: this.implicit,
        isPercentage: this.isPercentage
      };
    }
    /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "OperatorNode",
     *      "op": "+", "fn": "add", "args": [...],
     *      "implicit": false,
     *      "isPercentage":false}
     *     ```
     *     where mathjs is optional
     * @returns {OperatorNode}
     */
    static fromJSON(s) {
      return new i(s.op, s.fn, s.args, s.implicit, s.isPercentage);
    }
    /**
     * Get HTML representation.
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(s) {
      var o = s && s.parenthesis ? s.parenthesis : "keep", l = s && s.implicit ? s.implicit : "hide", u = this.args, c = n(this, o, l, u, !1);
      if (u.length === 1) {
        var f = ms(this, o), h = u[0].toHTML(s);
        return c[0] && (h = '<span class="math-parenthesis math-round-parenthesis">(</span>' + h + '<span class="math-parenthesis math-round-parenthesis">)</span>'), f === "right" ? '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + Jr(this.op) + "</span>" + h : h + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + Jr(this.op) + "</span>";
      } else if (u.length === 2) {
        var d = u[0].toHTML(s), m = u[1].toHTML(s);
        return c[0] && (d = '<span class="math-parenthesis math-round-parenthesis">(</span>' + d + '<span class="math-parenthesis math-round-parenthesis">)</span>'), c[1] && (m = '<span class="math-parenthesis math-round-parenthesis">(</span>' + m + '<span class="math-parenthesis math-round-parenthesis">)</span>'), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? d + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + m : d + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Jr(this.op) + "</span>" + m;
      } else {
        var p = u.map(function(g, v) {
          return g = g.toHTML(s), c[v] && (g = '<span class="math-parenthesis math-round-parenthesis">(</span>' + g + '<span class="math-parenthesis math-round-parenthesis">)</span>'), g;
        });
        return u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply") ? this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? p.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>') : p.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Jr(this.op) + "</span>") : '<span class="math-function">' + Jr(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + p.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(s) {
      var o = s && s.parenthesis ? s.parenthesis : "keep", l = s && s.implicit ? s.implicit : "hide", u = this.args, c = n(this, o, l, u, !0), f = pt[this.fn];
      if (f = typeof f > "u" ? this.op : f, u.length === 1) {
        var h = ms(this, o), d = u[0].toTex(s);
        return c[0] && (d = "\\left(".concat(d, "\\right)")), h === "right" ? f + d : d + f;
      } else if (u.length === 2) {
        var m = u[0], p = m.toTex(s);
        c[0] && (p = "\\left(".concat(p, "\\right)"));
        var g = u[1], v = g.toTex(s);
        c[1] && (v = "\\left(".concat(v, "\\right)"));
        var S;
        switch (o === "keep" ? S = m.getIdentifier() : S = m.getContent().getIdentifier(), this.getIdentifier()) {
          case "OperatorNode:divide":
            return f + "{" + p + "}{" + v + "}";
          case "OperatorNode:pow":
            switch (p = "{" + p + "}", v = "{" + v + "}", S) {
              case "ConditionalNode":
              //
              case "OperatorNode:divide":
                p = "\\left(".concat(p, "\\right)");
            }
            break;
          case "OperatorNode:multiply":
            if (this.implicit && l === "hide")
              return p + "~" + v;
        }
        return p + f + v;
      } else if (u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
        var x = u.map(function(y, b) {
          return y = y.toTex(s), c[b] && (y = "\\left(".concat(y, "\\right)")), y;
        });
        return this.getIdentifier() === "OperatorNode:multiply" && this.implicit && l === "hide" ? x.join("~") : x.join(f);
      } else
        return "\\mathrm{" + this.fn + "}\\left(" + u.map(function(y) {
          return y.toTex(s);
        }).join(",") + "\\right)";
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type + ":" + this.fn;
    }
  }
  return qt(i, "name", po), i;
}, {
  isClass: !0,
  isNode: !0
}), vo = "ParenthesisNode", yT = ["Node"], xT = /* @__PURE__ */ W(vo, yT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ParenthesisNode
     * @extends {Node}
     * A parenthesis node describes manual parenthesis from the user input
     * @param {Node} content
     * @extends {Node}
     */
    constructor(i) {
      if (super(), !bt(i))
        throw new TypeError('Node expected for parameter "content"');
      this.content = i;
    }
    get type() {
      return vo;
    }
    get isParenthesisNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, a) {
      return this.content._compile(i, a);
    }
    /**
     * Get the content of the current Node.
     * @return {Node} content
     * @override
     **/
    getContent() {
      return this.content.getContent();
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      i(this.content, "content", this);
    }
    /**
     * Create a new ParenthesisNode whose child is the result of calling
     * the provided callback function on the child of this node.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ParenthesisNode} Returns a clone of the node
     */
    map(i) {
      var a = i(this.content, "content", this);
      return new t(a);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ParenthesisNode}
     */
    clone() {
      return new t(this.content);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(i) {
      return !i || i && !i.parenthesis || i && i.parenthesis === "keep" ? "(" + this.content.toString(i) + ")" : this.content.toString(i);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: vo,
        content: this.content
      };
    }
    /**
     * Instantiate an ParenthesisNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
     *                       where mathjs is optional
     * @returns {ParenthesisNode}
     */
    static fromJSON(i) {
      return new t(i.content);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toHTML(i) {
      return !i || i && !i.parenthesis || i && i.parenthesis === "keep" ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(i) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : this.content.toHTML(i);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toTex(i) {
      return !i || i && !i.parenthesis || i && i.parenthesis === "keep" ? "\\left(".concat(this.content.toTex(i), "\\right)") : this.content.toTex(i);
    }
  }
  return qt(t, "name", vo), t;
}, {
  isClass: !0,
  isNode: !0
}), go = "RangeNode", _T = ["Node"], bT = /* @__PURE__ */ W(go, _T, (r) => {
  var {
    Node: e
  } = r;
  function t(i, a, s) {
    var o = At(i, a, s), l = {}, u = At(i.start, a, s);
    if (l.start = u !== null && u <= o || a === "all", i.step) {
      var c = At(i.step, a, s);
      l.step = c !== null && c <= o || a === "all";
    }
    var f = At(i.end, a, s);
    return l.end = f !== null && f <= o || a === "all", l;
  }
  class n extends e {
    /**
     * @constructor RangeNode
     * @extends {Node}
     * create a range
     * @param {Node} start  included lower-bound
     * @param {Node} end    included upper-bound
     * @param {Node} [step] optional step
     */
    constructor(a, s, o) {
      if (super(), !bt(a)) throw new TypeError("Node expected");
      if (!bt(s)) throw new TypeError("Node expected");
      if (o && !bt(o)) throw new TypeError("Node expected");
      if (arguments.length > 3) throw new Error("Too many arguments");
      this.start = a, this.end = s, this.step = o || null;
    }
    get type() {
      return go;
    }
    get isRangeNode() {
      return !0;
    }
    /**
     * Check whether the RangeNode needs the `end` symbol to be defined.
     * This end is the size of the Matrix in current dimension.
     * @return {boolean}
     */
    needsEnd() {
      var a = this.filter(function(s) {
        return Zt(s) && s.name === "end";
      });
      return a.length > 0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      var o = a.range, l = this.start._compile(a, s), u = this.end._compile(a, s);
      if (this.step) {
        var c = this.step._compile(a, s);
        return function(h, d, m) {
          return o(l(h, d, m), u(h, d, m), c(h, d, m));
        };
      } else
        return function(h, d, m) {
          return o(l(h, d, m), u(h, d, m));
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      a(this.start, "start", this), a(this.end, "end", this), this.step && a(this.step, "step", this);
    }
    /**
     * Create a new RangeNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RangeNode} Returns a transformed copy of the node
     */
    map(a) {
      return new n(this._ifNode(a(this.start, "start", this)), this._ifNode(a(this.end, "end", this)), this.step && this._ifNode(a(this.step, "step", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {RangeNode}
     */
    clone() {
      return new n(this.start, this.end, this.step && this.step);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(a) {
      var s = a && a.parenthesis ? a.parenthesis : "keep", o = t(this, s, a && a.implicit), l, u = this.start.toString(a);
      if (o.start && (u = "(" + u + ")"), l = u, this.step) {
        var c = this.step.toString(a);
        o.step && (c = "(" + c + ")"), l += ":" + c;
      }
      var f = this.end.toString(a);
      return o.end && (f = "(" + f + ")"), l += ":" + f, l;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: go,
        start: this.start,
        end: this.end,
        step: this.step
      };
    }
    /**
     * Instantiate an RangeNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
     *     where mathjs is optional
     * @returns {RangeNode}
     */
    static fromJSON(a) {
      return new n(a.start, a.end, a.step);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(a) {
      var s = a && a.parenthesis ? a.parenthesis : "keep", o = t(this, s, a && a.implicit), l, u = this.start.toHTML(a);
      if (o.start && (u = '<span class="math-parenthesis math-round-parenthesis">(</span>' + u + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l = u, this.step) {
        var c = this.step.toHTML(a);
        o.step && (c = '<span class="math-parenthesis math-round-parenthesis">(</span>' + c + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l += '<span class="math-operator math-range-operator">:</span>' + c;
      }
      var f = this.end.toHTML(a);
      return o.end && (f = '<span class="math-parenthesis math-round-parenthesis">(</span>' + f + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l += '<span class="math-operator math-range-operator">:</span>' + f, l;
    }
    /**
     * Get LaTeX representation
     * @params {Object} options
     * @return {string} str
     */
    _toTex(a) {
      var s = a && a.parenthesis ? a.parenthesis : "keep", o = t(this, s, a && a.implicit), l = this.start.toTex(a);
      if (o.start && (l = "\\left(".concat(l, "\\right)")), this.step) {
        var u = this.step.toTex(a);
        o.step && (u = "\\left(".concat(u, "\\right)")), l += ":" + u;
      }
      var c = this.end.toTex(a);
      return o.end && (c = "\\left(".concat(c, "\\right)")), l += ":" + c, l;
    }
  }
  return qt(n, "name", go), n;
}, {
  isClass: !0,
  isNode: !0
}), yo = "RelationalNode", wT = ["Node"], ST = /* @__PURE__ */ W(yo, wT, (r) => {
  var {
    Node: e
  } = r, t = {
    equal: "==",
    unequal: "!=",
    smaller: "<",
    larger: ">",
    smallerEq: "<=",
    largerEq: ">="
  };
  class n extends e {
    /**
     * A node representing a chained conditional expression, such as 'x > y > z'
     *
     * @param {String[]} conditionals
     *     An array of conditional operators used to compare the parameters
     * @param {Node[]} params
     *     The parameters that will be compared
     *
     * @constructor RelationalNode
     * @extends {Node}
     */
    constructor(a, s) {
      if (super(), !Array.isArray(a))
        throw new TypeError("Parameter conditionals must be an array");
      if (!Array.isArray(s))
        throw new TypeError("Parameter params must be an array");
      if (a.length !== s.length - 1)
        throw new TypeError("Parameter params must contain exactly one more element than parameter conditionals");
      this.conditionals = a, this.params = s;
    }
    get type() {
      return yo;
    }
    get isRelationalNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, s) {
      var o = this, l = this.params.map((u) => u._compile(a, s));
      return function(c, f, h) {
        for (var d, m = l[0](c, f, h), p = 0; p < o.conditionals.length; p++) {
          d = m, m = l[p + 1](c, f, h);
          var g = Sr(a, o.conditionals[p]);
          if (!g(d, m))
            return !1;
        }
        return !0;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      this.params.forEach((s, o) => a(s, "params[" + o + "]", this), this);
    }
    /**
     * Create a new RelationalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RelationalNode} Returns a transformed copy of the node
     */
    map(a) {
      return new n(this.conditionals.slice(), this.params.map((s, o) => this._ifNode(a(s, "params[" + o + "]", this)), this));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {RelationalNode}
     */
    clone() {
      return new n(this.conditionals, this.params);
    }
    /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */
    _toString(a) {
      for (var s = a && a.parenthesis ? a.parenthesis : "keep", o = At(this, s, a && a.implicit), l = this.params.map(function(f, h) {
        var d = At(f, s, a && a.implicit);
        return s === "all" || d !== null && d <= o ? "(" + f.toString(a) + ")" : f.toString(a);
      }), u = l[0], c = 0; c < this.conditionals.length; c++)
        u += " " + t[this.conditionals[c]], u += " " + l[c + 1];
      return u;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: yo,
        conditionals: this.conditionals,
        params: this.params
      };
    }
    /**
     * Instantiate a RelationalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RelationalNode", "conditionals": ..., "params": ...}`,
     *     where mathjs is optional
     * @returns {RelationalNode}
     */
    static fromJSON(a) {
      return new n(a.conditionals, a.params);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(a) {
      for (var s = a && a.parenthesis ? a.parenthesis : "keep", o = At(this, s, a && a.implicit), l = this.params.map(function(f, h) {
        var d = At(f, s, a && a.implicit);
        return s === "all" || d !== null && d <= o ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + f.toHTML(a) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : f.toHTML(a);
      }), u = l[0], c = 0; c < this.conditionals.length; c++)
        u += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Jr(t[this.conditionals[c]]) + "</span>" + l[c + 1];
      return u;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      for (var s = a && a.parenthesis ? a.parenthesis : "keep", o = At(this, s, a && a.implicit), l = this.params.map(function(f, h) {
        var d = At(f, s, a && a.implicit);
        return s === "all" || d !== null && d <= o ? "\\left(" + f.toTex(a) + "\right)" : f.toTex(a);
      }), u = l[0], c = 0; c < this.conditionals.length; c++)
        u += pt[this.conditionals[c]] + l[c + 1];
      return u;
    }
  }
  return qt(n, "name", yo), n;
}, {
  isClass: !0,
  isNode: !0
}), ET = "SymbolNode", MT = ["math", "?Unit", "Node"], AT = /* @__PURE__ */ W(ET, MT, (r) => {
  var {
    math: e,
    Unit: t,
    Node: n
  } = r;
  function i(s) {
    return t ? t.isValuelessUnit(s) : !1;
  }
  class a extends n {
    /**
     * @constructor SymbolNode
     * @extends {Node}
     * A symbol node can hold and resolve a symbol
     * @param {string} name
     * @extends {Node}
     */
    constructor(o) {
      if (super(), typeof o != "string")
        throw new TypeError('String expected for parameter "name"');
      this.name = o;
    }
    get type() {
      return "SymbolNode";
    }
    get isSymbolNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(o, l) {
      var u = this.name;
      if (l[u] === !0)
        return function(f, h, d) {
          return Sr(h, u);
        };
      if (u in o)
        return function(f, h, d) {
          return f.has(u) ? f.get(u) : Sr(o, u);
        };
      var c = i(u);
      return function(f, h, d) {
        return f.has(u) ? f.get(u) : c ? new t(null, u) : a.onUndefinedSymbol(u);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(o) {
    }
    /**
     * Create a new SymbolNode with children produced by the given callback.
     * Trivial since a SymbolNode has no children
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {SymbolNode} Returns a clone of the node
     */
    map(o) {
      return this.clone();
    }
    /**
     * Throws an error 'Undefined symbol {name}'
     * @param {string} name
     */
    static onUndefinedSymbol(o) {
      throw new Error("Undefined symbol " + o);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {SymbolNode}
     */
    clone() {
      return new a(this.name);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(o) {
      return this.name;
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toHTML(o) {
      var l = Jr(this.name);
      return l === "true" || l === "false" ? '<span class="math-symbol math-boolean">' + l + "</span>" : l === "i" ? '<span class="math-symbol math-imaginary-symbol">' + l + "</span>" : l === "Infinity" ? '<span class="math-symbol math-infinity-symbol">' + l + "</span>" : l === "NaN" ? '<span class="math-symbol math-nan-symbol">' + l + "</span>" : l === "null" ? '<span class="math-symbol math-null-symbol">' + l + "</span>" : l === "undefined" ? '<span class="math-symbol math-undefined-symbol">' + l + "</span>" : '<span class="math-symbol">' + l + "</span>";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: "SymbolNode",
        name: this.name
      };
    }
    /**
     * Instantiate a SymbolNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", name: "x"}`,
     *                       where mathjs is optional
     * @returns {SymbolNode}
     */
    static fromJSON(o) {
      return new a(o.name);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toTex(o) {
      var l = !1;
      typeof e[this.name] > "u" && i(this.name) && (l = !0);
      var u = sy(this.name, l);
      return u[0] === "\\" ? u : " " + u;
    }
  }
  return a;
}, {
  isClass: !0,
  isNode: !0
}), xo = "FunctionNode", DT = ["math", "Node", "SymbolNode"], CT = /* @__PURE__ */ W(xo, DT, (r) => {
  var e, {
    math: t,
    Node: n,
    SymbolNode: i
  } = r, a = (l) => lt(l, {
    truncate: 78
  });
  function s(l, u, c) {
    for (var f = "", h = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi, d = 0, m; (m = h.exec(l)) !== null; )
      if (f += l.substring(d, m.index), d = m.index, m[0] === "$$")
        f += "$", d++;
      else {
        d += m[0].length;
        var p = u[m[1]];
        if (!p)
          throw new ReferenceError("Template: Property " + m[1] + " does not exist.");
        if (m[2] === void 0)
          switch (typeof p) {
            case "string":
              f += p;
              break;
            case "object":
              if (bt(p))
                f += p.toTex(c);
              else if (Array.isArray(p))
                f += p.map(function(g, v) {
                  if (bt(g))
                    return g.toTex(c);
                  throw new TypeError("Template: " + m[1] + "[" + v + "] is not a Node.");
                }).join(",");
              else
                throw new TypeError("Template: " + m[1] + " has to be a Node, String or array of Nodes");
              break;
            default:
              throw new TypeError("Template: " + m[1] + " has to be a Node, String or array of Nodes");
          }
        else if (bt(p[m[2]] && p[m[2]]))
          f += p[m[2]].toTex(c);
        else
          throw new TypeError("Template: " + m[1] + "[" + m[2] + "] is not a Node.");
      }
    return f += l.slice(d), f;
  }
  class o extends n {
    /**
     * @constructor FunctionNode
     * @extends {./Node}
     * invoke a list with arguments on a node
     * @param {./Node | string} fn
     *     Item resolving to a function on which to invoke
     *     the arguments, typically a SymbolNode or AccessorNode
     * @param {./Node[]} args
     */
    constructor(u, c) {
      if (super(), typeof u == "string" && (u = new i(u)), !bt(u)) throw new TypeError('Node expected as parameter "fn"');
      if (!Array.isArray(c) || !c.every(bt))
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      this.fn = u, this.args = c || [];
    }
    // readonly property name
    get name() {
      return this.fn.name || "";
    }
    get type() {
      return xo;
    }
    get isFunctionNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(u, c) {
      var f = this.args.map((A) => A._compile(u, c));
      if (Zt(this.fn)) {
        var h = this.fn.name;
        if (c[h]) {
          var v = this.args;
          return function(w, E, D) {
            var T = Sr(E, h);
            if (typeof T != "function")
              throw new TypeError("Argument '".concat(h, "' was not a function; received: ").concat(a(T)));
            if (T.rawArgs)
              return T(v, u, _s(w, E));
            var R = f.map((B) => B(w, E, D));
            return T.apply(T, R);
          };
        } else {
          var d = h in u ? Sr(u, h) : void 0, m = typeof d == "function" && d.rawArgs === !0, p = (A) => {
            var w;
            if (A.has(h))
              w = A.get(h);
            else if (h in u)
              w = Sr(u, h);
            else
              return o.onUndefinedFunction(h);
            if (typeof w == "function")
              return w;
            throw new TypeError("'".concat(h, `' is not a function; its value is:
  `).concat(a(w)));
          };
          if (m) {
            var g = this.args;
            return function(w, E, D) {
              var T = p(w);
              if (T.rawArgs === !0)
                return T(g, u, _s(w, E));
              var R = f.map((B) => B(w, E, D));
              return T(...R);
            };
          } else
            switch (f.length) {
              case 0:
                return function(w, E, D) {
                  var T = p(w);
                  return T();
                };
              case 1:
                return function(w, E, D) {
                  var T = p(w), R = f[0];
                  return T(R(w, E, D));
                };
              case 2:
                return function(w, E, D) {
                  var T = p(w), R = f[0], B = f[1];
                  return T(R(w, E, D), B(w, E, D));
                };
              default:
                return function(w, E, D) {
                  var T = p(w), R = f.map((B) => B(w, E, D));
                  return T(...R);
                };
            }
        }
      } else if (hi(this.fn) && ea(this.fn.index) && this.fn.index.isObjectProperty()) {
        var S = this.fn.object._compile(u, c), x = this.fn.index.getObjectProperty(), y = this.args;
        return function(w, E, D) {
          var T = S(w, E, D), R = cx(T, x);
          if (R != null && R.rawArgs)
            return R(y, u, _s(w, E));
          var B = f.map((I) => I(w, E, D));
          return R.apply(T, B);
        };
      } else {
        var b = this.fn.toString(), _ = this.fn._compile(u, c), M = this.args;
        return function(w, E, D) {
          var T = _(w, E, D);
          if (typeof T != "function")
            throw new TypeError("Expression '".concat(b, "' did not evaluate to a function; value is:") + `
  `.concat(a(T)));
          if (T.rawArgs)
            return T(M, u, _s(w, E));
          var R = f.map((B) => B(w, E, D));
          return T.apply(T, R);
        };
      }
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(u) {
      u(this.fn, "fn", this);
      for (var c = 0; c < this.args.length; c++)
        u(this.args[c], "args[" + c + "]", this);
    }
    /**
     * Create a new FunctionNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionNode} Returns a transformed copy of the node
     */
    map(u) {
      for (var c = this._ifNode(u(this.fn, "fn", this)), f = [], h = 0; h < this.args.length; h++)
        f[h] = this._ifNode(u(this.args[h], "args[" + h + "]", this));
      return new o(c, f);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionNode}
     */
    clone() {
      return new o(this.fn, this.args.slice(0));
    }
    /**
     * Throws an error 'Undefined function {name}'
     * @param {string} name
     */
    /**
     * Get string representation. (wrapper function)
     * This overrides parts of Node's toString function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toString
     * function.
     *
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toString(u) {
      var c, f = this.fn.toString(u);
      return u && typeof u.handler == "object" && Ue(u.handler, f) && (c = u.handler[f](this, u)), typeof c < "u" ? c : super.toString(u);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(u) {
      var c = this.args.map(function(h) {
        return h.toString(u);
      }), f = ts(this.fn) ? "(" + this.fn.toString(u) + ")" : this.fn.toString(u);
      return f + "(" + c.join(", ") + ")";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: xo,
        fn: this.fn,
        args: this.args
      };
    }
    /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
     *                       where mathjs is optional
     * @returns {FunctionNode}
     */
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    _toHTML(u) {
      var c = this.args.map(function(f) {
        return f.toHTML(u);
      });
      return '<span class="math-function">' + Jr(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + c.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }
    /**
     * Get LaTeX representation. (wrapper function)
     * This overrides parts of Node's toTex function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toTex
     * function.
     *
     * @param {Object} options
     * @return {string}
     */
    toTex(u) {
      var c;
      return u && typeof u.handler == "object" && Ue(u.handler, this.name) && (c = u.handler[this.name](this, u)), typeof c < "u" ? c : super.toTex(u);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(u) {
      var c = this.args.map(function(d) {
        return d.toTex(u);
      }), f;
      Ep[this.name] && (f = Ep[this.name]), t[this.name] && (typeof t[this.name].toTex == "function" || typeof t[this.name].toTex == "object" || typeof t[this.name].toTex == "string") && (f = t[this.name].toTex);
      var h;
      switch (typeof f) {
        case "function":
          h = f(this, u);
          break;
        case "string":
          h = s(f, this, u);
          break;
        case "object":
          switch (typeof f[c.length]) {
            case "function":
              h = f[c.length](this, u);
              break;
            case "string":
              h = s(f[c.length], this, u);
              break;
          }
      }
      return typeof h < "u" ? h : s(oT, this, u);
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type + ":" + this.name;
    }
  }
  return e = o, qt(o, "name", xo), qt(o, "onUndefinedFunction", function(l) {
    throw new Error("Undefined function " + l);
  }), qt(o, "fromJSON", function(l) {
    return new e(l.fn, l.args);
  }), o;
}, {
  isClass: !0,
  isNode: !0
}), Ap = "parse", TT = ["typed", "numeric", "config", "AccessorNode", "ArrayNode", "AssignmentNode", "BlockNode", "ConditionalNode", "ConstantNode", "FunctionAssignmentNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "RangeNode", "RelationalNode", "SymbolNode"], NT = /* @__PURE__ */ W(Ap, TT, (r) => {
  var {
    typed: e,
    numeric: t,
    config: n,
    AccessorNode: i,
    ArrayNode: a,
    AssignmentNode: s,
    BlockNode: o,
    ConditionalNode: l,
    ConstantNode: u,
    FunctionAssignmentNode: c,
    FunctionNode: f,
    IndexNode: h,
    ObjectNode: d,
    OperatorNode: m,
    ParenthesisNode: p,
    RangeNode: g,
    RelationalNode: v,
    SymbolNode: S
  } = r, x = e(Ap, {
    string: function(j) {
      return re(j, {});
    },
    "Array | Matrix": function(j) {
      return y(j, {});
    },
    "string, Object": function(j, de) {
      var Q = de.nodes !== void 0 ? de.nodes : {};
      return re(j, Q);
    },
    "Array | Matrix, Object": y
  });
  function y(N) {
    var j = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, de = j.nodes !== void 0 ? j.nodes : {};
    return nt(N, function(Q) {
      if (typeof Q != "string") throw new TypeError("String expected");
      return re(Q, de);
    });
  }
  var b = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }, _ = {
    ",": !0,
    "(": !0,
    ")": !0,
    "[": !0,
    "]": !0,
    "{": !0,
    "}": !0,
    '"': !0,
    "'": !0,
    ";": !0,
    "+": !0,
    "-": !0,
    "*": !0,
    ".*": !0,
    "/": !0,
    "./": !0,
    "%": !0,
    "^": !0,
    ".^": !0,
    "~": !0,
    "!": !0,
    "&": !0,
    "|": !0,
    "^|": !0,
    "=": !0,
    ":": !0,
    "?": !0,
    "==": !0,
    "!=": !0,
    "<": !0,
    ">": !0,
    "<=": !0,
    ">=": !0,
    "<<": !0,
    ">>": !0,
    ">>>": !0
  }, M = {
    mod: !0,
    to: !0,
    in: !0,
    and: !0,
    xor: !0,
    or: !0,
    not: !0
  }, A = {
    true: !0,
    false: !1,
    null: null,
    undefined: void 0
  }, w = ["NaN", "Infinity"], E = {
    '"': '"',
    "'": "'",
    "\\": "\\",
    "/": "/",
    b: "\b",
    f: "\f",
    n: `
`,
    r: "\r",
    t: "	"
    // note that \u is handled separately in parseStringToken()
  };
  function D() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: "",
      // current expression
      comment: "",
      // last parsed comment
      index: 0,
      // current index in expr
      token: "",
      // current token
      tokenType: b.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null
      // when a conditional is being parsed, the level of the conditional is stored here
    };
  }
  function T(N, j) {
    return N.expression.substr(N.index, j);
  }
  function R(N) {
    return T(N, 1);
  }
  function B(N) {
    N.index++;
  }
  function I(N) {
    return N.expression.charAt(N.index - 1);
  }
  function C(N) {
    return N.expression.charAt(N.index + 1);
  }
  function k(N) {
    for (N.tokenType = b.NULL, N.token = "", N.comment = ""; ; ) {
      if (R(N) === "#")
        for (; R(N) !== `
` && R(N) !== ""; )
          N.comment += R(N), B(N);
      if (x.isWhitespace(R(N), N.nestingLevel))
        B(N);
      else
        break;
    }
    if (R(N) === "") {
      N.tokenType = b.DELIMITER;
      return;
    }
    if (R(N) === `
` && !N.nestingLevel) {
      N.tokenType = b.DELIMITER, N.token = R(N), B(N);
      return;
    }
    var j = R(N), de = T(N, 2), Q = T(N, 3);
    if (Q.length === 3 && _[Q]) {
      N.tokenType = b.DELIMITER, N.token = Q, B(N), B(N), B(N);
      return;
    }
    if (de.length === 2 && _[de]) {
      N.tokenType = b.DELIMITER, N.token = de, B(N), B(N);
      return;
    }
    if (_[j]) {
      N.tokenType = b.DELIMITER, N.token = j, B(N);
      return;
    }
    if (x.isDigitDot(j)) {
      N.tokenType = b.NUMBER;
      var Se = T(N, 2);
      if (Se === "0b" || Se === "0o" || Se === "0x") {
        for (N.token += R(N), B(N), N.token += R(N), B(N); x.isHexDigit(R(N)); )
          N.token += R(N), B(N);
        if (R(N) === ".")
          for (N.token += ".", B(N); x.isHexDigit(R(N)); )
            N.token += R(N), B(N);
        else if (R(N) === "i")
          for (N.token += "i", B(N); x.isDigit(R(N)); )
            N.token += R(N), B(N);
        return;
      }
      if (R(N) === ".") {
        if (N.token += R(N), B(N), !x.isDigit(R(N))) {
          N.tokenType = b.DELIMITER;
          return;
        }
      } else {
        for (; x.isDigit(R(N)); )
          N.token += R(N), B(N);
        x.isDecimalMark(R(N), C(N)) && (N.token += R(N), B(N));
      }
      for (; x.isDigit(R(N)); )
        N.token += R(N), B(N);
      if (R(N) === "E" || R(N) === "e") {
        if (x.isDigit(C(N)) || C(N) === "-" || C(N) === "+") {
          if (N.token += R(N), B(N), (R(N) === "+" || R(N) === "-") && (N.token += R(N), B(N)), !x.isDigit(R(N)))
            throw Te(N, 'Digit expected, got "' + R(N) + '"');
          for (; x.isDigit(R(N)); )
            N.token += R(N), B(N);
          if (x.isDecimalMark(R(N), C(N)))
            throw Te(N, 'Digit expected, got "' + R(N) + '"');
        } else if (x.isDecimalMark(C(N), N.expression.charAt(N.index + 2)))
          throw B(N), Te(N, 'Digit expected, got "' + R(N) + '"');
      }
      return;
    }
    if (x.isAlpha(R(N), I(N), C(N))) {
      for (; x.isAlpha(R(N), I(N), C(N)) || x.isDigit(R(N)); )
        N.token += R(N), B(N);
      Ue(M, N.token) ? N.tokenType = b.DELIMITER : N.tokenType = b.SYMBOL;
      return;
    }
    for (N.tokenType = b.UNKNOWN; R(N) !== ""; )
      N.token += R(N), B(N);
    throw Te(N, 'Syntax error in part "' + N.token + '"');
  }
  function z(N) {
    do
      k(N);
    while (N.token === `
`);
  }
  function V(N) {
    N.nestingLevel++;
  }
  function ee(N) {
    N.nestingLevel--;
  }
  x.isAlpha = function(j, de, Q) {
    return x.isValidLatinOrGreek(j) || x.isValidMathSymbol(j, Q) || x.isValidMathSymbol(de, j);
  }, x.isValidLatinOrGreek = function(j) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(j);
  }, x.isValidMathSymbol = function(j, de) {
    return /^[\uD835]$/.test(j) && /^[\uDC00-\uDFFF]$/.test(de) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(de);
  }, x.isWhitespace = function(j, de) {
    return j === " " || j === "	" || j === " " || j === `
` && de > 0;
  }, x.isDecimalMark = function(j, de) {
    return j === "." && de !== "/" && de !== "*" && de !== "^";
  }, x.isDigitDot = function(j) {
    return j >= "0" && j <= "9" || j === ".";
  }, x.isDigit = function(j) {
    return j >= "0" && j <= "9";
  }, x.isHexDigit = function(j) {
    return j >= "0" && j <= "9" || j >= "a" && j <= "f" || j >= "A" && j <= "F";
  };
  function re(N, j) {
    var de = D();
    pr(de, {
      expression: N,
      extraNodes: j
    }), k(de);
    var Q = L(de);
    if (de.token !== "")
      throw de.tokenType === b.DELIMITER ? Fe(de, "Unexpected operator " + de.token) : Te(de, 'Unexpected part "' + de.token + '"');
    return Q;
  }
  function L(N) {
    var j, de = [], Q;
    for (N.token !== "" && N.token !== `
` && N.token !== ";" && (j = J(N), N.comment && (j.comment = N.comment)); N.token === `
` || N.token === ";"; )
      de.length === 0 && j && (Q = N.token !== ";", de.push({
        node: j,
        visible: Q
      })), k(N), N.token !== `
` && N.token !== ";" && N.token !== "" && (j = J(N), N.comment && (j.comment = N.comment), Q = N.token !== ";", de.push({
        node: j,
        visible: Q
      }));
    return de.length > 0 ? new o(de) : (j || (j = new u(void 0), N.comment && (j.comment = N.comment)), j);
  }
  function J(N) {
    var j, de, Q, Se, pe = U(N);
    if (N.token === "=") {
      if (Zt(pe))
        return j = pe.name, z(N), Q = J(N), new s(new S(j), Q);
      if (hi(pe))
        return z(N), Q = J(N), new s(pe.object, pe.index, Q);
      if (Vn(pe) && Zt(pe.fn) && (Se = !0, de = [], j = pe.name, pe.args.forEach(function(Ee, ze) {
        Zt(Ee) ? de[ze] = Ee.name : Se = !1;
      }), Se))
        return z(N), Q = J(N), new c(j, de, Q);
      throw Te(N, "Invalid left hand side of assignment operator =");
    }
    return pe;
  }
  function U(N) {
    for (var j = ue(N); N.token === "?"; ) {
      var de = N.conditionalLevel;
      N.conditionalLevel = N.nestingLevel, z(N);
      var Q = j, Se = J(N);
      if (N.token !== ":") throw Te(N, "False part of conditional expression expected");
      N.conditionalLevel = null, z(N);
      var pe = J(N);
      j = new l(Q, Se, pe), N.conditionalLevel = de;
    }
    return j;
  }
  function ue(N) {
    for (var j = oe(N); N.token === "or"; )
      z(N), j = new m("or", "or", [j, oe(N)]);
    return j;
  }
  function oe(N) {
    for (var j = ie(N); N.token === "xor"; )
      z(N), j = new m("xor", "xor", [j, ie(N)]);
    return j;
  }
  function ie(N) {
    for (var j = G(N); N.token === "and"; )
      z(N), j = new m("and", "and", [j, G(N)]);
    return j;
  }
  function G(N) {
    for (var j = Z(N); N.token === "|"; )
      z(N), j = new m("|", "bitOr", [j, Z(N)]);
    return j;
  }
  function Z(N) {
    for (var j = te(N); N.token === "^|"; )
      z(N), j = new m("^|", "bitXor", [j, te(N)]);
    return j;
  }
  function te(N) {
    for (var j = ne(N); N.token === "&"; )
      z(N), j = new m("&", "bitAnd", [j, ne(N)]);
    return j;
  }
  function ne(N) {
    for (var j = [ae(N)], de = [], Q = {
      "==": "equal",
      "!=": "unequal",
      "<": "smaller",
      ">": "larger",
      "<=": "smallerEq",
      ">=": "largerEq"
    }; Ue(Q, N.token); ) {
      var Se = {
        name: N.token,
        fn: Q[N.token]
      };
      de.push(Se), z(N), j.push(ae(N));
    }
    return j.length === 1 ? j[0] : j.length === 2 ? new m(de[0].name, de[0].fn, j) : new v(de.map((pe) => pe.fn), j);
  }
  function ae(N) {
    var j, de, Q, Se;
    j = xe(N);
    for (var pe = {
      "<<": "leftShift",
      ">>": "rightArithShift",
      ">>>": "rightLogShift"
    }; Ue(pe, N.token); )
      de = N.token, Q = pe[de], z(N), Se = [j, xe(N)], j = new m(de, Q, Se);
    return j;
  }
  function xe(N) {
    var j, de, Q, Se;
    j = q(N);
    for (var pe = {
      to: "to",
      in: "to"
      // alias of 'to'
    }; Ue(pe, N.token); )
      de = N.token, Q = pe[de], z(N), de === "in" && "])},;".includes(N.token) ? j = new m("*", "multiply", [j, new S("in")], !0) : (Se = [j, q(N)], j = new m(de, Q, Se));
    return j;
  }
  function q(N) {
    var j, de = [];
    if (N.token === ":" ? j = new u(1) : j = Ae(N), N.token === ":" && N.conditionalLevel !== N.nestingLevel) {
      for (de.push(j); N.token === ":" && de.length < 3; )
        z(N), N.token === ")" || N.token === "]" || N.token === "," || N.token === "" ? de.push(new S("end")) : de.push(Ae(N));
      de.length === 3 ? j = new g(de[0], de[2], de[1]) : j = new g(de[0], de[1]);
    }
    return j;
  }
  function Ae(N) {
    var j, de, Q, Se;
    j = De(N);
    for (var pe = {
      "+": "add",
      "-": "subtract"
    }; Ue(pe, N.token); ) {
      de = N.token, Q = pe[de], z(N);
      var Ee = De(N);
      Ee.isPercentage ? Se = [j, new m("*", "multiply", [j, Ee])] : Se = [j, Ee], j = new m(de, Q, Se);
    }
    return j;
  }
  function De(N) {
    var j, de, Q, Se;
    j = Ne(N), de = j;
    for (var pe = {
      "*": "multiply",
      ".*": "dotMultiply",
      "/": "divide",
      "./": "dotDivide",
      "%": "mod",
      mod: "mod"
    }; Ue(pe, N.token); )
      if (Q = N.token, Se = pe[Q], z(N), Q === "%" && N.tokenType === b.DELIMITER && N.token !== "(")
        if (N.token !== "" && pe[N.token]) {
          var Ee = new m("/", "divide", [j, new u(100)], !1, !0);
          Q = N.token, Se = pe[Q], z(N), de = Ne(N), j = new m(Q, Se, [Ee, de]);
        } else
          j = new m("/", "divide", [j, new u(100)], !1, !0);
      else
        de = Ne(N), j = new m(Q, Se, [j, de]);
    return j;
  }
  function Ne(N) {
    var j, de;
    for (j = we(N), de = j; N.tokenType === b.SYMBOL || N.token === "in" && ht(j) || N.token === "in" && kt(j) && j.fn === "unaryMinus" && ht(j.args[0]) || N.tokenType === b.NUMBER && !ht(de) && (!kt(de) || de.op === "!") || N.token === "("; )
      de = we(N), j = new m(
        "*",
        "multiply",
        [j, de],
        !0
        /* implicit */
      );
    return j;
  }
  function we(N) {
    for (var j = Pe(N), de = j, Q = []; N.token === "/" && Ql(de); )
      if (Q.push(pr({}, N)), z(N), N.tokenType === b.NUMBER)
        if (Q.push(pr({}, N)), z(N), N.tokenType === b.SYMBOL || N.token === "(" || N.token === "in")
          pr(N, Q.pop()), Q.pop(), de = Pe(N), j = new m("/", "divide", [j, de]);
        else {
          Q.pop(), pr(N, Q.pop());
          break;
        }
      else {
        pr(N, Q.pop());
        break;
      }
    return j;
  }
  function Pe(N) {
    var j, de, Q, Se = {
      "-": "unaryMinus",
      "+": "unaryPlus",
      "~": "bitNot",
      not: "not"
    };
    return Ue(Se, N.token) ? (Q = Se[N.token], j = N.token, z(N), de = [Pe(N)], new m(j, Q, de)) : $(N);
  }
  function $(N) {
    var j, de, Q, Se;
    return j = P(N), (N.token === "^" || N.token === ".^") && (de = N.token, Q = de === "^" ? "pow" : "dotPow", z(N), Se = [j, Pe(N)], j = new m(de, Q, Se)), j;
  }
  function P(N) {
    var j, de, Q, Se;
    j = O(N);
    for (var pe = {
      "!": "factorial",
      "'": "ctranspose"
    }; Ue(pe, N.token); )
      de = N.token, Q = pe[de], k(N), Se = [j], j = new m(de, Q, Se), j = H(N, j);
    return j;
  }
  function O(N) {
    var j = [];
    if (N.tokenType === b.SYMBOL && Ue(N.extraNodes, N.token)) {
      var de = N.extraNodes[N.token];
      if (k(N), N.token === "(") {
        if (j = [], V(N), k(N), N.token !== ")")
          for (j.push(J(N)); N.token === ","; )
            k(N), j.push(J(N));
        if (N.token !== ")")
          throw Te(N, "Parenthesis ) expected");
        ee(N), k(N);
      }
      return new de(j);
    }
    return F(N);
  }
  function F(N) {
    var j, de;
    return N.tokenType === b.SYMBOL || N.tokenType === b.DELIMITER && N.token in M ? (de = N.token, k(N), Ue(A, de) ? j = new u(A[de]) : w.includes(de) ? j = new u(t(de, "number")) : j = new S(de), j = H(N, j), j) : X(N);
  }
  function H(N, j, de) {
    for (var Q; N.token === "(" || N.token === "[" || N.token === "."; )
      if (Q = [], N.token === "(")
        if (Zt(j) || hi(j)) {
          if (V(N), k(N), N.token !== ")")
            for (Q.push(J(N)); N.token === ","; )
              k(N), Q.push(J(N));
          if (N.token !== ")")
            throw Te(N, "Parenthesis ) expected");
          ee(N), k(N), j = new f(j, Q);
        } else
          return j;
      else if (N.token === "[") {
        if (V(N), k(N), N.token !== "]")
          for (Q.push(J(N)); N.token === ","; )
            k(N), Q.push(J(N));
        if (N.token !== "]")
          throw Te(N, "Parenthesis ] expected");
        ee(N), k(N), j = new i(j, new h(Q));
      } else {
        k(N);
        var Se = N.tokenType === b.SYMBOL || N.tokenType === b.DELIMITER && N.token in M;
        if (!Se)
          throw Te(N, "Property name expected after dot");
        Q.push(new u(N.token)), k(N);
        var pe = !0;
        j = new i(j, new h(Q, pe));
      }
    return j;
  }
  function X(N) {
    var j, de;
    return N.token === '"' || N.token === "'" ? (de = K(N, N.token), j = new u(de), j = H(N, j), j) : se(N);
  }
  function K(N, j) {
    for (var de = ""; R(N) !== "" && R(N) !== j; )
      if (R(N) === "\\") {
        B(N);
        var Q = R(N), Se = E[Q];
        if (Se !== void 0)
          de += Se, N.index += 1;
        else if (Q === "u") {
          var pe = N.expression.slice(N.index + 1, N.index + 5);
          if (/^[0-9A-Fa-f]{4}$/.test(pe))
            de += String.fromCharCode(parseInt(pe, 16)), N.index += 5;
          else
            throw Te(N, "Invalid unicode character \\u".concat(pe));
        } else
          throw Te(N, "Bad escape character \\".concat(Q));
      } else
        de += R(N), B(N);
    if (k(N), N.token !== j)
      throw Te(N, "End of string ".concat(j, " expected"));
    return k(N), de;
  }
  function se(N) {
    var j, de, Q, Se;
    if (N.token === "[") {
      if (V(N), k(N), N.token !== "]") {
        var pe = le(N);
        if (N.token === ";") {
          for (Q = 1, de = [pe]; N.token === ";"; )
            k(N), N.token !== "]" && (de[Q] = le(N), Q++);
          if (N.token !== "]")
            throw Te(N, "End of matrix ] expected");
          ee(N), k(N), Se = de[0].items.length;
          for (var Ee = 1; Ee < Q; Ee++)
            if (de[Ee].items.length !== Se)
              throw Fe(N, "Column dimensions mismatch (" + de[Ee].items.length + " !== " + Se + ")");
          j = new a(de);
        } else {
          if (N.token !== "]")
            throw Te(N, "End of matrix ] expected");
          ee(N), k(N), j = pe;
        }
      } else
        ee(N), k(N), j = new a([]);
      return H(N, j);
    }
    return ge(N);
  }
  function le(N) {
    for (var j = [J(N)], de = 1; N.token === ","; )
      k(N), N.token !== "]" && N.token !== ";" && (j[de] = J(N), de++);
    return new a(j);
  }
  function ge(N) {
    if (N.token === "{") {
      V(N);
      var j, de = {};
      do
        if (k(N), N.token !== "}") {
          if (N.token === '"' || N.token === "'")
            j = K(N, N.token);
          else if (N.tokenType === b.SYMBOL || N.tokenType === b.DELIMITER && N.token in M)
            j = N.token, k(N);
          else
            throw Te(N, "Symbol or string expected as object key");
          if (N.token !== ":")
            throw Te(N, "Colon : expected after object key");
          k(N), de[j] = J(N);
        }
      while (N.token === ",");
      if (N.token !== "}")
        throw Te(N, "Comma , or bracket } expected after object value");
      ee(N), k(N);
      var Q = new d(de);
      return Q = H(N, Q), Q;
    }
    return be(N);
  }
  function be(N) {
    var j;
    if (N.tokenType === b.NUMBER) {
      j = N.token, k(N);
      var de = xi(j, n), Q = t(j, de);
      return new u(Q);
    }
    return he(N);
  }
  function he(N) {
    var j;
    if (N.token === "(") {
      if (V(N), k(N), j = J(N), N.token !== ")")
        throw Te(N, "Parenthesis ) expected");
      return ee(N), k(N), j = new p(j), j = H(N, j), j;
    }
    return ye(N);
  }
  function ye(N) {
    throw N.token === "" ? Te(N, "Unexpected end of expression") : Te(N, "Value expected");
  }
  function Oe(N) {
    return N.index - N.token.length + 1;
  }
  function Te(N, j) {
    var de = Oe(N), Q = new SyntaxError(j + " (char " + de + ")");
    return Q.char = de, Q;
  }
  function Fe(N, j) {
    var de = Oe(N), Q = new SyntaxError(j + " (char " + de + ")");
    return Q.char = de, Q;
  }
  return e.addConversion({
    from: "string",
    to: "Node",
    convert: x
  }), x;
}), Dp = "compile", RT = ["typed", "parse"], FT = /* @__PURE__ */ W(Dp, RT, (r) => {
  var {
    typed: e,
    parse: t
  } = r;
  return e(Dp, {
    string: function(i) {
      return t(i).compile();
    },
    "Array | Matrix": function(i) {
      return nt(i, function(a) {
        return t(a).compile();
      });
    }
  });
}), Cp = "evaluate", OT = ["typed", "parse"], PT = /* @__PURE__ */ W(Cp, OT, (r) => {
  var {
    typed: e,
    parse: t
  } = r;
  return e(Cp, {
    string: function(i) {
      var a = As();
      return t(i).compile().evaluate(a);
    },
    "string, Map | Object": function(i, a) {
      return t(i).compile().evaluate(a);
    },
    "Array | Matrix": function(i) {
      var a = As();
      return nt(i, function(s) {
        return t(s).compile().evaluate(a);
      });
    },
    "Array | Matrix, Map | Object": function(i, a) {
      return nt(i, function(s) {
        return t(s).compile().evaluate(a);
      });
    }
  });
}), BT = "Parser", IT = ["evaluate", "parse"], LT = /* @__PURE__ */ W(BT, IT, (r) => {
  var {
    evaluate: e,
    parse: t
  } = r;
  function n() {
    if (!(this instanceof n))
      throw new SyntaxError("Constructor must be called with the new operator");
    Object.defineProperty(this, "scope", {
      value: As(),
      writable: !1
    });
  }
  n.prototype.type = "Parser", n.prototype.isParser = !0, n.prototype.evaluate = function(a) {
    return e(a, this.scope);
  }, n.prototype.get = function(a) {
    if (this.scope.has(a))
      return this.scope.get(a);
  }, n.prototype.getAll = function() {
    return mx(this.scope);
  }, n.prototype.getAllAsMap = function() {
    return this.scope;
  };
  function i(a) {
    if (a.length === 0)
      return !1;
    for (var s = 0; s < a.length; s++) {
      var o = a.charAt(s - 1), l = a.charAt(s), u = a.charAt(s + 1), c = t.isAlpha(l, o, u) || s > 0 && t.isDigit(l);
      if (!c)
        return !1;
    }
    return !0;
  }
  return n.prototype.set = function(a, s) {
    if (!i(a))
      throw new Error("Invalid variable name: '".concat(a, "'. Variable names must follow the specified rules."));
    return this.scope.set(a, s), s;
  }, n.prototype.remove = function(a) {
    this.scope.delete(a);
  }, n.prototype.clear = function() {
    this.scope.clear();
  }, n;
}, {
  isClass: !0
}), Tp = "parser", UT = ["typed", "Parser"], zT = /* @__PURE__ */ W(Tp, UT, (r) => {
  var {
    typed: e,
    Parser: t
  } = r;
  return e(Tp, {
    "": function() {
      return new t();
    }
  });
}), Np = "lup", kT = ["typed", "matrix", "abs", "addScalar", "divideScalar", "multiplyScalar", "subtractScalar", "larger", "equalScalar", "unaryMinus", "DenseMatrix", "SparseMatrix", "Spa"], HT = /* @__PURE__ */ W(Np, kT, (r) => {
  var {
    typed: e,
    matrix: t,
    abs: n,
    addScalar: i,
    divideScalar: a,
    multiplyScalar: s,
    subtractScalar: o,
    larger: l,
    equalScalar: u,
    unaryMinus: c,
    DenseMatrix: f,
    SparseMatrix: h,
    Spa: d
  } = r;
  return e(Np, {
    DenseMatrix: function(v) {
      return m(v);
    },
    SparseMatrix: function(v) {
      return p(v);
    },
    Array: function(v) {
      var S = t(v), x = m(S);
      return {
        L: x.L.valueOf(),
        U: x.U.valueOf(),
        p: x.p
      };
    }
  });
  function m(g) {
    var v = g._size[0], S = g._size[1], x = Math.min(v, S), y = Ye(g._data), b = [], _ = [v, x], M = [], A = [x, S], w, E, D, T = [];
    for (w = 0; w < v; w++)
      T[w] = w;
    for (E = 0; E < S; E++) {
      if (E > 0)
        for (w = 0; w < v; w++) {
          var R = Math.min(w, E), B = 0;
          for (D = 0; D < R; D++)
            B = i(B, s(y[w][D], y[D][E]));
          y[w][E] = o(y[w][E], B);
        }
      var I = E, C = 0, k = 0;
      for (w = E; w < v; w++) {
        var z = y[w][E], V = n(z);
        l(V, C) && (I = w, C = V, k = z);
      }
      if (E !== I && (T[E] = [T[I], T[I] = T[E]][0], f._swapRows(E, I, y)), E < v)
        for (w = E + 1; w < v; w++) {
          var ee = y[w][E];
          u(ee, 0) || (y[w][E] = a(y[w][E], k));
        }
    }
    for (E = 0; E < S; E++)
      for (w = 0; w < v; w++) {
        if (E === 0 && (w < S && (M[w] = []), b[w] = []), w < E) {
          w < S && (M[w][E] = y[w][E]), E < v && (b[w][E] = 0);
          continue;
        }
        if (w === E) {
          w < S && (M[w][E] = y[w][E]), E < v && (b[w][E] = 1);
          continue;
        }
        w < S && (M[w][E] = 0), E < v && (b[w][E] = y[w][E]);
      }
    var re = new f({
      data: b,
      size: _
    }), L = new f({
      data: M,
      size: A
    }), J = [];
    for (w = 0, x = T.length; w < x; w++)
      J[T[w]] = w;
    return {
      L: re,
      U: L,
      p: J,
      toString: function() {
        return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
P: ` + this.p;
      }
    };
  }
  function p(g) {
    var v = g._size[0], S = g._size[1], x = Math.min(v, S), y = g._values, b = g._index, _ = g._ptr, M = [], A = [], w = [], E = [v, x], D = [], T = [], R = [], B = [x, S], I, C, k, z = [], V = [];
    for (I = 0; I < v; I++)
      z[I] = I, V[I] = I;
    var ee = function(J, U) {
      var ue = V[J], oe = V[U];
      z[ue] = U, z[oe] = J, V[J] = oe, V[U] = ue;
    }, re = function() {
      var J = new d();
      C < v && (w.push(M.length), M.push(1), A.push(C)), R.push(D.length);
      var U = _[C], ue = _[C + 1];
      for (k = U; k < ue; k++)
        I = b[k], J.set(z[I], y[k]);
      C > 0 && J.forEach(0, C - 1, function(Z, te) {
        h._forEachRow(Z, M, A, w, function(ne, ae) {
          ne > Z && J.accumulate(ne, c(s(ae, te)));
        });
      });
      var oe = C, ie = J.get(C), G = n(ie);
      J.forEach(C + 1, v - 1, function(Z, te) {
        var ne = n(te);
        l(ne, G) && (oe = Z, G = ne, ie = te);
      }), C !== oe && (h._swapRows(C, oe, E[1], M, A, w), h._swapRows(C, oe, B[1], D, T, R), J.swap(C, oe), ee(C, oe)), J.forEach(0, v - 1, function(Z, te) {
        Z <= C ? (D.push(te), T.push(Z)) : (te = a(te, ie), u(te, 0) || (M.push(te), A.push(Z)));
      });
    };
    for (C = 0; C < S; C++)
      re();
    return R.push(D.length), w.push(M.length), {
      L: new h({
        values: M,
        index: A,
        ptr: w,
        size: E
      }),
      U: new h({
        values: D,
        index: T,
        ptr: R,
        size: B
      }),
      p: z,
      toString: function() {
        return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
P: ` + this.p;
      }
    };
  }
}), Rp = "qr", GT = ["typed", "matrix", "zeros", "identity", "isZero", "equal", "sign", "sqrt", "conj", "unaryMinus", "addScalar", "divideScalar", "multiplyScalar", "subtractScalar", "complex"], $T = /* @__PURE__ */ W(Rp, GT, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    identity: i,
    isZero: a,
    equal: s,
    sign: o,
    sqrt: l,
    conj: u,
    unaryMinus: c,
    addScalar: f,
    divideScalar: h,
    multiplyScalar: d,
    subtractScalar: m,
    complex: p
  } = r;
  return pr(e(Rp, {
    DenseMatrix: function(y) {
      return v(y);
    },
    SparseMatrix: function(y) {
      return S();
    },
    Array: function(y) {
      var b = t(y), _ = v(b);
      return {
        Q: _.Q.valueOf(),
        R: _.R.valueOf()
      };
    }
  }), {
    _denseQRimpl: g
  });
  function g(x) {
    var y = x._size[0], b = x._size[1], _ = i([y], "dense"), M = _._data, A = x.clone(), w = A._data, E, D, T, R = n([y], "");
    for (T = 0; T < Math.min(b, y); ++T) {
      var B = w[T][T], I = c(s(B, 0) ? 1 : o(B)), C = u(I), k = 0;
      for (E = T; E < y; E++)
        k = f(k, d(w[E][T], u(w[E][T])));
      var z = d(I, l(k));
      if (!a(z)) {
        var V = m(B, z);
        for (R[T] = 1, E = T + 1; E < y; E++)
          R[E] = h(w[E][T], V);
        var ee = c(u(h(V, z))), re = void 0;
        for (D = T; D < b; D++) {
          for (re = 0, E = T; E < y; E++)
            re = f(re, d(u(R[E]), w[E][D]));
          for (re = d(re, ee), E = T; E < y; E++)
            w[E][D] = d(m(w[E][D], d(R[E], re)), C);
        }
        for (E = 0; E < y; E++) {
          for (re = 0, D = T; D < y; D++)
            re = f(re, d(M[E][D], R[D]));
          for (re = d(re, ee), D = T; D < y; ++D)
            M[E][D] = h(m(M[E][D], d(re, u(R[D]))), C);
        }
      }
    }
    return {
      Q: _,
      R: A,
      toString: function() {
        return "Q: " + this.Q.toString() + `
R: ` + this.R.toString();
      }
    };
  }
  function v(x) {
    var y = g(x), b = y.R._data;
    if (x._data.length > 0)
      for (var _ = b[0][0].type === "Complex" ? p(0) : 0, M = 0; M < b.length; ++M)
        for (var A = 0; A < M && A < (b[0] || []).length; ++A)
          b[M][A] = _;
    return y;
  }
  function S(x) {
    throw new Error("qr not implemented for sparse matrices yet");
  }
});
function VT(r, e, t, n) {
  r._values;
  for (var i = r._index, a = r._ptr, s = r._size, o = r._datatype, l = s[0], u = s[1], c = null, f = [], h = [], d = 0, m = 0; m < u; m++) {
    h[m] = d;
    for (var p = t ? t[m] : m, g = a[p], v = a[p + 1], S = g; S < v; S++) {
      var x = i[S];
      f[d] = x, d++;
    }
  }
  return h[u] = d, r.createSparseMatrix({
    values: c,
    index: f,
    ptr: h,
    size: [l, u],
    datatype: o
  });
}
function oy(r, e, t, n, i, a, s) {
  var o = 0;
  for (t[s] = r; o >= 0; ) {
    var l = t[s + o], u = t[n + l];
    u === -1 ? (o--, a[e++] = l) : (t[n + l] = t[i + u], ++o, t[s + o] = u);
  }
  return e;
}
function qT(r, e) {
  if (!r)
    return null;
  var t = 0, n, i = [], a = [], s = 0, o = e, l = 2 * e;
  for (n = 0; n < e; n++)
    a[s + n] = -1;
  for (n = e - 1; n >= 0; n--)
    r[n] !== -1 && (a[o + n] = a[s + r[n]], a[s + r[n]] = n);
  for (n = 0; n < e; n++)
    r[n] === -1 && (t = oy(n, t, a, s, o, i, l));
  return i;
}
function WT(r, e) {
  if (!r)
    return null;
  var t = r._index, n = r._ptr, i = r._size, a = i[0], s = i[1], o = [], l = [], u = 0, c = s, f, h;
  for (f = 0; f < a; f++)
    l[c + f] = -1;
  for (var d = 0; d < s; d++) {
    o[d] = -1, l[u + d] = -1;
    for (var m = n[d], p = n[d + 1], g = m; g < p; g++) {
      var v = t[g];
      for (f = l[c + v]; f !== -1 && f < d; f = h)
        h = l[u + f], l[u + f] = d, h === -1 && (o[f] = d);
      l[c + v] = d;
    }
  }
  return o;
}
function XT(r, e, t) {
  for (var n = r._values, i = r._index, a = r._ptr, s = r._size, o = s[1], l = 0, u = 0; u < o; u++) {
    var c = a[u];
    for (a[u] = l; c < a[u + 1]; c++)
      e(i[c], u, n ? n[c] : 1, t) && (i[l] = i[c], n && (n[l] = n[c]), l++);
  }
  return a[o] = l, i.splice(l, i.length - l), n && n.splice(l, n.length - l), l;
}
function ri(r) {
  return -r - 2;
}
var YT = "csAmd", ZT = ["add", "multiply", "transpose"], KT = /* @__PURE__ */ W(YT, ZT, (r) => {
  var {
    add: e,
    multiply: t,
    transpose: n
  } = r;
  return function(c, f) {
    if (!f || c <= 0 || c > 3)
      return null;
    var h = f._size, d = h[0], m = h[1], p = 0, g = Math.max(16, 10 * Math.sqrt(m));
    g = Math.min(m - 2, g);
    var v = i(c, f, d, m, g);
    XT(v, l, null);
    for (var S = v._index, x = v._ptr, y = x[m], b = [], _ = [], M = 0, A = m + 1, w = 2 * (m + 1), E = 3 * (m + 1), D = 4 * (m + 1), T = 5 * (m + 1), R = 6 * (m + 1), B = 7 * (m + 1), I = b, C = a(m, x, _, M, E, I, w, B, A, R, D, T), k = s(m, x, _, T, D, R, g, A, E, I, w), z = 0, V, ee, re, L, J, U, ue, oe, ie, G, Z, te, ne, ae, xe, q; k < m; ) {
      for (re = -1; z < m && (re = _[E + z]) === -1; z++) ;
      _[w + re] !== -1 && (I[_[w + re]] = -1), _[E + z] = _[w + re];
      var Ae = _[D + re], De = _[A + re];
      k += De;
      var Ne = 0;
      _[A + re] = -De;
      var we = x[re], Pe = Ae === 0 ? we : y, $ = Pe;
      for (L = 1; L <= Ae + 1; L++) {
        for (L > Ae ? (U = re, ue = we, oe = _[M + re] - Ae) : (U = S[we++], ue = x[U], oe = _[M + U]), J = 1; J <= oe; J++)
          V = S[ue++], !((ie = _[A + V]) <= 0) && (Ne += ie, _[A + V] = -ie, S[$++] = V, _[w + V] !== -1 && (I[_[w + V]] = I[V]), I[V] !== -1 ? _[w + I[V]] = _[w + V] : _[E + _[T + V]] = _[w + V]);
        U !== re && (x[U] = ri(re), _[R + U] = 0);
      }
      for (Ae !== 0 && (y = $), _[T + re] = Ne, x[re] = Pe, _[M + re] = $ - Pe, _[D + re] = -2, C = o(C, p, _, R, m), G = Pe; G < $; G++)
        if (V = S[G], !((Z = _[D + V]) <= 0)) {
          ie = -_[A + V];
          var P = C - ie;
          for (we = x[V], te = x[V] + Z - 1; we <= te; we++)
            U = S[we], _[R + U] >= C ? _[R + U] -= ie : _[R + U] !== 0 && (_[R + U] = _[T + U] + P);
        }
      for (G = Pe; G < $; G++) {
        for (V = S[G], te = x[V], ne = te + _[D + V] - 1, ae = te, xe = 0, q = 0, we = te; we <= ne; we++)
          if (U = S[we], _[R + U] !== 0) {
            var O = _[R + U] - C;
            O > 0 ? (q += O, S[ae++] = U, xe += U) : (x[U] = ri(re), _[R + U] = 0);
          }
        _[D + V] = ae - te + 1;
        var F = ae, H = te + _[M + V];
        for (we = ne + 1; we < H; we++) {
          ee = S[we];
          var X = _[A + ee];
          X <= 0 || (q += X, S[ae++] = ee, xe += ee);
        }
        q === 0 ? (x[V] = ri(re), ie = -_[A + V], Ne -= ie, De += ie, k += ie, _[A + V] = 0, _[D + V] = -1) : (_[T + V] = Math.min(_[T + V], q), S[ae] = S[F], S[F] = S[te], S[te] = re, _[M + V] = ae - te + 1, xe = (xe < 0 ? -xe : xe) % m, _[w + V] = _[B + xe], _[B + xe] = V, I[V] = xe);
      }
      for (_[T + re] = Ne, p = Math.max(p, Ne), C = o(C + p, p, _, R, m), G = Pe; G < $; G++)
        if (V = S[G], !(_[A + V] >= 0))
          for (xe = I[V], V = _[B + xe], _[B + xe] = -1; V !== -1 && _[w + V] !== -1; V = _[w + V], C++) {
            for (oe = _[M + V], Z = _[D + V], we = x[V] + 1; we <= x[V] + oe - 1; we++)
              _[R + S[we]] = C;
            var K = V;
            for (ee = _[w + V]; ee !== -1; ) {
              var se = _[M + ee] === oe && _[D + ee] === Z;
              for (we = x[ee] + 1; se && we <= x[ee] + oe - 1; we++)
                _[R + S[we]] !== C && (se = 0);
              se ? (x[ee] = ri(V), _[A + V] += _[A + ee], _[A + ee] = 0, _[D + ee] = -1, ee = _[w + ee], _[w + K] = ee) : (K = ee, ee = _[w + ee]);
            }
          }
      for (we = Pe, G = Pe; G < $; G++)
        V = S[G], !((ie = -_[A + V]) <= 0) && (_[A + V] = ie, q = _[T + V] + Ne - ie, q = Math.min(q, m - k - ie), _[E + q] !== -1 && (I[_[E + q]] = V), _[w + V] = _[E + q], I[V] = -1, _[E + q] = V, z = Math.min(z, q), _[T + V] = q, S[we++] = V);
      _[A + re] = De, (_[M + re] = we - Pe) === 0 && (x[re] = -1, _[R + re] = 0), Ae !== 0 && (y = we);
    }
    for (V = 0; V < m; V++)
      x[V] = ri(x[V]);
    for (ee = 0; ee <= m; ee++)
      _[E + ee] = -1;
    for (ee = m; ee >= 0; ee--)
      _[A + ee] > 0 || (_[w + ee] = _[E + x[ee]], _[E + x[ee]] = ee);
    for (U = m; U >= 0; U--)
      _[A + U] <= 0 || x[U] !== -1 && (_[w + U] = _[E + x[U]], _[E + x[U]] = U);
    for (re = 0, V = 0; V <= m; V++)
      x[V] === -1 && (re = oy(V, re, _, E, w, b, R));
    return b.splice(b.length - 1, 1), b;
  };
  function i(u, c, f, h, d) {
    var m = n(c);
    if (u === 1 && h === f)
      return e(c, m);
    if (u === 2) {
      for (var p = m._index, g = m._ptr, v = 0, S = 0; S < f; S++) {
        var x = g[S];
        if (g[S] = v, !(g[S + 1] - x > d))
          for (var y = g[S + 1]; x < y; x++)
            p[v++] = p[x];
      }
      return g[f] = v, c = n(m), t(m, c);
    }
    return t(m, c);
  }
  function a(u, c, f, h, d, m, p, g, v, S, x, y) {
    for (var b = 0; b < u; b++)
      f[h + b] = c[b + 1] - c[b];
    f[h + u] = 0;
    for (var _ = 0; _ <= u; _++)
      f[d + _] = -1, m[_] = -1, f[p + _] = -1, f[g + _] = -1, f[v + _] = 1, f[S + _] = 1, f[x + _] = 0, f[y + _] = f[h + _];
    var M = o(0, 0, f, S, u);
    return f[x + u] = -2, c[u] = -1, f[S + u] = 0, M;
  }
  function s(u, c, f, h, d, m, p, g, v, S, x) {
    for (var y = 0, b = 0; b < u; b++) {
      var _ = f[h + b];
      if (_ === 0)
        f[d + b] = -2, y++, c[b] = -1, f[m + b] = 0;
      else if (_ > p)
        f[g + b] = 0, f[d + b] = -1, y++, c[b] = ri(u), f[g + u]++;
      else {
        var M = f[v + _];
        M !== -1 && (S[M] = b), f[x + b] = f[v + _], f[v + _] = b;
      }
    }
    return y;
  }
  function o(u, c, f, h, d) {
    if (u < 2 || u + c < 0) {
      for (var m = 0; m < d; m++)
        f[h + m] !== 0 && (f[h + m] = 1);
      u = 2;
    }
    return u;
  }
  function l(u, c) {
    return u !== c;
  }
});
function JT(r, e, t, n, i, a, s) {
  var o, l, u = 0, c;
  if (r <= e || t[n + e] <= t[i + r])
    return -1;
  t[i + r] = t[n + e];
  var f = t[a + r];
  if (t[a + r] = e, f === -1)
    u = 1, c = r;
  else {
    for (u = 2, c = f; c !== t[s + c]; c = t[s + c]) ;
    for (o = f; o !== c; o = l)
      l = t[s + o], t[s + o] = c;
  }
  return {
    jleaf: u,
    q: c
  };
}
var QT = "csCounts", jT = ["transpose"], eN = /* @__PURE__ */ W(QT, jT, (r) => {
  var {
    transpose: e
  } = r;
  return function(t, n, i, a) {
    if (!t || !n || !i)
      return null;
    var s = t._size, o = s[0], l = s[1], u, c, f, h, d, m, p, g = 4 * l + (a ? l + o + 1 : 0), v = [], S = 0, x = l, y = 2 * l, b = 3 * l, _ = 4 * l, M = 5 * l + 1;
    for (f = 0; f < g; f++)
      v[f] = -1;
    var A = [], w = e(t), E = w._index, D = w._ptr;
    for (f = 0; f < l; f++)
      for (c = i[f], A[c] = v[b + c] === -1 ? 1 : 0; c !== -1 && v[b + c] === -1; c = n[c])
        v[b + c] = f;
    if (a) {
      for (f = 0; f < l; f++)
        v[i[f]] = f;
      for (u = 0; u < o; u++) {
        for (f = l, m = D[u], p = D[u + 1], d = m; d < p; d++)
          f = Math.min(f, v[E[d]]);
        v[M + u] = v[_ + f], v[_ + f] = u;
      }
    }
    for (u = 0; u < l; u++)
      v[S + u] = u;
    for (f = 0; f < l; f++) {
      for (c = i[f], n[c] !== -1 && A[n[c]]--, h = a ? v[_ + f] : c; h !== -1; h = a ? v[M + h] : -1)
        for (d = D[h]; d < D[h + 1]; d++) {
          u = E[d];
          var T = JT(u, c, v, b, x, y, S);
          T.jleaf >= 1 && A[c]++, T.jleaf === 2 && A[T.q]--;
        }
      n[c] !== -1 && (v[S + c] = n[c]);
    }
    for (c = 0; c < l; c++)
      n[c] !== -1 && (A[n[c]] += A[c]);
    return A;
  };
}), tN = "csSqr", rN = ["add", "multiply", "transpose"], nN = /* @__PURE__ */ W(tN, rN, (r) => {
  var {
    add: e,
    multiply: t,
    transpose: n
  } = r, i = KT({
    add: e,
    multiply: t,
    transpose: n
  }), a = eN({
    transpose: n
  });
  return function(l, u, c) {
    var f = u._ptr, h = u._size, d = h[1], m, p = {};
    if (p.q = i(l, u), l && !p.q)
      return null;
    if (c) {
      var g = l ? VT(u, null, p.q) : u;
      p.parent = WT(g);
      var v = qT(p.parent, d);
      if (p.cp = a(g, p.parent, v, 1), g && p.parent && p.cp && s(g, p))
        for (p.unz = 0, m = 0; m < d; m++)
          p.unz += p.cp[m];
    } else
      p.unz = 4 * f[d] + d, p.lnz = p.unz;
    return p;
  };
  function s(o, l) {
    var u = o._ptr, c = o._index, f = o._size, h = f[0], d = f[1];
    l.pinv = [], l.leftmost = [];
    var m = l.parent, p = l.pinv, g = l.leftmost, v = [], S = 0, x = h, y = h + d, b = h + 2 * d, _, M, A, w, E;
    for (M = 0; M < d; M++)
      v[x + M] = -1, v[y + M] = -1, v[b + M] = 0;
    for (_ = 0; _ < h; _++)
      g[_] = -1;
    for (M = d - 1; M >= 0; M--)
      for (w = u[M], E = u[M + 1], A = w; A < E; A++)
        g[c[A]] = M;
    for (_ = h - 1; _ >= 0; _--)
      p[_] = -1, M = g[_], M !== -1 && (v[b + M]++ === 0 && (v[y + M] = _), v[S + _] = v[x + M], v[x + M] = _);
    for (l.lnz = 0, l.m2 = h, M = 0; M < d; M++)
      if (_ = v[x + M], l.lnz++, _ < 0 && (_ = l.m2++), p[_] = M, !(--b[M] <= 0)) {
        l.lnz += v[b + M];
        var D = m[M];
        D !== -1 && (v[b + D] === 0 && (v[y + D] = v[y + M]), v[S + v[y + M]] = v[x + D], v[x + D] = v[S + _], v[b + D] += v[b + M]);
      }
    for (_ = 0; _ < h; _++)
      p[_] < 0 && (p[_] = M++);
    return !0;
  }
});
function xc(r, e) {
  return r[e] < 0;
}
function uy(r, e) {
  r[e] = ri(r[e]);
}
function Fp(r) {
  return r < 0 ? ri(r) : r;
}
function iN(r, e, t, n, i) {
  var a = e._index, s = e._ptr, o = e._size, l = o[1], u, c, f, h = 0;
  for (n[0] = r; h >= 0; ) {
    r = n[h];
    var d = i ? i[r] : r;
    xc(s, r) || (uy(s, r), n[l + h] = d < 0 ? 0 : Fp(s[d]));
    var m = 1;
    for (c = n[l + h], f = d < 0 ? 0 : Fp(s[d + 1]); c < f; c++)
      if (u = a[c], !xc(s, u)) {
        n[l + h] = c, n[++h] = u, m = 0;
        break;
      }
    m && (h--, n[--t] = r);
  }
  return t;
}
function aN(r, e, t, n, i) {
  var a = r._ptr, s = r._size, o = e._index, l = e._ptr, u = s[1], c, f, h, d = u;
  for (f = l[t], h = l[t + 1], c = f; c < h; c++) {
    var m = o[c];
    xc(a, m) || (d = iN(m, r, d, n, i));
  }
  for (c = d; c < u; c++)
    uy(a, n[c]);
  return d;
}
var sN = "csSpsolve", oN = ["divideScalar", "multiply", "subtract"], uN = /* @__PURE__ */ W(sN, oN, (r) => {
  var {
    divideScalar: e,
    multiply: t,
    subtract: n
  } = r;
  return function(a, s, o, l, u, c, f) {
    var h = a._values, d = a._index, m = a._ptr, p = a._size, g = p[1], v = s._values, S = s._index, x = s._ptr, y, b, _, M, A = aN(a, s, o, l, c);
    for (y = A; y < g; y++)
      u[l[y]] = 0;
    for (b = x[o], _ = x[o + 1], y = b; y < _; y++)
      u[S[y]] = v[y];
    for (var w = A; w < g; w++) {
      var E = l[w], D = c ? c[E] : E;
      if (!(D < 0))
        for (b = m[D], _ = m[D + 1], u[E] = e(u[E], h[f ? b : _ - 1]), y = f ? b + 1 : b, M = f ? _ : _ - 1; y < M; y++) {
          var T = d[y];
          u[T] = n(u[T], t(h[y], u[E]));
        }
    }
    return A;
  };
}), lN = "csLu", cN = ["abs", "divideScalar", "multiply", "subtract", "larger", "largerEq", "SparseMatrix"], fN = /* @__PURE__ */ W(lN, cN, (r) => {
  var {
    abs: e,
    divideScalar: t,
    multiply: n,
    subtract: i,
    larger: a,
    largerEq: s,
    SparseMatrix: o
  } = r, l = uN({
    divideScalar: t,
    multiply: n,
    subtract: i
  });
  return function(c, f, h) {
    if (!c)
      return null;
    var d = c._size, m = d[1], p, g = 100, v = 100;
    f && (p = f.q, g = f.lnz || g, v = f.unz || v);
    var S = [], x = [], y = [], b = new o({
      values: S,
      index: x,
      ptr: y,
      size: [m, m]
    }), _ = [], M = [], A = [], w = new o({
      values: _,
      index: M,
      ptr: A,
      size: [m, m]
    }), E = [], D, T, R = [], B = [];
    for (D = 0; D < m; D++)
      R[D] = 0, E[D] = -1, y[D + 1] = 0;
    g = 0, v = 0;
    for (var I = 0; I < m; I++) {
      y[I] = g, A[I] = v;
      var C = p ? p[I] : I, k = l(b, c, C, B, R, E, 1), z = -1, V = -1;
      for (T = k; T < m; T++)
        if (D = B[T], E[D] < 0) {
          var ee = e(R[D]);
          a(ee, V) && (V = ee, z = D);
        } else
          M[v] = E[D], _[v++] = R[D];
      if (z === -1 || V <= 0)
        return null;
      E[C] < 0 && s(e(R[C]), n(V, h)) && (z = C);
      var re = R[z];
      for (M[v] = I, _[v++] = re, E[z] = I, x[g] = z, S[g++] = 1, T = k; T < m; T++)
        D = B[T], E[D] < 0 && (x[g] = D, S[g++] = t(R[D], re)), R[D] = 0;
    }
    for (y[m] = g, A[m] = v, T = 0; T < g; T++)
      x[T] = E[x[T]];
    return S.splice(g, S.length - g), x.splice(g, x.length - g), _.splice(v, _.length - v), M.splice(v, M.length - v), {
      L: b,
      U: w,
      pinv: E
    };
  };
}), Op = "slu", hN = ["typed", "abs", "add", "multiply", "transpose", "divideScalar", "subtract", "larger", "largerEq", "SparseMatrix"], dN = /* @__PURE__ */ W(Op, hN, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    multiply: i,
    transpose: a,
    divideScalar: s,
    subtract: o,
    larger: l,
    largerEq: u,
    SparseMatrix: c
  } = r, f = nN({
    add: n,
    multiply: i,
    transpose: a
  }), h = fN({
    abs: t,
    divideScalar: s,
    multiply: i,
    subtract: o,
    larger: l,
    largerEq: u,
    SparseMatrix: c
  });
  return e(Op, {
    "SparseMatrix, number, number": function(m, p, g) {
      if (!$e(p) || p < 0 || p > 3)
        throw new Error("Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]");
      if (g < 0 || g > 1)
        throw new Error("Partial pivoting threshold must be a number from 0 to 1");
      var v = f(p, m, !1), S = h(m, v, g);
      return {
        L: S.L,
        U: S.U,
        p: S.pinv,
        q: v.q,
        toString: function() {
          return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
p: ` + this.p.toString() + (this.q ? `
q: ` + this.q.toString() : "") + `
`;
        }
      };
    }
  });
});
function Pp(r, e) {
  var t, n = e.length, i = [];
  if (r)
    for (t = 0; t < n; t++)
      i[r[t]] = e[t];
  else
    for (t = 0; t < n; t++)
      i[t] = e[t];
  return i;
}
var Bp = "lusolve", mN = ["typed", "matrix", "lup", "slu", "usolve", "lsolve", "DenseMatrix"], pN = /* @__PURE__ */ W(Bp, mN, (r) => {
  var {
    typed: e,
    matrix: t,
    lup: n,
    slu: i,
    usolve: a,
    lsolve: s,
    DenseMatrix: o
  } = r, l = ks({
    DenseMatrix: o
  });
  return e(Bp, {
    "Array, Array | Matrix": function(h, d) {
      h = t(h);
      var m = n(h), p = c(m.L, m.U, m.p, null, d);
      return p.valueOf();
    },
    "DenseMatrix, Array | Matrix": function(h, d) {
      var m = n(h);
      return c(m.L, m.U, m.p, null, d);
    },
    "SparseMatrix, Array | Matrix": function(h, d) {
      var m = n(h);
      return c(m.L, m.U, m.p, null, d);
    },
    "SparseMatrix, Array | Matrix, number, number": function(h, d, m, p) {
      var g = i(h, m, p);
      return c(g.L, g.U, g.p, g.q, d);
    },
    "Object, Array | Matrix": function(h, d) {
      return c(h.L, h.U, h.p, h.q, d);
    }
  });
  function u(f) {
    if (Ve(f))
      return f;
    if (Mt(f))
      return t(f);
    throw new TypeError("Invalid Matrix LU decomposition");
  }
  function c(f, h, d, m, p) {
    f = u(f), h = u(h), d && (p = l(f, p, !0), p._data = Pp(d, p._data));
    var g = s(f, p), v = a(h, g);
    return m && (v._data = Pp(m, v._data)), v;
  }
}), Ip = "polynomialRoot", vN = ["typed", "isZero", "equalScalar", "add", "subtract", "multiply", "divide", "sqrt", "unaryMinus", "cbrt", "typeOf", "im", "re"], gN = /* @__PURE__ */ W(Ip, vN, (r) => {
  var {
    typed: e,
    isZero: t,
    equalScalar: n,
    add: i,
    subtract: a,
    multiply: s,
    divide: o,
    sqrt: l,
    unaryMinus: u,
    cbrt: c,
    typeOf: f,
    im: h,
    re: d
  } = r;
  return e(Ip, {
    "number|Complex, ...number|Complex": (m, p) => {
      for (var g = [m, ...p]; g.length > 0 && t(g[g.length - 1]); )
        g.pop();
      if (g.length < 2)
        throw new RangeError("Polynomial [".concat(m, ", ").concat(p, "] must have a non-zero non-constant coefficient"));
      switch (g.length) {
        case 2:
          return [u(o(g[0], g[1]))];
        case 3: {
          var [v, S, x] = g, y = s(2, x), b = s(S, S), _ = s(4, x, v);
          if (n(b, _)) return [o(u(S), y)];
          var M = l(a(b, _));
          return [o(a(M, S), y), o(a(u(M), S), y)];
        }
        case 4: {
          var [A, w, E, D] = g, T = u(s(3, D)), R = s(E, E), B = s(3, D, w), I = i(s(2, E, E, E), s(27, D, D, A)), C = s(9, D, E, w);
          if (n(R, B) && n(I, C))
            return [o(E, T)];
          var k = a(R, B), z = a(I, C), V = i(s(18, D, E, w, A), s(E, E, w, w)), ee = i(s(4, E, E, E, A), s(4, D, w, w, w), s(27, D, D, A, A));
          if (n(V, ee))
            return [
              o(a(s(4, D, E, w), i(s(9, D, D, A), s(E, E, E))), s(D, k)),
              // simple root
              o(a(s(9, D, A), s(E, w)), s(2, k))
              // double root
            ];
          var re;
          n(R, B) ? re = z : re = o(i(z, l(a(s(z, z), s(4, k, k, k)))), 2);
          var L = !0, J = c(re, L).toArray().map((U) => o(i(E, U, o(k, U)), T));
          return J.map((U) => f(U) === "Complex" && n(d(U), d(U) + h(U)) ? d(U) : U);
        }
        default:
          throw new RangeError("only implemented for cubic or lower-order polynomials, not ".concat(g));
      }
    }
  });
}), yN = "Help", xN = ["evaluate"], _N = /* @__PURE__ */ W(yN, xN, (r) => {
  var {
    evaluate: e
  } = r;
  function t(n) {
    if (!(this instanceof t))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!n) throw new Error('Argument "doc" missing');
    this.doc = n;
  }
  return t.prototype.type = "Help", t.prototype.isHelp = !0, t.prototype.toString = function() {
    var n = this.doc || {}, i = `
`;
    if (n.name && (i += "Name: " + n.name + `

`), n.category && (i += "Category: " + n.category + `

`), n.description && (i += `Description:
    ` + n.description + `

`), n.syntax && (i += `Syntax:
    ` + n.syntax.join(`
    `) + `

`), n.examples) {
      i += `Examples:
`;
      for (var a = !1, s = e("config()"), o = {
        config: (f) => (a = !0, e("config(newConfig)", {
          newConfig: f
        }))
      }, l = 0; l < n.examples.length; l++) {
        var u = n.examples[l];
        i += "    " + u + `
`;
        var c = void 0;
        try {
          c = e(u, o);
        } catch (f) {
          c = f;
        }
        c !== void 0 && !pf(c) && (i += "        " + lt(c, {
          precision: 14
        }) + `
`);
      }
      i += `
`, a && e("config(originalConfig)", {
        originalConfig: s
      });
    }
    return n.mayThrow && n.mayThrow.length && (i += "Throws: " + n.mayThrow.join(", ") + `

`), n.seealso && n.seealso.length && (i += "See also: " + n.seealso.join(", ") + `
`), i;
  }, t.prototype.toJSON = function() {
    var n = Ye(this.doc);
    return n.mathjs = "Help", n;
  }, t.fromJSON = function(n) {
    var i = {};
    return Object.keys(n).filter((a) => a !== "mathjs").forEach((a) => {
      i[a] = n[a];
    }), new t(i);
  }, t.prototype.valueOf = t.prototype.toString, t;
}, {
  isClass: !0
}), bN = "Chain", wN = ["?on", "math", "typed"], SN = /* @__PURE__ */ W(bN, wN, (r) => {
  var {
    on: e,
    math: t,
    typed: n
  } = r;
  function i(u) {
    if (!(this instanceof i))
      throw new SyntaxError("Constructor must be called with the new operator");
    vf(u) ? this.value = u.value : this.value = u;
  }
  i.prototype.type = "Chain", i.prototype.isChain = !0, i.prototype.done = function() {
    return this.value;
  }, i.prototype.valueOf = function() {
    return this.value;
  }, i.prototype.toString = function() {
    return lt(this.value);
  }, i.prototype.toJSON = function() {
    return {
      mathjs: "Chain",
      value: this.value
    };
  }, i.fromJSON = function(u) {
    return new i(u.value);
  };
  function a(u, c) {
    typeof c == "function" && (i.prototype[u] = o(c));
  }
  function s(u, c) {
    Pi(i.prototype, u, function() {
      var h = c();
      if (typeof h == "function")
        return o(h);
    });
  }
  function o(u) {
    return function() {
      if (arguments.length === 0)
        return new i(u(this.value));
      for (var c = [this.value], f = 0; f < arguments.length; f++)
        c[f + 1] = arguments[f];
      if (n.isTypedFunction(u)) {
        var h = n.resolve(u, c);
        if (h.params.length === 1)
          throw new Error("chain function " + u.name + " cannot match rest parameter between chain value and additional arguments.");
        return new i(h.implementation.apply(u, c));
      }
      return new i(u.apply(u, c));
    };
  }
  i.createProxy = function(u, c) {
    if (typeof u == "string")
      a(u, c);
    else {
      var f = function(m) {
        Ue(u, m) && l[m] === void 0 && s(m, () => u[m]);
      };
      for (var h in u)
        f(h);
    }
  };
  var l = {
    expression: !0,
    docs: !0,
    type: !0,
    classes: !0,
    json: !0,
    error: !0,
    isChain: !0
    // conflicts with the property isChain of a Chain instance
  };
  return i.createProxy(t), e && e("import", function(u, c, f) {
    f || s(u, c);
  }), i;
}, {
  isClass: !0
}), Lp = {
  name: "e",
  category: "Constants",
  syntax: ["e"],
  description: "Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",
  examples: ["e", "e ^ 2", "exp(2)", "log(e)"],
  seealso: ["exp"]
}, EN = {
  name: "false",
  category: "Constants",
  syntax: ["false"],
  description: "Boolean value false",
  examples: ["false"],
  seealso: ["true"]
}, MN = {
  name: "i",
  category: "Constants",
  syntax: ["i"],
  description: "Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",
  examples: ["i", "i * i", "sqrt(-1)"],
  seealso: []
}, AN = {
  name: "Infinity",
  category: "Constants",
  syntax: ["Infinity"],
  description: "Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",
  examples: ["Infinity", "1 / 0"],
  seealso: []
}, DN = {
  name: "LN10",
  category: "Constants",
  syntax: ["LN10"],
  description: "Returns the natural logarithm of 10, approximately equal to 2.302",
  examples: ["LN10", "log(10)"],
  seealso: []
}, CN = {
  name: "LN2",
  category: "Constants",
  syntax: ["LN2"],
  description: "Returns the natural logarithm of 2, approximately equal to 0.693",
  examples: ["LN2", "log(2)"],
  seealso: []
}, TN = {
  name: "LOG10E",
  category: "Constants",
  syntax: ["LOG10E"],
  description: "Returns the base-10 logarithm of E, approximately equal to 0.434",
  examples: ["LOG10E", "log(e, 10)"],
  seealso: []
}, NN = {
  name: "LOG2E",
  category: "Constants",
  syntax: ["LOG2E"],
  description: "Returns the base-2 logarithm of E, approximately equal to 1.442",
  examples: ["LOG2E", "log(e, 2)"],
  seealso: []
}, RN = {
  name: "NaN",
  category: "Constants",
  syntax: ["NaN"],
  description: "Not a number",
  examples: ["NaN", "0 / 0"],
  seealso: []
}, FN = {
  name: "null",
  category: "Constants",
  syntax: ["null"],
  description: "Value null",
  examples: ["null"],
  seealso: ["true", "false"]
}, ON = {
  name: "phi",
  category: "Constants",
  syntax: ["phi"],
  description: "Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",
  examples: ["phi"],
  seealso: []
}, Up = {
  name: "pi",
  category: "Constants",
  syntax: ["pi"],
  description: "The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",
  examples: ["pi", "sin(pi/2)"],
  seealso: ["tau"]
}, PN = {
  name: "SQRT1_2",
  category: "Constants",
  syntax: ["SQRT1_2"],
  description: "Returns the square root of 1/2, approximately equal to 0.707",
  examples: ["SQRT1_2", "sqrt(1/2)"],
  seealso: []
}, BN = {
  name: "SQRT2",
  category: "Constants",
  syntax: ["SQRT2"],
  description: "Returns the square root of 2, approximately equal to 1.414",
  examples: ["SQRT2", "sqrt(2)"],
  seealso: []
}, IN = {
  name: "tau",
  category: "Constants",
  syntax: ["tau"],
  description: "Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",
  examples: ["tau", "2 * pi"],
  seealso: ["pi"]
}, LN = {
  name: "true",
  category: "Constants",
  syntax: ["true"],
  description: "Boolean value true",
  examples: ["true"],
  seealso: ["false"]
}, UN = {
  name: "version",
  category: "Constants",
  syntax: ["version"],
  description: "A string with the version number of math.js",
  examples: ["version"],
  seealso: []
}, zN = {
  name: "bignumber",
  category: "Construction",
  syntax: ["bignumber(x)"],
  description: "Create a big number from a number or string.",
  examples: ["0.1 + 0.2", "bignumber(0.1) + bignumber(0.2)", 'bignumber("7.2")', 'bignumber("7.2e500")', "bignumber([0.1, 0.2, 0.3])"],
  seealso: ["boolean", "bigint", "complex", "fraction", "index", "matrix", "string", "unit"]
}, kN = {
  name: "bigint",
  category: "Construction",
  syntax: ["bigint(x)"],
  description: "Create a bigint, an integer with an arbitrary number of digits, from a number or string.",
  examples: ["123123123123123123 # a large number will lose digits", 'bigint("123123123123123123")', 'bignumber(["1", "3", "5"])'],
  seealso: ["boolean", "bignumber", "number", "complex", "fraction", "index", "matrix", "string", "unit"]
}, HN = {
  name: "boolean",
  category: "Construction",
  syntax: ["x", "boolean(x)"],
  description: "Convert a string or number into a boolean.",
  examples: ["boolean(0)", "boolean(1)", "boolean(3)", 'boolean("true")', 'boolean("false")', "boolean([1, 0, 1, 1])"],
  seealso: ["bignumber", "complex", "index", "matrix", "number", "string", "unit"]
}, GN = {
  name: "complex",
  category: "Construction",
  syntax: ["complex()", "complex(re, im)", "complex(string)"],
  description: "Create a complex number.",
  examples: ["complex()", "complex(2, 3)", 'complex("7 - 2i")'],
  seealso: ["bignumber", "boolean", "index", "matrix", "number", "string", "unit"]
}, $N = {
  name: "createUnit",
  category: "Construction",
  syntax: ["createUnit(definitions)", "createUnit(name, definition)"],
  description: "Create a user-defined unit and register it with the Unit type.",
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ["unit", "splitUnit"]
}, VN = {
  name: "fraction",
  category: "Construction",
  syntax: ["fraction(num)", "fraction(matrix)", "fraction(num,den)", "fraction({n: num, d: den})"],
  description: "Create a fraction from a number or from integer numerator and denominator.",
  examples: ["fraction(0.125)", "fraction(1, 3) + fraction(2, 5)", "fraction({n: 333, d: 53})", "fraction([sqrt(9), sqrt(10), sqrt(11)])"],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "string", "unit"]
}, qN = {
  name: "index",
  category: "Construction",
  syntax: ["[start]", "[start:end]", "[start:step:end]", "[start1, start 2, ...]", "[start1:end1, start2:end2, ...]", "[start1:step1:end1, start2:step2:end2, ...]"],
  description: "Create an index to get or replace a subset of a matrix",
  examples: ["A = [1, 2, 3; 4, 5, 6]", "A[1, :]", "A[1, 2] = 50", "A[1:2, 1:2] = 1", "B = [1, 2, 3]", "B[B>1 and B<3]"],
  seealso: ["bignumber", "boolean", "complex", "matrix", "number", "range", "string", "unit"]
}, WN = {
  name: "matrix",
  category: "Construction",
  syntax: ["[]", "[a1, b1, ...; a2, b2, ...]", "matrix()", 'matrix("dense")', "matrix([...])"],
  description: "Create a matrix.",
  examples: ["[]", "[1, 2, 3]", "[1, 2, 3; 4, 5, 6]", "matrix()", "matrix([3, 4])", 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ["bignumber", "boolean", "complex", "index", "number", "string", "unit", "sparse"]
}, XN = {
  name: "number",
  category: "Construction",
  syntax: ["x", "number(x)", "number(unit, valuelessUnit)"],
  description: "Create a number or convert a string or boolean into a number.",
  examples: ["2", "2e3", "4.05", "number(2)", 'number("7.2")', "number(true)", "number([true, false, true, true])", 'number(unit("52cm"), "m")'],
  seealso: ["bignumber", "bigint", "boolean", "complex", "fraction", "index", "matrix", "string", "unit"]
}, YN = {
  name: "sparse",
  category: "Construction",
  syntax: ["sparse()", "sparse([a1, b1, ...; a1, b2, ...])", 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: "Create a sparse matrix.",
  examples: ["sparse()", "sparse([3, 4; 5, 6])", 'sparse([3, 0; 5, 0], "number")'],
  seealso: ["bignumber", "boolean", "complex", "index", "number", "string", "unit", "matrix"]
}, ZN = {
  name: "splitUnit",
  category: "Construction",
  syntax: ["splitUnit(unit: Unit, parts: Unit[])"],
  description: "Split a unit in an array of units whose sum is equal to the original unit.",
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ["unit", "createUnit"]
}, KN = {
  name: "string",
  category: "Construction",
  syntax: ['"text"', "string(x)"],
  description: "Create a string or convert a value to a string",
  examples: ['"Hello World!"', "string(4.2)", "string(3 + 2i)"],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "unit"]
}, JN = {
  name: "unit",
  category: "Construction",
  syntax: ["value unit", "unit(value, unit)", "unit(string)"],
  description: "Create a unit.",
  examples: ["5.5 mm", "3 inch", 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "string"]
}, QN = {
  name: "config",
  category: "Core",
  syntax: ["config()", "config(options)"],
  description: "Get configuration or change configuration.",
  examples: ["config()", "1/3 + 1/4", 'config({number: "Fraction"})', "1/3 + 1/4"],
  seealso: []
}, jN = {
  name: "import",
  category: "Core",
  syntax: ["import(functions)", "import(functions, options)"],
  description: "Import functions or constants from an object.",
  examples: ["import({myFn: f(x)=x^2, myConstant: 32 })", "myFn(2)", "myConstant"],
  seealso: []
}, e3 = {
  name: "typed",
  category: "Core",
  syntax: ["typed(signatures)", "typed(name, signatures)"],
  description: "Create a typed function.",
  examples: ['double = typed({ "number": f(x)=x+x, "string": f(x)=concat(x,x) })', "double(2)", 'double("hello")'],
  seealso: []
}, t3 = {
  name: "derivative",
  category: "Algebra",
  syntax: ["derivative(expr, variable)", "derivative(expr, variable, {simplify: boolean})"],
  description: "Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', "df = derivative(f, x)", "df.evaluate({x: 3})"],
  seealso: ["simplify", "parse", "evaluate"]
}, r3 = {
  name: "leafCount",
  category: "Algebra",
  syntax: ["leafCount(expr)"],
  description: "Computes the number of leaves in the parse tree of the given expression",
  examples: ['leafCount("e^(i*pi)-1")', 'leafCount(parse("{a: 22/7, b: 10^(1/2)}"))'],
  seealso: ["simplify"]
}, n3 = {
  name: "lsolve",
  category: "Algebra",
  syntax: ["x=lsolve(L, b)"],
  description: "Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lsolve(a, b)"],
  seealso: ["lsolveAll", "lup", "lusolve", "usolve", "matrix", "sparse"]
}, i3 = {
  name: "lsolveAll",
  category: "Algebra",
  syntax: ["x=lsolveAll(L, b)"],
  description: "Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lsolve(a, b)"],
  seealso: ["lsolve", "lup", "lusolve", "usolve", "matrix", "sparse"]
}, a3 = {
  name: "lup",
  category: "Algebra",
  syntax: ["lup(m)"],
  description: "Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",
  examples: ["lup([[2, 1], [1, 4]])", "lup(matrix([[2, 1], [1, 4]]))", "lup(sparse([[2, 1], [1, 4]]))"],
  seealso: ["lusolve", "lsolve", "usolve", "matrix", "sparse", "slu", "qr"]
}, s3 = {
  name: "lusolve",
  category: "Algebra",
  syntax: ["x=lusolve(A, b)", "x=lusolve(lu, b)"],
  description: "Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lusolve(a, b)"],
  seealso: ["lup", "slu", "lsolve", "usolve", "matrix", "sparse"]
}, o3 = {
  name: "polynomialRoot",
  category: "Algebra",
  syntax: ["x=polynomialRoot(-6, 3)", "x=polynomialRoot(4, -4, 1)", "x=polynomialRoot(-8, 12, -6, 1)"],
  description: "Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.",
  examples: ["a = polynomialRoot(-6, 11, -6, 1)"],
  seealso: ["cbrt", "sqrt"]
}, u3 = {
  name: "qr",
  category: "Algebra",
  syntax: ["qr(A)"],
  description: "Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",
  examples: ["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],
  seealso: ["lup", "slu", "matrix"]
}, l3 = {
  name: "rationalize",
  category: "Algebra",
  syntax: ["rationalize(expr)", "rationalize(expr, scope)", "rationalize(expr, scope, detailed)"],
  description: "Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ["simplify"]
}, c3 = {
  name: "resolve",
  category: "Algebra",
  syntax: ["resolve(node, scope)"],
  description: "Recursively substitute variables in an expression tree.",
  examples: ['resolve(parse("1 + x"), { x: 7 })', 'resolve(parse("size(text)"), { text: "Hello World" })', 'resolve(parse("x + y"), { x: parse("3z") })', 'resolve(parse("3x"), { x: parse("y+z"), z: parse("w^y") })'],
  seealso: ["simplify", "evaluate"],
  mayThrow: ["ReferenceError"]
}, f3 = {
  name: "simplify",
  category: "Algebra",
  syntax: ["simplify(expr)", "simplify(expr, rules)"],
  description: "Simplify an expression tree.",
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', "simplified = simplify(f)", "simplified.evaluate({x: 2})"],
  seealso: ["simplifyCore", "derivative", "evaluate", "parse", "rationalize", "resolve"]
}, h3 = {
  name: "simplifyConstant",
  category: "Algebra",
  syntax: ["simplifyConstant(expr)", "simplifyConstant(expr, options)"],
  description: "Replace constant subexpressions of node with their values.",
  examples: ['simplifyConstant("(3-3)*x")', 'simplifyConstant(parse("z-cos(tau/8)"))'],
  seealso: ["simplify", "simplifyCore", "evaluate"]
}, d3 = {
  name: "simplifyCore",
  category: "Algebra",
  syntax: ["simplifyCore(node)"],
  description: "Perform simple one-pass simplifications on an expression tree.",
  examples: ['simplifyCore(parse("0*x"))', 'simplifyCore(parse("(x+0)*2"))'],
  seealso: ["simplify", "simplifyConstant", "evaluate"]
}, m3 = {
  name: "slu",
  category: "Algebra",
  syntax: ["slu(A, order, threshold)"],
  description: "Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",
  examples: ["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],
  seealso: ["lusolve", "lsolve", "usolve", "matrix", "sparse", "lup", "qr"]
}, p3 = {
  name: "symbolicEqual",
  category: "Algebra",
  syntax: ["symbolicEqual(expr1, expr2)", "symbolicEqual(expr1, expr2, options)"],
  description: "Returns true if the difference of the expressions simplifies to 0",
  examples: ['symbolicEqual("x*y","y*x")', 'symbolicEqual("abs(x^2)", "x^2")', 'symbolicEqual("abs(x)", "x", {context: {abs: {trivial: true}}})'],
  seealso: ["simplify", "evaluate"]
}, v3 = {
  name: "usolve",
  category: "Algebra",
  syntax: ["x=usolve(U, b)"],
  description: "Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
  examples: ["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],
  seealso: ["usolveAll", "lup", "lusolve", "lsolve", "matrix", "sparse"]
}, g3 = {
  name: "usolveAll",
  category: "Algebra",
  syntax: ["x=usolve(U, b)"],
  description: "Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
  examples: ["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],
  seealso: ["usolve", "lup", "lusolve", "lsolve", "matrix", "sparse"]
}, y3 = {
  name: "abs",
  category: "Arithmetic",
  syntax: ["abs(x)"],
  description: "Compute the absolute value.",
  examples: ["abs(3.5)", "abs(-4.2)"],
  seealso: ["sign"]
}, x3 = {
  name: "add",
  category: "Operators",
  syntax: ["x + y", "add(x, y)"],
  description: "Add two values.",
  examples: ["a = 2.1 + 3.6", "a - 3.6", "3 + 2i", "3 cm + 2 inch", '"2.3" + "4"'],
  seealso: ["subtract"]
}, _3 = {
  name: "cbrt",
  category: "Arithmetic",
  syntax: ["cbrt(x)", "cbrt(x, allRoots)"],
  description: "Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",
  examples: ["cbrt(64)", "cube(4)", "cbrt(-8)", "cbrt(2 + 3i)", "cbrt(8i)", "cbrt(8i, true)", "cbrt(27 m^3)"],
  seealso: ["square", "sqrt", "cube", "multiply"]
}, b3 = {
  name: "ceil",
  category: "Arithmetic",
  syntax: ["ceil(x)", "ceil(x, n)", "ceil(unit, valuelessUnit)", "ceil(unit, n, valuelessUnit)"],
  description: "Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",
  examples: ["ceil(3.2)", "ceil(3.8)", "ceil(-4.2)", "ceil(3.241cm, cm)", "ceil(3.241cm, 2, cm)"],
  seealso: ["floor", "fix", "round"]
}, w3 = {
  name: "cube",
  category: "Arithmetic",
  syntax: ["cube(x)"],
  description: "Compute the cube of a value. The cube of x is x * x * x.",
  examples: ["cube(2)", "2^3", "2 * 2 * 2"],
  seealso: ["multiply", "square", "pow"]
}, S3 = {
  name: "divide",
  category: "Operators",
  syntax: ["x / y", "divide(x, y)"],
  description: "Divide two values.",
  examples: ["a = 2 / 3", "a * 3", "4.5 / 2", "3 + 4 / 2", "(3 + 4) / 2", "18 km / 4.5"],
  seealso: ["multiply"]
}, E3 = {
  name: "dotDivide",
  category: "Operators",
  syntax: ["x ./ y", "dotDivide(x, y)"],
  description: "Divide two values element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a ./ b"],
  seealso: ["multiply", "dotMultiply", "divide"]
}, M3 = {
  name: "dotMultiply",
  category: "Operators",
  syntax: ["x .* y", "dotMultiply(x, y)"],
  description: "Multiply two values element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a .* b"],
  seealso: ["multiply", "divide", "dotDivide"]
}, A3 = {
  name: "dotPow",
  category: "Operators",
  syntax: ["x .^ y", "dotPow(x, y)"],
  description: "Calculates the power of x to y element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a .^ 2"],
  seealso: ["pow"]
}, D3 = {
  name: "exp",
  category: "Arithmetic",
  syntax: ["exp(x)"],
  description: "Calculate the exponent of a value.",
  examples: ["exp(1.3)", "e ^ 1.3", "log(exp(1.3))", "x = 2.4", "(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],
  seealso: ["expm", "expm1", "pow", "log"]
}, C3 = {
  name: "expm",
  category: "Arithmetic",
  syntax: ["exp(x)"],
  description: "Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",
  examples: ["expm([[0,2],[0,0]])"],
  seealso: ["exp"]
}, T3 = {
  name: "expm1",
  category: "Arithmetic",
  syntax: ["expm1(x)"],
  description: "Calculate the value of subtracting 1 from the exponential value.",
  examples: ["expm1(2)", "pow(e, 2) - 1", "log(expm1(2) + 1)"],
  seealso: ["exp", "pow", "log"]
}, N3 = {
  name: "fix",
  category: "Arithmetic",
  syntax: ["fix(x)", "fix(x, n)", "fix(unit, valuelessUnit)", "fix(unit, n, valuelessUnit)"],
  description: "Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",
  examples: ["fix(3.2)", "fix(3.8)", "fix(-4.2)", "fix(-4.8)", "fix(3.241cm, cm)", "fix(3.241cm, 2, cm)"],
  seealso: ["ceil", "floor", "round"]
}, R3 = {
  name: "floor",
  category: "Arithmetic",
  syntax: ["floor(x)", "floor(x, n)", "floor(unit, valuelessUnit)", "floor(unit, n, valuelessUnit)"],
  description: "Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",
  examples: ["floor(3.2)", "floor(3.8)", "floor(-4.2)", "floor(3.241cm, cm)", "floor(3.241cm, 2, cm)"],
  seealso: ["ceil", "fix", "round"]
}, F3 = {
  name: "gcd",
  category: "Arithmetic",
  syntax: ["gcd(a, b)", "gcd(a, b, c, ...)"],
  description: "Compute the greatest common divisor.",
  examples: ["gcd(8, 12)", "gcd(-4, 6)", "gcd(25, 15, -10)"],
  seealso: ["lcm", "xgcd"]
}, O3 = {
  name: "hypot",
  category: "Arithmetic",
  syntax: ["hypot(a, b, c, ...)", "hypot([a, b, c, ...])"],
  description: "Calculate the hypotenuse of a list with values.",
  examples: ["hypot(3, 4)", "sqrt(3^2 + 4^2)", "hypot(-2)", "hypot([3, 4, 5])"],
  seealso: ["abs", "norm"]
}, P3 = {
  name: "invmod",
  category: "Arithmetic",
  syntax: ["invmod(a, b)"],
  description: "Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)",
  examples: ["invmod(8, 12)", "invmod(7, 13)", "invmod(15151, 15122)"],
  seealso: ["gcd", "xgcd"]
}, B3 = {
  name: "lcm",
  category: "Arithmetic",
  syntax: ["lcm(x, y)"],
  description: "Compute the least common multiple.",
  examples: ["lcm(4, 6)", "lcm(6, 21)", "lcm(6, 21, 5)"],
  seealso: ["gcd"]
}, I3 = {
  name: "log",
  category: "Arithmetic",
  syntax: ["log(x)", "log(x, base)"],
  description: "Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",
  examples: ["log(3.5)", "a = log(2.4)", "exp(a)", "10 ^ 4", "log(10000, 10)", "log(10000) / log(10)", "b = log(1024, 2)", "2 ^ b"],
  seealso: ["exp", "log1p", "log2", "log10"]
}, L3 = {
  name: "log10",
  category: "Arithmetic",
  syntax: ["log10(x)"],
  description: "Compute the 10-base logarithm of a value.",
  examples: ["log10(0.00001)", "log10(10000)", "10 ^ 4", "log(10000) / log(10)", "log(10000, 10)"],
  seealso: ["exp", "log"]
}, U3 = {
  name: "log1p",
  category: "Arithmetic",
  syntax: ["log1p(x)", "log1p(x, base)"],
  description: "Calculate the logarithm of a `value+1`",
  examples: ["log1p(2.5)", "exp(log1p(1.4))", "pow(10, 4)", "log1p(9999, 10)", "log1p(9999) / log(10)"],
  seealso: ["exp", "log", "log2", "log10"]
}, z3 = {
  name: "log2",
  category: "Arithmetic",
  syntax: ["log2(x)"],
  description: "Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",
  examples: ["log2(0.03125)", "log2(16)", "log2(16) / log2(2)", "pow(2, 4)"],
  seealso: ["exp", "log1p", "log", "log10"]
}, k3 = {
  name: "mod",
  category: "Operators",
  syntax: ["x % y", "x mod y", "mod(x, y)"],
  description: "Calculates the modulus, the remainder of an integer division.",
  examples: ["7 % 3", "11 % 2", "10 mod 4", "isOdd(x) = x % 2", "isOdd(2)", "isOdd(3)"],
  seealso: ["divide"]
}, H3 = {
  name: "multiply",
  category: "Operators",
  syntax: ["x * y", "multiply(x, y)"],
  description: "multiply two values.",
  examples: ["a = 2.1 * 3.4", "a / 3.4", "2 * 3 + 4", "2 * (3 + 4)", "3 * 2.1 km"],
  seealso: ["divide"]
}, G3 = {
  name: "norm",
  category: "Arithmetic",
  syntax: ["norm(x)", "norm(x, p)"],
  description: "Calculate the norm of a number, vector or matrix.",
  examples: ["abs(-3.5)", "norm(-3.5)", "norm(3 - 4i)", "norm([1, 2, -3], Infinity)", "norm([1, 2, -3], -Infinity)", "norm([3, 4], 2)", "norm([[1, 2], [3, 4]], 1)", 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
}, $3 = {
  name: "nthRoot",
  category: "Arithmetic",
  syntax: ["nthRoot(a)", "nthRoot(a, root)"],
  description: 'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',
  examples: ["4 ^ 3", "nthRoot(64, 3)", "nthRoot(9, 2)", "sqrt(9)"],
  seealso: ["nthRoots", "pow", "sqrt"]
}, V3 = {
  name: "nthRoots",
  category: "Arithmetic",
  syntax: ["nthRoots(A)", "nthRoots(A, root)"],
  description: 'Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation "x^root = A". This function returns an array of complex values.',
  examples: ["nthRoots(1)", "nthRoots(1, 3)"],
  seealso: ["sqrt", "pow", "nthRoot"]
}, q3 = {
  name: "pow",
  category: "Operators",
  syntax: ["x ^ y", "pow(x, y)"],
  description: "Calculates the power of x to y, x^y.",
  examples: ["2^3", "2*2*2", "1 + e ^ (pi * i)", "pow([[1, 2], [4, 3]], 2)", "pow([[1, 2], [4, 3]], -1)"],
  seealso: ["multiply", "nthRoot", "nthRoots", "sqrt"]
}, W3 = {
  name: "round",
  category: "Arithmetic",
  syntax: ["round(x)", "round(x, n)", "round(unit, valuelessUnit)", "round(unit, n, valuelessUnit)"],
  description: "round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",
  examples: ["round(3.2)", "round(3.8)", "round(-4.2)", "round(-4.8)", "round(pi, 3)", "round(123.45678, 2)", "round(3.241cm, 2, cm)", "round([3.2, 3.8, -4.7])"],
  seealso: ["ceil", "floor", "fix"]
}, X3 = {
  name: "sign",
  category: "Arithmetic",
  syntax: ["sign(x)"],
  description: "Compute the sign of a value. The sign of a value x is 1 when x>0, -1 when x<0, and 0 when x=0.",
  examples: ["sign(3.5)", "sign(-4.2)", "sign(0)"],
  seealso: ["abs"]
}, Y3 = {
  name: "sqrt",
  category: "Arithmetic",
  syntax: ["sqrt(x)"],
  description: "Compute the square root value. If x = y * y, then y is the square root of x.",
  examples: ["sqrt(25)", "5 * 5", "sqrt(-1)"],
  seealso: ["square", "sqrtm", "multiply", "nthRoot", "nthRoots", "pow"]
}, Z3 = {
  name: "sqrtm",
  category: "Arithmetic",
  syntax: ["sqrtm(x)"],
  description: "Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",
  examples: ["sqrtm([[33, 24], [48, 57]])"],
  seealso: ["sqrt", "abs", "square", "multiply"]
}, K3 = {
  name: "sylvester",
  category: "Algebra",
  syntax: ["sylvester(A,B,C)"],
  description: "Solves the real-valued Sylvester equation AX+XB=C for X",
  examples: ["sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])", "A = [[-1, -2], [1, 1]]; B = [[2, -1], [1, -2]]; C = [[-3, 2], [3, 0]]", "sylvester(A, B, C)"],
  seealso: ["schur", "lyap"]
}, J3 = {
  name: "schur",
  category: "Algebra",
  syntax: ["schur(A)"],
  description: "Performs a real Schur decomposition of the real matrix A = UTU'",
  examples: ["schur([[1, 0], [-4, 3]])", "A = [[1, 0], [-4, 3]]", "schur(A)"],
  seealso: ["lyap", "sylvester"]
}, Q3 = {
  name: "lyap",
  category: "Algebra",
  syntax: ["lyap(A,Q)"],
  description: "Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P",
  examples: ["lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])", "A = [[-2, 0], [1, -4]]", "Q = [[3, 1], [1, 3]]", "lyap(A,Q)"],
  seealso: ["schur", "sylvester"]
}, j3 = {
  name: "square",
  category: "Arithmetic",
  syntax: ["square(x)"],
  description: "Compute the square of a value. The square of x is x * x.",
  examples: ["square(3)", "sqrt(9)", "3^2", "3 * 3"],
  seealso: ["multiply", "pow", "sqrt", "cube"]
}, eR = {
  name: "subtract",
  category: "Operators",
  syntax: ["x - y", "subtract(x, y)"],
  description: "subtract two values.",
  examples: ["a = 5.3 - 2", "a + 2", "2/3 - 1/6", "2 * 3 - 3", "2.1 km - 500m"],
  seealso: ["add"]
}, tR = {
  name: "unaryMinus",
  category: "Operators",
  syntax: ["-x", "unaryMinus(x)"],
  description: "Inverse the sign of a value. Converts booleans and strings to numbers.",
  examples: ["-4.5", "-(-5.6)", '-"22"'],
  seealso: ["add", "subtract", "unaryPlus"]
}, rR = {
  name: "unaryPlus",
  category: "Operators",
  syntax: ["+x", "unaryPlus(x)"],
  description: "Converts booleans and strings to numbers.",
  examples: ["+true", '+"2"'],
  seealso: ["add", "subtract", "unaryMinus"]
}, nR = {
  name: "xgcd",
  category: "Arithmetic",
  syntax: ["xgcd(a, b)"],
  description: "Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",
  examples: ["xgcd(8, 12)", "gcd(8, 12)", "xgcd(36163, 21199)"],
  seealso: ["gcd", "lcm"]
}, iR = {
  name: "bitAnd",
  category: "Bitwise",
  syntax: ["x & y", "bitAnd(x, y)"],
  description: "Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",
  examples: ["5 & 3", "bitAnd(53, 131)", "[1, 12, 31] & 42"],
  seealso: ["bitNot", "bitOr", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, aR = {
  name: "bitNot",
  category: "Bitwise",
  syntax: ["~x", "bitNot(x)"],
  description: "Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",
  examples: ["~1", "~2", "bitNot([2, -3, 4])"],
  seealso: ["bitAnd", "bitOr", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, sR = {
  name: "bitOr",
  category: "Bitwise",
  syntax: ["x | y", "bitOr(x, y)"],
  description: "Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",
  examples: ["5 | 3", "bitOr([1, 2, 3], 4)"],
  seealso: ["bitAnd", "bitNot", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, oR = {
  name: "bitXor",
  category: "Bitwise",
  syntax: ["bitXor(x, y)"],
  description: "Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",
  examples: ["bitOr(1, 2)", "bitXor([2, 3, 4], 4)"],
  seealso: ["bitAnd", "bitNot", "bitOr", "leftShift", "rightArithShift", "rightLogShift"]
}, uR = {
  name: "leftShift",
  category: "Bitwise",
  syntax: ["x << y", "leftShift(x, y)"],
  description: "Bitwise left logical shift of a value x by y number of bits.",
  examples: ["4 << 1", "8 >> 1"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "rightArithShift", "rightLogShift"]
}, lR = {
  name: "rightArithShift",
  category: "Bitwise",
  syntax: ["x >> y", "rightArithShift(x, y)"],
  description: "Bitwise right arithmetic shift of a value x by y number of bits.",
  examples: ["8 >> 1", "4 << 1", "-12 >> 2"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "leftShift", "rightLogShift"]
}, cR = {
  name: "rightLogShift",
  category: "Bitwise",
  syntax: ["x >>> y", "rightLogShift(x, y)"],
  description: "Bitwise right logical shift of a value x by y number of bits.",
  examples: ["8 >>> 1", "4 << 1", "-12 >>> 2"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "leftShift", "rightArithShift"]
}, fR = {
  name: "bellNumbers",
  category: "Combinatorics",
  syntax: ["bellNumbers(n)"],
  description: "The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",
  examples: ["bellNumbers(3)", "bellNumbers(8)"],
  seealso: ["stirlingS2"]
}, hR = {
  name: "catalan",
  category: "Combinatorics",
  syntax: ["catalan(n)"],
  description: "The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",
  examples: ["catalan(3)", "catalan(8)"],
  seealso: ["bellNumbers"]
}, dR = {
  name: "composition",
  category: "Combinatorics",
  syntax: ["composition(n, k)"],
  description: "The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",
  examples: ["composition(5, 3)"],
  seealso: ["combinations"]
}, mR = {
  name: "stirlingS2",
  category: "Combinatorics",
  syntax: ["stirlingS2(n, k)"],
  description: "he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",
  examples: ["stirlingS2(5, 3)"],
  seealso: ["bellNumbers"]
}, pR = {
  name: "arg",
  category: "Complex",
  syntax: ["arg(x)"],
  description: "Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",
  examples: ["arg(2 + 2i)", "atan2(3, 2)", "arg(2 + 3i)"],
  seealso: ["re", "im", "conj", "abs"]
}, vR = {
  name: "conj",
  category: "Complex",
  syntax: ["conj(x)"],
  description: "Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",
  examples: ["conj(2 + 3i)", "conj(2 - 3i)", "conj(-5.2i)"],
  seealso: ["re", "im", "abs", "arg"]
}, gR = {
  name: "im",
  category: "Complex",
  syntax: ["im(x)"],
  description: "Get the imaginary part of a complex number.",
  examples: ["im(2 + 3i)", "re(2 + 3i)", "im(-5.2i)", "im(2.4)"],
  seealso: ["re", "conj", "abs", "arg"]
}, yR = {
  name: "re",
  category: "Complex",
  syntax: ["re(x)"],
  description: "Get the real part of a complex number.",
  examples: ["re(2 + 3i)", "im(2 + 3i)", "re(-5.2i)", "re(2.4)"],
  seealso: ["im", "conj", "abs", "arg"]
}, xR = {
  name: "evaluate",
  category: "Expression",
  syntax: ["evaluate(expression)", "evaluate(expression, scope)", "evaluate([expr1, expr2, expr3, ...])", "evaluate([expr1, expr2, expr3, ...], scope)"],
  description: "Evaluate an expression or an array with expressions.",
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(16)")', 'evaluate("2 inch to cm")', 'evaluate("sin(x * pi)", { "x": 1/2 })', 'evaluate(["width=2", "height=4","width*height"])'],
  seealso: ["parser", "parse", "compile"]
}, _R = {
  name: "parser",
  category: "Expression",
  syntax: ["parser()"],
  description: "Create a parser object that keeps a context of variables and their values, allowing the evaluation of expressions in that context.",
  examples: ["myParser = parser()", 'myParser.evaluate("sqrt(3^2 + 4^2)")', 'myParser.set("x", 3)', 'myParser.evaluate("y = x + 3")', 'myParser.evaluate(["y = x + 3", "y = y + 1"])', 'myParser.get("y")'],
  seealso: ["evaluate", "parse", "compile"]
}, bR = {
  name: "parse",
  category: "Expression",
  syntax: ["parse(expr)", "parse(expr, options)", "parse([expr1, expr2, expr3, ...])", "parse([expr1, expr2, expr3, ...], options)"],
  description: "Parse an expression. Returns a node tree, which can be evaluated by invoking node.evaluate() or transformed into a functional object via node.compile().",
  examples: ['node1 = parse("sqrt(3^2 + 4^2)")', "node1.evaluate()", "code1 = node1.compile()", "code1.evaluate()", "scope = {a: 3, b: 4}", 'node2 = parse("a * b")', "node2.evaluate(scope)", "code2 = node2.compile()", "code2.evaluate(scope)"],
  seealso: ["parser", "evaluate", "compile"]
}, wR = {
  name: "compile",
  category: "Expression",
  syntax: ["compile(expr) ", "compile([expr1, expr2, expr3, ...])"],
  description: "Parse and compile an expression. Returns a an object with a function evaluate([scope]) to evaluate the compiled expression.",
  examples: ['code1 = compile("sqrt(3^2 + 4^2)")', "code1.evaluate() ", 'code2 = compile("a * b")', "code2.evaluate({a: 3, b: 4})"],
  seealso: ["parser", "parse", "evaluate"]
}, SR = {
  name: "help",
  category: "Expression",
  syntax: ["help(object)", "help(string)"],
  description: "Display documentation on a function or data type.",
  examples: ["help(sqrt)", 'help("complex")'],
  seealso: []
}, ER = {
  name: "distance",
  category: "Geometry",
  syntax: ["distance([x1, y1], [x2, y2])", "distance([[x1, y1], [x2, y2]])"],
  description: "Calculates the Euclidean distance between two points.",
  examples: ["distance([0,0], [4,4])", "distance([[0,0], [4,4]])"],
  seealso: []
}, MR = {
  name: "intersect",
  category: "Geometry",
  syntax: ["intersect(expr1, expr2, expr3, expr4)", "intersect(expr1, expr2, expr3)"],
  description: "Computes the intersection point of lines and/or planes.",
  examples: ["intersect([0, 0], [10, 10], [10, 0], [0, 10])", "intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],
  seealso: []
}, AR = {
  name: "and",
  category: "Logical",
  syntax: ["x and y", "and(x, y)"],
  description: "Logical and. Test whether two values are both defined with a nonzero/nonempty value.",
  examples: ["true and false", "true and true", "2 and 4"],
  seealso: ["not", "or", "xor"]
}, DR = {
  name: "not",
  category: "Logical",
  syntax: ["not x", "not(x)"],
  description: "Logical not. Flips the boolean value of given argument.",
  examples: ["not true", "not false", "not 2", "not 0"],
  seealso: ["and", "or", "xor"]
}, CR = {
  name: "or",
  category: "Logical",
  syntax: ["x or y", "or(x, y)"],
  description: "Logical or. Test if at least one value is defined with a nonzero/nonempty value.",
  examples: ["true or false", "false or false", "0 or 4"],
  seealso: ["not", "and", "xor"]
}, TR = {
  name: "xor",
  category: "Logical",
  syntax: ["x xor y", "xor(x, y)"],
  description: "Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",
  examples: ["true xor false", "false xor false", "true xor true", "0 xor 4"],
  seealso: ["not", "and", "or"]
}, NR = {
  name: "mapSlices",
  category: "Matrix",
  syntax: ["mapSlices(A, dim, callback)"],
  description: "Generate a matrix one dimension less than A by applying callback to each slice of A along dimension dim.",
  examples: [
    "A = [[1, 2], [3, 4]]",
    "mapSlices(A, 1, sum)",
    // returns [4, 6]
    "mapSlices(A, 2, prod)"
    // returns [2, 12]
  ],
  seealso: ["map", "forEach"]
}, RR = {
  name: "column",
  category: "Matrix",
  syntax: ["column(x, index)"],
  description: "Return a column from a matrix or array.",
  examples: ["A = [[1, 2], [3, 4]]", "column(A, 1)", "column(A, 2)"],
  seealso: ["row", "matrixFromColumns"]
}, FR = {
  name: "concat",
  category: "Matrix",
  syntax: ["concat(A, B, C, ...)", "concat(A, B, C, ..., dim)"],
  description: "Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",
  examples: ["A = [1, 2; 5, 6]", "B = [3, 4; 7, 8]", "concat(A, B)", "concat(A, B, 1)", "concat(A, B, 2)"],
  seealso: ["det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, OR = {
  name: "count",
  category: "Matrix",
  syntax: ["count(x)"],
  description: "Count the number of elements of a matrix, array or string.",
  examples: ["a = [1, 2; 3, 4; 5, 6]", "count(a)", "size(a)", 'count("hello world")'],
  seealso: ["size"]
}, PR = {
  name: "cross",
  category: "Matrix",
  syntax: ["cross(A, B)"],
  description: "Calculate the cross product for two vectors in three dimensional space.",
  examples: ["cross([1, 1, 0],  [0, 1, 1])", "cross([3, -3, 1], [4, 9, 2])", "cross([2, 3, 4],  [5, 6, 7])"],
  seealso: ["multiply", "dot"]
}, BR = {
  name: "ctranspose",
  category: "Matrix",
  syntax: ["x'", "ctranspose(x)"],
  description: "Complex Conjugate and Transpose a matrix",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a'", "ctranspose(a)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "zeros"]
}, IR = {
  name: "det",
  category: "Matrix",
  syntax: ["det(x)"],
  description: "Calculate the determinant of a matrix",
  examples: ["det([1, 2; 3, 4])", "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],
  seealso: ["concat", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, LR = {
  name: "diag",
  category: "Matrix",
  syntax: ["diag(x)", "diag(x, k)"],
  description: "Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",
  examples: ["diag(1:3)", "diag(1:3, 1)", "a = [1, 2, 3; 4, 5, 6; 7, 8, 9]", "diag(a)"],
  seealso: ["concat", "det", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, UR = {
  name: "diff",
  category: "Matrix",
  syntax: ["diff(arr)", "diff(arr, dim)"],
  description: ["Create a new matrix or array with the difference of the passed matrix or array.", "Dim parameter is optional and used to indicate the dimension of the array/matrix to apply the difference", "If no dimension parameter is passed it is assumed as dimension 0", "Dimension is zero-based in javascript and one-based in the parser", "Arrays must be 'rectangular' meaning arrays like [1, 2]", "If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays"],
  examples: ["A = [1, 2, 4, 7, 0]", "diff(A)", "diff(A, 1)", "B = [[1, 2], [3, 4]]", "diff(B)", "diff(B, 1)", "diff(B, 2)", "diff(B, bignumber(2))", "diff([[1, 2], matrix([3, 4])], 2)"],
  seealso: ["subtract", "partitionSelect"]
}, zR = {
  name: "dot",
  category: "Matrix",
  syntax: ["dot(A, B)", "A * B"],
  description: "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",
  examples: ["dot([2, 4, 1], [2, 2, 3])", "[2, 4, 1] * [2, 2, 3]"],
  seealso: ["multiply", "cross"]
}, kR = {
  name: "eigs",
  category: "Matrix",
  syntax: ["eigs(x)"],
  description: "Calculate the eigenvalues and optionally eigenvectors of a square matrix",
  examples: ["eigs([[5, 2.3], [2.3, 1]])", "eigs([[1, 2, 3], [4, 5, 6], [7, 8, 9]], { precision: 1e-6, eigenvectors: false })"],
  seealso: ["inv"]
}, HR = {
  name: "filter",
  category: "Matrix",
  syntax: ["filter(x, test)"],
  description: "Filter items in a matrix.",
  examples: ["isPositive(x) = x > 0", "filter([6, -2, -1, 4, 3], isPositive)", "filter([6, -2, 0, 1, 0], x != 0)"],
  seealso: ["sort", "map", "forEach"]
}, GR = {
  name: "flatten",
  category: "Matrix",
  syntax: ["flatten(x)"],
  description: "Flatten a multi dimensional matrix into a single dimensional matrix.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "size(a)", "b = flatten(a)", "size(b)"],
  seealso: ["concat", "resize", "size", "squeeze"]
}, $R = {
  name: "forEach",
  category: "Matrix",
  syntax: ["forEach(x, callback)"],
  description: "Iterates over all elements of a matrix/array, and executes the given callback function.",
  examples: ["numberOfPets = {}", "addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;", 'forEach(["Dog","Cat","Cat"], addPet)', "numberOfPets"],
  seealso: ["map", "sort", "filter"]
}, VR = {
  name: "getMatrixDataType",
  category: "Matrix",
  syntax: ["getMatrixDataType(x)"],
  description: 'Find the data type of all elements in a matrix or array, for example "number" if all items are a number and "Complex" if all values are complex numbers. If a matrix contains more than one data type, it will return "mixed".',
  examples: ["getMatrixDataType([1, 2, 3])", "getMatrixDataType([[5 cm], [2 inch]])", 'getMatrixDataType([1, "text"])', "getMatrixDataType([1, bignumber(4)])"],
  seealso: ["matrix", "sparse", "typeOf"]
}, qR = {
  name: "identity",
  category: "Matrix",
  syntax: ["identity(n)", "identity(m, n)", "identity([m, n])"],
  description: "Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",
  examples: ["identity(3)", "identity(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "identity(size(a))"],
  seealso: ["concat", "det", "diag", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, WR = {
  name: "inv",
  category: "Matrix",
  syntax: ["inv(x)"],
  description: "Calculate the inverse of a matrix",
  examples: ["inv([1, 2; 3, 4])", "inv(4)", "1 / 4"],
  seealso: ["concat", "det", "diag", "identity", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, XR = {
  name: "pinv",
  category: "Matrix",
  syntax: ["pinv(x)"],
  description: "Calculate the Moore–Penrose inverse of a matrix",
  examples: ["pinv([1, 2; 3, 4])", "pinv([[1, 0], [0, 1], [0, 1]])", "pinv(4)"],
  seealso: ["inv"]
}, YR = {
  name: "kron",
  category: "Matrix",
  syntax: ["kron(x, y)"],
  description: "Calculates the Kronecker product of 2 matrices or vectors.",
  examples: ["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])", "kron([1,1], [2,3,4])"],
  seealso: ["multiply", "dot", "cross"]
}, ZR = {
  name: "map",
  category: "Matrix",
  syntax: ["map(x, callback)", "map(x, y, ..., callback)"],
  description: "Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array or the matrices/arrays.",
  examples: ["map([1, 2, 3], square)", "map([1, 2], [3, 4], f(a,b) = a + b)"],
  seealso: ["filter", "forEach"]
}, KR = {
  name: "matrixFromColumns",
  category: "Matrix",
  syntax: ["matrixFromColumns(...arr)", "matrixFromColumns(row1, row2)", "matrixFromColumns(row1, row2, row3)"],
  description: "Create a dense matrix from vectors as individual columns.",
  examples: ["matrixFromColumns([1, 2, 3], [[4],[5],[6]])"],
  seealso: ["matrix", "matrixFromRows", "matrixFromFunction", "zeros"]
}, JR = {
  name: "matrixFromFunction",
  category: "Matrix",
  syntax: ["matrixFromFunction(size, fn)", "matrixFromFunction(size, fn, format)", "matrixFromFunction(size, fn, format, datatype)", "matrixFromFunction(size, format, fn)", "matrixFromFunction(size, format, datatype, fn)"],
  description: "Create a matrix by evaluating a generating function at each index.",
  examples: ["f(I) = I[1] - I[2]", "matrixFromFunction([3,3], f)", "g(I) = I[1] - I[2] == 1 ? 4 : 0", 'matrixFromFunction([100, 100], "sparse", g)', "matrixFromFunction([5], random)"],
  seealso: ["matrix", "matrixFromRows", "matrixFromColumns", "zeros"]
}, QR = {
  name: "matrixFromRows",
  category: "Matrix",
  syntax: ["matrixFromRows(...arr)", "matrixFromRows(row1, row2)", "matrixFromRows(row1, row2, row3)"],
  description: "Create a dense matrix from vectors as individual rows.",
  examples: ["matrixFromRows([1, 2, 3], [[4],[5],[6]])"],
  seealso: ["matrix", "matrixFromColumns", "matrixFromFunction", "zeros"]
}, jR = {
  name: "ones",
  category: "Matrix",
  syntax: ["ones(m)", "ones(m, n)", "ones(m, n, p, ...)", "ones([m])", "ones([m, n])", "ones([m, n, p, ...])"],
  description: "Create a matrix containing ones.",
  examples: ["ones(3)", "ones(3, 5)", "ones([2,3]) * 4.5", "a = [1, 2, 3; 4, 5, 6]", "ones(size(a))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, eF = {
  name: "partitionSelect",
  category: "Matrix",
  syntax: ["partitionSelect(x, k)", "partitionSelect(x, k, compare)"],
  description: "Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",
  examples: ["partitionSelect([5, 10, 1], 2)", 'partitionSelect(["C", "B", "A", "D"], 1, compareText)', "arr = [5, 2, 1]", "partitionSelect(arr, 0) # returns 1, arr is now: [1, 2, 5]", "arr", "partitionSelect(arr, 1, 'desc') # returns 2, arr is now: [5, 2, 1]", "arr"],
  seealso: ["sort"]
}, tF = {
  name: "range",
  category: "Type",
  syntax: ["start:end", "start:step:end", "range(start, end)", "range(start, end, step)", "range(string)"],
  description: "Create a range. Lower bound of the range is included, upper bound is excluded.",
  examples: ["1:5", "3:-1:-3", "range(3, 7)", "range(0, 12, 2)", 'range("4:10")', "range(1m, 1m, 3m)", "a = [1, 2, 3, 4; 5, 6, 7, 8]", "a[1:2, 1:2]"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, rF = {
  name: "reshape",
  category: "Matrix",
  syntax: ["reshape(x, sizes)"],
  description: "Reshape a multi dimensional array to fit the specified dimensions.",
  examples: ["reshape([1, 2, 3, 4, 5, 6], [2, 3])", "reshape([[1, 2], [3, 4]], [1, 4])", "reshape([[1, 2], [3, 4]], [4])", "reshape([1, 2, 3, 4], [-1, 2])"],
  seealso: ["size", "squeeze", "resize"]
}, nF = {
  name: "resize",
  category: "Matrix",
  syntax: ["resize(x, size)", "resize(x, size, defaultValue)"],
  description: "Resize a matrix.",
  examples: ["resize([1,2,3,4,5], [3])", "resize([1,2,3], [5])", "resize([1,2,3], [5], -1)", "resize(2, [2, 3])", 'resize("hello", [8], "!")'],
  seealso: ["size", "subset", "squeeze", "reshape"]
}, iF = {
  name: "rotate",
  category: "Matrix",
  syntax: ["rotate(w, theta)", "rotate(w, theta, v)"],
  description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
  examples: ["rotate([1, 0], pi / 2)", 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
  seealso: ["matrix", "rotationMatrix"]
}, aF = {
  name: "rotationMatrix",
  category: "Matrix",
  syntax: ["rotationMatrix(theta)", "rotationMatrix(theta, v)", "rotationMatrix(theta, v, format)"],
  description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
  examples: ["rotationMatrix(pi / 2)", 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
  seealso: ["cos", "sin"]
}, sF = {
  name: "row",
  category: "Matrix",
  syntax: ["row(x, index)"],
  description: "Return a row from a matrix or array.",
  examples: ["A = [[1, 2], [3, 4]]", "row(A, 1)", "row(A, 2)"],
  seealso: ["column", "matrixFromRows"]
}, oF = {
  name: "size",
  category: "Matrix",
  syntax: ["size(x)"],
  description: "Calculate the size of a matrix.",
  examples: ["size(2.3)", 'size("hello world")', "a = [1, 2; 3, 4; 5, 6]", "size(a)", "size(1:6)"],
  seealso: ["concat", "count", "det", "diag", "identity", "inv", "ones", "range", "squeeze", "subset", "trace", "transpose", "zeros"]
}, uF = {
  name: "sort",
  category: "Matrix",
  syntax: ["sort(x)", "sort(x, compare)"],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ["sort([5, 10, 1])", 'sort(["C", "B", "A", "D"], "natural")', "sortByLength(a, b) = size(a)[1] - size(b)[1]", 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ["map", "filter", "forEach"]
}, lF = {
  name: "squeeze",
  category: "Matrix",
  syntax: ["squeeze(x)"],
  description: "Remove inner and outer singleton dimensions from a matrix.",
  examples: ["a = zeros(3,2,1)", "size(squeeze(a))", "b = zeros(1,1,3)", "size(squeeze(b))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "subset", "trace", "transpose", "zeros"]
}, cF = {
  name: "subset",
  category: "Matrix",
  syntax: ["value(index)", "value(index) = replacement", "subset(value, [index])", "subset(value, [index], replacement)"],
  description: "Get or set a subset of the entries of a matrix or characters of a string. Indexes are one-based. There should be one index specification for each dimension of the target. Each specification can be a single index, a list of indices, or a range in colon notation `l:u`. In a range, both the lower bound l and upper bound u are included; and if a bound is omitted it defaults to the most extreme valid value. The cartesian product of the indices specified in each dimension determines the target of the operation.",
  examples: ["d = [1, 2; 3, 4]", "e = []", "e[1, 1:2] = [5, 6]", "e[2, :] = [7, 8]", "f = d * e", "f[2, 1]", "f[:, 1]", "f[[1,2], [1,3]] = [9, 10; 11, 12]", "f"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "trace", "transpose", "zeros"]
}, fF = {
  name: "trace",
  category: "Matrix",
  syntax: ["trace(A)"],
  description: "Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",
  examples: ["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]", "trace(A)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
}, hF = {
  name: "transpose",
  category: "Matrix",
  syntax: ["x'", "transpose(x)"],
  description: "Transpose a matrix",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a'", "transpose(a)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "zeros"]
}, dF = {
  name: "zeros",
  category: "Matrix",
  syntax: ["zeros(m)", "zeros(m, n)", "zeros(m, n, p, ...)", "zeros([m])", "zeros([m, n])", "zeros([m, n, p, ...])"],
  description: "Create a matrix containing zeros.",
  examples: ["zeros(3)", "zeros(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "zeros(size(a))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose"]
}, mF = {
  name: "fft",
  category: "Matrix",
  syntax: ["fft(x)"],
  description: "Calculate N-dimensional Fourier transform",
  examples: ["fft([[1, 0], [1, 0]])"],
  seealso: ["ifft"]
}, pF = {
  name: "ifft",
  category: "Matrix",
  syntax: ["ifft(x)"],
  description: "Calculate N-dimensional inverse Fourier transform",
  examples: ["ifft([[2, 2], [0, 0]])"],
  seealso: ["fft"]
}, vF = {
  name: "combinations",
  category: "Probability",
  syntax: ["combinations(n, k)"],
  description: "Compute the number of combinations of n items taken k at a time",
  examples: ["combinations(7, 5)"],
  seealso: ["combinationsWithRep", "permutations", "factorial"]
}, gF = {
  name: "combinationsWithRep",
  category: "Probability",
  syntax: ["combinationsWithRep(n, k)"],
  description: "Compute the number of combinations of n items taken k at a time with replacements.",
  examples: ["combinationsWithRep(7, 5)"],
  seealso: ["combinations", "permutations", "factorial"]
}, yF = {
  name: "factorial",
  category: "Probability",
  syntax: ["n!", "factorial(n)"],
  description: "Compute the factorial of a value",
  examples: ["5!", "5 * 4 * 3 * 2 * 1", "3!"],
  seealso: ["combinations", "combinationsWithRep", "permutations", "gamma"]
}, xF = {
  name: "gamma",
  category: "Probability",
  syntax: ["gamma(n)"],
  description: "Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",
  examples: ["gamma(4)", "3!", "gamma(1/2)", "sqrt(pi)"],
  seealso: ["factorial"]
}, _F = {
  name: "lgamma",
  category: "Probability",
  syntax: ["lgamma(n)"],
  description: "Logarithm of the gamma function for real, positive numbers and complex numbers, using Lanczos approximation for numbers and Stirling series for complex numbers.",
  examples: ["lgamma(4)", "lgamma(1/2)", "lgamma(i)", "lgamma(complex(1.1, 2))"],
  seealso: ["gamma"]
}, bF = {
  name: "kldivergence",
  category: "Probability",
  syntax: ["kldivergence(x, y)"],
  description: "Calculate the Kullback-Leibler (KL) divergence  between two distributions.",
  examples: ["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],
  seealso: []
}, wF = {
  name: "multinomial",
  category: "Probability",
  syntax: ["multinomial(A)"],
  description: "Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",
  examples: ["multinomial([1, 2, 1])"],
  seealso: ["combinations", "factorial"]
}, SF = {
  name: "permutations",
  category: "Probability",
  syntax: ["permutations(n)", "permutations(n, k)"],
  description: "Compute the number of permutations of n items taken k at a time",
  examples: ["permutations(5)", "permutations(5, 3)"],
  seealso: ["combinations", "combinationsWithRep", "factorial"]
}, EF = {
  name: "pickRandom",
  category: "Probability",
  syntax: ["pickRandom(array)", "pickRandom(array, number)", "pickRandom(array, weights)", "pickRandom(array, number, weights)", "pickRandom(array, weights, number)"],
  description: "Pick a random entry from a given array.",
  examples: ["pickRandom(0:10)", "pickRandom([1, 3, 1, 6])", "pickRandom([1, 3, 1, 6], 2)", "pickRandom([1, 3, 1, 6], [2, 3, 2, 1])", "pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])", "pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],
  seealso: ["random", "randomInt"]
}, MF = {
  name: "random",
  category: "Probability",
  syntax: ["random()", "random(max)", "random(min, max)", "random(size)", "random(size, max)", "random(size, min, max)"],
  description: "Return a random number.",
  examples: ["random()", "random(10, 20)", "random([2, 3])"],
  seealso: ["pickRandom", "randomInt"]
}, AF = {
  name: "randomInt",
  category: "Probability",
  syntax: ["randomInt(max)", "randomInt(min, max)", "randomInt(size)", "randomInt(size, max)", "randomInt(size, min, max)"],
  description: "Return a random integer number",
  examples: ["randomInt(10, 20)", "randomInt([2, 3], 10)"],
  seealso: ["pickRandom", "random"]
}, DF = {
  name: "compare",
  category: "Relational",
  syntax: ["compare(x, y)"],
  description: "Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ["compare(2, 3)", "compare(3, 2)", "compare(2, 2)", "compare(5cm, 40mm)", "compare(2, [1, 2, 3])"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compareNatural", "compareText"]
}, CF = {
  name: "compareNatural",
  category: "Relational",
  syntax: ["compareNatural(x, y)"],
  description: "Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ["compareNatural(2, 3)", "compareNatural(3, 2)", "compareNatural(2, 2)", "compareNatural(5cm, 40mm)", 'compareNatural("2", "10")', "compareNatural(2 + 3i, 2 + 4i)", "compareNatural([1, 2, 4], [1, 2, 3])", "compareNatural([1, 5], [1, 2, 3])", "compareNatural([1, 2], [1, 2])", "compareNatural({a: 2}, {a: 4})"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compare", "compareText"]
}, TF = {
  name: "compareText",
  category: "Relational",
  syntax: ["compareText(x, y)"],
  description: "Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', "compare(2, 10)", 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ["compare", "compareNatural"]
}, NF = {
  name: "deepEqual",
  category: "Relational",
  syntax: ["deepEqual(x, y)"],
  description: "Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",
  examples: ["deepEqual([1,3,4], [1,3,4])", "deepEqual([1,3,4], [1,3])"],
  seealso: ["equal", "unequal", "smaller", "larger", "smallerEq", "largerEq", "compare"]
}, RF = {
  name: "equal",
  category: "Relational",
  syntax: ["x == y", "equal(x, y)"],
  description: "Check equality of two values. Returns true if the values are equal, and false if not.",
  examples: ["2+2 == 3", "2+2 == 4", "a = 3.2", "b = 6-2.8", "a == b", "50cm == 0.5m"],
  seealso: ["unequal", "smaller", "larger", "smallerEq", "largerEq", "compare", "deepEqual", "equalText"]
}, FF = {
  name: "equalText",
  category: "Relational",
  syntax: ["equalText(x, y)"],
  description: "Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.",
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ["compare", "compareNatural", "compareText", "equal"]
}, OF = {
  name: "larger",
  category: "Relational",
  syntax: ["x > y", "larger(x, y)"],
  description: "Check if value x is larger than y. Returns true if x is larger than y, and false if not. Comparing a value with NaN returns false.",
  examples: ["2 > 3", "5 > 2*2", "a = 3.3", "b = 6-2.8", "(a > b)", "(b < a)", "5 cm > 2 inch"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compare"]
}, PF = {
  name: "largerEq",
  category: "Relational",
  syntax: ["x >= y", "largerEq(x, y)"],
  description: "Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",
  examples: ["2 >= 1+1", "2 > 1+1", "a = 3.2", "b = 6-2.8", "(a >= b)"],
  seealso: ["equal", "unequal", "smallerEq", "smaller", "compare"]
}, BF = {
  name: "smaller",
  category: "Relational",
  syntax: ["x < y", "smaller(x, y)"],
  description: "Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not. Comparing a value with NaN returns false.",
  examples: ["2 < 3", "5 < 2*2", "a = 3.3", "b = 6-2.8", "(a < b)", "5 cm < 2 inch"],
  seealso: ["equal", "unequal", "larger", "smallerEq", "largerEq", "compare"]
}, IF = {
  name: "smallerEq",
  category: "Relational",
  syntax: ["x <= y", "smallerEq(x, y)"],
  description: "Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",
  examples: ["2 <= 1+1", "2 < 1+1", "a = 3.2", "b = 6-2.8", "(a <= b)"],
  seealso: ["equal", "unequal", "larger", "smaller", "largerEq", "compare"]
}, LF = {
  name: "unequal",
  category: "Relational",
  syntax: ["x != y", "unequal(x, y)"],
  description: "Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",
  examples: ["2+2 != 3", "2+2 != 4", "a = 3.2", "b = 6-2.8", "a != b", "50cm != 0.5m", "5 cm != 2 inch"],
  seealso: ["equal", "smaller", "larger", "smallerEq", "largerEq", "compare", "deepEqual"]
}, UF = {
  name: "setCartesian",
  category: "Set",
  syntax: ["setCartesian(set1, set2)"],
  description: "Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.",
  examples: ["setCartesian([1, 2], [3, 4])"],
  seealso: ["setUnion", "setIntersect", "setDifference", "setPowerset"]
}, zF = {
  name: "setDifference",
  category: "Set",
  syntax: ["setDifference(set1, set2)"],
  description: "Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setDifference([1, 2, 3, 4], [3, 4, 5, 6])", "setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setIntersect", "setSymDifference"]
}, kF = {
  name: "setDistinct",
  category: "Set",
  syntax: ["setDistinct(set)"],
  description: "Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setDistinct([1, 1, 1, 2, 2, 3])"],
  seealso: ["setMultiplicity"]
}, HF = {
  name: "setIntersect",
  category: "Set",
  syntax: ["setIntersect(set1, set2)"],
  description: "Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])", "setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setDifference"]
}, GF = {
  name: "setIsSubset",
  category: "Set",
  syntax: ["setIsSubset(set1, set2)"],
  description: "Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setIsSubset([1, 2], [3, 4, 5, 6])", "setIsSubset([3, 4], [3, 4, 5, 6])"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, $F = {
  name: "setMultiplicity",
  category: "Set",
  syntax: ["setMultiplicity(element, set)"],
  description: "Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setMultiplicity(1, [1, 2, 2, 4])", "setMultiplicity(2, [1, 2, 2, 4])"],
  seealso: ["setDistinct", "setSize"]
}, VF = {
  name: "setPowerset",
  category: "Set",
  syntax: ["setPowerset(set)"],
  description: "Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setPowerset([1, 2, 3])"],
  seealso: ["setCartesian"]
}, qF = {
  name: "setSize",
  category: "Set",
  syntax: ["setSize(set)", "setSize(set, unique)"],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ["setSize([1, 2, 2, 4])", "setSize([1, 2, 2, 4], true)"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, WF = {
  name: "setSymDifference",
  category: "Set",
  syntax: ["setSymDifference(set1, set2)"],
  description: "Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])", "setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, XF = {
  name: "setUnion",
  category: "Set",
  syntax: ["setUnion(set1, set2)"],
  description: "Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setUnion([1, 2, 3, 4], [3, 4, 5, 6])", "setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setIntersect", "setDifference"]
}, YF = {
  name: "zpk2tf",
  category: "Signal",
  syntax: ["zpk2tf(z, p, k)"],
  description: "Compute the transfer function of a zero-pole-gain model.",
  examples: ["zpk2tf([1, 2], [-1, -2], 1)", "zpk2tf([1, 2], [-1, -2])", "zpk2tf([1 - 3i, 2 + 2i], [-1, -2])"],
  seealso: []
}, ZF = {
  name: "freqz",
  category: "Signal",
  syntax: ["freqz(b, a)", "freqz(b, a, w)"],
  description: "Calculates the frequency response of a filter given its numerator and denominator coefficients.",
  examples: ["freqz([1, 2], [1, 2, 3])", "freqz([1, 2], [1, 2, 3], [0, 1])", "freqz([1, 2], [1, 2, 3], 512)"],
  seealso: []
}, KF = {
  name: "erf",
  category: "Special",
  syntax: ["erf(x)"],
  description: "Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",
  examples: ["erf(0.2)", "erf(-0.5)", "erf(4)"],
  seealso: []
}, JF = {
  name: "zeta",
  category: "Special",
  syntax: ["zeta(s)"],
  description: "Compute the Riemann Zeta Function using an infinite series and Riemann's Functional Equation for the entire complex plane",
  examples: ["zeta(0.2)", "zeta(-0.5)", "zeta(4)"],
  seealso: []
}, QF = {
  name: "mad",
  category: "Statistics",
  syntax: ["mad(a, b, c, ...)", "mad(A)"],
  description: "Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",
  examples: ["mad(10, 20, 30)", "mad([1, 2, 3])"],
  seealso: ["mean", "median", "std", "abs"]
}, jF = {
  name: "max",
  category: "Statistics",
  syntax: ["max(a, b, c, ...)", "max(A)", "max(A, dimension)"],
  description: "Compute the maximum value of a list of values. If any NaN values are found, the function yields the last NaN in the input.",
  examples: ["max(2, 3, 4, 1)", "max([2, 3, 4, 1])", "max([2, 5; 4, 3])", "max([2, 5; 4, 3], 1)", "max([2, 5; 4, 3], 2)", "max(2.7, 7.1, -4.5, 2.0, 4.1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)"],
  seealso: ["mean", "median", "min", "prod", "std", "sum", "variance"]
}, e4 = {
  name: "mean",
  category: "Statistics",
  syntax: ["mean(a, b, c, ...)", "mean(A)", "mean(A, dimension)"],
  description: "Compute the arithmetic mean of a list of values.",
  examples: ["mean(2, 3, 4, 1)", "mean([2, 3, 4, 1])", "mean([2, 5; 4, 3])", "mean([2, 5; 4, 3], 1)", "mean([2, 5; 4, 3], 2)", "mean([1.0, 2.7, 3.2, 4.0])"],
  seealso: ["max", "median", "min", "prod", "std", "sum", "variance"]
}, t4 = {
  name: "median",
  category: "Statistics",
  syntax: ["median(a, b, c, ...)", "median(A)"],
  description: "Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",
  examples: ["median(5, 2, 7)", "median([3, -1, 5, 7])"],
  seealso: ["max", "mean", "min", "prod", "std", "sum", "variance", "quantileSeq"]
}, r4 = {
  name: "min",
  category: "Statistics",
  syntax: ["min(a, b, c, ...)", "min(A)", "min(A, dimension)"],
  description: "Compute the minimum value of a list of values. If any NaN values are found, the function yields the last NaN in the input.",
  examples: ["min(2, 3, 4, 1)", "min([2, 3, 4, 1])", "min([2, 5; 4, 3])", "min([2, 5; 4, 3], 1)", "min([2, 5; 4, 3], 2)", "min(2.7, 7.1, -4.5, 2.0, 4.1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)"],
  seealso: ["max", "mean", "median", "prod", "std", "sum", "variance"]
}, n4 = {
  name: "mode",
  category: "Statistics",
  syntax: ["mode(a, b, c, ...)", "mode(A)", "mode(A, a, b, B, c, ...)"],
  description: "Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",
  examples: ["mode(2, 1, 4, 3, 1)", "mode([1, 2.7, 3.2, 4, 2.7])", "mode(1, 4, 6, 1, 6)"],
  seealso: ["max", "mean", "min", "median", "prod", "std", "sum", "variance"]
}, i4 = {
  name: "prod",
  category: "Statistics",
  syntax: ["prod(a, b, c, ...)", "prod(A)"],
  description: "Compute the product of all values.",
  examples: ["prod(2, 3, 4)", "prod([2, 3, 4])", "prod([2, 5; 4, 3])"],
  seealso: ["max", "mean", "min", "median", "min", "std", "sum", "variance"]
}, a4 = {
  name: "quantileSeq",
  category: "Statistics",
  syntax: ["quantileSeq(A, prob[, sorted])", "quantileSeq(A, [prob1, prob2, ...][, sorted])", "quantileSeq(A, N[, sorted])"],
  description: `Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probability are: Number, BigNumber. 

In case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.`,
  examples: ["quantileSeq([3, -1, 5, 7], 0.5)", "quantileSeq([3, -1, 5, 7], [1/3, 2/3])", "quantileSeq([3, -1, 5, 7], 2)", "quantileSeq([-1, 3, 5, 7], 0.5, true)"],
  seealso: ["mean", "median", "min", "max", "prod", "std", "sum", "variance"]
}, s4 = {
  name: "std",
  category: "Statistics",
  syntax: ["std(a, b, c, ...)", "std(A)", "std(A, dimension)", "std(A, normalization)", "std(A, dimension, normalization)"],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ["std(2, 4, 6)", "std([2, 4, 6, 8])", 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', "std([1, 2, 3; 4, 5, 6])"],
  seealso: ["max", "mean", "min", "median", "prod", "sum", "variance"]
}, o4 = {
  name: "cumsum",
  category: "Statistics",
  syntax: ["cumsum(a, b, c, ...)", "cumsum(A)"],
  description: "Compute the cumulative sum of all values.",
  examples: ["cumsum(2, 3, 4, 1)", "cumsum([2, 3, 4, 1])", "cumsum([1, 2; 3, 4])", "cumsum([1, 2; 3, 4], 1)", "cumsum([1, 2; 3, 4], 2)"],
  seealso: ["max", "mean", "median", "min", "prod", "std", "sum", "variance"]
}, u4 = {
  name: "sum",
  category: "Statistics",
  syntax: ["sum(a, b, c, ...)", "sum(A)", "sum(A, dimension)"],
  description: "Compute the sum of all values.",
  examples: ["sum(2, 3, 4, 1)", "sum([2, 3, 4, 1])", "sum([2, 5; 4, 3])"],
  seealso: ["max", "mean", "median", "min", "prod", "std", "variance"]
}, l4 = {
  name: "variance",
  category: "Statistics",
  syntax: ["variance(a, b, c, ...)", "variance(A)", "variance(A, dimension)", "variance(A, normalization)", "variance(A, dimension, normalization)"],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ["variance(2, 4, 6)", "variance([2, 4, 6, 8])", 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', "variance([1, 2, 3; 4, 5, 6])"],
  seealso: ["max", "mean", "min", "median", "min", "prod", "std", "sum"]
}, c4 = {
  name: "corr",
  category: "Statistics",
  syntax: ["corr(A,B)"],
  description: "Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.",
  examples: ["corr([2, 4, 6, 8],[1, 2, 3, 6])", "corr(matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]]))"],
  seealso: ["max", "mean", "min", "median", "min", "prod", "std", "sum"]
}, f4 = {
  name: "acos",
  category: "Trigonometry",
  syntax: ["acos(x)"],
  description: "Compute the inverse cosine of a value in radians.",
  examples: ["acos(0.5)", "acos(cos(2.3))"],
  seealso: ["cos", "atan", "asin"]
}, h4 = {
  name: "acosh",
  category: "Trigonometry",
  syntax: ["acosh(x)"],
  description: "Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",
  examples: ["acosh(1.5)"],
  seealso: ["cosh", "asinh", "atanh"]
}, d4 = {
  name: "acot",
  category: "Trigonometry",
  syntax: ["acot(x)"],
  description: "Calculate the inverse cotangent of a value.",
  examples: ["acot(0.5)", "acot(cot(0.5))", "acot(2)"],
  seealso: ["cot", "atan"]
}, m4 = {
  name: "acoth",
  category: "Trigonometry",
  syntax: ["acoth(x)"],
  description: "Calculate the inverse hyperbolic tangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",
  examples: ["acoth(2)", "acoth(0.5)"],
  seealso: ["acsch", "asech"]
}, p4 = {
  name: "acsc",
  category: "Trigonometry",
  syntax: ["acsc(x)"],
  description: "Calculate the inverse cotangent of a value.",
  examples: ["acsc(2)", "acsc(csc(0.5))", "acsc(0.5)"],
  seealso: ["csc", "asin", "asec"]
}, v4 = {
  name: "acsch",
  category: "Trigonometry",
  syntax: ["acsch(x)"],
  description: "Calculate the inverse hyperbolic cosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",
  examples: ["acsch(0.5)"],
  seealso: ["asech", "acoth"]
}, g4 = {
  name: "asec",
  category: "Trigonometry",
  syntax: ["asec(x)"],
  description: "Calculate the inverse secant of a value.",
  examples: ["asec(0.5)", "asec(sec(0.5))", "asec(2)"],
  seealso: ["acos", "acot", "acsc"]
}, y4 = {
  name: "asech",
  category: "Trigonometry",
  syntax: ["asech(x)"],
  description: "Calculate the inverse secant of a value.",
  examples: ["asech(0.5)"],
  seealso: ["acsch", "acoth"]
}, x4 = {
  name: "asin",
  category: "Trigonometry",
  syntax: ["asin(x)"],
  description: "Compute the inverse sine of a value in radians.",
  examples: ["asin(0.5)", "asin(sin(0.5))"],
  seealso: ["sin", "acos", "atan"]
}, _4 = {
  name: "asinh",
  category: "Trigonometry",
  syntax: ["asinh(x)"],
  description: "Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",
  examples: ["asinh(0.5)"],
  seealso: ["acosh", "atanh"]
}, b4 = {
  name: "atan",
  category: "Trigonometry",
  syntax: ["atan(x)"],
  description: "Compute the inverse tangent of a value in radians.",
  examples: ["atan(0.5)", "atan(tan(0.5))"],
  seealso: ["tan", "acos", "asin"]
}, w4 = {
  name: "atan2",
  category: "Trigonometry",
  syntax: ["atan2(y, x)"],
  description: "Computes the principal value of the arc tangent of y/x in radians.",
  examples: ["atan2(2, 2) / pi", "angle = 60 deg in rad", "x = cos(angle)", "y = sin(angle)", "atan2(y, x)"],
  seealso: ["sin", "cos", "tan"]
}, S4 = {
  name: "atanh",
  category: "Trigonometry",
  syntax: ["atanh(x)"],
  description: "Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",
  examples: ["atanh(0.5)"],
  seealso: ["acosh", "asinh"]
}, E4 = {
  name: "cos",
  category: "Trigonometry",
  syntax: ["cos(x)"],
  description: "Compute the cosine of x in radians.",
  examples: ["cos(2)", "cos(pi / 4) ^ 2", "cos(180 deg)", "cos(60 deg)", "sin(0.2)^2 + cos(0.2)^2"],
  seealso: ["acos", "sin", "tan"]
}, M4 = {
  name: "cosh",
  category: "Trigonometry",
  syntax: ["cosh(x)"],
  description: "Compute the hyperbolic cosine of x in radians.",
  examples: ["cosh(0.5)"],
  seealso: ["sinh", "tanh", "coth"]
}, A4 = {
  name: "cot",
  category: "Trigonometry",
  syntax: ["cot(x)"],
  description: "Compute the cotangent of x in radians. Defined as 1/tan(x)",
  examples: ["cot(2)", "1 / tan(2)"],
  seealso: ["sec", "csc", "tan"]
}, D4 = {
  name: "coth",
  category: "Trigonometry",
  syntax: ["coth(x)"],
  description: "Compute the hyperbolic cotangent of x in radians.",
  examples: ["coth(2)", "1 / tanh(2)"],
  seealso: ["sech", "csch", "tanh"]
}, C4 = {
  name: "csc",
  category: "Trigonometry",
  syntax: ["csc(x)"],
  description: "Compute the cosecant of x in radians. Defined as 1/sin(x)",
  examples: ["csc(2)", "1 / sin(2)"],
  seealso: ["sec", "cot", "sin"]
}, T4 = {
  name: "csch",
  category: "Trigonometry",
  syntax: ["csch(x)"],
  description: "Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",
  examples: ["csch(2)", "1 / sinh(2)"],
  seealso: ["sech", "coth", "sinh"]
}, N4 = {
  name: "sec",
  category: "Trigonometry",
  syntax: ["sec(x)"],
  description: "Compute the secant of x in radians. Defined as 1/cos(x)",
  examples: ["sec(2)", "1 / cos(2)"],
  seealso: ["cot", "csc", "cos"]
}, R4 = {
  name: "sech",
  category: "Trigonometry",
  syntax: ["sech(x)"],
  description: "Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",
  examples: ["sech(2)", "1 / cosh(2)"],
  seealso: ["coth", "csch", "cosh"]
}, F4 = {
  name: "sin",
  category: "Trigonometry",
  syntax: ["sin(x)"],
  description: "Compute the sine of x in radians.",
  examples: ["sin(2)", "sin(pi / 4) ^ 2", "sin(90 deg)", "sin(30 deg)", "sin(0.2)^2 + cos(0.2)^2"],
  seealso: ["asin", "cos", "tan"]
}, O4 = {
  name: "sinh",
  category: "Trigonometry",
  syntax: ["sinh(x)"],
  description: "Compute the hyperbolic sine of x in radians.",
  examples: ["sinh(0.5)"],
  seealso: ["cosh", "tanh"]
}, P4 = {
  name: "tan",
  category: "Trigonometry",
  syntax: ["tan(x)"],
  description: "Compute the tangent of x in radians.",
  examples: ["tan(0.5)", "sin(0.5) / cos(0.5)", "tan(pi / 4)", "tan(45 deg)"],
  seealso: ["atan", "sin", "cos"]
}, B4 = {
  name: "tanh",
  category: "Trigonometry",
  syntax: ["tanh(x)"],
  description: "Compute the hyperbolic tangent of x in radians.",
  examples: ["tanh(0.5)", "sinh(0.5) / cosh(0.5)"],
  seealso: ["sinh", "cosh"]
}, I4 = {
  name: "to",
  category: "Units",
  syntax: ["x to unit", "to(x, unit)"],
  description: "Change the unit of a value.",
  examples: ["5 inch to cm", "3.2kg to g", "16 bytes in bits"],
  seealso: []
}, L4 = {
  name: "toBest",
  category: "Units",
  syntax: ["toBest(x)", "toBest(x, unitList)", "toBest(x, unitList, options)"],
  description: "Converts to the most appropriate display unit.",
  examples: ['toBest(unit(5000, "m"))', 'toBest(unit(3500000, "W"))', 'toBest(unit(0.000000123, "A"))', 'toBest(unit(10, "m"), "cm")', 'toBest(unit(10, "m"), "mm,km", {offset: 1.5})'],
  seealso: []
}, U4 = {
  name: "bin",
  category: "Utils",
  syntax: ["bin(value)"],
  description: "Format a number as binary",
  examples: ["bin(2)"],
  seealso: ["oct", "hex"]
}, z4 = {
  name: "clone",
  category: "Utils",
  syntax: ["clone(x)"],
  description: "Clone a variable. Creates a copy of primitive variables, and a deep copy of matrices",
  examples: ["clone(3.5)", "clone(2 - 4i)", "clone(45 deg)", "clone([1, 2; 3, 4])", 'clone("hello world")'],
  seealso: []
}, k4 = {
  name: "format",
  category: "Utils",
  syntax: ["format(value)", "format(value, precision)"],
  description: "Format a value of any type as string.",
  examples: ["format(2.3)", "format(3 - 4i)", "format([])", "format(pi, 3)"],
  seealso: ["print"]
}, H4 = {
  name: "hasNumericValue",
  category: "Utils",
  syntax: ["hasNumericValue(x)"],
  description: "Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",
  examples: ["hasNumericValue(2)", 'hasNumericValue("2")', 'isNumeric("2")', "hasNumericValue(0)", "hasNumericValue(bignumber(500))", "hasNumericValue(fraction(0.125))", "hasNumericValue(2 + 3i)", 'hasNumericValue([2.3, "foo", false])'],
  seealso: ["isInteger", "isZero", "isNegative", "isPositive", "isNaN", "isNumeric"]
}, G4 = {
  name: "hex",
  category: "Utils",
  syntax: ["hex(value)"],
  description: "Format a number as hexadecimal",
  examples: ["hex(240)"],
  seealso: ["bin", "oct"]
}, $4 = {
  name: "isInteger",
  category: "Utils",
  syntax: ["isInteger(x)"],
  description: "Test whether a value is an integer number.",
  examples: ["isInteger(2)", "isInteger(3.5)", "isInteger([3, 0.5, -2])"],
  seealso: ["isNegative", "isNumeric", "isPositive", "isZero"]
}, V4 = {
  name: "isNaN",
  category: "Utils",
  syntax: ["isNaN(x)"],
  description: "Test whether a value is NaN (not a number)",
  examples: ["isNaN(2)", "isNaN(0 / 0)", "isNaN(NaN)", "isNaN(Infinity)"],
  seealso: ["isNegative", "isNumeric", "isPositive", "isZero"]
}, q4 = {
  name: "isNegative",
  category: "Utils",
  syntax: ["isNegative(x)"],
  description: "Test whether a value is negative: smaller than zero.",
  examples: ["isNegative(2)", "isNegative(0)", "isNegative(-4)", "isNegative([3, 0.5, -2])"],
  seealso: ["isInteger", "isNumeric", "isPositive", "isZero"]
}, W4 = {
  name: "isNumeric",
  category: "Utils",
  syntax: ["isNumeric(x)"],
  description: "Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",
  examples: ["isNumeric(2)", 'isNumeric("2")', 'hasNumericValue("2")', "isNumeric(0)", "isNumeric(bignumber(500))", "isNumeric(fraction(0.125))", "isNumeric(2 + 3i)", 'isNumeric([2.3, "foo", false])'],
  seealso: ["isInteger", "isZero", "isNegative", "isPositive", "isNaN", "hasNumericValue"]
}, X4 = {
  name: "isPositive",
  category: "Utils",
  syntax: ["isPositive(x)"],
  description: "Test whether a value is positive: larger than zero.",
  examples: ["isPositive(2)", "isPositive(0)", "isPositive(-4)", "isPositive([3, 0.5, -2])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isZero"]
}, Y4 = {
  name: "isPrime",
  category: "Utils",
  syntax: ["isPrime(x)"],
  description: "Test whether a value is prime: has no divisors other than itself and one.",
  examples: ["isPrime(3)", "isPrime(-2)", "isPrime([2, 17, 100])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isZero"]
}, Z4 = {
  name: "isZero",
  category: "Utils",
  syntax: ["isZero(x)"],
  description: "Test whether a value is zero.",
  examples: ["isZero(2)", "isZero(0)", "isZero(-4)", "isZero([3, 0, -2, 0])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isPositive"]
}, K4 = {
  name: "numeric",
  category: "Utils",
  syntax: ["numeric(x)"],
  description: "Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.",
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "bigint")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction")', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number")'],
  seealso: ["number", "bigint", "fraction", "bignumber", "string", "format"]
}, J4 = {
  name: "oct",
  category: "Utils",
  syntax: ["oct(value)"],
  description: "Format a number as octal",
  examples: ["oct(56)"],
  seealso: ["bin", "hex"]
}, Q4 = {
  name: "print",
  category: "Utils",
  syntax: ["print(template, values)", "print(template, values, precision)"],
  description: "Interpolate values into a string template.",
  examples: ['print("Lucy is $age years old", {age: 5})', 'print("The value of pi is $pi", {pi: pi}, 3)', 'print("Hello, $user.name!", {user: {name: "John"}})', 'print("Values: $1, $2, $3", [6, 9, 4])'],
  seealso: ["format"]
}, j4 = {
  name: "typeOf",
  category: "Utils",
  syntax: ["typeOf(x)"],
  description: "Get the type of a variable.",
  examples: ["typeOf(3.5)", "typeOf(2 - 4i)", "typeOf(45 deg)", 'typeOf("hello world")'],
  seealso: ["getMatrixDataType"]
}, eO = {
  name: "solveODE",
  category: "Numeric",
  syntax: ["solveODE(func, tspan, y0)", "solveODE(func, tspan, y0, options)"],
  description: "Numerical Integration of Ordinary Differential Equations.",
  examples: ["f(t,y) = y", "tspan = [0, 4]", "solveODE(f, tspan, 1)", "solveODE(f, tspan, [1, 2])", 'solveODE(f, tspan, 1, { method:"RK23", maxStep:0.1 })'],
  seealso: ["derivative", "simplifyCore"]
}, tO = {
  // construction functions
  bignumber: zN,
  bigint: kN,
  boolean: HN,
  complex: GN,
  createUnit: $N,
  fraction: VN,
  index: qN,
  matrix: WN,
  number: XN,
  sparse: YN,
  splitUnit: ZN,
  string: KN,
  unit: JN,
  // constants
  e: Lp,
  E: Lp,
  false: EN,
  i: MN,
  Infinity: AN,
  LN2: CN,
  LN10: DN,
  LOG2E: NN,
  LOG10E: TN,
  NaN: RN,
  null: FN,
  pi: Up,
  PI: Up,
  phi: ON,
  SQRT1_2: PN,
  SQRT2: BN,
  tau: IN,
  true: LN,
  version: UN,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: "Speed of light in vacuum",
    examples: ["speedOfLight"]
  },
  gravitationConstant: {
    description: "Newtonian constant of gravitation",
    examples: ["gravitationConstant"]
  },
  planckConstant: {
    description: "Planck constant",
    examples: ["planckConstant"]
  },
  reducedPlanckConstant: {
    description: "Reduced Planck constant",
    examples: ["reducedPlanckConstant"]
  },
  magneticConstant: {
    description: "Magnetic constant (vacuum permeability)",
    examples: ["magneticConstant"]
  },
  electricConstant: {
    description: "Electric constant (vacuum permeability)",
    examples: ["electricConstant"]
  },
  vacuumImpedance: {
    description: "Characteristic impedance of vacuum",
    examples: ["vacuumImpedance"]
  },
  coulomb: {
    description: "Coulomb's constant. Deprecated in favor of coulombConstant",
    examples: ["coulombConstant"]
  },
  coulombConstant: {
    description: "Coulomb's constant",
    examples: ["coulombConstant"]
  },
  elementaryCharge: {
    description: "Elementary charge",
    examples: ["elementaryCharge"]
  },
  bohrMagneton: {
    description: "Bohr magneton",
    examples: ["bohrMagneton"]
  },
  conductanceQuantum: {
    description: "Conductance quantum",
    examples: ["conductanceQuantum"]
  },
  inverseConductanceQuantum: {
    description: "Inverse conductance quantum",
    examples: ["inverseConductanceQuantum"]
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: "Magnetic flux quantum",
    examples: ["magneticFluxQuantum"]
  },
  nuclearMagneton: {
    description: "Nuclear magneton",
    examples: ["nuclearMagneton"]
  },
  klitzing: {
    description: "Von Klitzing constant",
    examples: ["klitzing"]
  },
  bohrRadius: {
    description: "Bohr radius",
    examples: ["bohrRadius"]
  },
  classicalElectronRadius: {
    description: "Classical electron radius",
    examples: ["classicalElectronRadius"]
  },
  electronMass: {
    description: "Electron mass",
    examples: ["electronMass"]
  },
  fermiCoupling: {
    description: "Fermi coupling constant",
    examples: ["fermiCoupling"]
  },
  fineStructure: {
    description: "Fine-structure constant",
    examples: ["fineStructure"]
  },
  hartreeEnergy: {
    description: "Hartree energy",
    examples: ["hartreeEnergy"]
  },
  protonMass: {
    description: "Proton mass",
    examples: ["protonMass"]
  },
  deuteronMass: {
    description: "Deuteron Mass",
    examples: ["deuteronMass"]
  },
  neutronMass: {
    description: "Neutron mass",
    examples: ["neutronMass"]
  },
  quantumOfCirculation: {
    description: "Quantum of circulation",
    examples: ["quantumOfCirculation"]
  },
  rydberg: {
    description: "Rydberg constant",
    examples: ["rydberg"]
  },
  thomsonCrossSection: {
    description: "Thomson cross section",
    examples: ["thomsonCrossSection"]
  },
  weakMixingAngle: {
    description: "Weak mixing angle",
    examples: ["weakMixingAngle"]
  },
  efimovFactor: {
    description: "Efimov factor",
    examples: ["efimovFactor"]
  },
  atomicMass: {
    description: "Atomic mass constant",
    examples: ["atomicMass"]
  },
  avogadro: {
    description: "Avogadro's number",
    examples: ["avogadro"]
  },
  boltzmann: {
    description: "Boltzmann constant",
    examples: ["boltzmann"]
  },
  faraday: {
    description: "Faraday constant",
    examples: ["faraday"]
  },
  firstRadiation: {
    description: "First radiation constant",
    examples: ["firstRadiation"]
  },
  loschmidt: {
    description: "Loschmidt constant at T=273.15 K and p=101.325 kPa",
    examples: ["loschmidt"]
  },
  gasConstant: {
    description: "Gas constant",
    examples: ["gasConstant"]
  },
  molarPlanckConstant: {
    description: "Molar Planck constant",
    examples: ["molarPlanckConstant"]
  },
  molarVolume: {
    description: "Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa",
    examples: ["molarVolume"]
  },
  sackurTetrode: {
    description: "Sackur-Tetrode constant at T=1 K and p=101.325 kPa",
    examples: ["sackurTetrode"]
  },
  secondRadiation: {
    description: "Second radiation constant",
    examples: ["secondRadiation"]
  },
  stefanBoltzmann: {
    description: "Stefan-Boltzmann constant",
    examples: ["stefanBoltzmann"]
  },
  wienDisplacement: {
    description: "Wien displacement law constant",
    examples: ["wienDisplacement"]
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: "Molar mass constant",
    examples: ["molarMass"]
  },
  molarMassC12: {
    description: "Molar mass constant of carbon-12",
    examples: ["molarMassC12"]
  },
  gravity: {
    description: "Standard acceleration of gravity (standard acceleration of free-fall on Earth)",
    examples: ["gravity"]
  },
  planckLength: {
    description: "Planck length",
    examples: ["planckLength"]
  },
  planckMass: {
    description: "Planck mass",
    examples: ["planckMass"]
  },
  planckTime: {
    description: "Planck time",
    examples: ["planckTime"]
  },
  planckCharge: {
    description: "Planck charge",
    examples: ["planckCharge"]
  },
  planckTemperature: {
    description: "Planck temperature",
    examples: ["planckTemperature"]
  },
  // functions - algebra
  derivative: t3,
  lsolve: n3,
  lsolveAll: i3,
  lup: a3,
  lusolve: s3,
  leafCount: r3,
  polynomialRoot: o3,
  resolve: c3,
  simplify: f3,
  simplifyConstant: h3,
  simplifyCore: d3,
  symbolicEqual: p3,
  rationalize: l3,
  slu: m3,
  usolve: v3,
  usolveAll: g3,
  qr: u3,
  // functions - arithmetic
  abs: y3,
  add: x3,
  cbrt: _3,
  ceil: b3,
  cube: w3,
  divide: S3,
  dotDivide: E3,
  dotMultiply: M3,
  dotPow: A3,
  exp: D3,
  expm: C3,
  expm1: T3,
  fix: N3,
  floor: R3,
  gcd: F3,
  hypot: O3,
  lcm: B3,
  log: I3,
  log2: z3,
  log1p: U3,
  log10: L3,
  mod: k3,
  multiply: H3,
  norm: G3,
  nthRoot: $3,
  nthRoots: V3,
  pow: q3,
  round: W3,
  sign: X3,
  sqrt: Y3,
  sqrtm: Z3,
  square: j3,
  subtract: eR,
  unaryMinus: tR,
  unaryPlus: rR,
  xgcd: nR,
  invmod: P3,
  // functions - bitwise
  bitAnd: iR,
  bitNot: aR,
  bitOr: sR,
  bitXor: oR,
  leftShift: uR,
  rightArithShift: lR,
  rightLogShift: cR,
  // functions - combinatorics
  bellNumbers: fR,
  catalan: hR,
  composition: dR,
  stirlingS2: mR,
  // functions - core
  config: QN,
  import: jN,
  typed: e3,
  // functions - complex
  arg: pR,
  conj: vR,
  re: yR,
  im: gR,
  // functions - expression
  evaluate: xR,
  help: SR,
  parse: bR,
  parser: _R,
  compile: wR,
  // functions - geometry
  distance: ER,
  intersect: MR,
  // functions - logical
  and: AR,
  not: DR,
  or: CR,
  xor: TR,
  // functions - matrix
  mapSlices: NR,
  concat: FR,
  count: OR,
  cross: PR,
  column: RR,
  ctranspose: BR,
  det: IR,
  diag: LR,
  diff: UR,
  dot: zR,
  getMatrixDataType: VR,
  identity: qR,
  filter: HR,
  flatten: GR,
  forEach: $R,
  inv: WR,
  pinv: XR,
  eigs: kR,
  kron: YR,
  matrixFromFunction: JR,
  matrixFromRows: QR,
  matrixFromColumns: KR,
  map: ZR,
  ones: jR,
  partitionSelect: eF,
  range: tF,
  resize: nF,
  reshape: rF,
  rotate: iF,
  rotationMatrix: aF,
  row: sF,
  size: oF,
  sort: uF,
  squeeze: lF,
  subset: cF,
  trace: fF,
  transpose: hF,
  zeros: dF,
  fft: mF,
  ifft: pF,
  sylvester: K3,
  schur: J3,
  lyap: Q3,
  // functions - numeric
  solveODE: eO,
  // functions - probability
  combinations: vF,
  combinationsWithRep: gF,
  // distribution: distributionDocs,
  factorial: yF,
  gamma: xF,
  kldivergence: bF,
  lgamma: _F,
  multinomial: wF,
  permutations: SF,
  pickRandom: EF,
  random: MF,
  randomInt: AF,
  // functions - relational
  compare: DF,
  compareNatural: CF,
  compareText: TF,
  deepEqual: NF,
  equal: RF,
  equalText: FF,
  larger: OF,
  largerEq: PF,
  smaller: BF,
  smallerEq: IF,
  unequal: LF,
  // functions - set
  setCartesian: UF,
  setDifference: zF,
  setDistinct: kF,
  setIntersect: HF,
  setIsSubset: GF,
  setMultiplicity: $F,
  setPowerset: VF,
  setSize: qF,
  setSymDifference: WF,
  setUnion: XF,
  // functions - signal
  zpk2tf: YF,
  freqz: ZF,
  // functions - special
  erf: KF,
  zeta: JF,
  // functions - statistics
  cumsum: o4,
  mad: QF,
  max: jF,
  mean: e4,
  median: t4,
  min: r4,
  mode: n4,
  prod: i4,
  quantileSeq: a4,
  std: s4,
  sum: u4,
  variance: l4,
  corr: c4,
  // functions - trigonometry
  acos: f4,
  acosh: h4,
  acot: d4,
  acoth: m4,
  acsc: p4,
  acsch: v4,
  asec: g4,
  asech: y4,
  asin: x4,
  asinh: _4,
  atan: b4,
  atanh: S4,
  atan2: w4,
  cos: E4,
  cosh: M4,
  cot: A4,
  coth: D4,
  csc: C4,
  csch: T4,
  sec: N4,
  sech: R4,
  sin: F4,
  sinh: O4,
  tan: P4,
  tanh: B4,
  // functions - units
  to: I4,
  toBest: L4,
  // functions - utils
  clone: z4,
  format: k4,
  bin: U4,
  oct: J4,
  hex: G4,
  isNaN: V4,
  isInteger: $4,
  isNegative: q4,
  isNumeric: W4,
  hasNumericValue: H4,
  isPositive: X4,
  isPrime: Y4,
  isZero: Z4,
  print: Q4,
  typeOf: j4,
  numeric: K4
}, zp = "help", rO = ["typed", "mathWithTransform", "Help"], nO = /* @__PURE__ */ W(zp, rO, (r) => {
  var {
    typed: e,
    mathWithTransform: t,
    Help: n
  } = r;
  return e(zp, {
    any: function(a) {
      var s, o = a;
      if (typeof a != "string") {
        for (s in t)
          if (Ue(t, s) && a === t[s]) {
            o = s;
            break;
          }
      }
      var l = Sr(tO, o);
      if (!l) {
        var u = typeof o == "function" ? o.name : o;
        throw new Error('No documentation found on "' + u + '"');
      }
      return new n(l);
    }
  });
}), kp = "chain", iO = ["typed", "Chain"], aO = /* @__PURE__ */ W(kp, iO, (r) => {
  var {
    typed: e,
    Chain: t
  } = r;
  return e(kp, {
    "": function() {
      return new t();
    },
    any: function(i) {
      return new t(i);
    }
  });
}), Hp = "det", sO = ["typed", "matrix", "subtractScalar", "multiply", "divideScalar", "isZero", "unaryMinus"], oO = /* @__PURE__ */ W(Hp, sO, (r) => {
  var {
    typed: e,
    matrix: t,
    subtractScalar: n,
    multiply: i,
    divideScalar: a,
    isZero: s,
    unaryMinus: o
  } = r;
  return e(Hp, {
    any: function(c) {
      return Ye(c);
    },
    "Array | Matrix": function(c) {
      var f;
      switch (Ve(c) ? f = c.size() : Array.isArray(c) ? (c = t(c), f = c.size()) : f = [], f.length) {
        case 0:
          return Ye(c);
        case 1:
          if (f[0] === 1)
            return Ye(c.valueOf()[0]);
          if (f[0] === 0)
            return 1;
          throw new RangeError("Matrix must be square (size: " + lt(f) + ")");
        case 2: {
          var h = f[0], d = f[1];
          if (h === d)
            return l(c.clone().valueOf(), h);
          if (d === 0)
            return 1;
          throw new RangeError("Matrix must be square (size: " + lt(f) + ")");
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + lt(f) + ")");
      }
    }
  });
  function l(u, c, f) {
    if (c === 1)
      return Ye(u[0][0]);
    if (c === 2)
      return n(i(u[0][0], u[1][1]), i(u[1][0], u[0][1]));
    for (var h = !1, d = new Array(c).fill(0).map((M, A) => A), m = 0; m < c; m++) {
      var p = d[m];
      if (s(u[p][m])) {
        var g = void 0;
        for (g = m + 1; g < c; g++)
          if (!s(u[d[g]][m])) {
            p = d[g], d[g] = d[m], d[m] = p, h = !h;
            break;
          }
        if (g === c) return u[p][m];
      }
      for (var v = u[p][m], S = m === 0 ? 1 : u[d[m - 1]][m - 1], x = m + 1; x < c; x++)
        for (var y = d[x], b = m + 1; b < c; b++)
          u[y][b] = a(n(i(u[y][b], v), i(u[y][m], u[p][b])), S);
    }
    var _ = u[d[c - 1]][c - 1];
    return h ? o(_) : _;
  }
}), Gp = "inv", uO = ["typed", "matrix", "divideScalar", "addScalar", "multiply", "unaryMinus", "det", "identity", "abs"], lO = /* @__PURE__ */ W(Gp, uO, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    addScalar: i,
    multiply: a,
    unaryMinus: s,
    det: o,
    identity: l,
    abs: u
  } = r;
  return e(Gp, {
    "Array | Matrix": function(h) {
      var d = Ve(h) ? h.size() : Je(h);
      switch (d.length) {
        case 1:
          if (d[0] === 1)
            return Ve(h) ? t([n(1, h.valueOf()[0])]) : [n(1, h[0])];
          throw new RangeError("Matrix must be square (size: " + lt(d) + ")");
        case 2: {
          var m = d[0], p = d[1];
          if (m === p)
            return Ve(h) ? t(c(h.valueOf(), m, p), h.storage()) : c(h, m, p);
          throw new RangeError("Matrix must be square (size: " + lt(d) + ")");
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + lt(d) + ")");
      }
    },
    any: function(h) {
      return n(1, h);
    }
  });
  function c(f, h, d) {
    var m, p, g, v, S;
    if (h === 1) {
      if (v = f[0][0], v === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n(1, v)]];
    } else if (h === 2) {
      var x = o(f);
      if (x === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n(f[1][1], x), n(s(f[0][1]), x)], [n(s(f[1][0]), x), n(f[0][0], x)]];
    } else {
      var y = f.concat();
      for (m = 0; m < h; m++)
        y[m] = y[m].concat();
      for (var b = l(h).valueOf(), _ = 0; _ < d; _++) {
        var M = u(y[_][_]), A = _;
        for (m = _ + 1; m < h; )
          u(y[m][_]) > M && (M = u(y[m][_]), A = m), m++;
        if (M === 0)
          throw Error("Cannot calculate inverse, determinant is zero");
        m = A, m !== _ && (S = y[_], y[_] = y[m], y[m] = S, S = b[_], b[_] = b[m], b[m] = S);
        var w = y[_], E = b[_];
        for (m = 0; m < h; m++) {
          var D = y[m], T = b[m];
          if (m !== _) {
            if (D[_] !== 0) {
              for (g = n(s(D[_]), w[_]), p = _; p < d; p++)
                D[p] = i(D[p], a(g, w[p]));
              for (p = 0; p < d; p++)
                T[p] = i(T[p], a(g, E[p]));
            }
          } else {
            for (g = w[_], p = _; p < d; p++)
              D[p] = n(D[p], g);
            for (p = 0; p < d; p++)
              T[p] = n(T[p], g);
          }
        }
      }
      return b;
    }
  }
}), $p = "pinv", cO = ["typed", "matrix", "inv", "deepEqual", "equal", "dotDivide", "dot", "ctranspose", "divideScalar", "multiply", "add", "Complex"], fO = /* @__PURE__ */ W($p, cO, (r) => {
  var {
    typed: e,
    matrix: t,
    inv: n,
    deepEqual: i,
    equal: a,
    dotDivide: s,
    dot: o,
    ctranspose: l,
    divideScalar: u,
    multiply: c,
    add: f,
    Complex: h
  } = r;
  return e($p, {
    "Array | Matrix": function(x) {
      var y = Ve(x) ? x.size() : Je(x);
      switch (y.length) {
        case 1:
          return v(x) ? l(x) : y[0] === 1 ? n(x) : s(l(x), o(x, x));
        case 2: {
          if (v(x)) return l(x);
          var b = y[0], _ = y[1];
          if (b === _)
            try {
              return n(x);
            } catch (M) {
              if (!(M instanceof Error && M.message.match(/Cannot calculate inverse, determinant is zero/))) throw M;
            }
          return Ve(x) ? t(d(x.valueOf(), b, _), x.storage()) : d(x, b, _);
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + lt(y) + ")");
      }
    },
    any: function(x) {
      return a(x, 0) ? Ye(x) : u(1, x);
    }
  });
  function d(S, x, y) {
    var {
      C: b,
      F: _
    } = p(S, x, y), M = c(n(c(l(b), b)), l(b)), A = c(l(_), n(c(_, l(_))));
    return c(A, M);
  }
  function m(S, x, y) {
    for (var b = Ye(S), _ = 0, M = 0; M < x; M++) {
      if (y <= _)
        return b;
      for (var A = M; g(b[A][_]); )
        if (A++, x === A && (A = M, _++, y === _))
          return b;
      [b[A], b[M]] = [b[M], b[A]];
      for (var w = b[M][_], E = 0; E < y; E++)
        b[M][E] = s(b[M][E], w);
      for (var D = 0; D < x; D++)
        if (D !== M) {
          w = b[D][_];
          for (var T = 0; T < y; T++)
            b[D][T] = f(b[D][T], c(-1, c(w, b[M][T])));
        }
      _++;
    }
    return b;
  }
  function p(S, x, y) {
    var b = m(S, x, y), _ = S.map((A, w) => A.filter((E, D) => D < x && !g(o(b[D], b[D])))), M = b.filter((A, w) => !g(o(b[w], b[w])));
    return {
      C: _,
      F: M
    };
  }
  function g(S) {
    return a(f(S, h(1, 1)), f(0, h(1, 1)));
  }
  function v(S) {
    return i(f(S, h(1, 1)), f(c(S, 0), h(1, 1)));
  }
});
function hO(r) {
  var {
    addScalar: e,
    subtract: t,
    flatten: n,
    multiply: i,
    multiplyScalar: a,
    divideScalar: s,
    sqrt: o,
    abs: l,
    bignumber: u,
    diag: c,
    size: f,
    reshape: h,
    inv: d,
    qr: m,
    usolve: p,
    usolveAll: g,
    equal: v,
    complex: S,
    larger: x,
    smaller: y,
    matrixFromColumns: b,
    dot: _
  } = r;
  function M(L, J, U, ue) {
    var oe = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, ie = A(L, J, U, ue, oe);
    w(L, J, U, ue, oe, ie);
    var {
      values: G,
      C: Z
    } = E(L, J, U, ue, oe);
    if (oe) {
      var te = D(L, J, Z, ie, G, U, ue);
      return {
        values: G,
        eigenvectors: te
      };
    }
    return {
      values: G
    };
  }
  function A(L, J, U, ue, oe) {
    var ie = ue === "BigNumber", G = ue === "Complex", Z = ie ? u(0) : 0, te = ie ? u(1) : G ? S(1) : 1, ne = ie ? u(1) : 1, ae = ie ? u(10) : 2, xe = a(ae, ae), q;
    oe && (q = Array(J).fill(te));
    for (var Ae = !1; !Ae; ) {
      Ae = !0;
      for (var De = 0; De < J; De++) {
        for (var Ne = Z, we = Z, Pe = 0; Pe < J; Pe++)
          De !== Pe && (Ne = e(Ne, l(L[Pe][De])), we = e(we, l(L[De][Pe])));
        if (!v(Ne, 0) && !v(we, 0)) {
          for (var $ = ne, P = Ne, O = s(we, ae), F = a(we, ae); y(P, O); )
            P = a(P, xe), $ = a($, ae);
          for (; x(P, F); )
            P = s(P, xe), $ = s($, ae);
          var H = y(s(e(P, we), $), a(e(Ne, we), 0.95));
          if (H) {
            Ae = !1;
            for (var X = s(1, $), K = 0; K < J; K++)
              De !== K && (L[De][K] = a(L[De][K], X), L[K][De] = a(L[K][De], $));
            oe && (q[De] = a(q[De], X));
          }
        }
      }
    }
    return oe ? c(q) : null;
  }
  function w(L, J, U, ue, oe, ie) {
    var G = ue === "BigNumber", Z = ue === "Complex", te = G ? u(0) : Z ? S(0) : 0;
    G && (U = u(U));
    for (var ne = 0; ne < J - 2; ne++) {
      for (var ae = 0, xe = te, q = ne + 1; q < J; q++) {
        var Ae = L[q][ne];
        y(l(xe), l(Ae)) && (xe = Ae, ae = q);
      }
      if (!y(l(xe), U)) {
        if (ae !== ne + 1) {
          var De = L[ae];
          L[ae] = L[ne + 1], L[ne + 1] = De;
          for (var Ne = 0; Ne < J; Ne++) {
            var we = L[Ne][ae];
            L[Ne][ae] = L[Ne][ne + 1], L[Ne][ne + 1] = we;
          }
          if (oe) {
            var Pe = ie[ae];
            ie[ae] = ie[ne + 1], ie[ne + 1] = Pe;
          }
        }
        for (var $ = ne + 2; $ < J; $++) {
          var P = s(L[$][ne], xe);
          if (P !== 0) {
            for (var O = 0; O < J; O++)
              L[$][O] = t(L[$][O], a(P, L[ne + 1][O]));
            for (var F = 0; F < J; F++)
              L[F][ne + 1] = e(L[F][ne + 1], a(P, L[F][$]));
            if (oe)
              for (var H = 0; H < J; H++)
                ie[$][H] = t(ie[$][H], a(P, ie[ne + 1][H]));
          }
        }
      }
    }
    return ie;
  }
  function E(L, J, U, ue, oe) {
    var ie = ue === "BigNumber", G = ue === "Complex", Z = ie ? u(1) : G ? S(1) : 1;
    ie && (U = u(U));
    for (var te = Ye(L), ne = [], ae = J, xe = [], q = oe ? c(Array(J).fill(Z)) : void 0, Ae = oe ? c(Array(ae).fill(Z)) : void 0, De = 0; De <= 100; ) {
      De += 1;
      for (var Ne = te[ae - 1][ae - 1], we = 0; we < ae; we++)
        te[we][we] = t(te[we][we], Ne);
      var {
        Q: Pe,
        R: $
      } = m(te);
      te = i($, Pe);
      for (var P = 0; P < ae; P++)
        te[P][P] = e(te[P][P], Ne);
      if (oe && (Ae = i(Ae, Pe)), ae === 1 || y(l(te[ae - 1][ae - 2]), U)) {
        De = 0, ne.push(te[ae - 1][ae - 1]), oe && (xe.unshift([[1]]), B(Ae, J), q = i(q, Ae), ae > 1 && (Ae = c(Array(ae - 1).fill(Z)))), ae -= 1, te.pop();
        for (var O = 0; O < ae; O++)
          te[O].pop();
      } else if (ae === 2 || y(l(te[ae - 2][ae - 3]), U)) {
        De = 0;
        var F = T(te[ae - 2][ae - 2], te[ae - 2][ae - 1], te[ae - 1][ae - 2], te[ae - 1][ae - 1]);
        ne.push(...F), oe && (xe.unshift(R(te[ae - 2][ae - 2], te[ae - 2][ae - 1], te[ae - 1][ae - 2], te[ae - 1][ae - 1], F[0], F[1], U, ue)), B(Ae, J), q = i(q, Ae), ae > 2 && (Ae = c(Array(ae - 2).fill(Z)))), ae -= 2, te.pop(), te.pop();
        for (var H = 0; H < ae; H++)
          te[H].pop(), te[H].pop();
      }
      if (ae === 0)
        break;
    }
    if (ne.sort((se, le) => +t(l(se), l(le))), De > 100) {
      var X = Error("The eigenvalues failed to converge. Only found these eigenvalues: " + ne.join(", "));
      throw X.values = ne, X.vectors = [], X;
    }
    var K = oe ? i(q, I(xe, J)) : void 0;
    return {
      values: ne,
      C: K
    };
  }
  function D(L, J, U, ue, oe, ie, G) {
    var Z = d(U), te = i(Z, L, U), ne = G === "BigNumber", ae = G === "Complex", xe = ne ? u(0) : ae ? S(0) : 0, q = ne ? u(1) : ae ? S(1) : 1, Ae = [], De = [];
    for (var Ne of oe) {
      var we = C(Ae, Ne, v);
      we === -1 ? (Ae.push(Ne), De.push(1)) : De[we] += 1;
    }
    for (var Pe = [], $ = Ae.length, P = Array(J).fill(xe), O = c(Array(J).fill(q)), F = function() {
      var K = Ae[H], se = t(te, i(K, O)), le = g(se, P);
      for (le.shift(); le.length < De[H]; ) {
        var ge = k(se, J, le, ie, G);
        if (ge === null)
          break;
        le.push(ge);
      }
      var be = i(d(ue), U);
      le = le.map((he) => i(be, he)), Pe.push(...le.map((he) => ({
        value: K,
        vector: n(he)
      })));
    }, H = 0; H < $; H++)
      F();
    return Pe;
  }
  function T(L, J, U, ue) {
    var oe = e(L, ue), ie = t(a(L, ue), a(J, U)), G = a(oe, 0.5), Z = a(o(t(a(oe, oe), a(4, ie))), 0.5);
    return [e(G, Z), t(G, Z)];
  }
  function R(L, J, U, ue, oe, ie, G, Z) {
    var te = Z === "BigNumber", ne = Z === "Complex", ae = te ? u(0) : ne ? S(0) : 0, xe = te ? u(1) : ne ? S(1) : 1;
    if (y(l(U), G))
      return [[xe, ae], [ae, xe]];
    if (x(l(t(oe, ie)), G))
      return [[t(oe, ue), t(ie, ue)], [U, U]];
    var q = t(L, oe), Ae = t(ue, oe);
    return y(l(J), G) && y(l(Ae), G) ? [[q, xe], [U, ae]] : [[J, ae], [Ae, xe]];
  }
  function B(L, J) {
    for (var U = 0; U < L.length; U++)
      L[U].push(...Array(J - L[U].length).fill(0));
    for (var ue = L.length; ue < J; ue++)
      L.push(Array(J).fill(0)), L[ue][ue] = 1;
    return L;
  }
  function I(L, J) {
    for (var U = [], ue = 0; ue < J; ue++)
      U[ue] = Array(J).fill(0);
    var oe = 0;
    for (var ie of L) {
      for (var G = ie.length, Z = 0; Z < G; Z++)
        for (var te = 0; te < G; te++)
          U[oe + Z][oe + te] = ie[Z][te];
      oe += G;
    }
    return U;
  }
  function C(L, J, U) {
    for (var ue = 0; ue < L.length; ue++)
      if (U(L[ue], J))
        return ue;
    return -1;
  }
  function k(L, J, U, ue, oe) {
    for (var ie = oe === "BigNumber" ? u(1e3) : 1e3, G, Z = 0; Z < 5; ++Z) {
      G = z(J, U, oe);
      try {
        G = p(L, G);
      } catch {
        continue;
      }
      if (x(ee(G), ie))
        break;
    }
    if (Z >= 5)
      return null;
    for (Z = 0; ; ) {
      var te = p(L, G);
      if (y(ee(V(G, [te])), ue))
        break;
      if (++Z >= 10)
        return null;
      G = re(te);
    }
    return G;
  }
  function z(L, J, U) {
    var ue = U === "BigNumber", oe = U === "Complex", ie = Array(L).fill(0).map((G) => 2 * Math.random() - 1);
    return ue && (ie = ie.map((G) => u(G))), oe && (ie = ie.map((G) => S(G))), ie = V(ie, J), re(ie, U);
  }
  function V(L, J) {
    var U = f(L);
    for (var ue of J)
      ue = h(ue, U), L = t(L, i(s(_(ue, L), _(ue, ue)), ue));
    return L;
  }
  function ee(L) {
    return l(o(_(L, L)));
  }
  function re(L, J) {
    var U = J === "BigNumber", ue = J === "Complex", oe = U ? u(1) : ue ? S(1) : 1;
    return i(s(oe, ee(L)), L);
  }
  return M;
}
function dO(r) {
  var {
    config: e,
    addScalar: t,
    subtract: n,
    abs: i,
    atan: a,
    cos: s,
    sin: o,
    multiplyScalar: l,
    inv: u,
    bignumber: c,
    multiply: f,
    add: h
  } = r;
  function d(w, E) {
    var D = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e.relTol, T = arguments.length > 3 ? arguments[3] : void 0, R = arguments.length > 4 ? arguments[4] : void 0;
    if (T === "number")
      return m(w, D, R);
    if (T === "BigNumber")
      return p(w, D, R);
    throw TypeError("Unsupported data type: " + T);
  }
  function m(w, E, D) {
    var T = w.length, R = Math.abs(E / T), B, I;
    if (D) {
      I = new Array(T);
      for (var C = 0; C < T; C++)
        I[C] = Array(T).fill(0), I[C][C] = 1;
    }
    for (var k = _(w); Math.abs(k[1]) >= Math.abs(R); ) {
      var z = k[0][0], V = k[0][1];
      B = g(w[z][z], w[V][V], w[z][V]), w = b(w, B, z, V), D && (I = S(I, B, z, V)), k = _(w);
    }
    for (var ee = Array(T).fill(0), re = 0; re < T; re++)
      ee[re] = w[re][re];
    return A(Ye(ee), I, D);
  }
  function p(w, E, D) {
    var T = w.length, R = i(E / T), B, I;
    if (D) {
      I = new Array(T);
      for (var C = 0; C < T; C++)
        I[C] = Array(T).fill(0), I[C][C] = 1;
    }
    for (var k = M(w); i(k[1]) >= i(R); ) {
      var z = k[0][0], V = k[0][1];
      B = v(w[z][z], w[V][V], w[z][V]), w = y(w, B, z, V), D && (I = x(I, B, z, V)), k = M(w);
    }
    for (var ee = Array(T).fill(0), re = 0; re < T; re++)
      ee[re] = w[re][re];
    return A(Ye(ee), I, D);
  }
  function g(w, E, D) {
    var T = E - w;
    return Math.abs(T) <= e.relTol ? Math.PI / 4 : 0.5 * Math.atan(2 * D / (E - w));
  }
  function v(w, E, D) {
    var T = n(E, w);
    return i(T) <= e.relTol ? c(-1).acos().div(4) : l(0.5, a(f(2, D, u(T))));
  }
  function S(w, E, D, T) {
    for (var R = w.length, B = Math.cos(E), I = Math.sin(E), C = Array(R).fill(0), k = Array(R).fill(0), z = 0; z < R; z++)
      C[z] = B * w[z][D] - I * w[z][T], k[z] = I * w[z][D] + B * w[z][T];
    for (var V = 0; V < R; V++)
      w[V][D] = C[V], w[V][T] = k[V];
    return w;
  }
  function x(w, E, D, T) {
    for (var R = w.length, B = s(E), I = o(E), C = Array(R).fill(c(0)), k = Array(R).fill(c(0)), z = 0; z < R; z++)
      C[z] = n(l(B, w[z][D]), l(I, w[z][T])), k[z] = t(l(I, w[z][D]), l(B, w[z][T]));
    for (var V = 0; V < R; V++)
      w[V][D] = C[V], w[V][T] = k[V];
    return w;
  }
  function y(w, E, D, T) {
    for (var R = w.length, B = c(s(E)), I = c(o(E)), C = l(B, B), k = l(I, I), z = Array(R).fill(c(0)), V = Array(R).fill(c(0)), ee = f(c(2), B, I, w[D][T]), re = t(n(l(C, w[D][D]), ee), l(k, w[T][T])), L = h(l(k, w[D][D]), ee, l(C, w[T][T])), J = 0; J < R; J++)
      z[J] = n(l(B, w[D][J]), l(I, w[T][J])), V[J] = t(l(I, w[D][J]), l(B, w[T][J]));
    w[D][D] = re, w[T][T] = L, w[D][T] = c(0), w[T][D] = c(0);
    for (var U = 0; U < R; U++)
      U !== D && U !== T && (w[D][U] = z[U], w[U][D] = z[U], w[T][U] = V[U], w[U][T] = V[U]);
    return w;
  }
  function b(w, E, D, T) {
    for (var R = w.length, B = Math.cos(E), I = Math.sin(E), C = B * B, k = I * I, z = Array(R).fill(0), V = Array(R).fill(0), ee = C * w[D][D] - 2 * B * I * w[D][T] + k * w[T][T], re = k * w[D][D] + 2 * B * I * w[D][T] + C * w[T][T], L = 0; L < R; L++)
      z[L] = B * w[D][L] - I * w[T][L], V[L] = I * w[D][L] + B * w[T][L];
    w[D][D] = ee, w[T][T] = re, w[D][T] = 0, w[T][D] = 0;
    for (var J = 0; J < R; J++)
      J !== D && J !== T && (w[D][J] = z[J], w[J][D] = z[J], w[T][J] = V[J], w[J][T] = V[J]);
    return w;
  }
  function _(w) {
    for (var E = w.length, D = 0, T = [0, 1], R = 0; R < E; R++)
      for (var B = R + 1; B < E; B++)
        Math.abs(D) < Math.abs(w[R][B]) && (D = Math.abs(w[R][B]), T = [R, B]);
    return [T, D];
  }
  function M(w) {
    for (var E = w.length, D = 0, T = [0, 1], R = 0; R < E; R++)
      for (var B = R + 1; B < E; B++)
        i(D) < i(w[R][B]) && (D = i(w[R][B]), T = [R, B]);
    return [T, D];
  }
  function A(w, E, D) {
    var T = w.length, R = Array(T), B;
    if (D) {
      B = Array(T);
      for (var I = 0; I < T; I++)
        B[I] = Array(T);
    }
    for (var C = 0; C < T; C++) {
      for (var k = 0, z = w[0], V = 0; V < w.length; V++)
        i(w[V]) < i(z) && (k = V, z = w[k]);
      if (R[C] = w.splice(k, 1)[0], D)
        for (var ee = 0; ee < T; ee++)
          B[C][ee] = E[ee][k], E[ee].splice(k, 1);
    }
    if (!D) return {
      values: R
    };
    var re = B.map((L, J) => ({
      value: R[J],
      vector: L
    }));
    return {
      values: R,
      eigenvectors: re
    };
  }
  return d;
}
var mO = "eigs", pO = ["config", "typed", "matrix", "addScalar", "equal", "subtract", "abs", "atan", "cos", "sin", "multiplyScalar", "divideScalar", "inv", "bignumber", "multiply", "add", "larger", "column", "flatten", "number", "complex", "sqrt", "diag", "size", "reshape", "qr", "usolve", "usolveAll", "im", "re", "smaller", "matrixFromColumns", "dot"], vO = /* @__PURE__ */ W(mO, pO, (r) => {
  var {
    config: e,
    typed: t,
    matrix: n,
    addScalar: i,
    subtract: a,
    equal: s,
    abs: o,
    atan: l,
    cos: u,
    sin: c,
    multiplyScalar: f,
    divideScalar: h,
    inv: d,
    bignumber: m,
    multiply: p,
    add: g,
    larger: v,
    column: S,
    flatten: x,
    number: y,
    complex: b,
    sqrt: _,
    diag: M,
    size: A,
    reshape: w,
    qr: E,
    usolve: D,
    usolveAll: T,
    im: R,
    re: B,
    smaller: I,
    matrixFromColumns: C,
    dot: k
  } = r, z = dO({
    config: e,
    addScalar: i,
    subtract: a,
    abs: o,
    atan: l,
    cos: u,
    sin: c,
    multiplyScalar: f,
    inv: d,
    bignumber: m,
    multiply: p,
    add: g
  }), V = hO({
    addScalar: i,
    subtract: a,
    multiply: p,
    multiplyScalar: f,
    flatten: x,
    divideScalar: h,
    sqrt: _,
    abs: o,
    bignumber: m,
    diag: M,
    size: A,
    reshape: w,
    qr: E,
    inv: d,
    usolve: D,
    usolveAll: T,
    equal: s,
    complex: b,
    larger: v,
    smaller: I,
    matrixFromColumns: C,
    dot: k
  });
  return t("eigs", {
    // The conversion to matrix in the first two implementations,
    // just to convert back to an array right away in
    // computeValuesAndVectors, is unfortunate, and should perhaps be
    // streamlined. It is done because the Matrix object carries some
    // type information about its entries, and so constructing the matrix
    // is a roundabout way of doing type detection.
    Array: function(ie) {
      return ee(n(ie));
    },
    "Array, number|BigNumber": function(ie, G) {
      return ee(n(ie), {
        precision: G
      });
    },
    "Array, Object"(oe, ie) {
      return ee(n(oe), ie);
    },
    Matrix: function(ie) {
      return ee(ie, {
        matricize: !0
      });
    },
    "Matrix, number|BigNumber": function(ie, G) {
      return ee(ie, {
        precision: G,
        matricize: !0
      });
    },
    "Matrix, Object": function(ie, G) {
      var Z = {
        matricize: !0
      };
      return pr(Z, G), ee(ie, Z);
    }
  });
  function ee(oe) {
    var ie, G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, Z = "eigenvectors" in G ? G.eigenvectors : !0, te = (ie = G.precision) !== null && ie !== void 0 ? ie : e.relTol, ne = re(oe, te, Z);
    return G.matricize && (ne.values = n(ne.values), Z && (ne.eigenvectors = ne.eigenvectors.map((ae) => {
      var {
        value: xe,
        vector: q
      } = ae;
      return {
        value: xe,
        vector: n(q)
      };
    }))), Z && Object.defineProperty(ne, "vectors", {
      enumerable: !1,
      // to make sure that the eigenvectors can still be
      // converted to string.
      get: () => {
        throw new Error("eigs(M).vectors replaced with eigs(M).eigenvectors");
      }
    }), ne;
  }
  function re(oe, ie, G) {
    var Z = oe.toArray(), te = oe.size();
    if (te.length !== 2 || te[0] !== te[1])
      throw new RangeError("Matrix must be square (size: ".concat(lt(te), ")"));
    var ne = te[0];
    if (J(Z, ne, ie) && (U(Z, ne), L(Z, ne, ie))) {
      var ae = ue(oe, Z, ne);
      return z(Z, ne, ie, ae, G);
    }
    var xe = ue(oe, Z, ne);
    return V(Z, ne, ie, xe, G);
  }
  function L(oe, ie, G) {
    for (var Z = 0; Z < ie; Z++)
      for (var te = Z; te < ie; te++)
        if (v(m(o(a(oe[Z][te], oe[te][Z]))), G))
          return !1;
    return !0;
  }
  function J(oe, ie, G) {
    for (var Z = 0; Z < ie; Z++)
      for (var te = 0; te < ie; te++)
        if (v(m(o(R(oe[Z][te]))), G))
          return !1;
    return !0;
  }
  function U(oe, ie) {
    for (var G = 0; G < ie; G++)
      for (var Z = 0; Z < ie; Z++)
        oe[G][Z] = B(oe[G][Z]);
  }
  function ue(oe, ie, G) {
    var Z = oe.datatype();
    if (Z === "number" || Z === "BigNumber" || Z === "Complex")
      return Z;
    for (var te = !1, ne = !1, ae = !1, xe = 0; xe < G; xe++)
      for (var q = 0; q < G; q++) {
        var Ae = ie[xe][q];
        if (et(Ae) || Qi(Ae))
          te = !0;
        else if (Qe(Ae))
          ne = !0;
        else if (fn(Ae))
          ae = !0;
        else
          throw TypeError("Unsupported type in Matrix: " + Dt(Ae));
      }
    if (ne && ae && console.warn("Complex BigNumbers not supported, this operation will lose precission."), ae) {
      for (var De = 0; De < G; De++)
        for (var Ne = 0; Ne < G; Ne++)
          ie[De][Ne] = b(ie[De][Ne]);
      return "Complex";
    }
    if (ne) {
      for (var we = 0; we < G; we++)
        for (var Pe = 0; Pe < G; Pe++)
          ie[we][Pe] = m(ie[we][Pe]);
      return "BigNumber";
    }
    if (te) {
      for (var $ = 0; $ < G; $++)
        for (var P = 0; P < G; P++)
          ie[$][P] = y(ie[$][P]);
      return "number";
    } else
      throw TypeError("Matrix contains unsupported types only.");
  }
}), Vp = "expm", gO = ["typed", "abs", "add", "identity", "inv", "multiply"], yO = /* @__PURE__ */ W(Vp, gO, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    identity: i,
    inv: a,
    multiply: s
  } = r;
  return e(Vp, {
    Matrix: function(f) {
      var h = f.size();
      if (h.length !== 2 || h[0] !== h[1])
        throw new RangeError("Matrix must be square (size: " + lt(h) + ")");
      for (var d = h[0], m = 1e-15, p = o(f), g = l(p, m), v = g.q, S = g.j, x = s(f, Math.pow(2, -S)), y = i(d), b = i(d), _ = 1, M = x, A = -1, w = 1; w <= v; w++)
        w > 1 && (M = s(M, x), A = -A), _ = _ * (v - w + 1) / ((2 * v - w + 1) * w), y = n(y, s(_, M)), b = n(b, s(_ * A, M));
      for (var E = s(a(b), y), D = 0; D < S; D++)
        E = s(E, E);
      return ai(f) ? f.createSparseMatrix(E) : E;
    }
  });
  function o(c) {
    for (var f = c.size()[0], h = 0, d = 0; d < f; d++) {
      for (var m = 0, p = 0; p < f; p++)
        m += t(c.get([d, p]));
      h = Math.max(m, h);
    }
    return h;
  }
  function l(c, f) {
    for (var h = 30, d = 0; d < h; d++)
      for (var m = 0; m <= d; m++) {
        var p = d - m;
        if (u(c, m, p) < f)
          return {
            q: m,
            j: p
          };
      }
    throw new Error("Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)");
  }
  function u(c, f, h) {
    for (var d = 1, m = 2; m <= f; m++)
      d *= m;
    for (var p = d, g = f + 1; g <= 2 * f; g++)
      p *= g;
    var v = p * (2 * f + 1);
    return 8 * Math.pow(c / Math.pow(2, h), 2 * f) * d * d / (p * v);
  }
}), qp = "sqrtm", xO = ["typed", "abs", "add", "multiply", "map", "sqrt", "subtract", "inv", "size", "max", "identity"], _O = /* @__PURE__ */ W(qp, xO, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    multiply: i,
    map: a,
    sqrt: s,
    subtract: o,
    inv: l,
    size: u,
    max: c,
    identity: f
  } = r, h = 1e3, d = 1e-6;
  function m(p) {
    var g, v = 0, S = p, x = f(u(p));
    do {
      var y = S;
      if (S = i(0.5, n(y, l(x))), x = i(0.5, n(x, l(y))), g = c(t(o(S, y))), g > d && ++v > h)
        throw new Error("computing square root of matrix: iterative method could not converge");
    } while (g > d);
    return S;
  }
  return e(qp, {
    "Array | Matrix": function(g) {
      var v = Ve(g) ? g.size() : Je(g);
      switch (v.length) {
        case 1:
          if (v[0] === 1)
            return a(g, s);
          throw new RangeError("Matrix must be square (size: " + lt(v) + ")");
        case 2: {
          var S = v[0], x = v[1];
          if (S === x)
            return m(g);
          throw new RangeError("Matrix must be square (size: " + lt(v) + ")");
        }
        default:
          throw new RangeError("Matrix must be at most two dimensional (size: " + lt(v) + ")");
      }
    }
  });
}), Wp = "sylvester", bO = ["typed", "schur", "matrixFromColumns", "matrix", "multiply", "range", "concat", "transpose", "index", "subset", "add", "subtract", "identity", "lusolve", "abs"], wO = /* @__PURE__ */ W(Wp, bO, (r) => {
  var {
    typed: e,
    schur: t,
    matrixFromColumns: n,
    matrix: i,
    multiply: a,
    range: s,
    concat: o,
    transpose: l,
    index: u,
    subset: c,
    add: f,
    subtract: h,
    identity: d,
    lusolve: m,
    abs: p
  } = r;
  return e(Wp, {
    "Matrix, Matrix, Matrix": g,
    "Array, Matrix, Matrix": function(S, x, y) {
      return g(i(S), x, y);
    },
    "Array, Array, Matrix": function(S, x, y) {
      return g(i(S), i(x), y);
    },
    "Array, Matrix, Array": function(S, x, y) {
      return g(i(S), x, i(y));
    },
    "Matrix, Array, Matrix": function(S, x, y) {
      return g(S, i(x), y);
    },
    "Matrix, Array, Array": function(S, x, y) {
      return g(S, i(x), i(y));
    },
    "Matrix, Matrix, Array": function(S, x, y) {
      return g(S, x, i(y));
    },
    "Array, Array, Array": function(S, x, y) {
      return g(i(S), i(x), i(y)).toArray();
    }
  });
  function g(v, S, x) {
    for (var y = S.size()[0], b = v.size()[0], _ = t(v), M = _.T, A = _.U, w = t(a(-1, S)), E = w.T, D = w.U, T = a(a(l(A), x), D), R = s(0, b), B = [], I = (ae, xe) => o(ae, xe, 1), C = (ae, xe) => o(ae, xe, 0), k = 0; k < y; k++)
      if (k < y - 1 && p(c(E, u(k + 1, k))) > 1e-5) {
        for (var z = C(c(T, u(R, k)), c(T, u(R, k + 1))), V = 0; V < k; V++)
          z = f(z, C(a(B[V], c(E, u(V, k))), a(B[V], c(E, u(V, k + 1)))));
        var ee = a(d(b), a(-1, c(E, u(k, k)))), re = a(d(b), a(-1, c(E, u(k + 1, k)))), L = a(d(b), a(-1, c(E, u(k, k + 1)))), J = a(d(b), a(-1, c(E, u(k + 1, k + 1)))), U = C(I(f(M, ee), re), I(L, f(M, J))), ue = m(U, z);
        B[k] = ue.subset(u(s(0, b), 0)), B[k + 1] = ue.subset(u(s(b, 2 * b), 0)), k++;
      } else {
        for (var oe = c(T, u(R, k)), ie = 0; ie < k; ie++)
          oe = f(oe, a(B[ie], c(E, u(ie, k))));
        var G = c(E, u(k, k)), Z = h(M, a(G, d(b)));
        B[k] = m(Z, oe);
      }
    var te = i(n(...B)), ne = a(A, a(te, l(D)));
    return ne;
  }
}), Xp = "schur", SO = ["typed", "matrix", "identity", "multiply", "qr", "norm", "subtract"], EO = /* @__PURE__ */ W(Xp, SO, (r) => {
  var {
    typed: e,
    matrix: t,
    identity: n,
    multiply: i,
    qr: a,
    norm: s,
    subtract: o
  } = r;
  return e(Xp, {
    Array: function(c) {
      var f = l(t(c));
      return {
        U: f.U.valueOf(),
        T: f.T.valueOf()
      };
    },
    Matrix: function(c) {
      return l(c);
    }
  });
  function l(u) {
    var c = u.size()[0], f = u, h = n(c), d = 0, m;
    do {
      m = f;
      var p = a(f), g = p.Q, v = p.R;
      if (f = i(v, g), h = i(h, g), d++ > 100)
        break;
    } while (s(o(f, m)) > 1e-4);
    return {
      U: h,
      T: f
    };
  }
}), Yp = "lyap", MO = ["typed", "matrix", "sylvester", "multiply", "transpose"], AO = /* @__PURE__ */ W(Yp, MO, (r) => {
  var {
    typed: e,
    matrix: t,
    sylvester: n,
    multiply: i,
    transpose: a
  } = r;
  return e(Yp, {
    "Matrix, Matrix": function(o, l) {
      return n(o, a(o), i(-1, l));
    },
    "Array, Matrix": function(o, l) {
      return n(t(o), a(t(o)), i(-1, l));
    },
    "Matrix, Array": function(o, l) {
      return n(o, a(t(o)), t(i(-1, l)));
    },
    "Array, Array": function(o, l) {
      return n(t(o), a(t(o)), t(i(-1, l))).toArray();
    }
  });
}), DO = "divide", CO = ["typed", "matrix", "multiply", "equalScalar", "divideScalar", "inv"], TO = /* @__PURE__ */ W(DO, CO, (r) => {
  var {
    typed: e,
    matrix: t,
    multiply: n,
    equalScalar: i,
    divideScalar: a,
    inv: s
  } = r, o = cr({
    typed: e,
    equalScalar: i
  }), l = vn({
    typed: e
  });
  return e("divide", pg({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    "Array | Matrix, Array | Matrix": function(c, f) {
      return n(c, s(f));
    },
    "DenseMatrix, any": function(c, f) {
      return l(c, f, a, !1);
    },
    "SparseMatrix, any": function(c, f) {
      return o(c, f, a, !1);
    },
    "Array, any": function(c, f) {
      return l(t(c), f, a, !1).valueOf();
    },
    "any, Array | Matrix": function(c, f) {
      return n(c, s(f));
    }
  }, a.signatures));
}), Zp = "distance", NO = ["typed", "addScalar", "subtractScalar", "divideScalar", "multiplyScalar", "deepEqual", "sqrt", "abs"], RO = /* @__PURE__ */ W(Zp, NO, (r) => {
  var {
    typed: e,
    addScalar: t,
    subtractScalar: n,
    multiplyScalar: i,
    divideScalar: a,
    deepEqual: s,
    sqrt: o,
    abs: l
  } = r;
  return e(Zp, {
    "Array, Array, Array": function(b, _, M) {
      if (b.length === 2 && _.length === 2 && M.length === 2) {
        if (!c(b))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
        if (!c(_))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");
        if (!c(M))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");
        if (s(_, M))
          throw new TypeError("LinePoint1 should not be same with LinePoint2");
        var A = n(M[1], _[1]), w = n(_[0], M[0]), E = n(i(M[0], _[1]), i(_[0], M[1]));
        return g(b[0], b[1], A, w, E);
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Object, Object, Object": function(b, _, M) {
      if (Object.keys(b).length === 2 && Object.keys(_).length === 2 && Object.keys(M).length === 2) {
        if (!c(b))
          throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");
        if (!c(_))
          throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers");
        if (!c(M))
          throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers");
        if (s(m(_), m(M)))
          throw new TypeError("LinePoint1 should not be same with LinePoint2");
        if ("pointX" in b && "pointY" in b && "lineOnePtX" in _ && "lineOnePtY" in _ && "lineTwoPtX" in M && "lineTwoPtY" in M) {
          var A = n(M.lineTwoPtY, _.lineOnePtY), w = n(_.lineOnePtX, M.lineTwoPtX), E = n(i(M.lineTwoPtX, _.lineOnePtY), i(_.lineOnePtX, M.lineTwoPtY));
          return g(b.pointX, b.pointY, A, w, E);
        } else
          throw new TypeError("Key names do not match");
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Array, Array": function(b, _) {
      if (b.length === 2 && _.length === 3) {
        if (!c(b))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
        if (!f(_))
          throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
        return g(b[0], b[1], _[0], _[1], _[2]);
      } else if (b.length === 3 && _.length === 6) {
        if (!f(b))
          throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
        if (!d(_))
          throw new TypeError("Array with 6 numbers or BigNumbers expected for second argument");
        return v(b[0], b[1], b[2], _[0], _[1], _[2], _[3], _[4], _[5]);
      } else if (b.length === _.length && b.length > 0) {
        if (!h(b))
          throw new TypeError("All values of an array should be numbers or BigNumbers");
        if (!h(_))
          throw new TypeError("All values of an array should be numbers or BigNumbers");
        return S(b, _);
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Object, Object": function(b, _) {
      if (Object.keys(b).length === 2 && Object.keys(_).length === 3) {
        if (!c(b))
          throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");
        if (!f(_))
          throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers");
        if ("pointX" in b && "pointY" in b && "xCoeffLine" in _ && "yCoeffLine" in _ && "constant" in _)
          return g(b.pointX, b.pointY, _.xCoeffLine, _.yCoeffLine, _.constant);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(b).length === 3 && Object.keys(_).length === 6) {
        if (!f(b))
          throw new TypeError("Values of pointX, pointY and pointZ should be numbers or BigNumbers");
        if (!d(_))
          throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers or BigNumbers");
        if ("pointX" in b && "pointY" in b && "x0" in _ && "y0" in _ && "z0" in _ && "a" in _ && "b" in _ && "c" in _)
          return v(b.pointX, b.pointY, b.pointZ, _.x0, _.y0, _.z0, _.a, _.b, _.c);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(b).length === 2 && Object.keys(_).length === 2) {
        if (!c(b))
          throw new TypeError("Values of pointOneX and pointOneY should be numbers or BigNumbers");
        if (!c(_))
          throw new TypeError("Values of pointTwoX and pointTwoY should be numbers or BigNumbers");
        if ("pointOneX" in b && "pointOneY" in b && "pointTwoX" in _ && "pointTwoY" in _)
          return S([b.pointOneX, b.pointOneY], [_.pointTwoX, _.pointTwoY]);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(b).length === 3 && Object.keys(_).length === 3) {
        if (!f(b))
          throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers");
        if (!f(_))
          throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers");
        if ("pointOneX" in b && "pointOneY" in b && "pointOneZ" in b && "pointTwoX" in _ && "pointTwoY" in _ && "pointTwoZ" in _)
          return S([b.pointOneX, b.pointOneY, b.pointOneZ], [_.pointTwoX, _.pointTwoY, _.pointTwoZ]);
        throw new TypeError("Key names do not match");
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    Array: function(b) {
      if (!p(b))
        throw new TypeError("Incorrect array format entered for pairwise distance calculation");
      return x(b);
    }
  });
  function u(y) {
    return typeof y == "number" || Qe(y);
  }
  function c(y) {
    return y.constructor !== Array && (y = m(y)), u(y[0]) && u(y[1]);
  }
  function f(y) {
    return y.constructor !== Array && (y = m(y)), u(y[0]) && u(y[1]) && u(y[2]);
  }
  function h(y) {
    return Array.isArray(y) || (y = m(y)), y.every(u);
  }
  function d(y) {
    return y.constructor !== Array && (y = m(y)), u(y[0]) && u(y[1]) && u(y[2]) && u(y[3]) && u(y[4]) && u(y[5]);
  }
  function m(y) {
    for (var b = Object.keys(y), _ = [], M = 0; M < b.length; M++)
      _.push(y[b[M]]);
    return _;
  }
  function p(y) {
    if (y[0].length === 2 && u(y[0][0]) && u(y[0][1])) {
      if (y.some((b) => b.length !== 2 || !u(b[0]) || !u(b[1])))
        return !1;
    } else if (y[0].length === 3 && u(y[0][0]) && u(y[0][1]) && u(y[0][2])) {
      if (y.some((b) => b.length !== 3 || !u(b[0]) || !u(b[1]) || !u(b[2])))
        return !1;
    } else
      return !1;
    return !0;
  }
  function g(y, b, _, M, A) {
    var w = l(t(t(i(_, y), i(M, b)), A)), E = o(t(i(_, _), i(M, M)));
    return a(w, E);
  }
  function v(y, b, _, M, A, w, E, D, T) {
    var R = [n(i(n(A, b), T), i(n(w, _), D)), n(i(n(w, _), E), i(n(M, y), T)), n(i(n(M, y), D), i(n(A, b), E))];
    R = o(t(t(i(R[0], R[0]), i(R[1], R[1])), i(R[2], R[2])));
    var B = o(t(t(i(E, E), i(D, D)), i(T, T)));
    return a(R, B);
  }
  function S(y, b) {
    for (var _ = y.length, M = 0, A = 0, w = 0; w < _; w++)
      A = n(y[w], b[w]), M = t(i(A, A), M);
    return o(M);
  }
  function x(y) {
    for (var b = [], _ = [], M = [], A = 0; A < y.length - 1; A++)
      for (var w = A + 1; w < y.length; w++)
        y[0].length === 2 ? (_ = [y[A][0], y[A][1]], M = [y[w][0], y[w][1]]) : y[0].length === 3 && (_ = [y[A][0], y[A][1], y[A][2]], M = [y[w][0], y[w][1], y[w][2]]), b.push(S(_, M));
    return b;
  }
}), FO = "intersect", OO = ["typed", "config", "abs", "add", "addScalar", "matrix", "multiply", "multiplyScalar", "divideScalar", "subtract", "smaller", "equalScalar", "flatten", "isZero", "isNumeric"], PO = /* @__PURE__ */ W(FO, OO, (r) => {
  var {
    typed: e,
    config: t,
    abs: n,
    add: i,
    addScalar: a,
    matrix: s,
    multiply: o,
    multiplyScalar: l,
    divideScalar: u,
    subtract: c,
    smaller: f,
    equalScalar: h,
    flatten: d,
    isZero: m,
    isNumeric: p
  } = r;
  return e("intersect", {
    "Array, Array, Array": g,
    "Array, Array, Array, Array": v,
    "Matrix, Matrix, Matrix": function(D, T, R) {
      var B = g(D.valueOf(), T.valueOf(), R.valueOf());
      return B === null ? null : s(B);
    },
    "Matrix, Matrix, Matrix, Matrix": function(D, T, R, B) {
      var I = v(D.valueOf(), T.valueOf(), R.valueOf(), B.valueOf());
      return I === null ? null : s(I);
    }
  });
  function g(E, D, T) {
    if (E = S(E), D = S(D), T = S(T), !y(E))
      throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
    if (!y(D))
      throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
    if (!b(T))
      throw new TypeError("Array with 4 numbers expected as third argument");
    return w(E[0], E[1], E[2], D[0], D[1], D[2], T[0], T[1], T[2], T[3]);
  }
  function v(E, D, T, R) {
    if (E = S(E), D = S(D), T = S(T), R = S(R), E.length === 2) {
      if (!x(E))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
      if (!x(D))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");
      if (!x(T))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");
      if (!x(R))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for fourth argument");
      return _(E, D, T, R);
    } else if (E.length === 3) {
      if (!y(E))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
      if (!y(D))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
      if (!y(T))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for third argument");
      if (!y(R))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for fourth argument");
      return A(E[0], E[1], E[2], D[0], D[1], D[2], T[0], T[1], T[2], R[0], R[1], R[2]);
    } else
      throw new TypeError("Arrays with two or thee dimensional points expected");
  }
  function S(E) {
    return E.length === 1 ? E[0] : E.length > 1 && Array.isArray(E[0]) && E.every((D) => Array.isArray(D) && D.length === 1) ? d(E) : E;
  }
  function x(E) {
    return E.length === 2 && p(E[0]) && p(E[1]);
  }
  function y(E) {
    return E.length === 3 && p(E[0]) && p(E[1]) && p(E[2]);
  }
  function b(E) {
    return E.length === 4 && p(E[0]) && p(E[1]) && p(E[2]) && p(E[3]);
  }
  function _(E, D, T, R) {
    var B = E, I = T, C = c(B, D), k = c(I, R), z = c(l(C[0], k[1]), l(k[0], C[1]));
    if (m(z) || f(n(z), t.relTol))
      return null;
    var V = l(k[0], B[1]), ee = l(k[1], B[0]), re = l(k[0], I[1]), L = l(k[1], I[0]), J = u(a(c(c(V, ee), re), L), z);
    return i(o(C, J), B);
  }
  function M(E, D, T, R, B, I, C, k, z, V, ee, re) {
    var L = l(c(E, D), c(T, R)), J = l(c(B, I), c(C, k)), U = l(c(z, V), c(ee, re));
    return a(a(L, J), U);
  }
  function A(E, D, T, R, B, I, C, k, z, V, ee, re) {
    var L = M(E, C, V, C, D, k, ee, k, T, z, re, z), J = M(V, C, R, E, ee, k, B, D, re, z, I, T), U = M(E, C, R, E, D, k, B, D, T, z, I, T), ue = M(V, C, V, C, ee, k, ee, k, re, z, re, z), oe = M(R, E, R, E, B, D, B, D, I, T, I, T), ie = c(l(L, J), l(U, ue)), G = c(l(oe, ue), l(J, J));
    if (m(G)) return null;
    var Z = u(ie, G), te = u(a(L, l(Z, J)), ue), ne = a(E, l(Z, c(R, E))), ae = a(D, l(Z, c(B, D))), xe = a(T, l(Z, c(I, T))), q = a(C, l(te, c(V, C))), Ae = a(k, l(te, c(ee, k))), De = a(z, l(te, c(re, z)));
    return h(ne, q) && h(ae, Ae) && h(xe, De) ? [ne, ae, xe] : null;
  }
  function w(E, D, T, R, B, I, C, k, z, V) {
    var ee = l(E, C), re = l(R, C), L = l(D, k), J = l(B, k), U = l(T, z), ue = l(I, z), oe = c(c(c(V, ee), L), U), ie = c(c(c(a(a(re, J), ue), ee), L), U), G = u(oe, ie), Z = a(E, l(G, c(R, E))), te = a(D, l(G, c(B, D))), ne = a(T, l(G, c(I, T)));
    return [Z, te, ne];
  }
}), Kp = "sum", BO = ["typed", "config", "add", "numeric"], ly = /* @__PURE__ */ W(Kp, BO, (r) => {
  var {
    typed: e,
    config: t,
    add: n,
    numeric: i
  } = r;
  return e(Kp, {
    // sum([a, b, c, d, ...])
    "Array | Matrix": a,
    // sum([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": s,
    // sum(a, b, c, d, ...)
    "...": function(l) {
      if (rs(l))
        throw new TypeError("Scalar values expected in function sum");
      return a(l);
    }
  });
  function a(o) {
    var l;
    return pi(o, function(u) {
      try {
        l = l === void 0 ? u : n(l, u);
      } catch (c) {
        throw Er(c, "sum", u);
      }
    }), l === void 0 && (l = i(0, t.number)), typeof l == "string" && (l = i(l, xi(l, t))), l;
  }
  function s(o, l) {
    try {
      var u = Uu(o, l, n);
      return u;
    } catch (c) {
      throw Er(c, "sum");
    }
  }
}), _o = "cumsum", IO = ["typed", "add", "unaryPlus"], cy = /* @__PURE__ */ W(_o, IO, (r) => {
  var {
    typed: e,
    add: t,
    unaryPlus: n
  } = r;
  return e(_o, {
    // sum([a, b, c, d, ...])
    Array: i,
    Matrix: function(u) {
      return u.create(i(u.valueOf(), u.datatype()));
    },
    // sum([a, b, c, d, ...], dim)
    "Array, number | BigNumber": s,
    "Matrix, number | BigNumber": function(u, c) {
      return u.create(s(u.valueOf(), c), u.datatype());
    },
    // cumsum(a, b, c, d, ...)
    "...": function(u) {
      if (rs(u))
        throw new TypeError("All values expected to be scalar in function cumsum");
      return i(u);
    }
  });
  function i(l) {
    try {
      return a(l);
    } catch (u) {
      throw Er(u, _o);
    }
  }
  function a(l) {
    if (l.length === 0)
      return [];
    for (var u = [n(l[0])], c = 1; c < l.length; ++c)
      u.push(t(u[c - 1], l[c]));
    return u;
  }
  function s(l, u) {
    var c = Je(l);
    if (u < 0 || u >= c.length)
      throw new jr(u, c.length);
    try {
      return o(l, u);
    } catch (f) {
      throw Er(f, _o);
    }
  }
  function o(l, u) {
    var c, f, h;
    if (u <= 0) {
      var d = l[0][0];
      if (Array.isArray(d)) {
        for (h = Wg(l), f = [], c = 0; c < h.length; c++)
          f[c] = o(h[c], u - 1);
        return f;
      } else
        return a(l);
    } else {
      for (f = [], c = 0; c < l.length; c++)
        f[c] = o(l[c], u - 1);
      return f;
    }
  }
}), Jp = "mean", LO = ["typed", "add", "divide"], fy = /* @__PURE__ */ W(Jp, LO, (r) => {
  var {
    typed: e,
    add: t,
    divide: n
  } = r;
  return e(Jp, {
    // mean([a, b, c, d, ...])
    "Array | Matrix": a,
    // mean([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": i,
    // mean(a, b, c, d, ...)
    "...": function(o) {
      if (rs(o))
        throw new TypeError("Scalar values expected in function mean");
      return a(o);
    }
  });
  function i(s, o) {
    try {
      var l = Uu(s, o, t), u = Array.isArray(s) ? Je(s) : s.size();
      return n(l, u[o]);
    } catch (c) {
      throw Er(c, "mean");
    }
  }
  function a(s) {
    var o, l = 0;
    if (pi(s, function(u) {
      try {
        o = o === void 0 ? u : t(o, u), l++;
      } catch (c) {
        throw Er(c, "mean", u);
      }
    }), l === 0)
      throw new Error("Cannot calculate the mean of an empty array");
    return n(o, l);
  }
}), Qp = "median", UO = ["typed", "add", "divide", "compare", "partitionSelect"], zO = /* @__PURE__ */ W(Qp, UO, (r) => {
  var {
    typed: e,
    add: t,
    divide: n,
    compare: i,
    partitionSelect: a
  } = r;
  function s(u) {
    try {
      u = vt(u.valueOf());
      var c = u.length;
      if (c === 0)
        throw new Error("Cannot calculate median of an empty array");
      if (c % 2 === 0) {
        for (var f = c / 2 - 1, h = a(u, f + 1), d = u[f], m = 0; m < f; ++m)
          i(u[m], d) > 0 && (d = u[m]);
        return l(d, h);
      } else {
        var p = a(u, (c - 1) / 2);
        return o(p);
      }
    } catch (g) {
      throw Er(g, "median");
    }
  }
  var o = e({
    "number | BigNumber | Complex | Unit": function(c) {
      return c;
    }
  }), l = e({
    "number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit": function(c, f) {
      return n(t(c, f), 2);
    }
  });
  return e(Qp, {
    // median([a, b, c, d, ...])
    "Array | Matrix": s,
    // median([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(c, f) {
      throw new Error("median(A, dim) is not yet supported");
    },
    // median(a, b, c, d, ...)
    "...": function(c) {
      if (rs(c))
        throw new TypeError("Scalar values expected in function median");
      return s(c);
    }
  });
}), jp = "mad", kO = ["typed", "abs", "map", "median", "subtract"], HO = /* @__PURE__ */ W(jp, kO, (r) => {
  var {
    typed: e,
    abs: t,
    map: n,
    median: i,
    subtract: a
  } = r;
  return e(jp, {
    // mad([a, b, c, d, ...])
    "Array | Matrix": s,
    // mad(a, b, c, d, ...)
    "...": function(l) {
      return s(l);
    }
  });
  function s(o) {
    if (o = vt(o.valueOf()), o.length === 0)
      throw new Error("Cannot calculate median absolute deviation (mad) of an empty array");
    try {
      var l = i(o);
      return i(n(o, function(u) {
        return t(a(u, l));
      }));
    } catch (u) {
      throw u instanceof TypeError && u.message.includes("median") ? new TypeError(u.message.replace("median", "mad")) : Er(u, "mad");
    }
  }
}), vl = "unbiased", e0 = "variance", GO = ["typed", "add", "subtract", "multiply", "divide", "mapSlices", "isNaN"], hy = /* @__PURE__ */ W(e0, GO, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: i,
    divide: a,
    mapSlices: s,
    isNaN: o
  } = r;
  return e(e0, {
    // variance([a, b, c, d, ...])
    "Array | Matrix": function(f) {
      return l(f, vl);
    },
    // variance([a, b, c, d, ...], normalization)
    "Array | Matrix, string": l,
    // variance([a, b, c, c, ...], dim)
    "Array | Matrix, number | BigNumber": function(f, h) {
      return u(f, h, vl);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    "Array | Matrix, number | BigNumber, string": u,
    // variance(a, b, c, d, ...)
    "...": function(f) {
      return l(f, vl);
    }
  });
  function l(c, f) {
    var h, d = 0;
    if (c.length === 0)
      throw new SyntaxError("Function variance requires one or more parameters (0 provided)");
    if (pi(c, function(g) {
      try {
        h = h === void 0 ? g : t(h, g), d++;
      } catch (v) {
        throw Er(v, "variance", g);
      }
    }), d === 0) throw new Error("Cannot calculate variance of an empty array");
    var m = a(h, d);
    if (h = void 0, pi(c, function(g) {
      var v = n(g, m);
      h = h === void 0 ? i(v, v) : t(h, i(v, v));
    }), o(h))
      return h;
    switch (f) {
      case "uncorrected":
        return a(h, d);
      case "biased":
        return a(h, d + 1);
      case "unbiased": {
        var p = Qe(h) ? h.mul(0) : 0;
        return d === 1 ? p : a(h, d - 1);
      }
      default:
        throw new Error('Unknown normalization "' + f + '". Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }
  function u(c, f, h) {
    try {
      if (c.length === 0)
        throw new SyntaxError("Function variance requires one or more parameters (0 provided)");
      return s(c, f, (d) => l(d, h));
    } catch (d) {
      throw Er(d, "variance");
    }
  }
}), t0 = "quantileSeq", $O = ["typed", "?bignumber", "add", "subtract", "divide", "multiply", "partitionSelect", "compare", "isInteger", "smaller", "smallerEq", "larger", "mapSlices"], dy = /* @__PURE__ */ W(t0, $O, (r) => {
  var {
    typed: e,
    bignumber: t,
    add: n,
    subtract: i,
    divide: a,
    multiply: s,
    partitionSelect: o,
    compare: l,
    isInteger: u,
    smaller: c,
    smallerEq: f,
    larger: h,
    mapSlices: d
  } = r;
  return e(t0, {
    "Array | Matrix, number | BigNumber": (S, x) => p(S, x, !1),
    "Array | Matrix, number | BigNumber, number": (S, x, y) => m(S, x, !1, y, p),
    "Array | Matrix, number | BigNumber, boolean": p,
    "Array | Matrix, number | BigNumber, boolean, number": (S, x, y, b) => m(S, x, y, b, p),
    "Array | Matrix, Array | Matrix": (S, x) => g(S, x, !1),
    "Array | Matrix, Array | Matrix, number": (S, x, y) => m(S, x, !1, y, g),
    "Array | Matrix, Array | Matrix, boolean": g,
    "Array | Matrix, Array | Matrix, boolean, number": (S, x, y, b) => m(S, x, y, b, g)
  });
  function m(S, x, y, b, _) {
    return d(S, b, (M) => _(M, x, y));
  }
  function p(S, x, y) {
    var b, _ = S.valueOf();
    if (c(x, 0))
      throw new Error("N/prob must be non-negative");
    if (f(x, 1))
      return et(x) ? v(_, x, y) : t(v(_, x, y));
    if (h(x, 1)) {
      if (!u(x))
        throw new Error("N must be a positive integer");
      if (h(x, 4294967295))
        throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");
      var M = n(x, 1);
      b = [];
      for (var A = 0; c(A, x); A++) {
        var w = a(A + 1, M);
        b.push(v(_, w, y));
      }
      return et(x) ? b : t(b);
    }
  }
  function g(S, x, y) {
    for (var b = S.valueOf(), _ = x.valueOf(), M = [], A = 0; A < _.length; ++A)
      M.push(v(b, _[A], y));
    return M;
  }
  function v(S, x, y) {
    var b = vt(S), _ = b.length;
    if (_ === 0)
      throw new Error("Cannot calculate quantile of an empty sequence");
    var M = et(x) ? x * (_ - 1) : x.times(_ - 1), A = et(x) ? Math.floor(M) : M.floor().toNumber(), w = et(x) ? M % 1 : M.minus(A);
    if (u(M))
      return y ? b[M] : o(b, et(x) ? M : M.valueOf());
    var E, D;
    if (y)
      E = b[A], D = b[A + 1];
    else {
      D = o(b, A + 1), E = b[A];
      for (var T = 0; T < A; ++T)
        l(b[T], E) > 0 && (E = b[T]);
    }
    return n(s(E, i(1, w)), s(D, w));
  }
}), r0 = "std", VO = ["typed", "map", "sqrt", "variance"], my = /* @__PURE__ */ W(r0, VO, (r) => {
  var {
    typed: e,
    map: t,
    sqrt: n,
    variance: i
  } = r;
  return e(r0, {
    // std([a, b, c, d, ...])
    "Array | Matrix": a,
    // std([a, b, c, d, ...], normalization)
    "Array | Matrix, string": a,
    // std([a, b, c, c, ...], dim)
    "Array | Matrix, number | BigNumber": a,
    // std([a, b, c, c, ...], dim, normalization)
    "Array | Matrix, number | BigNumber, string": a,
    // std(a, b, c, d, ...)
    "...": function(o) {
      return a(o);
    }
  });
  function a(s, o) {
    if (s.length === 0)
      throw new SyntaxError("Function std requires one or more parameters (0 provided)");
    try {
      var l = i.apply(null, arguments);
      return kr(l) ? t(l, n) : n(l);
    } catch (u) {
      throw u instanceof TypeError && u.message.includes(" variance") ? new TypeError(u.message.replace(" variance", " std")) : u;
    }
  }
}), n0 = "corr", qO = ["typed", "matrix", "mean", "sqrt", "sum", "add", "subtract", "multiply", "pow", "divide"], WO = /* @__PURE__ */ W(n0, qO, (r) => {
  var {
    typed: e,
    matrix: t,
    sqrt: n,
    sum: i,
    add: a,
    subtract: s,
    multiply: o,
    pow: l,
    divide: u
  } = r;
  return e(n0, {
    "Array, Array": function(d, m) {
      return c(d, m);
    },
    "Matrix, Matrix": function(d, m) {
      var p = c(d.toArray(), m.toArray());
      return Array.isArray(p) ? t(p) : p;
    }
  });
  function c(h, d) {
    var m = [];
    if (Array.isArray(h[0]) && Array.isArray(d[0])) {
      if (h.length !== d.length)
        throw new SyntaxError("Dimension mismatch. Array A and B must have the same length.");
      for (var p = 0; p < h.length; p++) {
        if (h[p].length !== d[p].length)
          throw new SyntaxError("Dimension mismatch. Array A and B must have the same number of elements.");
        m.push(f(h[p], d[p]));
      }
      return m;
    } else {
      if (h.length !== d.length)
        throw new SyntaxError("Dimension mismatch. Array A and B must have the same number of elements.");
      return f(h, d);
    }
  }
  function f(h, d) {
    var m = h.length, p = i(h), g = i(d), v = h.reduce((_, M, A) => a(_, o(M, d[A])), 0), S = i(h.map((_) => l(_, 2))), x = i(d.map((_) => l(_, 2))), y = s(o(m, v), o(p, g)), b = n(o(s(o(m, S), l(p, 2)), s(o(m, x), l(g, 2))));
    return u(y, b);
  }
}), i0 = "combinations", XO = ["typed"], YO = /* @__PURE__ */ W(i0, XO, (r) => {
  var {
    typed: e
  } = r;
  return e(i0, {
    "number, number": d1,
    "BigNumber, BigNumber": function(n, i) {
      var a = n.constructor, s, o, l = n.minus(i), u = new a(1);
      if (!a0(n) || !a0(i))
        throw new TypeError("Positive integer value expected in function combinations");
      if (i.gt(n))
        throw new TypeError("k must be less than n in function combinations");
      if (s = u, i.lt(l))
        for (o = u; o.lte(l); o = o.plus(u))
          s = s.times(i.plus(o)).dividedBy(o);
      else
        for (o = u; o.lte(i); o = o.plus(u))
          s = s.times(l.plus(o)).dividedBy(o);
      return s;
    }
    // TODO: implement support for collection in combinations
  });
});
function a0(r) {
  return r.isInteger() && r.gte(0);
}
var s0 = "combinationsWithRep", ZO = ["typed"], KO = /* @__PURE__ */ W(s0, ZO, (r) => {
  var {
    typed: e
  } = r;
  return e(s0, {
    "number, number": function(n, i) {
      if (!$e(n) || n < 0)
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (!$e(i) || i < 0)
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (n < 1)
        throw new TypeError("k must be less than or equal to n + k - 1");
      if (i < n - 1) {
        var a = kn(n, n + i - 1);
        return a / kn(1, i);
      }
      var s = kn(i + 1, n + i - 1);
      return s / kn(1, n - 1);
    },
    "BigNumber, BigNumber": function(n, i) {
      var a = n.constructor, s, o, l = new a(1), u = n.minus(l);
      if (!o0(n) || !o0(i))
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (n.lt(l))
        throw new TypeError("k must be less than or equal to n + k - 1 in function combinationsWithRep");
      if (s = l, i.lt(u))
        for (o = l; o.lte(u); o = o.plus(l))
          s = s.times(i.plus(o)).dividedBy(o);
      else
        for (o = l; o.lte(i); o = o.plus(l))
          s = s.times(u.plus(o)).dividedBy(o);
      return s;
    }
  });
});
function o0(r) {
  return r.isInteger() && r.gte(0);
}
var u0 = "gamma", JO = ["typed", "config", "multiplyScalar", "pow", "BigNumber", "Complex"], QO = /* @__PURE__ */ W(u0, JO, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    pow: i,
    BigNumber: a,
    Complex: s
  } = r;
  function o(u) {
    if (u.im === 0)
      return mu(u.re);
    if (u.re < 0.5) {
      var c = new s(1 - u.re, -u.im), f = new s(Math.PI * u.re, Math.PI * u.im);
      return new s(Math.PI).div(f.sin()).div(o(c));
    }
    u = new s(u.re - 1, u.im);
    for (var h = new s(Ba[0], 0), d = 1; d < Ba.length; ++d) {
      var m = new s(Ba[d], 0);
      h = h.add(m.div(u.add(d)));
    }
    var p = new s(u.re + p1 + 0.5, u.im), g = Math.sqrt(2 * Math.PI), v = p.pow(u.add(0.5)), S = p.neg().exp();
    return h.mul(g).mul(v).mul(S);
  }
  return e(u0, {
    number: mu,
    Complex: o,
    BigNumber: function(c) {
      if (c.isInteger())
        return c.isNegative() || c.isZero() ? new a(1 / 0) : l(c.minus(1));
      if (!c.isFinite())
        return new a(c.isNegative() ? NaN : 1 / 0);
      throw new Error("Integer BigNumber expected");
    }
  });
  function l(u) {
    if (u < 8)
      return new a([1, 1, 2, 6, 24, 120, 720, 5040][u]);
    var c = t.precision + (Math.log(u.toNumber()) | 0), f = a.clone({
      precision: c
    });
    if (u % 2 === 1)
      return u.times(l(new a(u - 1)));
    for (var h = u, d = new f(u), m = u.toNumber(); h > 2; )
      h -= 2, m += h, d = d.times(m);
    return new a(d.toPrecision(a.precision));
  }
}), l0 = "lgamma", jO = ["Complex", "typed"], eP = /* @__PURE__ */ W(l0, jO, (r) => {
  var {
    Complex: e,
    typed: t
  } = r, n = 7, i = 7, a = [-0.029550653594771242, 0.00641025641025641, -0.0019175269175269176, 8417508417508417e-19, -5952380952380953e-19, 7936507936507937e-19, -0.002777777777777778, 0.08333333333333333];
  return t(l0, {
    number: pu,
    Complex: s,
    BigNumber: function() {
      throw new Error("mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber");
    }
  });
  function s(u) {
    var c = 6.283185307179586, f = 1.1447298858494002, h = 0.1;
    if (u.isNaN())
      return new e(NaN, NaN);
    if (u.im === 0)
      return new e(pu(u.re), 0);
    if (u.re >= n || Math.abs(u.im) >= i)
      return o(u);
    if (u.re <= h) {
      var d = Ux(c, u.im) * Math.floor(0.5 * u.re + 0.25), m = u.mul(Math.PI).sin().log(), p = s(new e(1 - u.re, -u.im));
      return new e(f, d).sub(m).sub(p);
    } else return u.im >= 0 ? l(u) : l(u.conjugate()).conjugate();
  }
  function o(u) {
    for (var c = u.sub(0.5).mul(u.log()).sub(u).add(v1), f = new e(1, 0).div(u), h = f.div(u), d = a[0], m = a[1], p = 2 * h.re, g = h.re * h.re + h.im * h.im, v = 2; v < 8; v++) {
      var S = m;
      m = -g * d + a[v], d = p * d + S;
    }
    var x = f.mul(h.mul(d).add(m));
    return c.add(x);
  }
  function l(u) {
    var c = 0, f = 0, h = u;
    for (u = u.add(1); u.re <= n; ) {
      h = h.mul(u);
      var d = h.im < 0 ? 1 : 0;
      d !== 0 && f === 0 && c++, f = d, u = u.add(1);
    }
    return o(u).sub(h.log()).sub(new e(0, c * 2 * Math.PI * 1));
  }
}), c0 = "factorial", tP = ["typed", "gamma"], rP = /* @__PURE__ */ W(c0, tP, (r) => {
  var {
    typed: e,
    gamma: t
  } = r;
  return e(c0, {
    number: function(i) {
      if (i < 0)
        throw new Error("Value must be non-negative");
      return t(i + 1);
    },
    BigNumber: function(i) {
      if (i.isNegative())
        throw new Error("Value must be non-negative");
      return t(i.plus(1));
    },
    "Array | Matrix": e.referToSelf((n) => (i) => nt(i, n))
  });
}), f0 = "kldivergence", nP = ["typed", "matrix", "divide", "sum", "multiply", "map", "dotDivide", "log", "isNumeric"], iP = /* @__PURE__ */ W(f0, nP, (r) => {
  var {
    typed: e,
    matrix: t,
    divide: n,
    sum: i,
    multiply: a,
    map: s,
    dotDivide: o,
    log: l,
    isNumeric: u
  } = r;
  return e(f0, {
    "Array, Array": function(h, d) {
      return c(t(h), t(d));
    },
    "Matrix, Array": function(h, d) {
      return c(h, t(d));
    },
    "Array, Matrix": function(h, d) {
      return c(t(h), d);
    },
    "Matrix, Matrix": function(h, d) {
      return c(h, d);
    }
  });
  function c(f, h) {
    var d = h.size().length, m = f.size().length;
    if (d > 1)
      throw new Error("first object must be one dimensional");
    if (m > 1)
      throw new Error("second object must be one dimensional");
    if (d !== m)
      throw new Error("Length of two vectors must be equal");
    var p = i(f);
    if (p === 0)
      throw new Error("Sum of elements in first object must be non zero");
    var g = i(h);
    if (g === 0)
      throw new Error("Sum of elements in second object must be non zero");
    var v = n(f, i(f)), S = n(h, i(h)), x = i(a(v, s(o(v, S), (y) => l(y))));
    return u(x) ? x : Number.NaN;
  }
}), h0 = "multinomial", aP = ["typed", "add", "divide", "multiply", "factorial", "isInteger", "isPositive"], sP = /* @__PURE__ */ W(h0, aP, (r) => {
  var {
    typed: e,
    add: t,
    divide: n,
    multiply: i,
    factorial: a,
    isInteger: s,
    isPositive: o
  } = r;
  return e(h0, {
    "Array | Matrix": function(u) {
      var c = 0, f = 1;
      return pi(u, function(h) {
        if (!s(h) || !o(h))
          throw new TypeError("Positive integer value expected in function multinomial");
        c = t(c, h), f = i(f, a(h));
      }), n(a(c), f);
    }
  });
}), d0 = "permutations", oP = ["typed", "factorial"], uP = /* @__PURE__ */ W(d0, oP, (r) => {
  var {
    typed: e,
    factorial: t
  } = r;
  return e(d0, {
    "number | BigNumber": t,
    "number, number": function(i, a) {
      if (!$e(i) || i < 0)
        throw new TypeError("Positive integer value expected in function permutations");
      if (!$e(a) || a < 0)
        throw new TypeError("Positive integer value expected in function permutations");
      if (a > i)
        throw new TypeError("second argument k must be less than or equal to first argument n");
      return kn(i - a + 1, i);
    },
    "BigNumber, BigNumber": function(i, a) {
      var s, o;
      if (!m0(i) || !m0(a))
        throw new TypeError("Positive integer value expected in function permutations");
      if (a.gt(i))
        throw new TypeError("second argument k must be less than or equal to first argument n");
      var l = i.mul(0).add(1);
      for (s = l, o = i.minus(a).plus(1); o.lte(i); o = o.plus(1))
        s = s.times(o);
      return s;
    }
    // TODO: implement support for collection in permutations
  });
});
function m0(r) {
  return r.isInteger() && r.gte(0);
}
var Wo = { exports: {} }, lP = Wo.exports, p0;
function cP() {
  return p0 || (p0 = 1, function(r) {
    (function(e, t, n) {
      function i(l) {
        var u = this, c = o();
        u.next = function() {
          var f = 2091639 * u.s0 + u.c * 23283064365386963e-26;
          return u.s0 = u.s1, u.s1 = u.s2, u.s2 = f - (u.c = f | 0);
        }, u.c = 1, u.s0 = c(" "), u.s1 = c(" "), u.s2 = c(" "), u.s0 -= c(l), u.s0 < 0 && (u.s0 += 1), u.s1 -= c(l), u.s1 < 0 && (u.s1 += 1), u.s2 -= c(l), u.s2 < 0 && (u.s2 += 1), c = null;
      }
      function a(l, u) {
        return u.c = l.c, u.s0 = l.s0, u.s1 = l.s1, u.s2 = l.s2, u;
      }
      function s(l, u) {
        var c = new i(l), f = u && u.state, h = c.next;
        return h.int32 = function() {
          return c.next() * 4294967296 | 0;
        }, h.double = function() {
          return h() + (h() * 2097152 | 0) * 11102230246251565e-32;
        }, h.quick = h, f && (typeof f == "object" && a(f, c), h.state = function() {
          return a(c, {});
        }), h;
      }
      function o() {
        var l = 4022871197, u = function(c) {
          c = String(c);
          for (var f = 0; f < c.length; f++) {
            l += c.charCodeAt(f);
            var h = 0.02519603282416938 * l;
            l = h >>> 0, h -= l, h *= l, l = h >>> 0, h -= l, l += h * 4294967296;
          }
          return (l >>> 0) * 23283064365386963e-26;
        };
        return u;
      }
      t && t.exports ? t.exports = s : this.alea = s;
    })(
      lP,
      r
    );
  }(Wo)), Wo.exports;
}
var Xo = { exports: {} }, fP = Xo.exports, v0;
function hP() {
  return v0 || (v0 = 1, function(r) {
    (function(e, t, n) {
      function i(o) {
        var l = this, u = "";
        l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
          var f = l.x ^ l.x << 11;
          return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ f ^ f >>> 8;
        }, o === (o | 0) ? l.x = o : u += o;
        for (var c = 0; c < u.length + 64; c++)
          l.x ^= u.charCodeAt(c) | 0, l.next();
      }
      function a(o, l) {
        return l.x = o.x, l.y = o.y, l.z = o.z, l.w = o.w, l;
      }
      function s(o, l) {
        var u = new i(o), c = l && l.state, f = function() {
          return (u.next() >>> 0) / 4294967296;
        };
        return f.double = function() {
          do
            var h = u.next() >>> 11, d = (u.next() >>> 0) / 4294967296, m = (h + d) / (1 << 21);
          while (m === 0);
          return m;
        }, f.int32 = u.next, f.quick = f, c && (typeof c == "object" && a(c, u), f.state = function() {
          return a(u, {});
        }), f;
      }
      t && t.exports ? t.exports = s : this.xor128 = s;
    })(
      fP,
      r
    );
  }(Xo)), Xo.exports;
}
var Yo = { exports: {} }, dP = Yo.exports, g0;
function mP() {
  return g0 || (g0 = 1, function(r) {
    (function(e, t, n) {
      function i(o) {
        var l = this, u = "";
        l.next = function() {
          var f = l.x ^ l.x >>> 2;
          return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (f ^ f << 1)) | 0;
        }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, o === (o | 0) ? l.x = o : u += o;
        for (var c = 0; c < u.length + 64; c++)
          l.x ^= u.charCodeAt(c) | 0, c == u.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
      }
      function a(o, l) {
        return l.x = o.x, l.y = o.y, l.z = o.z, l.w = o.w, l.v = o.v, l.d = o.d, l;
      }
      function s(o, l) {
        var u = new i(o), c = l && l.state, f = function() {
          return (u.next() >>> 0) / 4294967296;
        };
        return f.double = function() {
          do
            var h = u.next() >>> 11, d = (u.next() >>> 0) / 4294967296, m = (h + d) / (1 << 21);
          while (m === 0);
          return m;
        }, f.int32 = u.next, f.quick = f, c && (typeof c == "object" && a(c, u), f.state = function() {
          return a(u, {});
        }), f;
      }
      t && t.exports ? t.exports = s : this.xorwow = s;
    })(
      dP,
      r
    );
  }(Yo)), Yo.exports;
}
var Zo = { exports: {} }, pP = Zo.exports, y0;
function vP() {
  return y0 || (y0 = 1, function(r) {
    (function(e, t, n) {
      function i(o) {
        var l = this;
        l.next = function() {
          var c = l.x, f = l.i, h, d;
          return h = c[f], h ^= h >>> 7, d = h ^ h << 24, h = c[f + 1 & 7], d ^= h ^ h >>> 10, h = c[f + 3 & 7], d ^= h ^ h >>> 3, h = c[f + 4 & 7], d ^= h ^ h << 7, h = c[f + 7 & 7], h = h ^ h << 13, d ^= h ^ h << 9, c[f] = d, l.i = f + 1 & 7, d;
        };
        function u(c, f) {
          var h, d = [];
          if (f === (f | 0))
            d[0] = f;
          else
            for (f = "" + f, h = 0; h < f.length; ++h)
              d[h & 7] = d[h & 7] << 15 ^ f.charCodeAt(h) + d[h + 1 & 7] << 13;
          for (; d.length < 8; ) d.push(0);
          for (h = 0; h < 8 && d[h] === 0; ++h) ;
          for (h == 8 ? d[7] = -1 : d[h], c.x = d, c.i = 0, h = 256; h > 0; --h)
            c.next();
        }
        u(l, o);
      }
      function a(o, l) {
        return l.x = o.x.slice(), l.i = o.i, l;
      }
      function s(o, l) {
        o == null && (o = +/* @__PURE__ */ new Date());
        var u = new i(o), c = l && l.state, f = function() {
          return (u.next() >>> 0) / 4294967296;
        };
        return f.double = function() {
          do
            var h = u.next() >>> 11, d = (u.next() >>> 0) / 4294967296, m = (h + d) / (1 << 21);
          while (m === 0);
          return m;
        }, f.int32 = u.next, f.quick = f, c && (c.x && a(c, u), f.state = function() {
          return a(u, {});
        }), f;
      }
      t && t.exports ? t.exports = s : this.xorshift7 = s;
    })(
      pP,
      r
    );
  }(Zo)), Zo.exports;
}
var Ko = { exports: {} }, gP = Ko.exports, x0;
function yP() {
  return x0 || (x0 = 1, function(r) {
    (function(e, t, n) {
      function i(o) {
        var l = this;
        l.next = function() {
          var c = l.w, f = l.X, h = l.i, d, m;
          return l.w = c = c + 1640531527 | 0, m = f[h + 34 & 127], d = f[h = h + 1 & 127], m ^= m << 13, d ^= d << 17, m ^= m >>> 15, d ^= d >>> 12, m = f[h] = m ^ d, l.i = h, m + (c ^ c >>> 16) | 0;
        };
        function u(c, f) {
          var h, d, m, p, g, v = [], S = 128;
          for (f === (f | 0) ? (d = f, f = null) : (f = f + "\0", d = 0, S = Math.max(S, f.length)), m = 0, p = -32; p < S; ++p)
            f && (d ^= f.charCodeAt((p + 32) % f.length)), p === 0 && (g = d), d ^= d << 10, d ^= d >>> 15, d ^= d << 4, d ^= d >>> 13, p >= 0 && (g = g + 1640531527 | 0, h = v[p & 127] ^= d + g, m = h == 0 ? m + 1 : 0);
          for (m >= 128 && (v[(f && f.length || 0) & 127] = -1), m = 127, p = 512; p > 0; --p)
            d = v[m + 34 & 127], h = v[m = m + 1 & 127], d ^= d << 13, h ^= h << 17, d ^= d >>> 15, h ^= h >>> 12, v[m] = d ^ h;
          c.w = g, c.X = v, c.i = m;
        }
        u(l, o);
      }
      function a(o, l) {
        return l.i = o.i, l.w = o.w, l.X = o.X.slice(), l;
      }
      function s(o, l) {
        o == null && (o = +/* @__PURE__ */ new Date());
        var u = new i(o), c = l && l.state, f = function() {
          return (u.next() >>> 0) / 4294967296;
        };
        return f.double = function() {
          do
            var h = u.next() >>> 11, d = (u.next() >>> 0) / 4294967296, m = (h + d) / (1 << 21);
          while (m === 0);
          return m;
        }, f.int32 = u.next, f.quick = f, c && (c.X && a(c, u), f.state = function() {
          return a(u, {});
        }), f;
      }
      t && t.exports ? t.exports = s : this.xor4096 = s;
    })(
      gP,
      // window object or global
      r
    );
  }(Ko)), Ko.exports;
}
var Jo = { exports: {} }, xP = Jo.exports, _0;
function _P() {
  return _0 || (_0 = 1, function(r) {
    (function(e, t, n) {
      function i(o) {
        var l = this, u = "";
        l.next = function() {
          var f = l.b, h = l.c, d = l.d, m = l.a;
          return f = f << 25 ^ f >>> 7 ^ h, h = h - d | 0, d = d << 24 ^ d >>> 8 ^ m, m = m - f | 0, l.b = f = f << 20 ^ f >>> 12 ^ h, l.c = h = h - d | 0, l.d = d << 16 ^ h >>> 16 ^ m, l.a = m - f | 0;
        }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, o === Math.floor(o) ? (l.a = o / 4294967296 | 0, l.b = o | 0) : u += o;
        for (var c = 0; c < u.length + 20; c++)
          l.b ^= u.charCodeAt(c) | 0, l.next();
      }
      function a(o, l) {
        return l.a = o.a, l.b = o.b, l.c = o.c, l.d = o.d, l;
      }
      function s(o, l) {
        var u = new i(o), c = l && l.state, f = function() {
          return (u.next() >>> 0) / 4294967296;
        };
        return f.double = function() {
          do
            var h = u.next() >>> 11, d = (u.next() >>> 0) / 4294967296, m = (h + d) / (1 << 21);
          while (m === 0);
          return m;
        }, f.int32 = u.next, f.quick = f, c && (typeof c == "object" && a(c, u), f.state = function() {
          return a(u, {});
        }), f;
      }
      t && t.exports ? t.exports = s : this.tychei = s;
    })(
      xP,
      r
    );
  }(Jo)), Jo.exports;
}
var Qo = { exports: {} };
const bP = {}, wP = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: bP
}, Symbol.toStringTag, { value: "Module" })), SP = /* @__PURE__ */ iA(wP);
var EP = Qo.exports, b0;
function MP() {
  return b0 || (b0 = 1, function(r) {
    (function(e, t, n) {
      var i = 256, a = 6, s = 52, o = "random", l = n.pow(i, a), u = n.pow(2, s), c = u * 2, f = i - 1, h;
      function d(y, b, _) {
        var M = [];
        b = b == !0 ? { entropy: !0 } : b || {};
        var A = v(g(
          b.entropy ? [y, x(t)] : y ?? S(),
          3
        ), M), w = new m(M), E = function() {
          for (var D = w.g(a), T = l, R = 0; D < u; )
            D = (D + R) * i, T *= i, R = w.g(1);
          for (; D >= c; )
            D /= 2, T /= 2, R >>>= 1;
          return (D + R) / T;
        };
        return E.int32 = function() {
          return w.g(4) | 0;
        }, E.quick = function() {
          return w.g(4) / 4294967296;
        }, E.double = E, v(x(w.S), t), (b.pass || _ || function(D, T, R, B) {
          return B && (B.S && p(B, w), D.state = function() {
            return p(w, {});
          }), R ? (n[o] = D, T) : D;
        })(
          E,
          A,
          "global" in b ? b.global : this == n,
          b.state
        );
      }
      function m(y) {
        var b, _ = y.length, M = this, A = 0, w = M.i = M.j = 0, E = M.S = [];
        for (_ || (y = [_++]); A < i; )
          E[A] = A++;
        for (A = 0; A < i; A++)
          E[A] = E[w = f & w + y[A % _] + (b = E[A])], E[w] = b;
        (M.g = function(D) {
          for (var T, R = 0, B = M.i, I = M.j, C = M.S; D--; )
            T = C[B = f & B + 1], R = R * i + C[f & (C[B] = C[I = f & I + T]) + (C[I] = T)];
          return M.i = B, M.j = I, R;
        })(i);
      }
      function p(y, b) {
        return b.i = y.i, b.j = y.j, b.S = y.S.slice(), b;
      }
      function g(y, b) {
        var _ = [], M = typeof y, A;
        if (b && M == "object")
          for (A in y)
            try {
              _.push(g(y[A], b - 1));
            } catch {
            }
        return _.length ? _ : M == "string" ? y : y + "\0";
      }
      function v(y, b) {
        for (var _ = y + "", M, A = 0; A < _.length; )
          b[f & A] = f & (M ^= b[f & A] * 19) + _.charCodeAt(A++);
        return x(b);
      }
      function S() {
        try {
          var y;
          return h && (y = h.randomBytes) ? y = y(i) : (y = new Uint8Array(i), (e.crypto || e.msCrypto).getRandomValues(y)), x(y);
        } catch {
          var b = e.navigator, _ = b && b.plugins;
          return [+/* @__PURE__ */ new Date(), e, _, e.screen, x(t)];
        }
      }
      function x(y) {
        return String.fromCharCode.apply(0, y);
      }
      if (v(n.random(), t), r.exports) {
        r.exports = d;
        try {
          h = SP;
        } catch {
        }
      } else
        n["seed" + o] = d;
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      typeof self < "u" ? self : EP,
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  }(Qo)), Qo.exports;
}
var gl, w0;
function AP() {
  if (w0) return gl;
  w0 = 1;
  var r = cP(), e = hP(), t = mP(), n = vP(), i = yP(), a = _P(), s = MP();
  return s.alea = r, s.xor128 = e, s.xorwow = t, s.xorshift7 = n, s.xor4096 = i, s.tychei = a, gl = s, gl;
}
var DP = AP();
const py = /* @__PURE__ */ Hu(DP);
var CP = /* @__PURE__ */ py(Date.now());
function qa(r) {
  var e;
  function t(i) {
    e = i === null ? CP : py(String(i));
  }
  t(r);
  function n() {
    return e();
  }
  return n;
}
var S0 = "pickRandom", TP = ["typed", "config", "?on"], NP = /* @__PURE__ */ W(S0, TP, (r) => {
  var {
    typed: e,
    config: t,
    on: n
  } = r, i = qa(t.randomSeed);
  return n && n("config", function(s, o) {
    s.randomSeed !== o.randomSeed && (i = qa(s.randomSeed));
  }), e(S0, {
    "Array | Matrix": function(o) {
      return a(o, {});
    },
    "Array | Matrix, Object": function(o, l) {
      return a(o, l);
    },
    "Array | Matrix, number": function(o, l) {
      return a(o, {
        number: l
      });
    },
    "Array | Matrix, Array | Matrix": function(o, l) {
      return a(o, {
        weights: l
      });
    },
    "Array | Matrix, Array | Matrix, number": function(o, l, u) {
      return a(o, {
        number: u,
        weights: l
      });
    },
    "Array | Matrix, number, Array | Matrix": function(o, l, u) {
      return a(o, {
        number: l,
        weights: u
      });
    }
  });
  function a(s, o) {
    var {
      number: l,
      weights: u,
      elementWise: c = !0
    } = o, f = typeof l > "u";
    f && (l = 1);
    var h = Ve(s) ? s.create : Ve(u) ? u.create : null;
    s = s.valueOf(), u && (u = u.valueOf()), c === !0 && (s = vt(s), u = vt(u));
    var d = 0;
    if (typeof u < "u") {
      if (u.length !== s.length)
        throw new Error("Weights must have the same length as possibles");
      for (var m = 0, p = u.length; m < p; m++) {
        if (!et(u[m]) || u[m] < 0)
          throw new Error("Weights must be an array of positive numbers");
        d += u[m];
      }
    }
    for (var g = s.length, v = [], S; v.length < l; ) {
      if (typeof u > "u")
        S = s[Math.floor(i() * g)];
      else
        for (var x = i() * d, y = 0, b = s.length; y < b; y++)
          if (x -= u[y], x < 0) {
            S = s[y];
            break;
          }
      v.push(S);
    }
    return f ? v[0] : h ? h(v) : v;
  }
});
function Ff(r, e) {
  var t = [];
  if (r = r.slice(0), r.length > 1)
    for (var n = 0, i = r.shift(); n < i; n++)
      t.push(Ff(r, e));
  else
    for (var a = 0, s = r.shift(); a < s; a++)
      t.push(e());
  return t;
}
var E0 = "random", RP = ["typed", "config", "?on"], FP = /* @__PURE__ */ W(E0, RP, (r) => {
  var {
    typed: e,
    config: t,
    on: n
  } = r, i = qa(t.randomSeed);
  return n && n("config", function(o, l) {
    o.randomSeed !== l.randomSeed && (i = qa(o.randomSeed));
  }), e(E0, {
    "": () => s(0, 1),
    number: (o) => s(0, o),
    "number, number": (o, l) => s(o, l),
    "Array | Matrix": (o) => a(o, 0, 1),
    "Array | Matrix, number": (o, l) => a(o, 0, l),
    "Array | Matrix, number, number": (o, l, u) => a(o, l, u)
  });
  function a(o, l, u) {
    var c = Ff(o.valueOf(), () => s(l, u));
    return Ve(o) ? o.create(c, "number") : c;
  }
  function s(o, l) {
    return o + i() * (l - o);
  }
}), M0 = "randomInt", OP = ["typed", "config", "log2", "?on"], PP = /* @__PURE__ */ W(M0, OP, (r) => {
  var {
    typed: e,
    config: t,
    log2: n,
    on: i
  } = r, a = qa(t.randomSeed);
  return i && i("config", function(u, c) {
    u.randomSeed !== c.randomSeed && (a = qa(u.randomSeed));
  }), e(M0, {
    "": () => o(0, 2),
    number: (u) => o(0, u),
    "number, number": (u, c) => o(u, c),
    bigint: (u) => l(0n, u),
    "bigint, bigint": l,
    "Array | Matrix": (u) => s(u, 0, 1),
    "Array | Matrix, number": (u, c) => s(u, 0, c),
    "Array | Matrix, number, number": (u, c, f) => s(u, c, f)
  });
  function s(u, c, f) {
    var h = Ff(u.valueOf(), () => o(c, f));
    return Ve(u) ? u.create(h, "number") : h;
  }
  function o(u, c) {
    return Math.floor(u + a() * (c - u));
  }
  function l(u, c) {
    var f = 2n ** 30n, h = c - u;
    if (h <= f)
      return u + BigInt(o(0, Number(h)));
    for (var d = n(h), m = h; m >= h; ) {
      m = 0n;
      for (var p = 0; p < d; ++p)
        m = 2n * m + (a() < 0.5 ? 0n : 1n);
    }
    return u + m;
  }
}), A0 = "stirlingS2", BP = ["typed", "addScalar", "subtractScalar", "multiplyScalar", "divideScalar", "pow", "factorial", "combinations", "isNegative", "isInteger", "number", "?bignumber", "larger"], IP = /* @__PURE__ */ W(A0, BP, (r) => {
  var {
    typed: e,
    addScalar: t,
    subtractScalar: n,
    multiplyScalar: i,
    divideScalar: a,
    pow: s,
    factorial: o,
    combinations: l,
    isNegative: u,
    isInteger: c,
    number: f,
    bignumber: h,
    larger: d
  } = r, m = [], p = [];
  return e(A0, {
    "number | BigNumber, number | BigNumber": function(v, S) {
      if (!c(v) || u(v) || !c(S) || u(S))
        throw new TypeError("Non-negative integer value expected in function stirlingS2");
      if (d(S, v))
        throw new TypeError("k must be less than or equal to n in function stirlingS2");
      var x = !(et(v) && et(S)), y = x ? p : m, b = x ? h : f, _ = f(v), M = f(S);
      if (y[_] && y[_].length > M)
        return y[_][M];
      for (var A = 0; A <= _; ++A)
        if (y[A] || (y[A] = [b(A === 0 ? 1 : 0)]), A !== 0)
          for (var w = y[A], E = y[A - 1], D = w.length; D <= A && D <= M; ++D)
            D === A ? w[D] = 1 : w[D] = t(i(b(D), E[D]), E[D - 1]);
      return y[_][M];
    }
  });
}), D0 = "bellNumbers", LP = ["typed", "addScalar", "isNegative", "isInteger", "stirlingS2"], UP = /* @__PURE__ */ W(D0, LP, (r) => {
  var {
    typed: e,
    addScalar: t,
    isNegative: n,
    isInteger: i,
    stirlingS2: a
  } = r;
  return e(D0, {
    "number | BigNumber": function(o) {
      if (!i(o) || n(o))
        throw new TypeError("Non-negative integer value expected in function bellNumbers");
      for (var l = 0, u = 0; u <= o; u++)
        l = t(l, a(o, u));
      return l;
    }
  });
}), C0 = "catalan", zP = ["typed", "addScalar", "divideScalar", "multiplyScalar", "combinations", "isNegative", "isInteger"], kP = /* @__PURE__ */ W(C0, zP, (r) => {
  var {
    typed: e,
    addScalar: t,
    divideScalar: n,
    multiplyScalar: i,
    combinations: a,
    isNegative: s,
    isInteger: o
  } = r;
  return e(C0, {
    "number | BigNumber": function(u) {
      if (!o(u) || s(u))
        throw new TypeError("Non-negative integer value expected in function catalan");
      return n(a(i(u, 2), u), t(u, 1));
    }
  });
}), T0 = "composition", HP = ["typed", "addScalar", "combinations", "isNegative", "isPositive", "isInteger", "larger"], GP = /* @__PURE__ */ W(T0, HP, (r) => {
  var {
    typed: e,
    addScalar: t,
    combinations: n,
    isPositive: i,
    isNegative: a,
    isInteger: s,
    larger: o
  } = r;
  return e(T0, {
    "number | BigNumber, number | BigNumber": function(u, c) {
      if (!s(u) || !i(u) || !s(c) || !i(c))
        throw new TypeError("Positive integer value expected in function composition");
      if (o(c, u))
        throw new TypeError("k must be less than or equal to n in function composition");
      return n(t(u, -1), t(c, -1));
    }
  });
}), N0 = "leafCount", $P = ["parse", "typed"], VP = /* @__PURE__ */ W(N0, $P, (r) => {
  var {
    parse: e,
    typed: t
  } = r;
  function n(i) {
    var a = 0;
    return i.forEach((s) => {
      a += n(s);
    }), a || 1;
  }
  return t(N0, {
    Node: function(a) {
      return n(a);
    }
  });
});
function R0(r) {
  return ht(r) || kt(r) && r.isUnary() && ht(r.args[0]);
}
function Mu(r) {
  return !!(ht(r) || (Vn(r) || kt(r)) && r.args.every(Mu) || En(r) && Mu(r.content));
}
function F0(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(i) {
      return Object.getOwnPropertyDescriptor(r, i).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function yl(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? F0(Object(t), !0).forEach(function(n) {
      qt(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : F0(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var qP = "simplifyUtil", WP = ["FunctionNode", "OperatorNode", "SymbolNode"], Of = /* @__PURE__ */ W(qP, WP, (r) => {
  var {
    FunctionNode: e,
    OperatorNode: t,
    SymbolNode: n
  } = r, i = !0, a = !1, s = "defaultF", o = {
    /*      */
    add: {
      trivial: i,
      total: i,
      commutative: i,
      associative: i
    },
    /**/
    unaryPlus: {
      trivial: i,
      total: i,
      commutative: i,
      associative: i
    },
    /* */
    subtract: {
      trivial: a,
      total: i,
      commutative: a,
      associative: a
    },
    /* */
    multiply: {
      trivial: i,
      total: i,
      commutative: i,
      associative: i
    },
    /*   */
    divide: {
      trivial: a,
      total: i,
      commutative: a,
      associative: a
    },
    /*    */
    paren: {
      trivial: i,
      total: i,
      commutative: i,
      associative: a
    },
    /* */
    defaultF: {
      trivial: a,
      total: i,
      commutative: a,
      associative: a
    }
  }, l = {
    divide: {
      total: a
    },
    log: {
      total: a
    }
  }, u = {
    subtract: {
      total: a
    },
    abs: {
      trivial: i
    },
    log: {
      total: i
    }
  };
  function c(x, y) {
    var b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : o, _ = s;
    if (typeof x == "string" ? _ = x : kt(x) ? _ = x.fn.toString() : Vn(x) ? _ = x.name : En(x) && (_ = "paren"), Ue(b, _)) {
      var M = b[_];
      if (Ue(M, y))
        return M[y];
      if (Ue(o, _))
        return o[_][y];
    }
    if (Ue(b, s)) {
      var A = b[s];
      return Ue(A, y) ? A[y] : o[s][y];
    }
    if (Ue(o, _)) {
      var w = o[_];
      if (Ue(w, y))
        return w[y];
    }
    return o[s][y];
  }
  function f(x) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : o;
    return c(x, "commutative", y);
  }
  function h(x) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : o;
    return c(x, "associative", y);
  }
  function d(x, y) {
    var b = yl({}, x);
    for (var _ in y)
      Ue(x, _) ? b[_] = yl(yl({}, y[_]), x[_]) : b[_] = y[_];
    return b;
  }
  function m(x, y) {
    if (!x.args || x.args.length === 0)
      return x;
    x.args = p(x, y);
    for (var b = 0; b < x.args.length; b++)
      m(x.args[b], y);
  }
  function p(x, y) {
    var b, _ = [], M = function(w) {
      for (var E = 0; E < w.args.length; E++) {
        var D = w.args[E];
        kt(D) && b === D.op ? M(D) : _.push(D);
      }
    };
    return h(x, y) ? (b = x.op, M(x), _) : x.args;
  }
  function g(x, y) {
    if (!(!x.args || x.args.length === 0)) {
      for (var b = S(x), _ = x.args.length, M = 0; M < _; M++)
        g(x.args[M], y);
      if (_ > 2 && h(x, y)) {
        for (var A = x.args.pop(); x.args.length > 0; )
          A = b([x.args.pop(), A]);
        x.args = A.args;
      }
    }
  }
  function v(x, y) {
    if (!(!x.args || x.args.length === 0)) {
      for (var b = S(x), _ = x.args.length, M = 0; M < _; M++)
        v(x.args[M], y);
      if (_ > 2 && h(x, y)) {
        for (var A = x.args.shift(); x.args.length > 0; )
          A = b([A, x.args.shift()]);
        x.args = A.args;
      }
    }
  }
  function S(x) {
    return kt(x) ? function(y) {
      try {
        return new t(x.op, x.fn, y, x.implicit);
      } catch (b) {
        return console.error(b), [];
      }
    } : function(y) {
      return new e(new n(x.name), y);
    };
  }
  return {
    createMakeNodeFunction: S,
    hasProperty: c,
    isCommutative: f,
    isAssociative: h,
    mergeContext: d,
    flatten: m,
    allChildren: p,
    unflattenr: g,
    unflattenl: v,
    defaultContext: o,
    realContext: l,
    positiveContext: u
  };
}), XP = "simplify", YP = ["typed", "parse", "equal", "resolve", "simplifyConstant", "simplifyCore", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "SymbolNode", "replacer"], ZP = /* @__PURE__ */ W(XP, YP, (r) => {
  var {
    typed: e,
    parse: t,
    equal: n,
    resolve: i,
    simplifyConstant: a,
    simplifyCore: s,
    AccessorNode: o,
    ArrayNode: l,
    ConstantNode: u,
    FunctionNode: c,
    IndexNode: f,
    ObjectNode: h,
    OperatorNode: d,
    ParenthesisNode: m,
    SymbolNode: p,
    replacer: g
  } = r, {
    hasProperty: v,
    isCommutative: S,
    isAssociative: x,
    mergeContext: y,
    flatten: b,
    unflattenr: _,
    unflattenl: M,
    createMakeNodeFunction: A,
    defaultContext: w,
    realContext: E,
    positiveContext: D
  } = Of({
    FunctionNode: c,
    OperatorNode: d,
    SymbolNode: p
  });
  e.addConversion({
    from: "Object",
    to: "Map",
    convert: Fa
  });
  var T = e("simplify", {
    Node: V,
    "Node, Map": (G, Z) => V(G, !1, Z),
    "Node, Map, Object": (G, Z, te) => V(G, !1, Z, te),
    "Node, Array": V,
    "Node, Array, Map": V,
    "Node, Array, Map, Object": V
  });
  e.removeConversion({
    from: "Object",
    to: "Map",
    convert: Fa
  }), T.defaultContext = w, T.realContext = E, T.positiveContext = D;
  function R(G) {
    return G.transform(function(Z) {
      return En(Z) ? R(Z.content) : Z;
    });
  }
  var B = {
    true: !0,
    false: !0,
    e: !0,
    i: !0,
    Infinity: !0,
    LN2: !0,
    LN10: !0,
    LOG2E: !0,
    LOG10E: !0,
    NaN: !0,
    phi: !0,
    pi: !0,
    SQRT1_2: !0,
    SQRT2: !0,
    tau: !0
    // null: false,
    // undefined: false,
    // version: false,
  };
  T.rules = [
    s,
    // { l: 'n+0', r: 'n' },     // simplifyCore
    // { l: 'n^0', r: '1' },     // simplifyCore
    // { l: '0*n', r: '0' },     // simplifyCore
    // { l: 'n/n', r: '1'},      // simplifyCore
    // { l: 'n^1', r: 'n' },     // simplifyCore
    // { l: '+n1', r:'n1' },     // simplifyCore
    // { l: 'n--n1', r:'n+n1' }, // simplifyCore
    {
      l: "log(e)",
      r: "1"
    },
    // temporary rules
    // Note initially we tend constants to the right because like-term
    // collection prefers the left, and we would rather collect nonconstants
    {
      s: "n-n1 -> n+-n1",
      // temporarily replace 'subtract' so we can further flatten the 'add' operator
      assuming: {
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "n-n -> 0",
      // partial alternative when we can't always subtract
      assuming: {
        subtract: {
          total: !1
        }
      }
    },
    {
      s: "-(cl*v) -> v * (-cl)",
      // make non-constant terms positive
      assuming: {
        multiply: {
          commutative: !0
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "-(cl*v) -> (-cl) * v",
      // non-commutative version, part 1
      assuming: {
        multiply: {
          commutative: !1
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "-(v*cl) -> v * (-cl)",
      // non-commutative version, part 2
      assuming: {
        multiply: {
          commutative: !1
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      l: "-(n1/n2)",
      r: "-n1/n2"
    },
    {
      l: "-v",
      r: "v * (-1)"
    },
    // finish making non-constant terms positive
    {
      l: "(n1 + n2)*(-1)",
      r: "n1*(-1) + n2*(-1)",
      repeat: !0
    },
    // expand negations to achieve as much sign cancellation as possible
    {
      l: "n/n1^n2",
      r: "n*n1^-n2"
    },
    // temporarily replace 'divide' so we can further flatten the 'multiply' operator
    {
      l: "n/n1",
      r: "n*n1^-1"
    },
    {
      s: "(n1*n2)^n3 -> n1^n3 * n2^n3",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
    },
    {
      s: "(n1*n2)^(-1) -> n2^(-1) * n1^(-1)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    // expand nested exponentiation
    {
      s: "(n ^ n1) ^ n2 -> n ^ (n1 * n2)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // 1/(1/n) = n needs 1/n to exist
    },
    // collect like factors; into a sum, only do this for nonconstants
    {
      l: " vd   * ( vd   * n1 + n2)",
      r: "vd^2       * n1 +  vd   * n2"
    },
    {
      s: " vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
      // v*1/v = v^(1+-1) needs 1/v
    },
    {
      s: "vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
    },
    {
      s: "vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
    },
    {
      l: "n*n",
      r: "n^2"
    },
    {
      s: "n * n^n1 -> n^(n1+1)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // n*1/n = n^(-1+1) needs 1/n
    },
    {
      s: "n^n1 * n^n2 -> n^(n1+n2)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // ditto for n^2*1/n^2
    },
    // Unfortunately, to deal with more complicated cancellations, it
    // becomes necessary to simplify constants twice per pass. It's not
    // terribly expensive compared to matching rules, so this should not
    // pose a performance problem.
    a,
    // First: before collecting like terms
    // collect like terms
    {
      s: "n+n -> 2*n",
      assuming: {
        add: {
          total: !0
        }
      }
      // 2 = 1 + 1 needs to exist
    },
    {
      l: "n+-n",
      r: "0"
    },
    {
      l: "vd*n + vd",
      r: "vd*(n+1)"
    },
    // NOTE: leftmost position is special:
    {
      l: "n3*n1 + n3*n2",
      r: "n3*(n1+n2)"
    },
    // All sub-monomials tried there.
    {
      l: "n3^(-n4)*n1 +   n3  * n2",
      r: "n3^(-n4)*(n1 + n3^(n4+1) *n2)"
    },
    {
      l: "n3^(-n4)*n1 + n3^n5 * n2",
      r: "n3^(-n4)*(n1 + n3^(n4+n5)*n2)"
    },
    // noncommutative additional cases (term collection & factoring)
    {
      s: "n*vd + vd -> (n+1)*vd",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "vd + n*vd -> (1+n)*vd",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3 + n2*n3 -> (n1+n2)*n3",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n^n1 * n -> n^(n1+1)",
      assuming: {
        divide: {
          total: !0
        },
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      l: "n*cd + cd",
      r: "(n+1)*cd"
    },
    {
      s: "cd*n + cd -> cd*(n+1)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "cd + cd*n -> cd*(1+n)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    a,
    // Second: before returning expressions to "standard form"
    // make factors positive (and undo 'make non-constant terms positive')
    {
      s: "(-n)*n1 -> -(n*n1)",
      assuming: {
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "n1*(-n) -> -(n1*n)",
      // in case * non-commutative
      assuming: {
        subtract: {
          total: !0
        },
        multiply: {
          commutative: !1
        }
      }
    },
    // final ordering of constants
    {
      s: "ce+ve -> ve+ce",
      assuming: {
        add: {
          commutative: !0
        }
      },
      imposeContext: {
        add: {
          commutative: !1
        }
      }
    },
    {
      s: "vd*cd -> cd*vd",
      assuming: {
        multiply: {
          commutative: !0
        }
      },
      imposeContext: {
        multiply: {
          commutative: !1
        }
      }
    },
    // undo temporary rules
    // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
    {
      l: "n+-n1",
      r: "n-n1"
    },
    // undo replace 'subtract'
    {
      l: "n+-(n1)",
      r: "n-(n1)"
    },
    {
      s: "n*(n1^-1) -> n/n1",
      // undo replace 'divide'; for * commutative
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      s: "n*n1^-n2 -> n/n1^n2",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      s: "n^-1 -> 1/n",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      l: "n^1",
      r: "n"
    },
    // can be produced by power cancellation
    {
      s: "n*(n1/n2) -> (n*n1)/n2",
      // '*' before '/'
      assuming: {
        multiply: {
          associative: !0
        }
      }
    },
    {
      s: "n-(n1+n2) -> n-n1-n2",
      // '-' before '+'
      assuming: {
        addition: {
          associative: !0,
          commutative: !0
        }
      }
    },
    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
    // simplifyConstant can leave an extra factor of 1, which can always
    // be eliminated, since the identity always commutes
    {
      l: "1*n",
      r: "n",
      imposeContext: {
        multiply: {
          commutative: !0
        }
      }
    },
    {
      s: "n1/(n2/n3) -> (n1*n3)/n2",
      assuming: {
        multiply: {
          associative: !0
        }
      }
    },
    {
      l: "n1/(-n2)",
      r: "-n1/n2"
    }
  ];
  function I(G, Z) {
    var te = {};
    if (G.s) {
      var ne = G.s.split("->");
      if (ne.length === 2)
        te.l = ne[0], te.r = ne[1];
      else
        throw SyntaxError("Could not parse rule: " + G.s);
    } else
      te.l = G.l, te.r = G.r;
    te.l = R(t(te.l)), te.r = R(t(te.r));
    for (var ae of ["imposeContext", "repeat", "assuming"])
      ae in G && (te[ae] = G[ae]);
    if (G.evaluate && (te.evaluate = t(G.evaluate)), x(te.l, Z)) {
      var xe = !S(te.l, Z), q;
      xe && (q = z());
      var Ae = A(te.l), De = z();
      te.expanded = {}, te.expanded.l = Ae([te.l, De]), b(te.expanded.l, Z), _(te.expanded.l, Z), te.expanded.r = Ae([te.r, De]), xe && (te.expandedNC1 = {}, te.expandedNC1.l = Ae([q, te.l]), te.expandedNC1.r = Ae([q, te.r]), te.expandedNC2 = {}, te.expandedNC2.l = Ae([q, te.expanded.l]), te.expandedNC2.r = Ae([q, te.expanded.r]));
    }
    return te;
  }
  function C(G, Z) {
    for (var te = [], ne = 0; ne < G.length; ne++) {
      var ae = G[ne], xe = void 0, q = typeof ae;
      switch (q) {
        case "string":
          ae = {
            s: ae
          };
        /* falls through */
        case "object":
          xe = I(ae, Z);
          break;
        case "function":
          xe = ae;
          break;
        default:
          throw TypeError("Unsupported type of rule: " + q);
      }
      te.push(xe);
    }
    return te;
  }
  var k = 0;
  function z() {
    return new p("_p" + k++);
  }
  function V(G, Z) {
    var te = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : As(), ne = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, ae = ne.consoleDebug;
    Z = C(Z || T.rules, ne.context);
    var xe = i(G, te);
    xe = R(xe);
    for (var q = {}, Ae = xe.toString({
      parenthesis: "all"
    }); !q[Ae]; ) {
      q[Ae] = !0, k = 0;
      var De = Ae;
      ae && console.log("Working on: ", Ae);
      for (var Ne = 0; Ne < Z.length; Ne++) {
        var we = "";
        if (typeof Z[Ne] == "function" ? (xe = Z[Ne](xe, ne), ae && (we = Z[Ne].name)) : (b(xe, ne.context), xe = re(xe, Z[Ne], ne.context), ae && (we = "".concat(Z[Ne].l.toString(), " -> ").concat(Z[Ne].r.toString()))), ae) {
          var Pe = xe.toString({
            parenthesis: "all"
          });
          Pe !== De && (console.log("Applying", we, "produced", Pe), De = Pe);
        }
        M(xe, ne.context);
      }
      Ae = xe.toString({
        parenthesis: "all"
      });
    }
    return xe;
  }
  function ee(G, Z, te) {
    var ne = G;
    if (G)
      for (var ae = 0; ae < G.length; ++ae) {
        var xe = re(G[ae], Z, te);
        xe !== G[ae] && (ne === G && (ne = G.slice()), ne[ae] = xe);
      }
    return ne;
  }
  function re(G, Z, te) {
    if (Z.assuming) {
      for (var ne in Z.assuming)
        for (var ae in Z.assuming[ne])
          if (v(ne, ae, te) !== Z.assuming[ne][ae])
            return G;
    }
    var xe = y(Z.imposeContext, te), q = G;
    if (q instanceof d || q instanceof c) {
      var Ae = ee(q.args, Z, te);
      Ae !== q.args && (q = q.clone(), q.args = Ae);
    } else if (q instanceof m) {
      if (q.content) {
        var De = re(q.content, Z, te);
        De !== q.content && (q = new m(De));
      }
    } else if (q instanceof l) {
      var Ne = ee(q.items, Z, te);
      Ne !== q.items && (q = new l(Ne));
    } else if (q instanceof o) {
      var we = q.object;
      q.object && (we = re(q.object, Z, te));
      var Pe = q.index;
      q.index && (Pe = re(q.index, Z, te)), (we !== q.object || Pe !== q.index) && (q = new o(we, Pe));
    } else if (q instanceof f) {
      var $ = ee(q.dimensions, Z, te);
      $ !== q.dimensions && (q = new f($));
    } else if (q instanceof h) {
      var P = !1, O = {};
      for (var F in q.properties)
        O[F] = re(q.properties[F], Z, te), O[F] !== q.properties[F] && (P = !0);
      P && (q = new h(O));
    }
    var H = Z.r, X = oe(Z.l, q, xe)[0];
    if (!X && Z.expanded && (H = Z.expanded.r, X = oe(Z.expanded.l, q, xe)[0]), !X && Z.expandedNC1 && (H = Z.expandedNC1.r, X = oe(Z.expandedNC1.l, q, xe)[0], X || (H = Z.expandedNC2.r, X = oe(Z.expandedNC2.l, q, xe)[0])), X) {
      var K = q.implicit;
      q = H.clone(), K && "implicit" in H && (q.implicit = !0), q = q.transform(function(se) {
        return se.isSymbolNode && Ue(X.placeholders, se.name) ? X.placeholders[se.name].clone() : se;
      });
    }
    return Z.repeat && q !== G && (q = re(q, Z, te)), q;
  }
  function L(G, Z) {
    var te = [], ne, ae, xe = A(G);
    if (S(G, Z))
      for (var q = 0; q < G.args.length; q++)
        ae = G.args.slice(0), ae.splice(q, 1), ne = ae.length === 1 ? ae[0] : xe(ae), te.push(xe([G.args[q], ne]));
    else
      for (var Ae = 1; Ae < G.args.length; Ae++) {
        var De = G.args[0];
        Ae > 1 && (De = xe(G.args.slice(0, Ae))), ae = G.args.slice(Ae), ne = ae.length === 1 ? ae[0] : xe(ae), te.push(xe([De, ne]));
      }
    return te;
  }
  function J(G, Z) {
    var te = {
      placeholders: {}
    };
    if (!G.placeholders && !Z.placeholders)
      return te;
    if (G.placeholders) {
      if (!Z.placeholders)
        return G;
    } else return Z;
    for (var ne in G.placeholders)
      if (Ue(G.placeholders, ne) && (te.placeholders[ne] = G.placeholders[ne], Ue(Z.placeholders, ne) && !ie(G.placeholders[ne], Z.placeholders[ne])))
        return null;
    for (var ae in Z.placeholders)
      Ue(Z.placeholders, ae) && (te.placeholders[ae] = Z.placeholders[ae]);
    return te;
  }
  function U(G, Z) {
    var te = [];
    if (G.length === 0 || Z.length === 0)
      return te;
    for (var ne, ae = 0; ae < G.length; ae++)
      for (var xe = 0; xe < Z.length; xe++)
        ne = J(G[ae], Z[xe]), ne && te.push(ne);
    return te;
  }
  function ue(G) {
    if (G.length === 0)
      return G;
    for (var Z = G.reduce(U), te = [], ne = {}, ae = 0; ae < Z.length; ae++) {
      var xe = JSON.stringify(Z[ae], g);
      ne[xe] || (ne[xe] = !0, te.push(Z[ae]));
    }
    return te;
  }
  function oe(G, Z, te, ne) {
    var ae = [{
      placeholders: {}
    }];
    if (G instanceof d && Z instanceof d || G instanceof c && Z instanceof c) {
      if (G instanceof d) {
        if (G.op !== Z.op || G.fn !== Z.fn)
          return [];
      } else if (G instanceof c && G.name !== Z.name)
        return [];
      if (Z.args.length === 1 && G.args.length === 1 || !x(Z, te) && Z.args.length === G.args.length || ne) {
        for (var xe = [], q = 0; q < G.args.length; q++) {
          var Ae = oe(G.args[q], Z.args[q], te);
          if (Ae.length === 0)
            break;
          xe.push(Ae);
        }
        if (xe.length !== G.args.length) {
          if (!S(Z, te) || // exact match in order needed
          G.args.length === 1)
            return [];
          if (G.args.length > 2)
            throw new Error("permuting >2 commutative non-associative rule arguments not yet implemented");
          var De = oe(G.args[0], Z.args[1], te);
          if (De.length === 0)
            return [];
          var Ne = oe(G.args[1], Z.args[0], te);
          if (Ne.length === 0)
            return [];
          xe = [De, Ne];
        }
        ae = ue(xe);
      } else if (Z.args.length >= 2 && G.args.length === 2) {
        for (var we = L(Z, te), Pe = [], $ = 0; $ < we.length; $++) {
          var P = oe(G, we[$], te, !0);
          Pe = Pe.concat(P);
        }
        return Pe;
      } else {
        if (G.args.length > 2)
          throw Error("Unexpected non-binary associative function: " + G.toString());
        return [];
      }
    } else if (G instanceof p) {
      if (G.name.length === 0)
        throw new Error("Symbol in rule has 0 length...!?");
      if (B[G.name]) {
        if (G.name !== Z.name)
          return [];
      } else
        switch (G.name[1] >= "a" && G.name[1] <= "z" ? G.name.substring(0, 2) : G.name[0]) {
          case "n":
          case "_p":
            ae[0].placeholders[G.name] = Z;
            break;
          case "c":
          case "cl":
            if (ht(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "v":
            if (!ht(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "vl":
            if (Zt(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "cd":
            if (R0(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "vd":
            if (!R0(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "ce":
            if (Mu(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          case "ve":
            if (!Mu(Z))
              ae[0].placeholders[G.name] = Z;
            else
              return [];
            break;
          default:
            throw new Error("Invalid symbol in rule: " + G.name);
        }
    } else if (G instanceof u) {
      if (!n(G.value, Z.value))
        return [];
    } else
      return [];
    return ae;
  }
  function ie(G, Z) {
    if (G instanceof u && Z instanceof u) {
      if (!n(G.value, Z.value))
        return !1;
    } else if (G instanceof p && Z instanceof p) {
      if (G.name !== Z.name)
        return !1;
    } else if (G instanceof d && Z instanceof d || G instanceof c && Z instanceof c) {
      if (G instanceof d) {
        if (G.op !== Z.op || G.fn !== Z.fn)
          return !1;
      } else if (G instanceof c && G.name !== Z.name)
        return !1;
      if (G.args.length !== Z.args.length)
        return !1;
      for (var te = 0; te < G.args.length; te++)
        if (!ie(G.args[te], Z.args[te]))
          return !1;
    } else
      return !1;
    return !0;
  }
  return T;
}), KP = "simplifyConstant", JP = ["typed", "config", "mathWithTransform", "matrix", "?fraction", "?bignumber", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "SymbolNode"], QP = /* @__PURE__ */ W(KP, JP, (r) => {
  var {
    typed: e,
    config: t,
    mathWithTransform: n,
    matrix: i,
    fraction: a,
    bignumber: s,
    AccessorNode: o,
    ArrayNode: l,
    ConstantNode: u,
    FunctionNode: c,
    IndexNode: f,
    ObjectNode: h,
    OperatorNode: d,
    SymbolNode: m
  } = r, {
    isCommutative: p,
    isAssociative: g,
    allChildren: v,
    createMakeNodeFunction: S
  } = Of({
    FunctionNode: c,
    OperatorNode: d,
    SymbolNode: m
  }), x = e("simplifyConstant", {
    Node: (I) => M(B(I, {})),
    "Node, Object": function(C, k) {
      return M(B(C, k));
    }
  });
  function y(I) {
    return Qi(I) ? I.valueOf() : I instanceof Array ? I.map(y) : Ve(I) ? i(y(I.valueOf())) : I;
  }
  function b(I, C, k) {
    try {
      return n[I].apply(null, C);
    } catch {
      return C = C.map(y), w(n[I].apply(null, C), k);
    }
  }
  var _ = e({
    Fraction: D,
    number: function(C) {
      return C < 0 ? E(new u(-C)) : new u(C);
    },
    BigNumber: function(C) {
      return C < 0 ? E(new u(-C)) : new u(C);
    },
    bigint: function(C) {
      return C < 0n ? E(new u(-C)) : new u(C);
    },
    Complex: function(C) {
      throw new Error("Cannot convert Complex number to Node");
    },
    string: function(C) {
      return new u(C);
    },
    Matrix: function(C) {
      return new l(C.valueOf().map((k) => _(k)));
    }
  });
  function M(I) {
    return bt(I) ? I : _(I);
  }
  function A(I, C) {
    var k = C && C.exactFractions !== !1;
    if (k && isFinite(I) && a) {
      var z = a(I), V = C && typeof C.fractionsLimit == "number" ? C.fractionsLimit : 1 / 0;
      if (z.valueOf() === I && z.n < V && z.d < V)
        return z;
    }
    return I;
  }
  var w = e({
    "string, Object": function(C, k) {
      var z = xi(C, t);
      if (z === "BigNumber")
        return s === void 0 && Cf(), s(C);
      if (z === "bigint")
        return BigInt(C);
      if (z === "Fraction")
        return a === void 0 && Y1(), a(C);
      var V = parseFloat(C);
      return A(V, k);
    },
    "Fraction, Object": function(C, k) {
      return C;
    },
    // we don't need options here
    "BigNumber, Object": function(C, k) {
      return C;
    },
    // we don't need options here
    "number, Object": function(C, k) {
      return A(C, k);
    },
    "bigint, Object": function(C, k) {
      return C;
    },
    "Complex, Object": function(C, k) {
      return C.im !== 0 ? C : A(C.re, k);
    },
    "Matrix, Object": function(C, k) {
      return i(A(C.valueOf()));
    },
    "Array, Object": function(C, k) {
      return C.map(A);
    }
  });
  function E(I) {
    return new d("-", "unaryMinus", [I]);
  }
  function D(I) {
    var C = (V) => t.number === "BigNumber" && s ? s(V) : Number(V), k = I.s * I.n, z = k < 0n ? new d("-", "unaryMinus", [new u(-C(k))]) : new u(C(k));
    return I.d === 1n ? z : new d("/", "divide", [z, new u(C(I.d))]);
  }
  function T(I, C, k) {
    if (!ea(C))
      return new o(M(I), M(C));
    if (Ur(I) || Ve(I)) {
      for (var z = Array.from(C.dimensions); z.length > 0; )
        if (ht(z[0]) && typeof z[0].value != "string") {
          var V = w(z.shift().value, k);
          Ur(I) ? I = I.items[V - 1] : (I = I.valueOf()[V - 1], I instanceof Array && (I = i(I)));
        } else if (z.length > 1 && ht(z[1]) && typeof z[1].value != "string") {
          var ee = w(z[1].value, k), re = [], L = Ur(I) ? I.items : I.valueOf();
          for (var J of L)
            if (Ur(J))
              re.push(J.items[ee - 1]);
            else if (Ve(I))
              re.push(J[ee - 1]);
            else
              break;
          if (re.length === L.length)
            Ur(I) ? I = new l(re) : I = i(re), z.splice(1, 1);
          else
            break;
        } else
          break;
      return z.length === C.dimensions.length ? new o(M(I), C) : z.length > 0 ? (C = new f(z), new o(M(I), C)) : I;
    }
    if (Us(I) && C.dimensions.length === 1 && ht(C.dimensions[0])) {
      var U = C.dimensions[0].value;
      return U in I.properties ? I.properties[U] : new u();
    }
    return new o(M(I), C);
  }
  function R(I, C, k, z) {
    var V = C.shift(), ee = C.reduce((re, L) => {
      if (!bt(L)) {
        var J = re.pop();
        if (bt(J))
          return [J, L];
        try {
          return re.push(b(I, [J, L], z)), re;
        } catch {
          re.push(J);
        }
      }
      re.push(M(re.pop()));
      var U = re.length === 1 ? re[0] : k(re);
      return [k([U, M(L)])];
    }, [V]);
    return ee.length === 1 ? ee[0] : k([ee[0], _(ee[1])]);
  }
  function B(I, C) {
    switch (I.type) {
      case "SymbolNode":
        return I;
      case "ConstantNode":
        switch (typeof I.value) {
          case "number":
            return w(I.value, C);
          case "bigint":
            return w(I.value, C);
          case "string":
            return I.value;
          default:
            if (!isNaN(I.value)) return w(I.value, C);
        }
        return I;
      case "FunctionNode":
        if (n[I.name] && n[I.name].rawArgs)
          return I;
        {
          var k = ["add", "multiply"];
          if (!k.includes(I.name)) {
            var z = I.args.map((ne) => B(ne, C));
            if (!z.some(bt))
              try {
                return b(I.name, z, C);
              } catch {
              }
            if (I.name === "size" && z.length === 1 && Ur(z[0])) {
              for (var V = [], ee = z[0]; Ur(ee); )
                V.push(ee.items.length), ee = ee.items[0];
              return i(V);
            }
            return new c(I.name, z.map(M));
          }
        }
      /* falls through */
      case "OperatorNode": {
        var re = I.fn.toString(), L, J, U = S(I);
        if (kt(I) && I.isUnary())
          L = [B(I.args[0], C)], bt(L[0]) ? J = U(L) : J = b(re, L, C);
        else if (g(I, C.context))
          if (L = v(I, C.context), L = L.map((ne) => B(ne, C)), p(re, C.context)) {
            for (var ue = [], oe = [], ie = 0; ie < L.length; ie++)
              bt(L[ie]) ? oe.push(L[ie]) : ue.push(L[ie]);
            ue.length > 1 ? (J = R(re, ue, U, C), oe.unshift(J), J = R(re, oe, U, C)) : J = R(re, L, U, C);
          } else
            J = R(re, L, U, C);
        else
          L = I.args.map((ne) => B(ne, C)), J = R(re, L, U, C);
        return J;
      }
      case "ParenthesisNode":
        return B(I.content, C);
      case "AccessorNode":
        return T(B(I.object, C), B(I.index, C), C);
      case "ArrayNode": {
        var G = I.items.map((ne) => B(ne, C));
        return G.some(bt) ? new l(G.map(M)) : i(G);
      }
      case "IndexNode":
        return new f(I.dimensions.map((ne) => x(ne, C)));
      case "ObjectNode": {
        var Z = {};
        for (var te in I.properties)
          Z[te] = x(I.properties[te], C);
        return new h(Z);
      }
      case "AssignmentNode":
      /* falls through */
      case "BlockNode":
      /* falls through */
      case "FunctionAssignmentNode":
      /* falls through */
      case "RangeNode":
      /* falls through */
      case "ConditionalNode":
      /* falls through */
      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(I.type));
    }
  }
  return x;
}), O0 = "simplifyCore", jP = ["typed", "parse", "equal", "isZero", "add", "subtract", "multiply", "divide", "pow", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "SymbolNode"], eB = /* @__PURE__ */ W(O0, jP, (r) => {
  var {
    typed: e,
    parse: t,
    equal: n,
    isZero: i,
    add: a,
    subtract: s,
    multiply: o,
    divide: l,
    pow: u,
    AccessorNode: c,
    ArrayNode: f,
    ConstantNode: h,
    FunctionNode: d,
    IndexNode: m,
    ObjectNode: p,
    OperatorNode: g,
    ParenthesisNode: v,
    SymbolNode: S
  } = r, x = new h(0), y = new h(1), b = new h(!0), _ = new h(!1);
  function M(D) {
    return kt(D) && ["and", "not", "or"].includes(D.op);
  }
  var {
    hasProperty: A,
    isCommutative: w
  } = Of({
    FunctionNode: d,
    OperatorNode: g,
    SymbolNode: S
  });
  function E(D) {
    var T = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, R = T ? T.context : void 0;
    if (A(D, "trivial", R)) {
      if (Vn(D) && D.args.length === 1)
        return E(D.args[0], T);
      var B = !1, I = 0;
      if (D.forEach((oe) => {
        ++I, I === 1 && (B = E(oe, T));
      }), I === 1)
        return B;
    }
    var C = D;
    if (Vn(C)) {
      var k = JC(C.name);
      if (k) {
        if (C.args.length > 2 && A(C, "associative", R))
          for (; C.args.length > 2; ) {
            var z = C.args.pop(), V = C.args.pop();
            C.args.push(new g(k, C.name, [z, V]));
          }
        C = new g(k, C.name, C.args);
      } else
        return new d(E(C.fn), C.args.map((oe) => E(oe, T)));
    }
    if (kt(C) && C.isUnary()) {
      var ee = E(C.args[0], T);
      if (C.op === "~" && kt(ee) && ee.isUnary() && ee.op === "~" || C.op === "not" && kt(ee) && ee.isUnary() && ee.op === "not" && M(ee.args[0]))
        return ee.args[0];
      var re = !0;
      if (C.op === "-" && kt(ee) && (ee.isBinary() && ee.fn === "subtract" && (C = new g("-", "subtract", [ee.args[1], ee.args[0]]), re = !1), ee.isUnary() && ee.op === "-"))
        return ee.args[0];
      if (re) return new g(C.op, C.fn, [ee]);
    }
    if (kt(C) && C.isBinary()) {
      var L = E(C.args[0], T), J = E(C.args[1], T);
      if (C.op === "+") {
        if (ht(L) && i(L.value))
          return J;
        if (ht(J) && i(J.value))
          return L;
        kt(J) && J.isUnary() && J.op === "-" && (J = J.args[0], C = new g("-", "subtract", [L, J]));
      }
      if (C.op === "-")
        return kt(J) && J.isUnary() && J.op === "-" ? E(new g("+", "add", [L, J.args[0]]), T) : ht(L) && i(L.value) ? E(new g("-", "unaryMinus", [J])) : ht(J) && i(J.value) ? L : new g(C.op, C.fn, [L, J]);
      if (C.op === "*") {
        if (ht(L)) {
          if (i(L.value))
            return x;
          if (n(L.value, 1))
            return J;
        }
        if (ht(J)) {
          if (i(J.value))
            return x;
          if (n(J.value, 1))
            return L;
          if (w(C, R))
            return new g(C.op, C.fn, [J, L], C.implicit);
        }
        return new g(C.op, C.fn, [L, J], C.implicit);
      }
      if (C.op === "/")
        return ht(L) && i(L.value) ? x : ht(J) && n(J.value, 1) ? L : new g(C.op, C.fn, [L, J]);
      if (C.op === "^" && ht(J)) {
        if (i(J.value))
          return y;
        if (n(J.value, 1))
          return L;
      }
      if (C.op === "and") {
        if (ht(L))
          if (L.value) {
            if (M(J)) return J;
            if (ht(J))
              return J.value ? b : _;
          } else
            return _;
        if (ht(J))
          if (J.value) {
            if (M(L)) return L;
          } else
            return _;
      }
      if (C.op === "or") {
        if (ht(L)) {
          if (L.value)
            return b;
          if (M(J)) return J;
        }
        if (ht(J)) {
          if (J.value)
            return b;
          if (M(L)) return L;
        }
      }
      return new g(C.op, C.fn, [L, J]);
    }
    if (kt(C))
      return new g(C.op, C.fn, C.args.map((oe) => E(oe, T)));
    if (Ur(C))
      return new f(C.items.map((oe) => E(oe, T)));
    if (hi(C))
      return new c(E(C.object, T), E(C.index, T));
    if (ea(C))
      return new m(C.dimensions.map((oe) => E(oe, T)));
    if (Us(C)) {
      var U = {};
      for (var ue in C.properties)
        U[ue] = E(C.properties[ue], T);
      return new p(U);
    }
    return C;
  }
  return e(O0, {
    Node: E,
    "Node,Object": E
  });
}), tB = "resolve", rB = ["typed", "parse", "ConstantNode", "FunctionNode", "OperatorNode", "ParenthesisNode"], nB = /* @__PURE__ */ W(tB, rB, (r) => {
  var {
    typed: e,
    parse: t,
    ConstantNode: n,
    FunctionNode: i,
    OperatorNode: a,
    ParenthesisNode: s
  } = r;
  function o(l, u) {
    var c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : /* @__PURE__ */ new Set();
    if (!u)
      return l;
    if (Zt(l)) {
      if (c.has(l.name)) {
        var f = Array.from(c).join(", ");
        throw new ReferenceError("recursive loop of variable definitions among {".concat(f, "}"));
      }
      var h = u.get(l.name);
      if (bt(h)) {
        var d = new Set(c);
        return d.add(l.name), o(h, u, d);
      } else return typeof h == "number" ? t(String(h)) : h !== void 0 ? new n(h) : l;
    } else if (kt(l)) {
      var m = l.args.map(function(g) {
        return o(g, u, c);
      });
      return new a(l.op, l.fn, m, l.implicit);
    } else {
      if (En(l))
        return new s(o(l.content, u, c));
      if (Vn(l)) {
        var p = l.args.map(function(g) {
          return o(g, u, c);
        });
        return new i(l.name, p);
      }
    }
    return l.map((g) => o(g, u, c));
  }
  return e("resolve", {
    Node: o,
    "Node, Map | null | undefined": o,
    "Node, Object": (l, u) => o(l, Fa(u)),
    // For arrays and matrices, we map `self` rather than `_resolve`
    // because resolve is fairly expensive anyway, and this way
    // we get nice error messages if one entry in the array has wrong type.
    "Array | Matrix": e.referToSelf((l) => (u) => u.map((c) => l(c))),
    "Array | Matrix, null | undefined": e.referToSelf((l) => (u) => u.map((c) => l(c))),
    "Array, Object": e.referTo("Array,Map", (l) => (u, c) => l(u, Fa(c))),
    "Matrix, Object": e.referTo("Matrix,Map", (l) => (u, c) => l(u, Fa(c))),
    "Array | Matrix, Map": e.referToSelf((l) => (u, c) => u.map((f) => l(f, c)))
  });
}), P0 = "symbolicEqual", iB = ["parse", "simplify", "typed", "OperatorNode"], aB = /* @__PURE__ */ W(P0, iB, (r) => {
  var {
    parse: e,
    simplify: t,
    typed: n,
    OperatorNode: i
  } = r;
  function a(s, o) {
    var l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, u = new i("-", "subtract", [s, o]), c = t(u, {}, l);
    return ht(c) && !c.value;
  }
  return n(P0, {
    "Node, Node": a,
    "Node, Node, Object": a
  });
}), B0 = "derivative", sB = ["typed", "config", "parse", "simplify", "equal", "isZero", "numeric", "ConstantNode", "FunctionNode", "OperatorNode", "ParenthesisNode", "SymbolNode"], oB = /* @__PURE__ */ W(B0, sB, (r) => {
  var {
    typed: e,
    config: t,
    parse: n,
    simplify: i,
    equal: a,
    isZero: s,
    numeric: o,
    ConstantNode: l,
    FunctionNode: u,
    OperatorNode: c,
    ParenthesisNode: f,
    SymbolNode: h
  } = r;
  function d(y, b) {
    var _ = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      simplify: !0
    }, M = /* @__PURE__ */ new Map(), A = b.name;
    function w(D) {
      var T = M.get(D);
      if (T !== void 0)
        return T;
      var R = v(w, D, A);
      return M.set(D, R), R;
    }
    var E = S(y, w);
    return _.simplify ? i(E) : E;
  }
  function m(y) {
    var b = n(y);
    if (!b.isSymbolNode)
      throw new TypeError("Invalid variable. " + "Cannot parse ".concat(JSON.stringify(y), " into a variable in function derivative"));
    return b;
  }
  var p = e(B0, {
    "Node, SymbolNode": d,
    "Node, SymbolNode, Object": d,
    "Node, string": (y, b) => d(y, m(b)),
    "Node, string, Object": (y, b, _) => d(y, m(b), _)
    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        <create caching isConst>
        res = _derivative(res, isConst)
      }
      return res
    }
    */
  });
  p._simplify = !0, p.toTex = function(y) {
    return g.apply(null, y.args);
  };
  var g = e("_derivTex", {
    "Node, SymbolNode": function(b, _) {
      return ht(b) && Dt(b.value) === "string" ? g(n(b.value).toString(), _.toString(), 1) : g(b.toTex(), _.toString(), 1);
    },
    "Node, ConstantNode": function(b, _) {
      if (Dt(_.value) === "string")
        return g(b, n(_.value));
      throw new Error("The second parameter to 'derivative' is a non-string constant");
    },
    "Node, SymbolNode, ConstantNode": function(b, _, M) {
      return g(b.toString(), _.name, M.value);
    },
    "string, string, number": function(b, _, M) {
      var A;
      return M === 1 ? A = "{d\\over d" + _ + "}" : A = "{d^{" + M + "}\\over d" + _ + "^{" + M + "}}", A + "\\left[".concat(b, "\\right]");
    }
  }), v = e("_isConst", {
    "function, ConstantNode, string": function() {
      return !0;
    },
    "function, SymbolNode, string": function(b, _, M) {
      return _.name !== M;
    },
    "function, ParenthesisNode, string": function(b, _, M) {
      return b(_.content, M);
    },
    "function, FunctionAssignmentNode, string": function(b, _, M) {
      return _.params.includes(M) ? b(_.expr, M) : !0;
    },
    "function, FunctionNode | OperatorNode, string": function(b, _, M) {
      return _.args.every((A) => b(A, M));
    }
  }), S = e("_derivative", {
    "ConstantNode, function": function() {
      return x(0);
    },
    "SymbolNode, function": function(b, _) {
      return _(b) ? x(0) : x(1);
    },
    "ParenthesisNode, function": function(b, _) {
      return new f(S(b.content, _));
    },
    "FunctionAssignmentNode, function": function(b, _) {
      return _(b) ? x(0) : S(b.expr, _);
    },
    "FunctionNode, function": function(b, _) {
      if (_(b))
        return x(0);
      var M = b.args[0], A, w = !1, E = !1, D;
      switch (b.name) {
        case "cbrt":
          w = !0, D = new c("*", "multiply", [x(3), new c("^", "pow", [M, new c("/", "divide", [x(2), x(3)])])]);
          break;
        case "sqrt":
        case "nthRoot":
          if (b.args.length === 1)
            w = !0, D = new c("*", "multiply", [x(2), new u("sqrt", [M])]);
          else if (b.args.length === 2)
            return A = new c("/", "divide", [x(1), b.args[1]]), S(new c("^", "pow", [M, A]), _);
          break;
        case "log10":
          A = x(10);
        /* fall through! */
        case "log":
          if (!A && b.args.length === 1)
            D = M.clone(), w = !0;
          else if (b.args.length === 1 && A || b.args.length === 2 && _(b.args[1]))
            D = new c("*", "multiply", [M.clone(), new u("log", [A || b.args[1]])]), w = !0;
          else if (b.args.length === 2)
            return S(new c("/", "divide", [new u("log", [M]), new u("log", [b.args[1]])]), _);
          break;
        case "pow":
          if (b.args.length === 2)
            return S(new c("^", "pow", [M, b.args[1]]), _);
          break;
        case "exp":
          D = new u("exp", [M.clone()]);
          break;
        case "sin":
          D = new u("cos", [M.clone()]);
          break;
        case "cos":
          D = new c("-", "unaryMinus", [new u("sin", [M.clone()])]);
          break;
        case "tan":
          D = new c("^", "pow", [new u("sec", [M.clone()]), x(2)]);
          break;
        case "sec":
          D = new c("*", "multiply", [b, new u("tan", [M.clone()])]);
          break;
        case "csc":
          E = !0, D = new c("*", "multiply", [b, new u("cot", [M.clone()])]);
          break;
        case "cot":
          E = !0, D = new c("^", "pow", [new u("csc", [M.clone()]), x(2)]);
          break;
        case "asin":
          w = !0, D = new u("sqrt", [new c("-", "subtract", [x(1), new c("^", "pow", [M.clone(), x(2)])])]);
          break;
        case "acos":
          w = !0, E = !0, D = new u("sqrt", [new c("-", "subtract", [x(1), new c("^", "pow", [M.clone(), x(2)])])]);
          break;
        case "atan":
          w = !0, D = new c("+", "add", [new c("^", "pow", [M.clone(), x(2)]), x(1)]);
          break;
        case "asec":
          w = !0, D = new c("*", "multiply", [new u("abs", [M.clone()]), new u("sqrt", [new c("-", "subtract", [new c("^", "pow", [M.clone(), x(2)]), x(1)])])]);
          break;
        case "acsc":
          w = !0, E = !0, D = new c("*", "multiply", [new u("abs", [M.clone()]), new u("sqrt", [new c("-", "subtract", [new c("^", "pow", [M.clone(), x(2)]), x(1)])])]);
          break;
        case "acot":
          w = !0, E = !0, D = new c("+", "add", [new c("^", "pow", [M.clone(), x(2)]), x(1)]);
          break;
        case "sinh":
          D = new u("cosh", [M.clone()]);
          break;
        case "cosh":
          D = new u("sinh", [M.clone()]);
          break;
        case "tanh":
          D = new c("^", "pow", [new u("sech", [M.clone()]), x(2)]);
          break;
        case "sech":
          E = !0, D = new c("*", "multiply", [b, new u("tanh", [M.clone()])]);
          break;
        case "csch":
          E = !0, D = new c("*", "multiply", [b, new u("coth", [M.clone()])]);
          break;
        case "coth":
          E = !0, D = new c("^", "pow", [new u("csch", [M.clone()]), x(2)]);
          break;
        case "asinh":
          w = !0, D = new u("sqrt", [new c("+", "add", [new c("^", "pow", [M.clone(), x(2)]), x(1)])]);
          break;
        case "acosh":
          w = !0, D = new u("sqrt", [new c("-", "subtract", [new c("^", "pow", [M.clone(), x(2)]), x(1)])]);
          break;
        case "atanh":
          w = !0, D = new c("-", "subtract", [x(1), new c("^", "pow", [M.clone(), x(2)])]);
          break;
        case "asech":
          w = !0, E = !0, D = new c("*", "multiply", [M.clone(), new u("sqrt", [new c("-", "subtract", [x(1), new c("^", "pow", [M.clone(), x(2)])])])]);
          break;
        case "acsch":
          w = !0, E = !0, D = new c("*", "multiply", [new u("abs", [M.clone()]), new u("sqrt", [new c("+", "add", [new c("^", "pow", [M.clone(), x(2)]), x(1)])])]);
          break;
        case "acoth":
          w = !0, E = !0, D = new c("-", "subtract", [x(1), new c("^", "pow", [M.clone(), x(2)])]);
          break;
        case "abs":
          D = new c("/", "divide", [new u(new h("abs"), [M.clone()]), M.clone()]);
          break;
        case "gamma":
        // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)
        default:
          throw new Error('Cannot process function "' + b.name + '" in derivative: the function is not supported, undefined, or the number of arguments passed to it are not supported');
      }
      var T, R;
      w ? (T = "/", R = "divide") : (T = "*", R = "multiply");
      var B = S(M, _);
      return E && (B = new c("-", "unaryMinus", [B])), new c(T, R, [B, D]);
    },
    "OperatorNode, function": function(b, _) {
      if (_(b))
        return x(0);
      if (b.op === "+")
        return new c(b.op, b.fn, b.args.map(function(C) {
          return S(C, _);
        }));
      if (b.op === "-") {
        if (b.isUnary())
          return new c(b.op, b.fn, [S(b.args[0], _)]);
        if (b.isBinary())
          return new c(b.op, b.fn, [S(b.args[0], _), S(b.args[1], _)]);
      }
      if (b.op === "*") {
        var M = b.args.filter(function(C) {
          return _(C);
        });
        if (M.length > 0) {
          var A = b.args.filter(function(C) {
            return !_(C);
          }), w = A.length === 1 ? A[0] : new c("*", "multiply", A), E = M.concat(S(w, _));
          return new c("*", "multiply", E);
        }
        return new c("+", "add", b.args.map(function(C) {
          return new c("*", "multiply", b.args.map(function(k) {
            return k === C ? S(k, _) : k.clone();
          }));
        }));
      }
      if (b.op === "/" && b.isBinary()) {
        var D = b.args[0], T = b.args[1];
        return _(T) ? new c("/", "divide", [S(D, _), T]) : _(D) ? new c("*", "multiply", [new c("-", "unaryMinus", [D]), new c("/", "divide", [S(T, _), new c("^", "pow", [T.clone(), x(2)])])]) : new c("/", "divide", [new c("-", "subtract", [new c("*", "multiply", [S(D, _), T.clone()]), new c("*", "multiply", [D.clone(), S(T, _)])]), new c("^", "pow", [T.clone(), x(2)])]);
      }
      if (b.op === "^" && b.isBinary()) {
        var R = b.args[0], B = b.args[1];
        if (_(R))
          return ht(R) && (s(R.value) || a(R.value, 1)) ? x(0) : new c("*", "multiply", [b, new c("*", "multiply", [new u("log", [R.clone()]), S(B.clone(), _)])]);
        if (_(B)) {
          if (ht(B)) {
            if (s(B.value))
              return x(0);
            if (a(B.value, 1))
              return S(R, _);
          }
          var I = new c("^", "pow", [R.clone(), new c("-", "subtract", [B, x(1)])]);
          return new c("*", "multiply", [B.clone(), new c("*", "multiply", [S(R, _), I])]);
        }
        return new c("*", "multiply", [new c("^", "pow", [R.clone(), B.clone()]), new c("+", "add", [new c("*", "multiply", [S(R, _), new c("/", "divide", [B.clone(), R.clone()])]), new c("*", "multiply", [S(B, _), new u("log", [R.clone()])])])]);
      }
      throw new Error('Cannot process operator "' + b.op + '" in derivative: the operator is not supported, undefined, or the number of arguments passed to it are not supported');
    }
  });
  function x(y, b) {
    return new l(o(y, xi(String(y), t)));
  }
  return p;
}), I0 = "rationalize", uB = ["config", "typed", "equal", "isZero", "add", "subtract", "multiply", "divide", "pow", "parse", "simplifyConstant", "simplifyCore", "simplify", "?bignumber", "?fraction", "mathWithTransform", "matrix", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "SymbolNode", "ParenthesisNode"], lB = /* @__PURE__ */ W(I0, uB, (r) => {
  var {
    config: e,
    typed: t,
    equal: n,
    isZero: i,
    add: a,
    subtract: s,
    multiply: o,
    divide: l,
    pow: u,
    parse: c,
    simplifyConstant: f,
    simplifyCore: h,
    simplify: d,
    fraction: m,
    bignumber: p,
    mathWithTransform: g,
    matrix: v,
    AccessorNode: S,
    ArrayNode: x,
    ConstantNode: y,
    FunctionNode: b,
    IndexNode: _,
    ObjectNode: M,
    OperatorNode: A,
    SymbolNode: w,
    ParenthesisNode: E
  } = r;
  function D(C) {
    var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, V = R(), ee = T(C, k, !0, V.firstRules), re = ee.variables.length, L = {
      exactFractions: !1
    }, J = {
      exactFractions: !0
    };
    if (C = ee.expression, re >= 1) {
      C = B(C);
      var U, ue, oe = !0, ie = !1;
      C = d(C, V.firstRules, {}, L);
      for (var G; ue = oe ? V.distrDivRules : V.sucDivRules, C = d(C, ue, {}, J), oe = !oe, G = C.toString(), G !== U; )
        ie = !0, U = G;
      ie && (C = d(C, V.firstRulesAgain, {}, L)), C = d(C, V.finalRules, {}, L);
    }
    var Z = [], te = {};
    return C.type === "OperatorNode" && C.isBinary() && C.op === "/" ? (re === 1 && (C.args[0] = I(C.args[0], Z), C.args[1] = I(C.args[1])), z && (te.numerator = C.args[0], te.denominator = C.args[1])) : (re === 1 && (C = I(C, Z)), z && (te.numerator = C, te.denominator = null)), z ? (te.coefficients = Z, te.variables = ee.variables, te.expression = C, te) : C;
  }
  return t(I0, {
    Node: D,
    "Node, boolean": (C, k) => D(C, {}, k),
    "Node, Object": D,
    "Node, Object, boolean": D
  });
  function T(C, k, z, V) {
    var ee = [], re = d(C, V, k, {
      exactFractions: !1
    });
    z = !!z;
    var L = "+-*" + (z ? "/" : "");
    U(re);
    var J = {};
    return J.expression = re, J.variables = ee, J;
    function U(ue) {
      var oe = ue.type;
      if (oe === "FunctionNode")
        throw new Error("There is an unsolved function call");
      if (oe === "OperatorNode")
        if (ue.op === "^") {
          if (ue.args[1].type !== "ConstantNode" || !$e(parseFloat(ue.args[1].value)))
            throw new Error("There is a non-integer exponent");
          U(ue.args[0]);
        } else {
          if (!L.includes(ue.op))
            throw new Error("Operator " + ue.op + " invalid in polynomial expression");
          for (var ie = 0; ie < ue.args.length; ie++)
            U(ue.args[ie]);
        }
      else if (oe === "SymbolNode") {
        var G = ue.name, Z = ee.indexOf(G);
        Z === -1 && ee.push(G);
      } else if (oe === "ParenthesisNode")
        U(ue.content);
      else if (oe !== "ConstantNode")
        throw new Error("type " + oe + " is not allowed in polynomial expression");
    }
  }
  function R() {
    var C = [
      h,
      // sCore
      {
        l: "n+n",
        r: "2*n"
      },
      {
        l: "n+-n",
        r: "0"
      },
      f,
      // sConstant
      {
        l: "n*(n1^-1)",
        r: "n/n1"
      },
      {
        l: "n*n1^-n2",
        r: "n/n1^n2"
      },
      {
        l: "n1^-1",
        r: "1/n1"
      },
      {
        l: "n*(n1/n2)",
        r: "(n*n1)/n2"
      },
      {
        l: "1*n",
        r: "n"
      }
    ], k = [
      {
        l: "(-n1)/(-n2)",
        r: "n1/n2"
      },
      // Unary division
      {
        l: "(-n1)*(-n2)",
        r: "n1*n2"
      },
      // Unary multiplication
      {
        l: "n1--n2",
        r: "n1+n2"
      },
      // '--' elimination
      {
        l: "n1-n2",
        r: "n1+(-n2)"
      },
      // Subtraction turn into add with un�ry minus
      {
        l: "(n1+n2)*n3",
        r: "(n1*n3 + n2*n3)"
      },
      // Distributive 1
      {
        l: "n1*(n2+n3)",
        r: "(n1*n2+n1*n3)"
      },
      // Distributive 2
      {
        l: "c1*n + c2*n",
        r: "(c1+c2)*n"
      },
      // Joining constants
      {
        l: "c1*n + n",
        r: "(c1+1)*n"
      },
      // Joining constants
      {
        l: "c1*n - c2*n",
        r: "(c1-c2)*n"
      },
      // Joining constants
      {
        l: "c1*n - n",
        r: "(c1-1)*n"
      },
      // Joining constants
      {
        l: "v/c",
        r: "(1/c)*v"
      },
      // variable/constant (new!)
      {
        l: "v/-c",
        r: "-(1/c)*v"
      },
      // variable/constant (new!)
      {
        l: "-v*-c",
        r: "c*v"
      },
      // Inversion constant and variable 1
      {
        l: "-v*c",
        r: "-c*v"
      },
      // Inversion constant and variable 2
      {
        l: "v*-c",
        r: "-c*v"
      },
      // Inversion constant and variable 3
      {
        l: "v*c",
        r: "c*v"
      },
      // Inversion constant and variable 4
      {
        l: "-(-n1*n2)",
        r: "(n1*n2)"
      },
      // Unary propagation
      {
        l: "-(n1*n2)",
        r: "(-n1*n2)"
      },
      // Unary propagation
      {
        l: "-(-n1+n2)",
        r: "(n1-n2)"
      },
      // Unary propagation
      {
        l: "-(n1+n2)",
        r: "(-n1-n2)"
      },
      // Unary propagation
      {
        l: "(n1^n2)^n3",
        r: "(n1^(n2*n3))"
      },
      // Power to Power
      {
        l: "-(-n1/n2)",
        r: "(n1/n2)"
      },
      // Division and Unary
      {
        l: "-(n1/n2)",
        r: "(-n1/n2)"
      }
    ], z = [
      {
        l: "(n1/n2 + n3/n4)",
        r: "((n1*n4 + n3*n2)/(n2*n4))"
      },
      // Sum of fractions
      {
        l: "(n1/n2 + n3)",
        r: "((n1 + n3*n2)/n2)"
      },
      // Sum fraction with number 1
      {
        l: "(n1 + n2/n3)",
        r: "((n1*n3 + n2)/n3)"
      }
    ], V = [
      {
        l: "(n1/(n2/n3))",
        r: "((n1*n3)/n2)"
      },
      // Division simplification
      {
        l: "(n1/n2/n3)",
        r: "(n1/(n2*n3))"
      }
    ], ee = {};
    return ee.firstRules = C.concat(k, V), ee.distrDivRules = z, ee.sucDivRules = V, ee.firstRulesAgain = C.concat(k), ee.finalRules = [
      h,
      // simplify.rules[0]
      {
        l: "n*-n",
        r: "-n^2"
      },
      // Joining multiply with power 1
      {
        l: "n*n",
        r: "n^2"
      },
      // Joining multiply with power 2
      f,
      // simplify.rules[14] old 3rd index in oldRules
      {
        l: "n*-n^n1",
        r: "-n^(n1+1)"
      },
      // Joining multiply with power 3
      {
        l: "n*n^n1",
        r: "n^(n1+1)"
      },
      // Joining multiply with power 4
      {
        l: "n^n1*-n^n2",
        r: "-n^(n1+n2)"
      },
      // Joining multiply with power 5
      {
        l: "n^n1*n^n2",
        r: "n^(n1+n2)"
      },
      // Joining multiply with power 6
      {
        l: "n^n1*-n",
        r: "-n^(n1+1)"
      },
      // Joining multiply with power 7
      {
        l: "n^n1*n",
        r: "n^(n1+1)"
      },
      // Joining multiply with power 8
      {
        l: "n^n1/-n",
        r: "-n^(n1-1)"
      },
      // Joining multiply with power 8
      {
        l: "n^n1/n",
        r: "n^(n1-1)"
      },
      // Joining division with power 1
      {
        l: "n/-n^n1",
        r: "-n^(1-n1)"
      },
      // Joining division with power 2
      {
        l: "n/n^n1",
        r: "n^(1-n1)"
      },
      // Joining division with power 3
      {
        l: "n^n1/-n^n2",
        r: "n^(n1-n2)"
      },
      // Joining division with power 4
      {
        l: "n^n1/n^n2",
        r: "n^(n1-n2)"
      },
      // Joining division with power 5
      {
        l: "n1+(-n2*n3)",
        r: "n1-n2*n3"
      },
      // Solving useless parenthesis 1
      {
        l: "v*(-c)",
        r: "-c*v"
      },
      // Solving useless unary 2
      {
        l: "n1+-n2",
        r: "n1-n2"
      },
      // Solving +- together (new!)
      {
        l: "v*c",
        r: "c*v"
      },
      // inversion constant with variable
      {
        l: "(n1^n2)^n3",
        r: "(n1^(n2*n3))"
      }
      // Power to Power
    ], ee;
  }
  function B(C, k, z) {
    var V = C.type, ee = arguments.length > 1;
    if (V === "OperatorNode" && C.isBinary()) {
      var re = !1, L;
      if (C.op === "^" && (C.args[0].type === "ParenthesisNode" || C.args[0].type === "OperatorNode") && C.args[1].type === "ConstantNode" && (L = parseFloat(C.args[1].value), re = L >= 2 && $e(L)), re) {
        if (L > 2) {
          var J = C.args[0], U = new A("^", "pow", [C.args[0].cloneDeep(), new y(L - 1)]);
          C = new A("*", "multiply", [J, U]);
        } else
          C = new A("*", "multiply", [C.args[0], C.args[0].cloneDeep()]);
        ee && (z === "content" ? k.content = C : k.args[z] = C);
      }
    }
    if (V === "ParenthesisNode")
      B(C.content, C, "content");
    else if (V !== "ConstantNode" && V !== "SymbolNode")
      for (var ue = 0; ue < C.args.length; ue++)
        B(C.args[ue], C, ue);
    if (!ee)
      return C;
  }
  function I(C, k) {
    k === void 0 && (k = []), k[0] = 0;
    var z = {};
    z.cte = 1, z.oper = "+", z.fire = "";
    var V = 0, ee = "";
    G(C, null, z), V = k.length - 1;
    for (var re = !0, L, J = V; J >= 0; J--)
      if (k[J] !== 0) {
        var U = new y(re ? k[J] : Math.abs(k[J])), ue = k[J] < 0 ? "-" : "+";
        if (J > 0) {
          var oe = new w(ee);
          if (J > 1) {
            var ie = new y(J);
            oe = new A("^", "pow", [oe, ie]);
          }
          k[J] === -1 && re ? U = new A("-", "unaryMinus", [oe]) : Math.abs(k[J]) === 1 ? U = oe : U = new A("*", "multiply", [U, oe]);
        }
        re ? L = U : ue === "+" ? L = new A("+", "add", [L, U]) : L = new A("-", "subtract", [L, U]), re = !1;
      }
    if (re)
      return new y(0);
    return L;
    function G(Z, te, ne) {
      var ae = Z.type;
      if (ae === "FunctionNode")
        throw new Error("There is an unsolved function call");
      if (ae === "OperatorNode") {
        if (!"+-*^".includes(Z.op)) throw new Error("Operator " + Z.op + " invalid");
        if (te !== null) {
          if ((Z.fn === "unaryMinus" || Z.fn === "pow") && te.fn !== "add" && te.fn !== "subtract" && te.fn !== "multiply")
            throw new Error("Invalid " + Z.op + " placing");
          if ((Z.fn === "subtract" || Z.fn === "add" || Z.fn === "multiply") && te.fn !== "add" && te.fn !== "subtract")
            throw new Error("Invalid " + Z.op + " placing");
          if ((Z.fn === "subtract" || Z.fn === "add" || Z.fn === "unaryMinus") && ne.noFil !== 0)
            throw new Error("Invalid " + Z.op + " placing");
        }
        (Z.op === "^" || Z.op === "*") && (ne.fire = Z.op);
        for (var xe = 0; xe < Z.args.length; xe++)
          Z.fn === "unaryMinus" && (ne.oper = "-"), (Z.op === "+" || Z.fn === "subtract") && (ne.fire = "", ne.cte = 1, ne.oper = xe === 0 ? "+" : Z.op), ne.noFil = xe, G(Z.args[xe], Z, ne);
      } else if (ae === "SymbolNode") {
        if (Z.name !== ee && ee !== "")
          throw new Error("There is more than one variable");
        if (ee = Z.name, te === null) {
          k[1] = 1;
          return;
        }
        if (te.op === "^" && ne.noFil !== 0)
          throw new Error("In power the variable should be the first parameter");
        if (te.op === "*" && ne.noFil !== 1)
          throw new Error("In multiply the variable should be the second parameter");
        (ne.fire === "" || ne.fire === "*") && (V < 1 && (k[1] = 0), k[1] += ne.cte * (ne.oper === "+" ? 1 : -1), V = Math.max(1, V));
      } else if (ae === "ConstantNode") {
        var q = parseFloat(Z.value);
        if (te === null) {
          k[0] = q;
          return;
        }
        if (te.op === "^") {
          if (ne.noFil !== 1) throw new Error("Constant cannot be powered");
          if (!$e(q) || q <= 0)
            throw new Error("Non-integer exponent is not allowed");
          for (var Ae = V + 1; Ae < q; Ae++) k[Ae] = 0;
          q > V && (k[q] = 0), k[q] += ne.cte * (ne.oper === "+" ? 1 : -1), V = Math.max(q, V);
          return;
        }
        ne.cte = q, ne.fire === "" && (k[0] += ne.cte * (ne.oper === "+" ? 1 : -1));
      } else
        throw new Error("Type " + ae + " is not allowed");
    }
  }
}), L0 = "zpk2tf", cB = ["typed", "add", "multiply", "Complex", "number"], fB = /* @__PURE__ */ W(L0, cB, (r) => {
  var {
    typed: e,
    add: t,
    multiply: n,
    Complex: i,
    number: a
  } = r;
  return e(L0, {
    "Array,Array,number": function(u, c, f) {
      return s(u, c, f);
    },
    "Array,Array": function(u, c) {
      return s(u, c, 1);
    },
    "Matrix,Matrix,number": function(u, c, f) {
      return s(u.valueOf(), c.valueOf(), f);
    },
    "Matrix,Matrix": function(u, c) {
      return s(u.valueOf(), c.valueOf(), 1);
    }
  });
  function s(l, u, c) {
    l.some((S) => S.type === "BigNumber") && (l = l.map((S) => a(S))), u.some((S) => S.type === "BigNumber") && (u = u.map((S) => a(S)));
    for (var f = [i(1, 0)], h = [i(1, 0)], d = 0; d < l.length; d++) {
      var m = l[d];
      typeof m == "number" && (m = i(m, 0)), f = o(f, [i(1, 0), i(-m.re, -m.im)]);
    }
    for (var p = 0; p < u.length; p++) {
      var g = u[p];
      typeof g == "number" && (g = i(g, 0)), h = o(h, [i(1, 0), i(-g.re, -g.im)]);
    }
    for (var v = 0; v < f.length; v++)
      f[v] = n(f[v], c);
    return [f, h];
  }
  function o(l, u) {
    for (var c = [], f = 0; f < l.length + u.length - 1; f++) {
      c[f] = i(0, 0);
      for (var h = 0; h < l.length; h++)
        f - h >= 0 && f - h < u.length && (c[f] = t(c[f], n(l[h], u[f - h])));
    }
    return c;
  }
}), U0 = "freqz", hB = ["typed", "add", "multiply", "Complex", "divide", "matrix"], dB = /* @__PURE__ */ W(U0, hB, (r) => {
  var {
    typed: e,
    add: t,
    multiply: n,
    Complex: i,
    divide: a,
    matrix: s
  } = r;
  return e(U0, {
    "Array, Array": function(c, f) {
      var h = l(512);
      return o(c, f, h);
    },
    "Array, Array, Array": function(c, f, h) {
      return o(c, f, h);
    },
    "Array, Array, number": function(c, f, h) {
      if (h < 0)
        throw new Error("w must be a positive number");
      var d = l(h);
      return o(c, f, d);
    },
    "Matrix, Matrix": function(c, f) {
      var h = l(512), {
        w: d,
        h: m
      } = o(c.valueOf(), f.valueOf(), h);
      return {
        w: s(d),
        h: s(m)
      };
    },
    "Matrix, Matrix, Matrix": function(c, f, h) {
      var {
        h: d
      } = o(c.valueOf(), f.valueOf(), h.valueOf());
      return {
        h: s(d),
        w: s(h)
      };
    },
    "Matrix, Matrix, number": function(c, f, h) {
      if (h < 0)
        throw new Error("w must be a positive number");
      var d = l(h), {
        h: m
      } = o(c.valueOf(), f.valueOf(), d);
      return {
        h: s(m),
        w: s(d)
      };
    }
  });
  function o(u, c, f) {
    for (var h = [], d = [], m = 0; m < f.length; m++) {
      for (var p = i(0, 0), g = i(0, 0), v = 0; v < u.length; v++)
        p = t(p, n(u[v], i(Math.cos(-v * f[m]), Math.sin(-v * f[m]))));
      for (var S = 0; S < c.length; S++)
        g = t(g, n(c[S], i(Math.cos(-S * f[m]), Math.sin(-S * f[m]))));
      h.push(p), d.push(g);
    }
    for (var x = [], y = 0; y < h.length; y++)
      x.push(a(h[y], d[y]));
    return {
      h: x,
      w: f
    };
  }
  function l(u) {
    for (var c = [], f = 0; f < u; f++)
      c.push(f / u * Math.PI);
    return c;
  }
}), mB = "reviver", pB = ["classes"], vB = /* @__PURE__ */ W(mB, pB, (r) => {
  var {
    classes: e
  } = r;
  return function(n, i) {
    var a = e[i && i.mathjs];
    return a && typeof a.fromJSON == "function" ? a.fromJSON(i) : i;
  };
}), gB = "replacer", yB = [], xB = /* @__PURE__ */ W(gB, yB, () => function(e, t) {
  return typeof t == "number" && (!isFinite(t) || isNaN(t)) ? {
    mathjs: "number",
    value: String(t)
  } : typeof t == "bigint" ? {
    mathjs: "bigint",
    value: String(t)
  } : t;
}), _B = "14.6.0", bB = /* @__PURE__ */ W("true", [], () => !0), wB = /* @__PURE__ */ W("false", [], () => !1), SB = /* @__PURE__ */ W("null", [], () => null), EB = /* @__PURE__ */ Hr("Infinity", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1 / 0) : 1 / 0;
}), MB = /* @__PURE__ */ Hr("NaN", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(NaN) : NaN;
}), AB = /* @__PURE__ */ Hr("pi", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? Rf(t) : Ab;
}), DB = /* @__PURE__ */ Hr("tau", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? tD(t) : Db;
}), CB = /* @__PURE__ */ Hr("e", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? jA(t) : Cb;
}), TB = /* @__PURE__ */ Hr("phi", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? eD(t) : Tb;
}), NB = /* @__PURE__ */ Hr("LN2", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(2).ln() : Math.LN2;
}), RB = /* @__PURE__ */ Hr("LN10", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(10).ln() : Math.LN10;
}), FB = /* @__PURE__ */ Hr("LOG2E", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1).div(new t(2).ln()) : Math.LOG2E;
}), OB = /* @__PURE__ */ Hr("LOG10E", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1).div(new t(10).ln()) : Math.LOG10E;
}), PB = /* @__PURE__ */ Hr(
  // eslint-disable-line camelcase
  "SQRT1_2",
  ["config", "?BigNumber"],
  (r) => {
    var {
      config: e,
      BigNumber: t
    } = r;
    return e.number === "BigNumber" ? new t("0.5").sqrt() : Math.SQRT1_2;
  }
), BB = /* @__PURE__ */ Hr("SQRT2", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(2).sqrt() : Math.SQRT2;
}), IB = /* @__PURE__ */ Hr("i", ["Complex"], (r) => {
  var {
    Complex: e
  } = r;
  return e.I;
}), LB = /* @__PURE__ */ W("PI", ["pi"], (r) => {
  var {
    pi: e
  } = r;
  return e;
}), UB = /* @__PURE__ */ W("E", ["e"], (r) => {
  var {
    e
  } = r;
  return e;
}), zB = /* @__PURE__ */ W("version", [], () => _B);
function Hr(r, e, t) {
  return W(r, e, t, {
    recreateOnConfigChange: !0
  });
}
var kB = /* @__PURE__ */ je("speedOfLight", "299792458", "m s^-1"), HB = /* @__PURE__ */ je("gravitationConstant", "6.67430e-11", "m^3 kg^-1 s^-2"), GB = /* @__PURE__ */ je("planckConstant", "6.62607015e-34", "J s"), $B = /* @__PURE__ */ je("reducedPlanckConstant", "1.0545718176461565e-34", "J s"), VB = /* @__PURE__ */ je("magneticConstant", "1.25663706212e-6", "N A^-2"), qB = /* @__PURE__ */ je("electricConstant", "8.8541878128e-12", "F m^-1"), WB = /* @__PURE__ */ je("vacuumImpedance", "376.730313667", "ohm"), XB = /* @__PURE__ */ je("coulomb", "8.987551792261171e9", "N m^2 C^-2"), YB = /* @__PURE__ */ je("coulombConstant", "8.987551792261171e9", "N m^2 C^-2"), ZB = /* @__PURE__ */ je("elementaryCharge", "1.602176634e-19", "C"), KB = /* @__PURE__ */ je("bohrMagneton", "9.2740100783e-24", "J T^-1"), JB = /* @__PURE__ */ je("conductanceQuantum", "7.748091729863649e-5", "S"), QB = /* @__PURE__ */ je("inverseConductanceQuantum", "12906.403729652257", "ohm"), jB = /* @__PURE__ */ je("magneticFluxQuantum", "2.0678338484619295e-15", "Wb"), eI = /* @__PURE__ */ je("nuclearMagneton", "5.0507837461e-27", "J T^-1"), tI = /* @__PURE__ */ je("klitzing", "25812.807459304513", "ohm"), rI = /* @__PURE__ */ je("bohrRadius", "5.29177210903e-11", "m"), nI = /* @__PURE__ */ je("classicalElectronRadius", "2.8179403262e-15", "m"), iI = /* @__PURE__ */ je("electronMass", "9.1093837015e-31", "kg"), aI = /* @__PURE__ */ je("fermiCoupling", "1.1663787e-5", "GeV^-2"), sI = $u("fineStructure", 0.0072973525693), oI = /* @__PURE__ */ je("hartreeEnergy", "4.3597447222071e-18", "J"), uI = /* @__PURE__ */ je("protonMass", "1.67262192369e-27", "kg"), lI = /* @__PURE__ */ je("deuteronMass", "3.3435830926e-27", "kg"), cI = /* @__PURE__ */ je("neutronMass", "1.6749271613e-27", "kg"), fI = /* @__PURE__ */ je("quantumOfCirculation", "3.6369475516e-4", "m^2 s^-1"), hI = /* @__PURE__ */ je("rydberg", "10973731.568160", "m^-1"), dI = /* @__PURE__ */ je("thomsonCrossSection", "6.6524587321e-29", "m^2"), mI = $u("weakMixingAngle", 0.2229), pI = $u("efimovFactor", 22.7), vI = /* @__PURE__ */ je("atomicMass", "1.66053906660e-27", "kg"), gI = /* @__PURE__ */ je("avogadro", "6.02214076e23", "mol^-1"), yI = /* @__PURE__ */ je("boltzmann", "1.380649e-23", "J K^-1"), xI = /* @__PURE__ */ je("faraday", "96485.33212331001", "C mol^-1"), _I = /* @__PURE__ */ je("firstRadiation", "3.7417718521927573e-16", "W m^2"), bI = /* @__PURE__ */ je("loschmidt", "2.686780111798444e25", "m^-3"), wI = /* @__PURE__ */ je("gasConstant", "8.31446261815324", "J K^-1 mol^-1"), SI = /* @__PURE__ */ je("molarPlanckConstant", "3.990312712893431e-10", "J s mol^-1"), EI = /* @__PURE__ */ je("molarVolume", "0.022413969545014137", "m^3 mol^-1"), MI = $u("sackurTetrode", -1.16487052358), AI = /* @__PURE__ */ je("secondRadiation", "0.014387768775039337", "m K"), DI = /* @__PURE__ */ je("stefanBoltzmann", "5.67037441918443e-8", "W m^-2 K^-4"), CI = /* @__PURE__ */ je("wienDisplacement", "2.897771955e-3", "m K"), TI = /* @__PURE__ */ je("molarMass", "0.99999999965e-3", "kg mol^-1"), NI = /* @__PURE__ */ je("molarMassC12", "11.9999999958e-3", "kg mol^-1"), RI = /* @__PURE__ */ je("gravity", "9.80665", "m s^-2"), FI = /* @__PURE__ */ je("planckLength", "1.616255e-35", "m"), OI = /* @__PURE__ */ je("planckMass", "2.176435e-8", "kg"), PI = /* @__PURE__ */ je("planckTime", "5.391245e-44", "s"), BI = /* @__PURE__ */ je("planckCharge", "1.87554603778e-18", "C"), II = /* @__PURE__ */ je("planckTemperature", "1.416785e+32", "K");
function je(r, e, t) {
  var n = ["config", "Unit", "BigNumber"];
  return W(r, n, (i) => {
    var {
      config: a,
      Unit: s,
      BigNumber: o
    } = i, l = a.number === "BigNumber" ? new o(e) : parseFloat(e), u = new s(l, t);
    return u.fixPrefix = !0, u;
  });
}
function $u(r, e) {
  var t = ["config", "BigNumber"];
  return W(r, t, (n) => {
    var {
      config: i,
      BigNumber: a
    } = n;
    return i.number === "BigNumber" ? new a(e) : e;
  });
}
function z0(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(i) {
      return Object.getOwnPropertyDescriptor(r, i).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function LI(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? z0(Object(t), !0).forEach(function(n) {
      qt(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : z0(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var UI = "mapSlices", zI = ["typed", "isInteger"], kI = /* @__PURE__ */ W(UI, zI, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r, n = hc({
    typed: e,
    isInteger: t
  });
  return e("mapSlices", {
    "...any": function(a) {
      var s = a[1];
      et(s) ? a[1] = s - 1 : Qe(s) && (a[1] = s.minus(1));
      try {
        return n.apply(null, a);
      } catch (o) {
        throw Ar(o);
      }
    }
  });
}, LI({
  isTransformFunction: !0
}, hc.meta)), HI = "column", GI = ["typed", "Index", "matrix", "range"], $I = /* @__PURE__ */ W(HI, GI, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: i
  } = r, a = $1({
    typed: e,
    Index: t,
    matrix: n,
    range: i
  });
  return e("column", {
    "...any": function(o) {
      var l = o.length - 1, u = o[l];
      et(u) && (o[l] = u - 1);
      try {
        return a.apply(null, o);
      } catch (c) {
        throw Ar(c);
      }
    }
  });
}, {
  isTransformFunction: !0
});
function Pf(r, e, t) {
  var n = r.filter(function(l) {
    return Zt(l) && !(l.name in e) && !t.has(l.name);
  })[0];
  if (!n)
    throw new Error('No undefined variable found in inline expression "' + r + '"');
  var i = n.name, a = /* @__PURE__ */ new Map(), s = new tg(t, a, /* @__PURE__ */ new Set([i])), o = r.compile();
  return function(u) {
    return a.set(i, u), o.evaluate(s);
  };
}
var VI = "transformCallback", qI = ["typed"], Bf = /* @__PURE__ */ W(VI, qI, (r) => {
  var {
    typed: e
  } = r;
  return function(n, i) {
    return e.isTypedFunction(n) ? t(n, i) : k0(n, n.length, i);
  };
  function t(n, i) {
    var a = Object.fromEntries(Object.entries(n.signatures).map((s) => {
      var [o, l] = s, u = o.split(",").length;
      return e.isTypedFunction(l) ? [o, t(l, i)] : [o, k0(l, u, i)];
    }));
    return typeof n.name == "string" ? e(n.name, a) : e(a);
  }
});
function k0(r, e, t) {
  return e === t ? r : e === t + 1 ? function() {
    for (var n = arguments.length, i = new Array(n), a = 0; a < n; a++)
      i[a] = arguments[a];
    var s = i.slice(0, t), o = H0(i[t]);
    return r(...s, o);
  } : e > t + 1 ? function() {
    for (var n = arguments.length, i = new Array(n), a = 0; a < n; a++)
      i[a] = arguments[a];
    var s = i.slice(0, t), o = H0(i[t]), l = i.slice(t + 1);
    return r(...s, o, ...l);
  } : r;
}
function H0(r) {
  return r.map((e) => e + 1);
}
var WI = "filter", XI = ["typed"], YI = /* @__PURE__ */ W(WI, XI, (r) => {
  var {
    typed: e
  } = r;
  function t(i, a, s) {
    var o = V1({
      typed: e
    }), l = Bf({
      typed: e
    });
    if (i.length === 0)
      return o();
    var u = i[0];
    if (i.length === 1)
      return o(u);
    var c = i.length - 1, f = i[c];
    return u && (u = n(u, s)), f && (Zt(f) || ts(f) ? f = n(f, s) : f = Pf(f, a, s)), o(u, l(f, c));
  }
  t.rawArgs = !0;
  function n(i, a) {
    return i.compile().evaluate(a);
  }
  return t;
}, {
  isTransformFunction: !0
}), ZI = "forEach", KI = ["typed"], JI = /* @__PURE__ */ W(ZI, KI, (r) => {
  var {
    typed: e
  } = r, t = q1({
    typed: e
  }), n = Bf({
    typed: e
  });
  function i(s, o, l) {
    if (s.length === 0)
      return t();
    var u = s[0];
    if (s.length === 1)
      return t(u);
    var c = s.length - 1, f = s[c];
    return u && (u = a(u, l)), f && (Zt(f) || ts(f) ? f = a(f, l) : f = Pf(f, o, l)), t(u, n(f, c));
  }
  i.rawArgs = !0;
  function a(s, o) {
    return s.compile().evaluate(o);
  }
  return i;
}, {
  isTransformFunction: !0
}), QI = "index", jI = ["Index", "getMatrixDataType"], e5 = /* @__PURE__ */ W(QI, jI, (r) => {
  var {
    Index: e,
    getMatrixDataType: t
  } = r;
  return function() {
    for (var i = [], a = 0, s = arguments.length; a < s; a++) {
      var o = arguments[a];
      if (Fu(o))
        o.start--, o.end -= o.step > 0 ? 0 : 2;
      else if (o && o.isSet === !0)
        o = o.map(function(u) {
          return u - 1;
        });
      else if (Mt(o) || Ve(o))
        t(o) !== "boolean" && (o = o.map(function(u) {
          return u - 1;
        }));
      else if (et(o) || Oa(o))
        o--;
      else if (Qe(o))
        o = o.toNumber() - 1;
      else if (typeof o != "string") throw new TypeError("Dimension must be an Array, Matrix, number, bigint, string, or Range");
      i[a] = o;
    }
    var l = new e();
    return e.apply(l, i), l;
  };
}, {
  isTransformFunction: !0
}), t5 = "map", r5 = ["typed"], n5 = /* @__PURE__ */ W(t5, r5, (r) => {
  var {
    typed: e
  } = r, t = W1({
    typed: e
  }), n = Bf({
    typed: e
  });
  function i(a, s, o) {
    if (a.length === 0)
      return t();
    if (a.length === 1)
      return t(a[0]);
    var l = a.length - 1, u = a.slice(0, l), c = a[l];
    return u = u.map((h) => f(h, o)), c && (Zt(c) || ts(c) ? c = f(c, o) : c = Pf(c, s, o)), t(...u, n(c, l));
    function f(h, d) {
      return h.compile().evaluate(d);
    }
  }
  return i.rawArgs = !0, i;
}, {
  isTransformFunction: !0
});
function i5(r) {
  return et(r) ? r - 1 : Qe(r) ? r.minus(1) : r;
}
function a5(r) {
  return et(r) || Qe(r);
}
function wi(r) {
  if (r.length === 2 && kr(r[0])) {
    r = r.slice();
    var e = r[1];
    a5(e) && (r[1] = i5(e));
  }
  return r;
}
var s5 = "max", o5 = ["typed", "config", "numeric", "larger", "isNaN"], u5 = /* @__PURE__ */ W(s5, o5, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    larger: i,
    isNaN: a
  } = r, s = ry({
    typed: e,
    config: t,
    numeric: n,
    larger: i,
    isNaN: a
  });
  return e("max", {
    "...any": function(l) {
      l = wi(l);
      try {
        return s.apply(null, l);
      } catch (u) {
        throw Ar(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), l5 = "mean", c5 = ["typed", "add", "divide"], f5 = /* @__PURE__ */ W(l5, c5, (r) => {
  var {
    typed: e,
    add: t,
    divide: n
  } = r, i = fy({
    typed: e,
    add: t,
    divide: n
  });
  return e("mean", {
    "...any": function(s) {
      s = wi(s);
      try {
        return i.apply(null, s);
      } catch (o) {
        throw Ar(o);
      }
    }
  });
}, {
  isTransformFunction: !0
}), h5 = "min", d5 = ["typed", "config", "numeric", "smaller", "isNaN"], m5 = /* @__PURE__ */ W(h5, d5, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    smaller: i,
    isNaN: a
  } = r, s = ny({
    typed: e,
    config: t,
    numeric: n,
    smaller: i,
    isNaN: a
  });
  return e("min", {
    "...any": function(l) {
      l = wi(l);
      try {
        return s.apply(null, l);
      } catch (u) {
        throw Ar(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), p5 = "range", v5 = ["typed", "config", "?matrix", "?bignumber", "smaller", "smallerEq", "larger", "largerEq", "add", "isPositive"], g5 = /* @__PURE__ */ W(p5, v5, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    bignumber: i,
    smaller: a,
    smallerEq: s,
    larger: o,
    largerEq: l,
    add: u,
    isPositive: c
  } = r, f = K1({
    typed: e,
    config: t,
    matrix: n,
    bignumber: i,
    smaller: a,
    smallerEq: s,
    larger: o,
    largerEq: l,
    add: u,
    isPositive: c
  });
  return e("range", {
    "...any": function(d) {
      var m = d.length - 1, p = d[m];
      return typeof p != "boolean" && d.push(!0), f.apply(null, d);
    }
  });
}, {
  isTransformFunction: !0
}), y5 = "row", x5 = ["typed", "Index", "matrix", "range"], _5 = /* @__PURE__ */ W(y5, x5, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: i
  } = r, a = J1({
    typed: e,
    Index: t,
    matrix: n,
    range: i
  });
  return e("row", {
    "...any": function(o) {
      var l = o.length - 1, u = o[l];
      et(u) && (o[l] = u - 1);
      try {
        return a.apply(null, o);
      } catch (c) {
        throw Ar(c);
      }
    }
  });
}, {
  isTransformFunction: !0
}), b5 = "subset", w5 = ["typed", "matrix", "zeros", "add"], S5 = /* @__PURE__ */ W(b5, w5, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: i
  } = r, a = Q1({
    typed: e,
    matrix: t,
    zeros: n,
    add: i
  });
  return e("subset", {
    "...any": function(o) {
      try {
        return a.apply(null, o);
      } catch (l) {
        throw Ar(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), E5 = "concat", M5 = ["typed", "matrix", "isInteger"], A5 = /* @__PURE__ */ W(E5, M5, (r) => {
  var {
    typed: e,
    matrix: t,
    isInteger: n
  } = r, i = G1({
    typed: e,
    matrix: t,
    isInteger: n
  });
  return e("concat", {
    "...any": function(s) {
      var o = s.length - 1, l = s[o];
      et(l) ? s[o] = l - 1 : Qe(l) && (s[o] = l.minus(1));
      try {
        return i.apply(null, s);
      } catch (u) {
        throw Ar(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), G0 = "diff", D5 = ["typed", "matrix", "subtract", "number", "bignumber"], C5 = /* @__PURE__ */ W(G0, D5, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    number: i,
    bignumber: a
  } = r, s = X1({
    typed: e,
    matrix: t,
    subtract: n,
    number: i,
    bignumber: a
  });
  return e(G0, {
    "...any": function(l) {
      l = wi(l);
      try {
        return s.apply(null, l);
      } catch (u) {
        throw Ar(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), T5 = "std", N5 = ["typed", "map", "sqrt", "variance"], R5 = /* @__PURE__ */ W(T5, N5, (r) => {
  var {
    typed: e,
    map: t,
    sqrt: n,
    variance: i
  } = r, a = my({
    typed: e,
    map: t,
    sqrt: n,
    variance: i
  });
  return e("std", {
    "...any": function(o) {
      o = wi(o);
      try {
        return a.apply(null, o);
      } catch (l) {
        throw Ar(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), $0 = "sum", F5 = ["typed", "config", "add", "numeric"], O5 = /* @__PURE__ */ W($0, F5, (r) => {
  var {
    typed: e,
    config: t,
    add: n,
    numeric: i
  } = r, a = ly({
    typed: e,
    config: t,
    add: n,
    numeric: i
  });
  return e($0, {
    "...any": function(o) {
      o = wi(o);
      try {
        return a.apply(null, o);
      } catch (l) {
        throw Ar(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), P5 = "quantileSeq", B5 = ["typed", "bignumber", "add", "subtract", "divide", "multiply", "partitionSelect", "compare", "isInteger", "smaller", "smallerEq", "larger", "mapSlices"], I5 = /* @__PURE__ */ W(P5, B5, (r) => {
  var {
    typed: e,
    bignumber: t,
    add: n,
    subtract: i,
    divide: a,
    multiply: s,
    partitionSelect: o,
    compare: l,
    isInteger: u,
    smaller: c,
    smallerEq: f,
    larger: h,
    mapSlices: d
  } = r, m = dy({
    typed: e,
    bignumber: t,
    add: n,
    subtract: i,
    divide: a,
    multiply: s,
    partitionSelect: o,
    compare: l,
    isInteger: u,
    smaller: c,
    smallerEq: f,
    larger: h,
    mapSlices: d
  });
  return e("quantileSeq", {
    "Array | Matrix, number | BigNumber": m,
    "Array | Matrix, number | BigNumber, number": (g, v, S) => m(g, v, p(S)),
    "Array | Matrix, number | BigNumber, boolean": m,
    "Array | Matrix, number | BigNumber, boolean, number": (g, v, S, x) => m(g, v, S, p(x)),
    "Array | Matrix, Array | Matrix": m,
    "Array | Matrix, Array | Matrix, number": (g, v, S) => m(g, v, p(S)),
    "Array | Matrix, Array | Matrix, boolean": m,
    "Array | Matrix, Array | Matrix, boolean, number": (g, v, S, x) => m(g, v, S, p(x))
  });
  function p(g) {
    return wi([[], g])[1];
  }
}, {
  isTransformFunction: !0
}), V0 = "cumsum", L5 = ["typed", "add", "unaryPlus"], U5 = /* @__PURE__ */ W(V0, L5, (r) => {
  var {
    typed: e,
    add: t,
    unaryPlus: n
  } = r, i = cy({
    typed: e,
    add: t,
    unaryPlus: n
  });
  return e(V0, {
    "...any": function(s) {
      if (s.length === 2 && kr(s[0])) {
        var o = s[1];
        et(o) ? s[1] = o - 1 : Qe(o) && (s[1] = o.minus(1));
      }
      try {
        return i.apply(null, s);
      } catch (l) {
        throw Ar(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), q0 = "variance", z5 = ["typed", "add", "subtract", "multiply", "divide", "mapSlices", "isNaN"], k5 = /* @__PURE__ */ W(q0, z5, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: i,
    divide: a,
    mapSlices: s,
    isNaN: o
  } = r, l = hy({
    typed: e,
    add: t,
    subtract: n,
    multiply: i,
    divide: a,
    mapSlices: s,
    isNaN: o
  });
  return e(q0, {
    "...any": function(c) {
      c = wi(c);
      try {
        return l.apply(null, c);
      } catch (f) {
        throw Ar(f);
      }
    }
  });
}, {
  isTransformFunction: !0
}), W0 = "print", H5 = ["typed", "matrix", "zeros", "add"], G5 = /* @__PURE__ */ W(W0, H5, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: i
  } = r, a = ey({
    typed: e,
    matrix: t,
    zeros: n,
    add: i
  });
  return e(W0, {
    "string, Object | Array": function(l, u) {
      return a(s(l), u);
    },
    "string, Object | Array, number | Object": function(l, u, c) {
      return a(s(l), u, c);
    }
  });
  function s(o) {
    return o.replace(j1, (l) => {
      var u = l.slice(1).split("."), c = u.map(function(f) {
        return !isNaN(f) && f.length > 0 ? parseInt(f) - 1 : f;
      });
      return "$" + c.join(".");
    });
  }
}, {
  isTransformFunction: !0
}), $5 = "and", V5 = ["typed", "matrix", "zeros", "add", "equalScalar", "not", "concat"], q5 = /* @__PURE__ */ W($5, V5, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    not: a,
    concat: s
  } = r, o = ty({
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    not: a,
    concat: s
  });
  function l(u, c, f) {
    var h = u[0].compile().evaluate(f);
    if (!kr(h) && !o(h, !0))
      return !1;
    var d = u[1].compile().evaluate(f);
    return o(h, d);
  }
  return l.rawArgs = !0, l;
}, {
  isTransformFunction: !0
}), W5 = "or", X5 = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], Y5 = /* @__PURE__ */ W(W5, X5, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  } = r, s = H1({
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  });
  function o(l, u, c) {
    var f = l[0].compile().evaluate(c);
    if (!kr(f) && s(f, !1))
      return !0;
    var h = l[1].compile().evaluate(c);
    return s(f, h);
  }
  return o.rawArgs = !0, o;
}, {
  isTransformFunction: !0
}), Z5 = "bitAnd", K5 = ["typed", "matrix", "zeros", "add", "equalScalar", "not", "concat"], J5 = /* @__PURE__ */ W(Z5, K5, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    not: a,
    concat: s
  } = r, o = z1({
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: i,
    not: a,
    concat: s
  });
  function l(u, c, f) {
    var h = u[0].compile().evaluate(f);
    if (!kr(h)) {
      if (isNaN(h))
        return NaN;
      if (h === 0 || h === !1)
        return 0;
    }
    var d = u[1].compile().evaluate(f);
    return o(h, d);
  }
  return l.rawArgs = !0, l;
}, {
  isTransformFunction: !0
}), Q5 = "bitOr", j5 = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], e8 = /* @__PURE__ */ W(Q5, j5, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  } = r, s = k1({
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: i,
    concat: a
  });
  function o(l, u, c) {
    var f = l[0].compile().evaluate(c);
    if (!kr(f)) {
      if (isNaN(f))
        return NaN;
      if (f === -1)
        return -1;
      if (f === !0)
        return 1;
    }
    var h = l[1].compile().evaluate(c);
    return s(f, h);
  }
  return o.rawArgs = !0, o;
}, {
  isTransformFunction: !0
});
const t8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createAbs: Bw,
  createAccessorNode: XC,
  createAcos: hD,
  createAcosh: mD,
  createAcot: vD,
  createAcoth: yD,
  createAcsc: _D,
  createAcsch: wD,
  createAdd: RC,
  createAddScalar: zw,
  createAnd: ty,
  createAndTransform: q5,
  createArg: DE,
  createArrayNode: ZC,
  createAsec: ED,
  createAsech: AD,
  createAsin: CD,
  createAsinh: RD,
  createAssignmentNode: jC,
  createAtan: PD,
  createAtan2: ID,
  createAtanh: UD,
  createAtomicMass: vI,
  createAvogadro: gI,
  createBellNumbers: UP,
  createBigNumberClass: k_,
  createBigint: sw,
  createBignumber: dw,
  createBin: s2,
  createBitAnd: z1,
  createBitAndTransform: J5,
  createBitNot: _E,
  createBitOr: k1,
  createBitOrTransform: e8,
  createBitXor: ME,
  createBlockNode: tT,
  createBohrMagneton: KB,
  createBohrRadius: rI,
  createBoltzmann: yI,
  createBoolean: cw,
  createCatalan: kP,
  createCbrt: $w,
  createCeil: jw,
  createChain: aO,
  createChainClass: SN,
  createClassicalElectronRadius: nI,
  createClone: wb,
  createColumn: $1,
  createColumnTransform: $I,
  createCombinations: YO,
  createCombinationsWithRep: KO,
  createCompare: rA,
  createCompareNatural: uA,
  createCompareText: fA,
  createCompile: FT,
  createComplex: vw,
  createComplexClass: q_,
  createComposition: GP,
  createConcat: G1,
  createConcatTransform: A5,
  createConditionalNode: nT,
  createConductanceQuantum: JB,
  createConj: TE,
  createConstantNode: lT,
  createCorr: WO,
  createCos: kD,
  createCosh: GD,
  createCot: VD,
  createCoth: WD,
  createCoulomb: XB,
  createCoulombConstant: YB,
  createCount: GE,
  createCreateUnit: cD,
  createCross: VE,
  createCsc: YD,
  createCsch: KD,
  createCtranspose: FM,
  createCube: tS,
  createCumSum: cy,
  createCumSumTransform: U5,
  createDeepEqual: NA,
  createDenseMatrixClass: _b,
  createDerivative: oB,
  createDet: oO,
  createDeuteronMass: lI,
  createDiag: WE,
  createDiff: X1,
  createDiffTransform: C5,
  createDistance: RO,
  createDivide: TO,
  createDivideScalar: w2,
  createDot: LC,
  createDotDivide: L2,
  createDotMultiply: hE,
  createDotPow: B2,
  createE: CB,
  createEfimovFactor: pI,
  createEigs: vO,
  createElectricConstant: qB,
  createElectronMass: iI,
  createElementaryCharge: ZB,
  createEqual: dA,
  createEqualScalar: Zb,
  createEqualText: vA,
  createErf: XM,
  createEvaluate: PT,
  createExp: nS,
  createExpm: yO,
  createExpm1: aS,
  createFactorial: rP,
  createFalse: wB,
  createFaraday: xI,
  createFermiCoupling: aI,
  createFft: IM,
  createFibonacciHeapClass: YA,
  createFilter: V1,
  createFilterTransform: YI,
  createFineStructure: sI,
  createFirstRadiation: _I,
  createFix: uS,
  createFlatten: KE,
  createFloor: I1,
  createForEach: q1,
  createForEachTransform: JI,
  createFormat: i2,
  createFraction: xw,
  createFractionClass: Q_,
  createFreqz: dB,
  createFunctionAssignmentNode: fT,
  createFunctionNode: CT,
  createGamma: QO,
  createGasConstant: wI,
  createGcd: OS,
  createGetMatrixDataType: eM,
  createGravitationConstant: HB,
  createGravity: RI,
  createHartreeEnergy: oI,
  createHasNumericValue: Ub,
  createHelp: nO,
  createHelpClass: _N,
  createHex: c2,
  createHypot: OC,
  createI: IB,
  createIdentity: rM,
  createIfft: UM,
  createIm: RE,
  createImmutableDenseMatrixClass: GA,
  createIndex: GC,
  createIndexClass: qA,
  createIndexNode: dT,
  createIndexTransform: e5,
  createInfinity: EB,
  createIntersect: PO,
  createInv: lO,
  createInverseConductanceQuantum: QB,
  createInvmod: uE,
  createIsInteger: Eb,
  createIsNaN: Vb,
  createIsNegative: Pb,
  createIsNumeric: Ib,
  createIsPositive: kb,
  createIsPrime: g2,
  createIsZero: Gb,
  createKldivergence: iP,
  createKlitzing: tI,
  createKron: iM,
  createLN10: RB,
  createLN2: NB,
  createLOG10E: OB,
  createLOG2E: FB,
  createLarger: EA,
  createLargerEq: DA,
  createLcm: LS,
  createLeafCount: VP,
  createLeftShift: Z2,
  createLgamma: eP,
  createLog: T2,
  createLog10: kS,
  createLog1p: R2,
  createLog2: GS,
  createLoschmidt: bI,
  createLsolve: z2,
  createLsolveAll: $2,
  createLup: HT,
  createLusolve: pN,
  createLyap: AO,
  createMad: HO,
  createMagneticConstant: VB,
  createMagneticFluxQuantum: jB,
  createMap: W1,
  createMapSlices: hc,
  createMapSlicesTransform: kI,
  createMapTransform: n5,
  createMatrix: bw,
  createMatrixClass: ib,
  createMatrixFromColumns: Dw,
  createMatrixFromFunction: Sw,
  createMatrixFromRows: Mw,
  createMax: ry,
  createMaxTransform: u5,
  createMean: fy,
  createMeanTransform: f5,
  createMedian: zO,
  createMin: ny,
  createMinTransform: m5,
  createMod: L1,
  createMode: e2,
  createMolarMass: TI,
  createMolarMassC12: NI,
  createMolarPlanckConstant: SI,
  createMolarVolume: EI,
  createMultinomial: sP,
  createMultiply: XS,
  createMultiplyScalar: qS,
  createNaN: MB,
  createNeutronMass: cI,
  createNode: qC,
  createNorm: BC,
  createNot: BE,
  createNthRoot: ZS,
  createNthRoots: O2,
  createNuclearMagneton: eI,
  createNull: SB,
  createNumber: nw,
  createNumeric: _2,
  createObjectNode: pT,
  createOct: u2,
  createOnes: lM,
  createOperatorNode: gT,
  createOr: H1,
  createOrTransform: Y5,
  createParenthesisNode: xT,
  createParse: NT,
  createParser: zT,
  createParserClass: LT,
  createPartitionSelect: BA,
  createPermutations: uP,
  createPhi: TB,
  createPi: AB,
  createPickRandom: NP,
  createPinv: fO,
  createPlanckCharge: BI,
  createPlanckConstant: GB,
  createPlanckLength: FI,
  createPlanckMass: OI,
  createPlanckTemperature: II,
  createPlanckTime: PI,
  createPolynomialRoot: gN,
  createPow: E2,
  createPrint: ey,
  createPrintTransform: G5,
  createProd: r2,
  createProtonMass: uI,
  createQr: $T,
  createQuantileSeq: dy,
  createQuantileSeqTransform: I5,
  createQuantumOfCirculation: fI,
  createRandom: FP,
  createRandomInt: PP,
  createRange: K1,
  createRangeClass: tb,
  createRangeNode: bT,
  createRangeTransform: g5,
  createRationalize: lB,
  createRe: OE,
  createReducedPlanckConstant: $B,
  createRelationalNode: ST,
  createReplacer: xB,
  createReshape: hM,
  createResize: pM,
  createResolve: nB,
  createResultSet: Vx,
  createReviver: vB,
  createRightArithShift: J2,
  createRightLogShift: j2,
  createRotate: gM,
  createRotationMatrix: xM,
  createRound: A2,
  createRow: J1,
  createRowTransform: _5,
  createRydberg: hI,
  createSQRT1_2: PB,
  createSQRT2: BB,
  createSackurTetrode: MI,
  createSchur: EO,
  createSec: QD,
  createSech: eC,
  createSecondRadiation: AI,
  createSetCartesian: fC,
  createSetDifference: dC,
  createSetDistinct: pC,
  createSetIntersect: gC,
  createSetIsSubset: xC,
  createSetMultiplicity: bC,
  createSetPowerset: SC,
  createSetSize: MC,
  createSetSymDifference: DC,
  createSetUnion: TC,
  createSign: JS,
  createSimplify: ZP,
  createSimplifyConstant: QP,
  createSimplifyCore: eB,
  createSin: rC,
  createSinh: iC,
  createSize: wM,
  createSlu: dN,
  createSmaller: yA,
  createSmallerEq: bA,
  createSolveODE: VM,
  createSort: LA,
  createSpaClass: JA,
  createSparse: uD,
  createSparseMatrixClass: Qb,
  createSpeedOfLight: kB,
  createSplitUnit: Tw,
  createSqrt: eE,
  createSqrtm: _O,
  createSquare: rE,
  createSqueeze: EM,
  createStd: my,
  createStdTransform: R5,
  createStefanBoltzmann: DI,
  createStirlingS2: IP,
  createString: uw,
  createSubset: Q1,
  createSubsetTransform: S5,
  createSubtract: iE,
  createSubtractScalar: Hw,
  createSum: ly,
  createSumTransform: O5,
  createSylvester: wO,
  createSymbolNode: AT,
  createSymbolicEqual: aB,
  createTan: sC,
  createTanh: lC,
  createTau: DB,
  createThomsonCrossSection: dI,
  createTo: d2,
  createToBest: p2,
  createTrace: kC,
  createTranspose: NM,
  createTrue: bB,
  createTypeOf: Wb,
  createTyped: kx,
  createUnaryMinus: Rw,
  createUnaryPlus: Ow,
  createUnequal: FA,
  createUnitClass: iD,
  createUnitFunction: sD,
  createUppercaseE: UB,
  createUppercasePi: LB,
  createUsolve: H2,
  createUsolveAll: q2,
  createVacuumImpedance: WB,
  createVariance: hy,
  createVarianceTransform: k5,
  createVersion: zB,
  createWeakMixingAngle: mI,
  createWienDisplacement: CI,
  createXgcd: sE,
  createXor: UE,
  createZeros: PM,
  createZeta: QM,
  createZpk2tf: fB
}, Symbol.toStringTag, { value: "Module" }));
var ra = t8, bo = { exports: {} }, X0;
function r8() {
  if (X0) return bo.exports;
  X0 = 1;
  function r() {
  }
  return r.prototype = {
    on: function(e, t, n) {
      var i = this.e || (this.e = {});
      return (i[e] || (i[e] = [])).push({
        fn: t,
        ctx: n
      }), this;
    },
    once: function(e, t, n) {
      var i = this;
      function a() {
        i.off(e, a), t.apply(n, arguments);
      }
      return a._ = t, this.on(e, a, n);
    },
    emit: function(e) {
      var t = [].slice.call(arguments, 1), n = ((this.e || (this.e = {}))[e] || []).slice(), i = 0, a = n.length;
      for (i; i < a; i++)
        n[i].fn.apply(n[i].ctx, t);
      return this;
    },
    off: function(e, t) {
      var n = this.e || (this.e = {}), i = n[e], a = [];
      if (i && t)
        for (var s = 0, o = i.length; s < o; s++)
          i[s].fn !== t && i[s].fn._ !== t && a.push(i[s]);
      return a.length ? n[e] = a : delete n[e], this;
    }
  }, bo.exports = r, bo.exports.TinyEmitter = r, bo.exports;
}
var n8 = r8();
const i8 = /* @__PURE__ */ Hu(n8);
function a8(r) {
  var e = new i8();
  return r.on = e.on.bind(e), r.off = e.off.bind(e), r.once = e.once.bind(e), r.emit = e.emit.bind(e), r;
}
function s8(r, e, t, n) {
  function i(v, S) {
    var x = arguments.length;
    if (x !== 1 && x !== 2)
      throw new Xn("import", x, 1, 2);
    S || (S = {});
    function y(A, w, E) {
      if (Array.isArray(w))
        w.forEach((R) => y(A, R));
      else if (ji(w) || f(w))
        for (var D in w)
          Ue(w, D) && y(A, w[D], D);
      else if (Ss(w) || E !== void 0) {
        var T = Ss(w) ? p(w) ? w.fn + ".transform" : w.fn : E;
        if (Ue(A, T) && A[T] !== w && !S.silent)
          throw new Error('Cannot import "' + T + '" twice');
        A[T] = w;
      } else if (!S.silent)
        throw new TypeError("Factory, Object, or Array expected");
    }
    var b = {};
    y(b, v);
    for (var _ in b)
      if (Ue(b, _)) {
        var M = b[_];
        if (Ss(M))
          u(M, S);
        else if (c(M))
          a(_, M, S);
        else if (!S.silent)
          throw new TypeError("Factory, Object, or Array expected");
      }
  }
  function a(v, S, x) {
    var y;
    if (x.wrap && typeof S == "function" && (S = l(S)), h(S) && (S = r(v, {
      [S.signature]: S
    })), r.isTypedFunction(t[v]) && r.isTypedFunction(S)) {
      x.override ? S = r(v, S.signatures) : S = r(t[v], S), t[v] = S, delete n[v], s(v, S), t.emit("import", v, function() {
        return S;
      });
      return;
    }
    var b = t[v] !== void 0, _ = (y = t.Unit) === null || y === void 0 ? void 0 : y.isValuelessUnit(v);
    if (!b && !_ || x.override) {
      t[v] = S, delete n[v], s(v, S), t.emit("import", v, function() {
        return S;
      });
      return;
    }
    if (!x.silent)
      throw new Error('Cannot import "' + v + '": already exists');
  }
  function s(v, S) {
    S && typeof S.transform == "function" ? (t.expression.transform[v] = S.transform, d(v) && (t.expression.mathWithTransform[v] = S.transform)) : (delete t.expression.transform[v], d(v) && (t.expression.mathWithTransform[v] = S));
  }
  function o(v) {
    delete t.expression.transform[v], d(v) ? t.expression.mathWithTransform[v] = t[v] : delete t.expression.mathWithTransform[v];
  }
  function l(v) {
    var S = function() {
      for (var y = [], b = 0, _ = arguments.length; b < _; b++) {
        var M = arguments[b];
        y[b] = M && M.valueOf();
      }
      return v.apply(t, y);
    };
    return v.transform && (S.transform = v.transform), S;
  }
  function u(v, S) {
    var x, y, b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : v.fn;
    if (b.includes("."))
      throw new Error("Factory name should not contain a nested path. Name: " + JSON.stringify(b));
    var _ = p(v) ? t.expression.transform : t, M = b in t.expression.transform, A = Ue(_, b) ? _[b] : void 0, w = function() {
      var B = {};
      v.dependencies.map(xg).forEach((C) => {
        if (C.includes("."))
          throw new Error("Factory dependency should not contain a nested path. Name: " + JSON.stringify(C));
        C === "math" ? B.math = t : C === "mathWithTransform" ? B.mathWithTransform = t.expression.mathWithTransform : C === "classes" ? B.classes = t : B[C] = t[C];
      });
      var I = /* @__PURE__ */ v(B);
      if (I && typeof I.transform == "function")
        throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with export const path = "expression.transform"');
      if (A === void 0 || S.override)
        return I;
      if (r.isTypedFunction(A) && r.isTypedFunction(I))
        return r(A, I);
      if (S.silent)
        return A;
      throw new Error('Cannot import "' + b + '": already exists');
    }, E = (x = (y = v.meta) === null || y === void 0 ? void 0 : y.formerly) !== null && x !== void 0 ? x : "", D = p(v) || m(v), T = t.expression.mathWithTransform;
    !v.meta || v.meta.lazy !== !1 ? (Pi(_, b, w), E && Pi(_, E, w), A && M ? (o(b), E && o(E)) : D && (Pi(T, b, () => _[b]), E && Pi(T, E, () => _[b]))) : (_[b] = w(), E && (_[E] = _[b]), A && M ? (o(b), E && o(E)) : D && (Pi(T, b, () => _[b]), E && Pi(T, E, () => _[b]))), n[b] = v, t.emit("import", b, w);
  }
  function c(v) {
    return typeof v == "function" || typeof v == "number" || typeof v == "string" || typeof v == "boolean" || v === null || wr(v) || fn(v) || Qe(v) || Qi(v) || Ve(v) || Array.isArray(v);
  }
  function f(v) {
    return typeof v == "object" && v[Symbol.toStringTag] === "Module";
  }
  function h(v) {
    return typeof v == "function" && typeof v.signature == "string";
  }
  function d(v) {
    return !Ue(g, v);
  }
  function m(v) {
    return !v.fn.includes(".") && // FIXME: make checking on path redundant, check on meta data instead
    !Ue(g, v.fn) && (!v.meta || !v.meta.isClass);
  }
  function p(v) {
    return v !== void 0 && v.meta !== void 0 && v.meta.isTransformFunction === !0 || !1;
  }
  var g = {
    expression: !0,
    type: !0,
    docs: !0,
    error: !0,
    json: !0,
    chain: !0
    // chain method not supported. Note that there is a unit chain too.
  };
  return i;
}
function Si(r, e) {
  var t = pr({}, eg, e);
  if (typeof Object.create != "function")
    throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
  var n = a8({
    // only here for backward compatibility for legacy factory functions
    isNumber: et,
    isComplex: fn,
    isBigNumber: Qe,
    isBigInt: Oa,
    isFraction: Qi,
    isUnit: wr,
    isString: sr,
    isArray: Mt,
    isMatrix: Ve,
    isCollection: kr,
    isDenseMatrix: Ds,
    isSparseMatrix: ai,
    isRange: Fu,
    isIndex: Ls,
    isBoolean: ng,
    isResultSet: ig,
    isHelp: pf,
    isFunction: ag,
    isDate: sg,
    isRegExp: og,
    isObject: ji,
    isMap: qi,
    isPartitionedMap: px,
    isObjectWrappingMap: vx,
    isNull: ug,
    isUndefined: lg,
    isAccessorNode: hi,
    isArrayNode: Ur,
    isAssignmentNode: cg,
    isBlockNode: fg,
    isConditionalNode: hg,
    isConstantNode: ht,
    isFunctionAssignmentNode: ts,
    isFunctionNode: Vn,
    isIndexNode: ea,
    isNode: bt,
    isObjectNode: Us,
    isOperatorNode: kt,
    isParenthesisNode: En,
    isRangeNode: dg,
    isRelationalNode: mg,
    isSymbolNode: Zt,
    isChain: vf
  });
  n.config = bx(t, n.emit), n.expression = {
    transform: {},
    mathWithTransform: {
      config: n.config
    }
  };
  var i = [], a = [];
  function s(c) {
    if (Ss(c))
      return c(n);
    var f = c[Object.keys(c)[0]];
    if (Ss(f))
      return f(n);
    if (!xx(c))
      throw console.warn("Factory object with properties `type`, `name`, and `factory` expected", c), new Error("Factory object with properties `type`, `name`, and `factory` expected");
    var h = i.indexOf(c), d;
    return h === -1 ? (c.math === !0 ? d = c.factory(n.type, t, s, n.typed, n) : d = c.factory(n.type, t, s, n.typed), i.push(c), a.push(d)) : d = a[h], d;
  }
  var o = {};
  function l() {
    for (var c = arguments.length, f = new Array(c), h = 0; h < c; h++)
      f[h] = arguments[h];
    return n.typed.apply(n.typed, f);
  }
  l.isTypedFunction = Cs.isTypedFunction;
  var u = s8(l, s, n, o);
  return n.import = u, n.on("config", () => {
    Object.values(o).forEach((c) => {
      c && c.meta && c.meta.recreateOnConfigChange && u(c, {
        override: !0
      });
    });
  }), n.create = Si.bind(null, r), n.factory = W, n.import(Object.values(yx(r))), n.ArgumentsError = Xn, n.DimensionError = st, n.IndexError = jr, n;
}
const Xt = Si(ra, {});
function Di(r) {
  const e = Xt.unit(r.alpha, "deg").toNumber("rad"), t = Xt.unit(r.beta, "deg").toNumber("rad"), n = Xt.unit(r.gamma, "deg").toNumber("rad"), i = Math.cos(e), a = Math.cos(t), s = Math.cos(n), o = Math.sin(n), l = Math.sqrt(1 - i * i - a * a - s * s + 2 * i * a * s);
  return Xt.matrix([
    [r.a, r.b * s, r.c * a],
    [0, r.b * o, r.c * (i - a * s) / o],
    [0, 0, r.c * l / o]
  ]);
}
function vy(r) {
  return Xt.matrix([
    [r[0], r[3], r[4]],
    [r[3], r[1], r[5]],
    [r[4], r[5], r[2]]
  ]);
}
function o8(r) {
  const e = Xt.matrix(r);
  return [
    e.get([0, 0]),
    // U11
    e.get([1, 1]),
    // U22
    e.get([2, 2]),
    // U33
    e.get([0, 1]),
    // U12
    e.get([0, 2]),
    // U13
    e.get([1, 2])
    // U23
  ];
}
function u8(r, e) {
  const t = Xt.matrix(r), n = Xt.transpose(Xt.inv(t)), i = Xt.diag(Xt.matrix(Xt.transpose(n).toArray().map((l) => Xt.norm(l)))), a = vy(e), s = Xt.multiply(Xt.multiply(i, a), Xt.transpose(i)), o = Xt.multiply(Xt.multiply(t, s), Xt.transpose(t));
  return o8(o);
}
const Y0 = Si(ra);
var mr;
const eh = class eh {
  /**
   * Creates a new position
   * @param {number} x - X coordinate
   * @param {number} y - Y coordinate 
   * @param {number} z - Z coordinate
   * @throws {TypeError} If instantiated directly
   */
  constructor(e, t, n) {
    nh(this, mr);
    if (new.target === eh)
      throw new TypeError(
        "BasePosition is an abstract class and cannot be instantiated directly, you probably want CartPosition"
      );
    ih(this, mr, [Number(e), Number(t), Number(n)]), Object.defineProperties(this, {
      0: { get: () => Pr(this, mr)[0] },
      1: { get: () => Pr(this, mr)[1] },
      2: { get: () => Pr(this, mr)[2] },
      length: { value: 3 },
      [Symbol.iterator]: {
        value: function* () {
          yield Pr(this, mr)[0], yield Pr(this, mr)[1], yield Pr(this, mr)[2];
        }
      }
    });
  }
  get x() {
    return Pr(this, mr)[0];
  }
  get y() {
    return Pr(this, mr)[1];
  }
  get z() {
    return Pr(this, mr)[2];
  }
  set x(e) {
    Pr(this, mr)[0] = e;
  }
  set y(e) {
    Pr(this, mr)[1] = e;
  }
  set z(e) {
    Pr(this, mr)[2] = e;
  }
  /**
   * Converts from given coordinate system to Cartesian coordinates
   * @abstract
   * @param {UnitCell} _unitCell - Unit cell for conversion
   * @returns {CartPosition} Position in Cartesian coordinates
   * @throws {Error} If not implemented by subclass
   */
  toCartesian(e) {
    throw new Error("toCartesian must be implemented by subclass");
  }
};
mr = new WeakMap();
let Au = eh;
class gy extends Au {
  /**
   * Creates a new fractional position
   * @param {number} x - X coordinate in fractional units
   * @param {number} y - Y coordinate in fractional units 
   * @param {number} z - Z coordinate in fractional units
   */
  constructor(e, t, n) {
    super(e, t, n);
  }
  /**
   * Converts to Cartesian coordinates using unit cell parameters
   * @param {UnitCell} unitCell - Unit cell for conversion
   * @returns {CartPosition} Position in Cartesian coordinates
   */
  toCartesian(e) {
    const t = Y0.multiply(
      e.fractToCartMatrix,
      Y0.matrix([this.x, this.y, this.z])
    );
    return new yy(...t.toArray());
  }
}
class yy extends Au {
  /**
   * Creates a new Cartesian position
   * @param {number} x - X coordinate in Angstroms
   * @param {number} y - Y coordinate in Angstroms
   * @param {number} z - Z coordinate in Angstroms
   */
  constructor(e, t, n) {
    super(e, t, n);
  }
  /**
   * Returns self since already in Cartesian coordinates
   * @param {UnitCell} _unitCell - Unused unit cell
   * @returns {CartPosition} This position instance
   */
  toCartesian(e) {
    return this;
  }
}
class l8 {
  /**
   * Creates a Position object from CIF data
   * @param {CifBlock} cifBlock - CIF data block containing position data
   * @param {number} index - Index in the loop
   * @returns {BasePosition} Position object in fractional or Cartesian coordinates
   * @throws {Error} If neither fractional nor Cartesian coordinates are valid
   */
  static fromCIF(e, t) {
    let n = !1;
    const i = e.get("_atom_site"), a = [".", "?"];
    if (String(i.getIndex(
      ["_atom_site.calc_flag", "_atom_site_calc_flag"],
      t,
      ""
    )).toLowerCase() === "dum")
      throw new Error("Dummy atom: calc_flag is dum");
    try {
      const o = i.getIndex(["_atom_site.fract_x", "_atom_site_fract_x"], t), l = i.getIndex(["_atom_site.fract_y", "_atom_site_fract_y"], t), u = i.getIndex(["_atom_site.fract_z", "_atom_site_fract_z"], t);
      if (!a.includes(o) && !a.includes(l) && !a.includes(u))
        return new gy(o, l, u);
      n = !0;
    } catch {
    }
    try {
      const o = i.getIndex(["_atom_site.Cartn_x", "_atom_site.cartn_x", "_atom_site_Cartn_x"], t), l = i.getIndex(["_atom_site.Cartn_y", "_atom_site.cartn_y", "_atom_site_Cartn_y"], t), u = i.getIndex(["_atom_site.Cartn_z", "_atom_site.cartn_z", "_atom_site_Cartn_z"], t);
      if (!a.includes(o) && !a.includes(l) && !a.includes(u))
        return new yy(o, l, u);
      n = !0;
    } catch {
    }
    throw n ? new Error("Dummy atom: Invalid position") : new Error("Invalid position: No valid fractional or Cartesian coordinates found");
  }
}
const nn = Si(ra, {});
class Zi {
  /**
   * Creates an isotropic atomic displacement parameter instance.
   * @param {number} uiso - Isotropic U value in Å²
   */
  constructor(e) {
    this.uiso = e;
  }
  /**
   * Creates a UIsoADP instance from a B value
   * @param {number} biso - Isotropic B value in Å²
   * @returns {UIsoADP} New UIsoADP instance
   */
  static fromBiso(e) {
    return new Zi(e / (8 * Math.PI * Math.PI));
  }
}
class vi {
  /**
   * @param {number} u11 - U11 component in Å²
   * @param {number} u22 - U22 component in Å²
   * @param {number} u33 - U33 component in Å²
   * @param {number} u12 - U12 component in Å²
   * @param {number} u13 - U13 component in Å²
   * @param {number} u23 - U23 component in Å² 
   */
  constructor(e, t, n, i, a, s) {
    this.u11 = e, this.u22 = t, this.u33 = n, this.u12 = i, this.u13 = a, this.u23 = s;
  }
  /**
   * Creates a UAnisoADP instance from B values
   * @param {number} b11 - B11 component in Å²
   * @param {number} b22 - B22 component in Å²
   * @param {number} b33 - B33 component in Å²
   * @param {number} b12 - B12 component in Å²
   * @param {number} b13 - B13 component in Å²
   * @param {number} b23 - B23 component in Å²
   * @returns {UAnisoADP} New UAnisoADP instance
   */
  static fromBani(e, t, n, i, a, s) {
    const o = 1 / (8 * Math.PI * Math.PI);
    return new vi(
      e * o,
      t * o,
      n * o,
      i * o,
      a * o,
      s * o
    );
  }
  /**
   * Converts ADPs to Cartesian coordinate system
   * @param {UnitCell} unitCell - Cell parameters for transformation
   * @returns {number[]} ADPs in Cartesian coordinates [U11, U22, U33, U12, U13, U23]
   */
  getUCart(e) {
    return u8(
      e.fractToCartMatrix,
      [this.u11, this.u22, this.u33, this.u12, this.u13, this.u23]
    );
  }
  /**
   * Generates the transformation matrix to transform a sphere already scaled for probability
   * to an ORTEP ellipsoid
   * @param {UnitCell} unitCell - unitCell object for the unit cell information
   * @returns {math.Matrix} transformation matrix, is normalised to never invert coordinates
   */
  getEllipsoidMatrix(e) {
    const t = vy(this.getUCart(e)), { eigenvectors: n } = nn.eigs(t), i = nn.transpose(nn.matrix(n.map((u) => u.vector))), a = nn.matrix(n.map((u) => u.value > 0 ? u.value : NaN)), s = nn.det(i), o = nn.diag(a.map(Math.sqrt));
    let l;
    if (nn.abs(s - 1) > 1e-10) {
      const u = nn.multiply(i, 1 / s);
      l = nn.multiply(u, o);
    } else
      l = nn.multiply(i, o);
    return nn.matrix(l);
  }
}
class Cr {
  /**
   * Creates the appropriate ADP object based on available CIF data.
   * Tries multiple possible sources for displacement parameters in order of preference.
   * @param {CifBlock} cifBlock - The CIF data block containing atomic parameters
   * @param {number} atomIndex - Index of the atom in the atom_site loop
   * @returns {(UIsoADP|UAnisoADP|null)} The appropriate ADP object or null if no valid data
   */
  static fromCIF(e, t) {
    const n = e.get("_atom_site"), i = n.getIndex(["_atom_site.label", "_atom_site_label"], t), a = n.getIndex(
      [
        "_atom_site.adp_type",
        "_atom_site_adp_type",
        "_atom_site.thermal_displace_type",
        "_atom_site_thermal_displace_type"
      ],
      t,
      !1
    );
    if (a)
      return Cr.createFromExplicitType(e, t, i, a);
    if (Cr.isInAnisoLoop(e, i)) {
      const u = Cr.createUani(e, i);
      if (u !== null)
        return u;
      const c = Cr.createBani(e, i);
      if (c !== null)
        return c;
    }
    const o = Cr.createUiso(e, t);
    if (o !== null)
      return o;
    const l = Cr.createBiso(e, t);
    return l !== null ? l : null;
  }
  /**
   * Creates ADP from explicitly specified type in the CIF file.
   * @param {CifBlock} cifBlock - The CIF data block containing atomic parameters
   * @param {number} atomIndex - Index of the atom in the atom_site loop
   * @param {string} label - Atom label for identifying the atom in anisotropic data
   * @param {string} type - Explicit ADP type specified in the CIF (e.g., 'Uani', 'Biso')
   * @returns {(UIsoADP|UAnisoADP|null)} The appropriate ADP object or null if creation fails
   * @private
   */
  static createFromExplicitType(e, t, n, i) {
    switch (i.toLowerCase()) {
      case "uani":
        return Cr.createUani(e, n);
      case "aniso":
        return Cr.createUani(e, n);
      case "bani":
        return Cr.createBani(e, n);
      case "uiso":
        return Cr.createUiso(e, t);
      case "iso":
        return Cr.createUiso(e, t);
      case "biso":
        return Cr.createBiso(e, t);
      default:
        return null;
    }
  }
  /**
   * Checks if an atom is present in the anisotropic displacement parameter loop.
   * @param {CifBlock} cifBlock - The CIF data block to check
   * @param {string} label - Atom label to search for
   * @returns {boolean} True if the atom has anisotropic data, false otherwise
   * @private
   */
  static isInAnisoLoop(e, t) {
    try {
      return e.get("_atom_site_aniso").get(["_atom_site_aniso.label", "_atom_site_aniso_label"]).includes(t);
    } catch {
      return !1;
    }
  }
  /**
   * Creates anisotropic ADP from U(cif) convention data in the atom_site_aniso loop.
   * @param {CifBlock} cifBlock - The CIF data block containing anisotropic data
   * @param {string} label - Atom label to find in the anisotropic data
   * @returns {UAnisoADP|null} New UAnisoADP instance or null if data is invalid
   * @throws {Error} If the atom has a Uani type but no anisotropic data is found
   * @private
   */
  static createUani(e, t) {
    let n;
    try {
      n = e.get("_atom_site_aniso");
    } catch {
      throw new Error(`Atom ${t} had ADP type UAni, but no atom_site_aniso loop was found`);
    }
    const a = n.get(["_atom_site_aniso.label", "_atom_site_aniso_label"]).indexOf(t);
    if (a === -1)
      throw new Error(`Atom ${t} has ADP type Uani, but was not found in atom_site_aniso.label`);
    const s = n.getIndex(["_atom_site_aniso.u_11", "_atom_site_aniso_U_11"], a, NaN), o = n.getIndex(["_atom_site_aniso.u_22", "_atom_site_aniso_U_22"], a, NaN), l = n.getIndex(["_atom_site_aniso.u_33", "_atom_site_aniso_U_33"], a, NaN), u = n.getIndex(["_atom_site_aniso.u_12", "_atom_site_aniso_U_12"], a, NaN), c = n.getIndex(["_atom_site_aniso.u_13", "_atom_site_aniso_U_13"], a, NaN), f = n.getIndex(["_atom_site_aniso.u_23", "_atom_site_aniso_U_23"], a, NaN);
    return [s, o, l, u, c, f].some(isNaN) ? null : new vi(s, o, l, u, c, f);
  }
  /**
   * Creates anisotropic ADP from B conventation data in the atom_site_aniso loop.
   * @param {CifBlock} cifBlock - The CIF data block containing anisotropic data
   * @param {string} label - Atom label to find in the anisotropic data
   * @returns {UAnisoADP|null} New UAnisoADP instance or null if data is invalid
   * @throws {Error} If the atom has a Bani type but no anisotropic data is found
   * @private
   */
  static createBani(e, t) {
    let n;
    try {
      n = e.get("_atom_site_aniso");
    } catch {
      throw new Error(`Atom ${t} had ADP type BAni, but no atom_site_aniso loop was found`);
    }
    const a = n.get(["_atom_site_aniso.label", "_atom_site_aniso_label"]).indexOf(t);
    if (a === -1)
      throw new Error(`Atom ${t} has ADP type Bani, but was not found in atom_site_aniso.label`);
    const s = n.getIndex(["_atom_site_aniso.b_11", "_atom_site_aniso_B_11"], a, NaN), o = n.getIndex(["_atom_site_aniso.b_22", "_atom_site_aniso_B_22"], a, NaN), l = n.getIndex(["_atom_site_aniso.b_33", "_atom_site_aniso_B_33"], a, NaN), u = n.getIndex(["_atom_site_aniso.b_12", "_atom_site_aniso_B_12"], a, NaN), c = n.getIndex(["_atom_site_aniso.b_13", "_atom_site_aniso_B_13"], a, NaN), f = n.getIndex(["_atom_site_aniso.b_23", "_atom_site_aniso_B_23"], a, NaN);
    return [s, o, l, u, c, f].some(isNaN) ? null : vi.fromBani(s, o, l, u, c, f);
  }
  /**
   * Creates isotropic ADP from Uiso data in the atom_site loop.
   * @param {CifBlock} cifBlock - The CIF data block containing atom data
   * @param {number} atomIndex - Index of the atom in the atom_site loop
   * @returns {UIsoADP|null} New UIsoADP instance or null if data is invalid
   * @private
   */
  static createUiso(e, t) {
    try {
      const i = e.get("_atom_site").getIndex(
        ["_atom_site.u_iso_or_equiv", "_atom_site_U_iso_or_equiv"],
        t,
        NaN
      );
      return isNaN(i) ? null : new Zi(i);
    } catch {
      return null;
    }
  }
  /**
   * Creates isotropic ADP from B conventation data in the atom_site loop.
   * @param {CifBlock} cifBlock - The CIF data block containing atom data
   * @param {number} atomIndex - Index of the atom in the atom_site loop
   * @returns {UIsoADP|null} New UIsoADP instance or null if data is invalid
   * @private
   */
  static createBiso(e, t) {
    try {
      const i = e.get("_atom_site").getIndex(
        ["_atom_site.b_iso_or_equiv", "_atom_site_B_iso_or_equiv"],
        t,
        NaN
      );
      return isNaN(i) ? null : Zi.fromBiso(i);
    } catch {
      return null;
    }
  }
}
const Pt = Si(ra);
function Z0(r) {
  if (Math.abs(r) < 21e-4)
    return "";
  const e = [2, 3, 4, 6], t = r < 0 ? "-" : "", n = Math.abs(r);
  if (Math.abs(n - Math.round(n)) < 21e-4)
    return t + Math.round(n);
  for (const i of e) {
    const a = n * i, s = Math.round(a);
    if (Math.abs(a - s) < 21e-4)
      return s === i ? t + "1" : t + s + "/" + i;
  }
  return t + n.toString();
}
class Xi {
  /**
   * Creates a new symmetry operation from a string instruction
   * @param {string} instruction - Symmetry operation in crystallographic notation (e.g. "x,y,z", "-x+1/2,y,-z")
   * @throws {Error} If instruction does not contain exactly three components
   */
  constructor(e) {
    const { matrix: t, vector: n } = this.parseSymmetryInstruction(e);
    this.rotMatrix = t, this.transVector = n;
  }
  /**
   * Parses a symmetry instruction string into rotation matrix and translation vector
   * @private
   * @param {string} instruction - Symmetry operation in crystallographic notation
   * @returns {{matrix: number[][], vector: number[]}} Parsed rotation matrix and translation vector
   * @throws {Error} If instruction does not contain exactly three components
   */
  parseSymmetryInstruction(e) {
    const t = Array(3).fill().map(() => Array(3).fill(0)), n = Array(3).fill(0), i = e.split(",").map((a) => a.trim().toUpperCase());
    if (i.length !== 3)
      throw new Error("Symmetry operation must have exactly three components");
    return i.forEach((a, s) => {
      const o = /([+-]?\d*\.?\d*(?:\/\d+)?)\*?([XYZ])/g;
      let l;
      for (; (l = o.exec(a)) !== null; ) {
        let f = l[1];
        const h = l[2];
        if (!f || f === "+")
          f = "1";
        else if (f === "-")
          f = "-1";
        else if (f.includes("/")) {
          const [m, p] = f.split("/");
          f = parseFloat(m) / parseFloat(p);
        }
        f = parseFloat(f);
        const d = h === "X" ? 0 : h === "Y" ? 1 : 2;
        t[s][d] = f;
      }
      const c = a.replace(/[+-]?\d*\.?\d*(?:\/\d+)?\*?[XYZ]/g, "").match(/[+-]?\d*\.?\d+(?:\/\d+)?/g) || [];
      for (const f of c)
        if (f.includes("/")) {
          const [h, d] = f.split("/");
          n[s] += parseFloat(h) / parseFloat(d);
        } else
          n[s] += parseFloat(f);
    }), { matrix: t, vector: n };
  }
  /**
   * Creates a symmetry operation from a CIF data block
   * @param {CifBlock} cifBlock - CIF data block containing symmetry operations
   * @param {number} symOpIndex - Index of the symmetry operation to extract
   * @returns {SymmetryOperation} New symmetry operation
   * @throws {Error} If no symmetry operations are found in the CIF block
   */
  static fromCIF(e, t) {
    const i = e.get(
      [
        "_space_group_symop",
        "_symmetry_equiv",
        "_space_group_symop.operation_xyz",
        "_space_group_symop_operation_xyz",
        "_symmetry_equiv.pos_as_xyz",
        "_symmetry_equiv_pos_as_xyz"
      ]
    ).getIndex([
      "_space_group_symop.operation_xyz",
      "_space_group_symop_operation_xyz",
      "_symmetry_equiv.pos_as_xyz",
      "_symmetry_equiv_pos_as_xyz"
    ], t);
    return new Xi(i);
  }
  /**
   * Applies the symmetry operation to a point in fractional coordinates
   * @param {number[]} point - Point in fractional coordinates [x, y, z]
   * @returns {number[]} Transformed point in fractional coordinates
   */
  applyToPoint(e) {
    const t = Pt.add(
      Pt.multiply(this.rotMatrix, e),
      this.transVector
    );
    return Array.isArray(t) ? t : t.toArray();
  }
  /**
   * Applies the symmetry operation to an atom, including its displacement parameters if present
   * @param {object} atom - Atom object with fractional coordinates
   * @param {string} atom.label - Atom label
   * @param {string} atom.atomType - Chemical element symbol
   * @param {FractPosition} atom.position - Fractional position element
   * @param {(UAnisoADP|UIsoADP)} [atom.adp] - Anisotropic or isotropic displacement parameters
   * @param {number} [atom.disorderGroup] - Disorder group identifier
   * @returns {Atom} New atom instance with transformed coordinates and ADPs
   */
  applyToAtom(e) {
    const t = new gy(...Pt.add(
      Pt.multiply(this.rotMatrix, [e.position.x, e.position.y, e.position.z]),
      this.transVector
    ));
    let n = null;
    if (e.adp && e.adp instanceof vi) {
      const i = [
        [e.adp.u11, e.adp.u12, e.adp.u13],
        [e.adp.u12, e.adp.u22, e.adp.u23],
        [e.adp.u13, e.adp.u23, e.adp.u33]
      ], a = this.rotMatrix, s = Pt.transpose(a), o = Pt.multiply(Pt.multiply(a, i), s);
      n = new vi(
        o[0][0],
        // u11
        o[1][1],
        // u22
        o[2][2],
        // u33
        o[0][1],
        // u12
        o[0][2],
        // u13
        o[1][2]
        // u23
      );
    } else e.adp && e.adp instanceof Zi && (n = new Zi(e.adp.uiso));
    return new Gs(
      e.label,
      e.atomType,
      t,
      n,
      e.disorderGroup
    );
  }
  /**
   * Applies the symmetry operation to multiple atoms
   * @param {object[]} atoms - Array of atom objects
   * @param {string} atoms[].label - Atom label
   * @param {string} atoms[].atomType - Chemical element symbol
   * @param {FractPosition} atoms[].position - Fractional position object
   * @param {(UAnisoADP|UIsoADP)} [atoms[].adp] - Anisotropic or isotropic displacement parameters
   * @param {number} [atoms[].disorderGroup] - Disorder group identifier
   * @returns {Atom[]} Array of new atom instances with transformed coordinates and ADPs
   */
  applyToAtoms(e) {
    return e.map((t) => this.applyToAtom(t));
  }
  /**
   * Creates a deep copy of this symmetry operation
   * @returns {SymmetryOperation} New independent symmetry operation with the same parameters
   */
  copy() {
    const e = new Xi("x,y,z");
    return e.rotMatrix = Pt.clone(this.rotMatrix), e.transVector = Pt.clone(this.transVector), e;
  }
  /**
   * Generates a symmetry operation string from the internal matrix and vector
   * @param {Array<number>} [additionalTranslation] - Optional translation vector to add
   * @returns {string} Symmetry operation in crystallographic notation (e.g. "-x,y,-z" or "1-x,1+y,-z")
   */
  toSymmetryString(e = null) {
    const t = ["x", "y", "z"], n = [], i = e ? Pt.add(this.transVector, e) : this.transVector;
    for (let a = 0; a < 3; a++) {
      let s = "";
      const o = [];
      for (let l = 0; l < 3; l++) {
        const u = this.rotMatrix[a][l];
        if (Math.abs(u) > 1e-10)
          if (Math.abs(Math.abs(u) - 1) < 1e-10)
            o.push(u > 0 ? t[l] : `-${t[l]}`);
          else {
            const c = Z0(Math.abs(u));
            o.push(u > 0 ? `${c}${t[l]}` : `-${c}${t[l]}`);
          }
      }
      if (s = o.join("+"), s === "" && (s = "0"), Math.abs(i[a]) > 1e-10) {
        const l = Z0(Math.abs(i[a])), u = i[a] < 0 ? `-${l}` : l;
        s === "0" ? s = u : s.startsWith("-") ? s = `${u}${s}` : s = `${u}+${s}`;
      }
      n.push(s);
    }
    return n.join(",");
  }
}
class Ia {
  constructor(e, t, n, i = null) {
    var a;
    this.spaceGroupName = e, this.spaceGroupNumber = t, this.symmetryOperations = n, this.operationIds = i || new Map(
      n.map((s, o) => [(o + 1).toString(), o])
    ), this.identitySymOpId = (a = Array.from(this.operationIds.entries()).find(([s, o]) => {
      const l = this.symmetryOperations[o];
      return Pt.equal(l.rotMatrix, Pt.identity(3)) && Pt.equal(l.transVector, Pt.zeros(3));
    })) == null ? void 0 : a[0];
  }
  generateEquivalentPositions(e) {
    return this.symmetryOperations.map((t) => t.applyToPoint(e));
  }
  parsePositionCode(e) {
    let t, n;
    try {
      const [s, o] = e.split("_");
      n = s, t = o.split("").map((l) => parseInt(l) - 5);
    } catch {
      n = e.toString(), t = [0, 0, 0];
    }
    const i = this.operationIds.get(n);
    if (i === void 0)
      throw new Error(
        `Invalid symmetry operation ID in string ${e}: ${n}, expecting string format "<symOpId>_abc". ID entry in present symOp loop?`
      );
    return { symOp: this.symmetryOperations[i], transVector: t };
  }
  /**
   * Combines two position codes to create a new position code
   * @param {string} positionCodeOuter - Outer position code (applied second)
   * @param {string} positionCodeInner - Inner position code (applied first)
   * @returns {string} Combined position code
   * @throws {Error} If no matching symmetry operation is found
   */
  combinePositionCodes(e, t) {
    const { symOp: n, transVector: i } = this.parsePositionCode(e), { symOp: a, transVector: s } = this.parsePositionCode(t), o = Pt.add(Pt.matrix(i), Pt.matrix(n.transVector)), l = Pt.add(Pt.matrix(s), Pt.matrix(a.transVector)), u = Pt.add(Pt.multiply(n.rotMatrix, l), o), c = Pt.multiply(n.rotMatrix, a.rotMatrix);
    for (let f = 0; f < this.symmetryOperations.length; f++) {
      const h = this.symmetryOperations[f];
      if (!Pt.deepEqual(c, h.rotMatrix))
        continue;
      const d = Pt.subtract(u, Pt.matrix(h.transVector));
      if (d.toArray().every(
        (p) => Math.abs(p - Math.round(p)) < 1e-10
      )) {
        let p = null;
        for (const [S, x] of this.operationIds.entries())
          if (x === f) {
            p = S;
            break;
          }
        const v = d.toArray().map((S) => Math.round(S) + 5).join("");
        return `${p}_${v}`;
      }
    }
    throw new Error("No matching symmetry operation found for combined position codes");
  }
  applySymmetry(e, t) {
    const { symOp: n, transVector: i } = this.parsePositionCode(e);
    if (Array.isArray(t)) {
      const s = n.applyToAtoms(t);
      return s.forEach((o) => {
        o.position.x += i[0], o.position.y += i[1], o.position.z += i[2];
      }), s;
    }
    const a = n.applyToAtom(t);
    return a.position.x += i[0], a.position.y += i[1], a.position.z += i[2], a;
  }
  static fromCIF(e) {
    const t = e.get(
      [
        "_space_group.name_h-m_alt",
        "_space_group.name_H-M_full",
        "_symmetry_space_group_name_H-M",
        "_space_group_name_H-M_alt"
      ],
      "Unknown"
    ), n = e.get(
      [
        "_space_group.it_number",
        "_space_group.IT_number",
        "_symmetry_Int_Tables_number",
        "_space_group_IT_number"
      ],
      0
    ), i = e.get(
      [
        "_space_group_symop",
        "_symmetry_equiv",
        "_symmetry_equiv_pos",
        "_space_group_symop.operation_xyz",
        "_space_group_symop_operation_xyz",
        "_symmetry_equiv.pos_as_xyz",
        "_symmetry_equiv_pos_as_xyz"
      ],
      !1
    );
    if (i && !(i instanceof Is))
      return new Ia(
        t,
        n,
        [new Xi(i)]
      );
    if (i || console.warn(Object.keys(e).filter((a) => a.includes("sym"))), i) {
      const a = i.get([
        "_space_group_symop.operation_xyz",
        "_space_group_symop_operation_xyz",
        "_symmetry_equiv.pos_as_xyz",
        "_symmetry_equiv_pos_as_xyz"
      ]);
      let s = null;
      try {
        const l = i.get([
          "_space_group_symop.id",
          "_space_group_symop_id",
          "_symmetry_equiv.id",
          "_symmetry_equiv_pos_site_id"
        ]);
        s = new Map(l.map((u, c) => [u.toString(), c]));
      } catch {
      }
      const o = a.map((l) => new Xi(l));
      return new Ia(
        t,
        n,
        o,
        s
      );
    } else
      return console.warn("No symmetry operations found in CIF block, will use P1"), new Ia("Unknown", 0, [new Xi("x,y,z")]);
  }
}
class wn {
  /**
   * Creates a new bond
   * @param {string} atom1Label - Label of first atom
   * @param {string} atom2Label - Label of second atom
   * @param {number} [bondLength] - Bond length in Å
   * @param {number} [bondLengthSU] - Standard uncertainty in bond length
   * @param {string} [atom2SiteSymmetry] - Symmetry operation for second atom
   */
  constructor(e, t, n = null, i = null, a = null) {
    this.atom1Label = e, this.atom2Label = t, this.bondLength = n, this.bondLengthSU = i, this.atom2SiteSymmetry = a;
  }
  /**
   * Creates a Bond from CIF data
   * @param {CifBlock} cifBlock - Parsed CIF data block
   * @param {number} bondIndex - Index in _geom_bond loop
   * @returns {Bond} New bond instance
   */
  static fromCIF(e, t) {
    const n = e.get("_geom_bond");
    let i = n.getIndex(
      ["_geom_bond.site_symmetry_2", "_geom_bond_site_symmetry_2"],
      t,
      "."
    );
    const a = n.getIndex(
      ["_geom_bond.site_symmetry_1", "_geom_bond_site_symmetry_1"],
      t,
      !1
    );
    return a && a === i && (i = "."), new wn(
      n.getIndex(["_geom_bond.atom_site_label_1", "_geom_bond_atom_site_label_1"], t),
      n.getIndex(["_geom_bond.atom_site_label_2", "_geom_bond_atom_site_label_2"], t),
      n.getIndex(["_geom_bond.distance", "_geom_bond_distance"], t),
      n.getIndex(["_geom_bond.distance_su", "_geom_bond_distance_su"], t, NaN),
      i !== "?" ? i : "."
    );
  }
}
class Wa {
  /**
   * Creates a new hydrogen bond
   * @param {string} donorAtomLabel - Label of donor atom (D)
   * @param {string} hydrogenAtomLabel - Label of hydrogen atom (H)
   * @param {string} acceptorAtomLabel - Label of acceptor atom (A)
   * @param {number} donorHydrogenDistance - D-H distance in Å
   * @param {number} donorHydrogenDistanceSU - Standard uncertainty in D-H distance
   * @param {number} acceptorHydrogenDistance - H···A distance in Å
   * @param {number} acceptorHydrogenDistanceSU - Standard uncertainty in H···A distance
   * @param {number} donorAcceptorDistance - D···A distance in Å
   * @param {number} donorAcceptorDistanceSU - Standard uncertainty in D···A distance
   * @param {number} hBondAngle - D-H···A angle in degrees
   * @param {number} hBondAngleSU - Standard uncertainty in angle
   * @param {string} acceptorAtomSymmetry - Symmetry operation for acceptor atom
   */
  constructor(e, t, n, i, a, s, o, l, u, c, f, h) {
    this.donorAtomLabel = e, this.hydrogenAtomLabel = t, this.acceptorAtomLabel = n, this.donorHydrogenDistance = i, this.donorHydrogenDistanceSU = a, this.acceptorHydrogenDistance = s, this.acceptorHydrogenDistanceSU = o, this.donorAcceptorDistance = l, this.donorAcceptorDistanceSU = u, this.hBondAngle = c, this.hBondAngleSU = f, this.acceptorAtomSymmetry = h;
  }
  /**
   * Creates a HBond from CIF data
   * @param {CifBlock} cifBlock - Parsed CIF data block
   * @param {number} hBondIndex - Index in _geom_hbond loop
   * @returns {HBond} New hydrogen bond instance
   */
  static fromCIF(e, t) {
    const n = e.get("_geom_hbond"), i = n.getIndex(
      ["_geom_hbond.site_symmetry_a", "_geom_hbond_site_symmetry_A"],
      t,
      "."
    );
    return new Wa(
      n.getIndex(["_geom_hbond.atom_site_label_d", "_geom_hbond_atom_site_label_D"], t),
      n.getIndex(["_geom_hbond.atom_site_label_h", "_geom_hbond_atom_site_label_H"], t),
      n.getIndex(["_geom_hbond.atom_site_label_a", "_geom_hbond_atom_site_label_A"], t),
      n.getIndex(["_geom_hbond.distance_dh", "_geom_hbond_distance_DH"], t, NaN),
      n.getIndex(["_geom_hbond.distance_dh_su", "_geom_hbond_distance_DH_su"], t, NaN),
      n.getIndex(["_geom_hbond.distance_ha", "_geom_hbond_distance_HA"], t, NaN),
      n.getIndex(["_geom_hbond.distance_ha_su", "_geom_hbond_distance_HA_su"], t, NaN),
      n.getIndex(["_geom_hbond.distance_da", "_geom_hbond_distance_DA"], t, NaN),
      n.getIndex(["_geom_hbond.distance_da_su", "_geom_hbond_distance_DA_su"], t, NaN),
      n.getIndex(["_geom_hbond.angle_dha", "_geom_hbond_angle_DHA"], t, NaN),
      n.getIndex(["_geom_hbond.angle_dha_su", "_geom_hbond_angle_DHA_su"], t, NaN),
      i !== "?" ? i : "."
    );
  }
}
class K0 {
  constructor() {
    this.atomLabelErrors = [], this.symmetryErrors = [];
  }
  /**
   * Add an atom label error message to the validation results
   * @param {string} error - Error message to add
   */
  addAtomLabelError(e) {
    this.atomLabelErrors.push(e);
  }
  /**
   * Add a symmetry error message to the validation results
   * @param {string} error - Error message to add
   */
  addSymmetryError(e) {
    this.symmetryErrors.push(e);
  }
  /**
   * Check if validation found any errors
   * @returns {boolean} True if validation passed with no errors
   */
  isValid() {
    return this.atomLabelErrors.length + this.symmetryErrors.length === 0;
  }
  /**
   * Generates a formatted report of all validation errors
   * @param {Array<object>} atoms - Array of atom objects with label property
   * @param {object} symmetry - Symmetry object with operationIds Map
   * @returns {string} Formatted error report
   */
  report(e, t) {
    let n = "";
    return this.atomLabelErrors.length !== 0 && (n += `Unknown atom label(s). Known labels are 
`, n += e.map((i) => i.label).join(", "), n += `
`, n += this.atomLabelErrors.join(`
`)), this.symmetryErrors.length !== 0 && (n.length !== 0 && (n += `
`), n += "Unknown symmetry ID(s) or String format. Expected format is <id>_abc. ", n += `Known IDs are:
`, n += Array.from(t.operationIds.keys()).join(", "), n += `
`, n += this.symmetryErrors.join(`
`)), n;
  }
}
class Zr {
  /**
   * Creates bonds from CIF data
   * @param {object} cifBlock - CIF data block to parse
   * @param {Set<string>} atomLabels - Set of valid atom labels
   * @returns {Array<Bond>} Array of created bonds
   */
  static createBonds(e, t) {
    try {
      const n = e.get("_geom_bond"), i = n.get(["_geom_bond.atom_site_label_1", "_geom_bond_atom_site_label_1"]).length, a = [];
      for (let s = 0; s < i; s++) {
        const o = n.getIndex(
          ["_geom_bond.atom_site_label_1", "_geom_bond_atom_site_label_1"],
          s
        ), l = n.getIndex(
          ["_geom_bond.atom_site_label_2", "_geom_bond_atom_site_label_2"],
          s
        );
        Zr.isValidBondPair(o, l, t) && a.push(wn.fromCIF(e, s));
      }
      return a;
    } catch {
      return [];
    }
  }
  /**
   * Creates hydrogen bonds from CIF data
   * @param {CifBlock} cifBlock - CIF data block to parse
   * @param {Set<string>} atomLabels - Set of valid atom labels
   * @returns {HBond[]} Array of created hydrogen bonds
   */
  static createHBonds(e, t) {
    const n = e.get("_geom_hbond", !1);
    if (!n)
      return [];
    const i = n.get(["_geom_hbond.atom_site_label_d", "_geom_hbond_atom_site_label_D"]).length, a = [];
    for (let s = 0; s < i; s++) {
      const o = n.getIndex(
        ["_geom_hbond.atom_site_label_d", "_geom_hbond_atom_site_label_D"],
        s,
        "?"
      ), l = n.getIndex(
        ["_geom_hbond.atom_site_label_h", "_geom_hbond_atom_site_label_H"],
        s,
        "?"
      ), u = n.getIndex(
        ["_geom_hbond.atom_site_label_a", "_geom_hbond_atom_site_label_A"],
        s,
        "?"
      );
      Zr.isValidHBondTriplet(o, l, u, t) && a.push(Wa.fromCIF(e, s));
    }
    return a;
  }
  /**
   * Validates bonds against a set of atoms and symmetry operations
   * @param {Array<Bond>} bonds - Bonds to validate
   * @param {Array<object>} atoms - Atoms to validate against
   * @param {object} symmetry - Symmetry operations to validate against
   * @returns {ValidationResult} Validation results
   */
  static validateBonds(e, t, n) {
    const i = new K0(), a = new Set(t.map((s) => s.label));
    for (const s of e) {
      const o = [];
      if (a.has(s.atom1Label) || o.push(s.atom1Label), a.has(s.atom2Label) || o.push(s.atom2Label), o.length > 0 && i.addAtomLabelError(
        `Non-existent atoms in bond: ${s.atom1Label} - ${s.atom2Label}, non-existent atom(s): ${o.join(", ")}`
      ), s.atom2SiteSymmetry && s.atom2SiteSymmetry !== ".")
        try {
          n.parsePositionCode(s.atom2SiteSymmetry);
        } catch {
          i.addSymmetryError(
            `Invalid symmetry in bond: ${s.atom1Label} - ${s.atom2Label}, invalid symmetry operation: ${s.atom2SiteSymmetry}`
          );
        }
    }
    return i;
  }
  /**
   * Validates hydrogen bonds against a set of atoms and symmetry operations
   * @param {Array<HBond>} hBonds - Hydrogen bonds to validate
   * @param {Array<object>} atoms - Atoms to validate against
   * @param {object} symmetry - Symmetry operations to validate against
   * @returns {ValidationResult} Validation results
   */
  static validateHBonds(e, t, n) {
    const i = new K0(), a = new Set(t.map((s) => s.label));
    for (const s of e) {
      const o = [];
      if (a.has(s.donorAtomLabel) || o.push(s.donorAtomLabel), a.has(s.hydrogenAtomLabel) || o.push(s.hydrogenAtomLabel), a.has(s.acceptorAtomLabel) || o.push(s.acceptorAtomLabel), o.length > 0 && i.addAtomLabelError(
        `Non-existent atoms in H-bond: ${s.donorAtomLabel} - ${s.hydrogenAtomLabel} - ${s.acceptorAtomLabel}, non-existent atom(s): ${o.join(", ")}`
      ), s.acceptorAtomSymmetry && s.acceptorAtomSymmetry !== ".")
        try {
          n.parsePositionCode(s.acceptorAtomSymmetry);
        } catch {
          i.addSymmetryError(
            `Invalid symmetry in H-bond: ${s.donorAtomLabel} - ${s.hydrogenAtomLabel} - ${s.acceptorAtomLabel}, invalid symmetry operation: ${s.acceptorAtomSymmetry}`
          );
        }
    }
    return i;
  }
  /**
   * Checks for an atom label whether it is valid (exclude centroids)
   * @param {string} atomLabel - An atom Label
   * @returns {boolean} Whether the label is valid
   */
  static isValidLabel(e) {
    return /^(Cg|Cnt|CG|CNT)/.test(e);
  }
  /**
   * Checks if bond atom pair is valid (not centroids unless in atom list)
   * @private
   * @param {string} atom1Label - First atom label
   * @param {string} atom2Label - Second atom label
   * @param {Set<string>} atomLabels - Set of valid atom labels
   * @returns {boolean} Whether bond pair is valid
   */
  static isValidBondPair(e, t, n) {
    const i = Zr.isValidLabel(e), a = Zr.isValidLabel(t);
    return e === "?" || t === "?" ? !1 : (!i || n.has(e)) && (!a || n.has(t));
  }
  /**
   * Checks if H-bond atom triplet is valid (not centroids unless in atom list)
   * @private
   * @param {string} donorLabel - Donor atom label
   * @param {string} hydrogenLabel - Hydrogen atom label  
   * @param {string} acceptorLabel - Acceptor atom label
   * @param {Set<string>} atomLabels - Set of valid atom labels
   * @returns {boolean} Whether H-bond triplet is valid
   */
  static isValidHBondTriplet(e, t, n, i) {
    const a = Zr.isValidLabel(e), s = Zr.isValidLabel(t), o = Zr.isValidLabel(n);
    return e === "?" || t === "?" || n === "?" ? !1 : (!a || i.has(e)) && (!s || i.has(t)) && (!o || i.has(n));
  }
}
function Vu(r) {
  if (!r || typeof r != "string")
    throw new Error(`Invalid atom label: ${r}`);
  const e = r.toUpperCase(), t = [
    "HE",
    "LI",
    "BE",
    "NE",
    "NA",
    "MG",
    "AL",
    "SI",
    "CL",
    "AR",
    "CA",
    "SC",
    "TI",
    "CR",
    "MN",
    "FE",
    "CO",
    "NI",
    "CU",
    "ZN",
    "GA",
    "GE",
    "AS",
    "SE",
    "BR",
    "KR",
    "RB",
    "SR",
    "ZR",
    "NB",
    "MO",
    "TC",
    "RU",
    "RH",
    "PD",
    "AG",
    "CD",
    "IN",
    "SN",
    "SB",
    "TE",
    "XE",
    "CS",
    "BA",
    "LA",
    "CE",
    "PR",
    "ND",
    "PM",
    "SM",
    "EU",
    "GD",
    "TB",
    "DY",
    "HO",
    "ER",
    "TM",
    "YB",
    "LU",
    "HF",
    "TA",
    "RE",
    "OS",
    "IR",
    "PT",
    "AU",
    "HG",
    "TL",
    "PB",
    "BI",
    "PO",
    "AT",
    "RN",
    "FR",
    "RA",
    "AC",
    "TH",
    "PA",
    "NP",
    "PU",
    "AM",
    "CM"
  ], n = new RegExp(`^(${t.join("|")})`), i = e.match(n);
  if (i)
    return J0(i[1]);
  const a = e.match(/^(H|B|C|N|O|F|P|S|K|V|Y|I|W|U|D)/);
  if (a)
    return J0(a[1]);
  throw new Error(`Could not infer element type from atom label: ${r}`);
}
function J0(r) {
  return r.length === 1 ? r : r[0] + r[1].toLowerCase();
}
class dn {
  /**
   * Creates a new crystal structure
   * @param {UnitCell} unitCell - Unit cell parameters
   * @param {Atom[]} atoms - Array of atoms in the structure
   * @param {Bond[]} [bonds] - Array of bonds between atoms
   * @param {HBond[]} [hBonds] - Array of hydrogen bonds
   * @param {CellSymmetry} [symmetry] - Crystal symmetry information
   */
  constructor(e, t, n = [], i = [], a = null) {
    this.cell = e, this.atoms = t, this.bonds = n, this.hBonds = i, this.recalculateConnectedGroups(), this.symmetry = a || new Ia("None", 0, [new Xi("x,y,z")]);
  }
  /**
   * Creates a CrystalStructure from CIF data
   * @param {CifBlock} cifBlock - Parsed CIF data block
   * @returns {CrystalStructure} New crystal structure instance
   */
  static fromCIF(e) {
    const t = If.fromCIF(e), i = e.get("_atom_site").get(["_atom_site.label", "_atom_site_label"]), a = Array.from({ length: i.length }, (h, d) => {
      try {
        return Gs.fromCIF(e, d);
      } catch (m) {
        if (m.message.includes("Dummy atom"))
          return null;
        throw m;
      }
    }).filter((h) => h !== null);
    if (a.length === 0)
      throw new Error("The cif file contains no valid atoms.");
    const s = new Set(a.map((h) => h.label)), o = Zr.createBonds(e, s), l = Zr.createHBonds(e, s), u = Ia.fromCIF(e), c = Zr.validateBonds(o, a, u), f = Zr.validateHBonds(l, a, u);
    if (!c.isValid() || !f.isValid()) {
      const h = `There were errors in the bond or H-bond creation
`, d = c.report(a, u), m = f.report(a, u);
      throw d.length !== 0 && m.length !== 0 ? new Error(h + d + `
` + m) : new Error(h + d + m);
    }
    return new dn(t, a, o, l, u);
  }
  /**
   * Finds an atom by its label 
   * @param {string} atomLabel - Unique atom identifier
   * @returns {Atom} Found atom
   * @throws {Error} If atom with label not found
   */
  getAtomByLabel(e) {
    for (const n of this.atoms)
      if (n.label === e)
        return n;
    const t = this.atoms.map((n) => n.label).join(", ");
    throw new Error(`Could not find atom with label: ${e}, available are: ${t}`);
  }
  /**
   * Groups atoms connected by bonds or H-bonds, excluding symmetry relationships
   * from the provided atoms and bonds
   */
  recalculateConnectedGroups() {
    const e = /* @__PURE__ */ new Map(), t = [], n = (a) => {
      if (e.has(a.label))
        return e.get(a.label);
      const s = {
        atoms: /* @__PURE__ */ new Set(),
        bonds: /* @__PURE__ */ new Set(),
        hBonds: /* @__PURE__ */ new Set()
      };
      return t.push(s), s;
    };
    for (const a of this.bonds) {
      const s = this.getAtomByLabel(a.atom1Label), o = this.getAtomByLabel(a.atom2Label);
      if (a.atom2SiteSymmetry !== "." && a.atom2SiteSymmetry !== null)
        continue;
      const l = e.get(s.label), u = e.get(o.label), c = l || u;
      if (c) {
        if (c.atoms.add(s), c.atoms.add(o), c.bonds.add(a), e.set(s.label, c), e.set(o.label, c), l && u && l !== u) {
          for (const f of u.atoms)
            l.atoms.add(f), e.set(f.label, l);
          for (const f of u.bonds)
            l.bonds.add(f);
          t.splice(t.indexOf(u), 1);
        }
      } else {
        const f = n(s);
        f.atoms.add(s), f.atoms.add(o), f.bonds.add(a), e.set(s.label, f), e.set(o.label, f);
      }
    }
    for (const a of this.hBonds) {
      const s = this.getAtomByLabel(a.donorAtomLabel), o = this.getAtomByLabel(a.acceptorAtomLabel);
      if (a.acceptorAtomSymmetry !== "." && a.acceptorAtomSymmetry !== null)
        continue;
      n(s).hBonds.add(a), e.has(o.label) && n(o).hBonds.add(a);
    }
    this.atoms.filter((a) => !t.some((s) => s.atoms.has(a))).forEach((a) => {
      const s = {
        atoms: /* @__PURE__ */ new Set([a]),
        bonds: /* @__PURE__ */ new Set(),
        hBonds: /* @__PURE__ */ new Set()
      };
      t.push(s);
    }), this.connectedGroups = t.map((a) => ({
      atoms: Array.from(a.atoms),
      bonds: Array.from(a.bonds),
      hBonds: Array.from(a.hBonds)
    }));
  }
}
class If {
  /**
   * Creates a new unit cell
   * @param {number} a - a axis length in Å 
   * @param {number} b - b axis length in Å
   * @param {number} c - c axis length in Å 
   * @param {number} alpha - α angle in degrees
   * @param {number} beta - β angle in degrees
   * @param {number} gamma - γ angle in degrees
   * @throws {Error} If parameters invalid
   */
  constructor(e, t, n, i, a, s) {
    this._a = e, this._b = t, this._c = n, this._alpha = i, this._beta = a, this._gamma = s, this.fractToCartMatrix = Di(this);
  }
  /**
   * Creates a UnitCell from CIF data
   * @param {CifBlock} cifBlock - Parsed CIF data block
   * @returns {UnitCell} New unit cell instance
   */
  static fromCIF(e) {
    const t = [
      e.get(["_cell.length_a", "_cell_length_a"], "not found"),
      e.get(["_cell.length_b", "_cell_length_b"], "not found"),
      e.get(["_cell.length_c", "_cell_length_c"], "not found"),
      e.get(["_cell.angle_alpha", "_cell_angle_alpha"], "not found"),
      e.get(["_cell.angle_beta", "_cell_angle_beta"], "not found"),
      e.get(["_cell.angle_gamma", "_cell_angle_gamma"], "not found")
    ];
    if (t.some((n) => n === "not found")) {
      const n = ["a", "b", "c", "alpha", "beta", "gamma"], i = [];
      t.forEach((s, o) => {
        s === "not found" && i.push(n[o]);
      });
      const a = i.join(", ");
      throw new Error(
        `Unit cell parameter entries missing in CIF for: ${a}`
      );
    }
    if (t.some((n) => n < 0)) {
      const n = ["a", "b", "c", "alpha", "beta", "gamma"], i = [];
      t.forEach((s, o) => {
        s < 0 && i.push(n[o]);
      });
      const a = i.join(", ");
      throw new Error(
        `Unit cell parameter entries negative in CIF for: ${a}`
      );
    }
    return new If(...t);
  }
  get a() {
    return this._a;
  }
  set a(e) {
    if (e <= 0)
      throw new Error("Cell parameter 'a' must be positive");
    this._a = e, this.fractToCartMatrix = Di(this);
  }
  get b() {
    return this._b;
  }
  set b(e) {
    if (e <= 0)
      throw new Error("Cell parameter 'b' must be positive");
    this._b = e, this.fractToCartMatrix = Di(this);
  }
  get c() {
    return this._c;
  }
  set c(e) {
    if (e <= 0)
      throw new Error("Cell parameter 'c' must be positive");
    this._c = e, this.fractToCartMatrix = Di(this);
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(e) {
    if (e <= 0 || e >= 180)
      throw new Error("Angle alpha must be between 0 and 180 degrees");
    this._alpha = e, this.fractToCartMatrix = Di(this);
  }
  get beta() {
    return this._beta;
  }
  set beta(e) {
    if (e <= 0 || e >= 180)
      throw new Error("Angle beta must be between 0 and 180 degrees");
    this._beta = e, this.fractToCartMatrix = Di(this);
  }
  get gamma() {
    return this._gamma;
  }
  set gamma(e) {
    if (e <= 0 || e >= 180)
      throw new Error("Angle gamma must be between 0 and 180 degrees");
    this._gamma = e, this.fractToCartMatrix = Di(this);
  }
}
class Gs {
  constructor(e, t, n, i = null, a = 0) {
    this.label = String(e), this.atomType = t, this.position = n, this.adp = i, this.disorderGroup = a;
  }
  /**
   * Creates an Atom from CIF data from either the index or the atom in the 
   * _atom_site_loop
   * @param {CifBlock} cifBlock - Parsed CIF data block
   * @param {number} [atomIndex] - Index in _atom_site loop
   * @param {string} [atomLabel] - Label to find atom by
   * @returns {Atom} New atom instance
   * @throws {Error} If neither index nor label provided
   */
  static fromCIF(e, t = null, n = null) {
    const i = e.get("_atom_site"), a = i.get(["_atom_site.label", "_atom_site_label"]);
    let s = t;
    if (t === null && n)
      s = a.indexOf(n);
    else if (t === null)
      throw new Error("either atomIndex or atomLabel need to be provided");
    const o = a[s], l = [".", "?"];
    if (l.includes(o))
      throw new Error("Dummy atom: Invalid label");
    if (String(i.getIndex(
      ["_atom_site.calc_flag", "_atom_site_calc_flag"],
      s,
      ""
    )).toLowerCase() === "dum")
      throw new Error("Dummy atom: calc_flag is dum");
    let c = i.getIndex(["_atom_site.type_symbol", "_atom_site_type_symbol"], s, !1);
    if (c || (c = Vu(o)), l.includes(c))
      throw new Error("Dummy atom: Invalid atom type");
    const f = l8.fromCIF(e, s), h = Cr.fromCIF(e, s), d = i.getIndex(
      ["_atom_site.disorder_group", "_atom_site_disorder_group"],
      s,
      "."
    );
    return new Gs(
      o,
      c,
      f,
      h,
      d === "." ? 0 : d
    );
  }
}
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const Lf = "172", c8 = 0, Q0 = 1, f8 = 2, xy = 1, h8 = 2, Ln = 3, gi = 0, vr = 1, Un = 2, ci = 0, La = 1, j0 = 2, ev = 3, tv = 4, d8 = 5, zi = 100, m8 = 101, p8 = 102, v8 = 103, g8 = 104, y8 = 200, x8 = 201, _8 = 202, b8 = 203, _c = 204, bc = 205, w8 = 206, S8 = 207, E8 = 208, M8 = 209, A8 = 210, D8 = 211, C8 = 212, T8 = 213, N8 = 214, wc = 0, Sc = 1, Ec = 2, Xa = 3, Mc = 4, Ac = 5, Dc = 6, Cc = 7, _y = 0, R8 = 1, F8 = 2, fi = 0, O8 = 1, P8 = 2, B8 = 3, I8 = 4, L8 = 5, U8 = 6, z8 = 7, by = 300, Ya = 301, Za = 302, Tc = 303, Nc = 304, qu = 306, Rc = 1e3, $i = 1001, Fc = 1002, mn = 1003, k8 = 1004, wo = 1005, bn = 1006, xl = 1007, Vi = 1008, Wn = 1009, wy = 1010, Sy = 1011, Os = 1012, Uf = 1013, Ki = 1014, Hn = 1015, $s = 1016, zf = 1017, kf = 1018, Ka = 1020, Ey = 35902, My = 1021, Ay = 1022, cn = 1023, Dy = 1024, Cy = 1025, Ua = 1026, Ja = 1027, Ty = 1028, Hf = 1029, Ny = 1030, Gf = 1031, $f = 1033, jo = 33776, eu = 33777, tu = 33778, ru = 33779, Oc = 35840, Pc = 35841, Bc = 35842, Ic = 35843, Lc = 36196, Uc = 37492, zc = 37496, kc = 37808, Hc = 37809, Gc = 37810, $c = 37811, Vc = 37812, qc = 37813, Wc = 37814, Xc = 37815, Yc = 37816, Zc = 37817, Kc = 37818, Jc = 37819, Qc = 37820, jc = 37821, nu = 36492, ef = 36494, tf = 36495, Ry = 36283, rf = 36284, nf = 36285, af = 36286, H8 = 3200, G8 = 3201, Fy = 0, $8 = 1, ii = "", Kr = "srgb", Qa = "srgb-linear", Du = "linear", Ct = "srgb", ha = 7680, rv = 519, V8 = 512, q8 = 513, W8 = 514, Oy = 515, X8 = 516, Y8 = 517, Z8 = 518, K8 = 519, nv = 35044, iv = "300 es", Gn = 2e3, Cu = 2001;
class os {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0) return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0) return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const a = i.indexOf(t);
      a !== -1 && i.splice(a, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0) return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let a = 0, s = i.length; a < s; a++)
        i[a].call(this, e);
      e.target = null;
    }
  }
}
const hr = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let av = 1234567;
const Es = Math.PI / 180, ja = 180 / Math.PI;
function us() {
  const r = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (hr[r & 255] + hr[r >> 8 & 255] + hr[r >> 16 & 255] + hr[r >> 24 & 255] + "-" + hr[e & 255] + hr[e >> 8 & 255] + "-" + hr[e >> 16 & 15 | 64] + hr[e >> 24 & 255] + "-" + hr[t & 63 | 128] + hr[t >> 8 & 255] + "-" + hr[t >> 16 & 255] + hr[t >> 24 & 255] + hr[n & 255] + hr[n >> 8 & 255] + hr[n >> 16 & 255] + hr[n >> 24 & 255]).toLowerCase();
}
function dt(r, e, t) {
  return Math.max(e, Math.min(t, r));
}
function Vf(r, e) {
  return (r % e + e) % e;
}
function J8(r, e, t, n, i) {
  return n + (r - e) * (i - n) / (t - e);
}
function Q8(r, e, t) {
  return r !== e ? (t - r) / (e - r) : 0;
}
function Ms(r, e, t) {
  return (1 - t) * r + t * e;
}
function j8(r, e, t, n) {
  return Ms(r, e, 1 - Math.exp(-t * n));
}
function eL(r, e = 1) {
  return e - Math.abs(Vf(r, e * 2) - e);
}
function tL(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * (3 - 2 * r));
}
function rL(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * r * (r * (r * 6 - 15) + 10));
}
function nL(r, e) {
  return r + Math.floor(Math.random() * (e - r + 1));
}
function iL(r, e) {
  return r + Math.random() * (e - r);
}
function aL(r) {
  return r * (0.5 - Math.random());
}
function sL(r) {
  r !== void 0 && (av = r);
  let e = av += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function oL(r) {
  return r * Es;
}
function uL(r) {
  return r * ja;
}
function lL(r) {
  return (r & r - 1) === 0 && r !== 0;
}
function cL(r) {
  return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2));
}
function fL(r) {
  return Math.pow(2, Math.floor(Math.log(r) / Math.LN2));
}
function hL(r, e, t, n, i) {
  const a = Math.cos, s = Math.sin, o = a(t / 2), l = s(t / 2), u = a((e + n) / 2), c = s((e + n) / 2), f = a((e - n) / 2), h = s((e - n) / 2), d = a((n - e) / 2), m = s((n - e) / 2);
  switch (i) {
    case "XYX":
      r.set(o * c, l * f, l * h, o * u);
      break;
    case "YZY":
      r.set(l * h, o * c, l * f, o * u);
      break;
    case "ZXZ":
      r.set(l * f, l * h, o * c, o * u);
      break;
    case "XZX":
      r.set(o * c, l * m, l * d, o * u);
      break;
    case "YXY":
      r.set(l * d, o * c, l * m, o * u);
      break;
    case "ZYZ":
      r.set(l * m, l * d, o * c, o * u);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
function Da(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return r / 4294967295;
    case Uint16Array:
      return r / 65535;
    case Uint8Array:
      return r / 255;
    case Int32Array:
      return Math.max(r / 2147483647, -1);
    case Int16Array:
      return Math.max(r / 32767, -1);
    case Int8Array:
      return Math.max(r / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function _r(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return Math.round(r * 4294967295);
    case Uint16Array:
      return Math.round(r * 65535);
    case Uint8Array:
      return Math.round(r * 255);
    case Int32Array:
      return Math.round(r * 2147483647);
    case Int16Array:
      return Math.round(r * 32767);
    case Int8Array:
      return Math.round(r * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const Py = {
  DEG2RAD: Es,
  RAD2DEG: ja,
  generateUUID: us,
  clamp: dt,
  euclideanModulo: Vf,
  mapLinear: J8,
  inverseLerp: Q8,
  lerp: Ms,
  damp: j8,
  pingpong: eL,
  smoothstep: tL,
  smootherstep: rL,
  randInt: nL,
  randFloat: iL,
  randFloatSpread: aL,
  seededRandom: sL,
  degToRad: oL,
  radToDeg: uL,
  isPowerOfTwo: lL,
  ceilPowerOfTwo: cL,
  floorPowerOfTwo: fL,
  setQuaternionFromProperEuler: hL,
  normalize: _r,
  denormalize: Da
};
class ft {
  constructor(e = 0, t = 0) {
    ft.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = e.elements;
    return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = dt(this.x, e.x, t.x), this.y = dt(this.y, e.y, t.y), this;
  }
  clampScalar(e, t) {
    return this.x = dt(this.x, e, t), this.y = dt(this.y, e, t), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(dt(n, e, t));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(dt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), i = Math.sin(t), a = this.x - e.x, s = this.y - e.y;
    return this.x = a * n - s * i + e.x, this.y = a * i + s * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class ot {
  constructor(e, t, n, i, a, s, o, l, u) {
    ot.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, a, s, o, l, u);
  }
  set(e, t, n, i, a, s, o, l, u) {
    const c = this.elements;
    return c[0] = e, c[1] = i, c[2] = o, c[3] = t, c[4] = a, c[5] = l, c[6] = n, c[7] = s, c[8] = u, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, a = this.elements, s = n[0], o = n[3], l = n[6], u = n[1], c = n[4], f = n[7], h = n[2], d = n[5], m = n[8], p = i[0], g = i[3], v = i[6], S = i[1], x = i[4], y = i[7], b = i[2], _ = i[5], M = i[8];
    return a[0] = s * p + o * S + l * b, a[3] = s * g + o * x + l * _, a[6] = s * v + o * y + l * M, a[1] = u * p + c * S + f * b, a[4] = u * g + c * x + f * _, a[7] = u * v + c * y + f * M, a[2] = h * p + d * S + m * b, a[5] = h * g + d * x + m * _, a[8] = h * v + d * y + m * M, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], a = e[3], s = e[4], o = e[5], l = e[6], u = e[7], c = e[8];
    return t * s * c - t * o * u - n * a * c + n * o * l + i * a * u - i * s * l;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], a = e[3], s = e[4], o = e[5], l = e[6], u = e[7], c = e[8], f = c * s - o * u, h = o * l - c * a, d = u * a - s * l, m = t * f + n * h + i * d;
    if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const p = 1 / m;
    return e[0] = f * p, e[1] = (i * u - c * n) * p, e[2] = (o * n - i * s) * p, e[3] = h * p, e[4] = (c * t - i * l) * p, e[5] = (i * a - o * t) * p, e[6] = d * p, e[7] = (n * l - u * t) * p, e[8] = (s * t - n * a) * p, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, i, a, s, o) {
    const l = Math.cos(a), u = Math.sin(a);
    return this.set(
      n * l,
      n * u,
      -n * (l * s + u * o) + s + e,
      -i * u,
      i * l,
      -i * (-u * s + l * o) + o + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(_l.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(_l.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(_l.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 9; i++)
      if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const _l = /* @__PURE__ */ new ot();
function By(r) {
  for (let e = r.length - 1; e >= 0; --e)
    if (r[e] >= 65535) return !0;
  return !1;
}
function Tu(r) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", r);
}
function dL() {
  const r = Tu("canvas");
  return r.style.display = "block", r;
}
const sv = {};
function Ca(r) {
  r in sv || (sv[r] = !0, console.warn(r));
}
function mL(r, e, t) {
  return new Promise(function(n, i) {
    function a() {
      switch (r.clientWaitSync(e, r.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case r.WAIT_FAILED:
          i();
          break;
        case r.TIMEOUT_EXPIRED:
          setTimeout(a, t);
          break;
        default:
          n();
      }
    }
    setTimeout(a, t);
  });
}
function pL(r) {
  const e = r.elements;
  e[2] = 0.5 * e[2] + 0.5 * e[3], e[6] = 0.5 * e[6] + 0.5 * e[7], e[10] = 0.5 * e[10] + 0.5 * e[11], e[14] = 0.5 * e[14] + 0.5 * e[15];
}
function vL(r) {
  const e = r.elements;
  e[11] === -1 ? (e[10] = -e[10] - 1, e[14] = -e[14]) : (e[10] = -e[10], e[14] = -e[14] + 1);
}
const ov = /* @__PURE__ */ new ot().set(
  0.4123908,
  0.3575843,
  0.1804808,
  0.212639,
  0.7151687,
  0.0721923,
  0.0193308,
  0.1191948,
  0.9505322
), uv = /* @__PURE__ */ new ot().set(
  3.2409699,
  -1.5373832,
  -0.4986108,
  -0.9692436,
  1.8759675,
  0.0415551,
  0.0556301,
  -0.203977,
  1.0569715
);
function gL() {
  const r = {
    enabled: !0,
    workingColorSpace: Qa,
    /**
     * Implementations of supported color spaces.
     *
     * Required:
     *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
     *	- whitePoint: reference white [ x y ]
     *	- transfer: transfer function (pre-defined)
     *	- toXYZ: Matrix3 RGB to XYZ transform
     *	- fromXYZ: Matrix3 XYZ to RGB transform
     *	- luminanceCoefficients: RGB luminance coefficients
     *
     * Optional:
     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
     *
     * Reference:
     * - https://www.russellcottrell.com/photo/matrixCalculator.htm
     */
    spaces: {},
    convert: function(i, a, s) {
      return this.enabled === !1 || a === s || !a || !s || (this.spaces[a].transfer === Ct && (i.r = $n(i.r), i.g = $n(i.g), i.b = $n(i.b)), this.spaces[a].primaries !== this.spaces[s].primaries && (i.applyMatrix3(this.spaces[a].toXYZ), i.applyMatrix3(this.spaces[s].fromXYZ)), this.spaces[s].transfer === Ct && (i.r = za(i.r), i.g = za(i.g), i.b = za(i.b))), i;
    },
    fromWorkingColorSpace: function(i, a) {
      return this.convert(i, this.workingColorSpace, a);
    },
    toWorkingColorSpace: function(i, a) {
      return this.convert(i, a, this.workingColorSpace);
    },
    getPrimaries: function(i) {
      return this.spaces[i].primaries;
    },
    getTransfer: function(i) {
      return i === ii ? Du : this.spaces[i].transfer;
    },
    getLuminanceCoefficients: function(i, a = this.workingColorSpace) {
      return i.fromArray(this.spaces[a].luminanceCoefficients);
    },
    define: function(i) {
      Object.assign(this.spaces, i);
    },
    // Internal APIs
    _getMatrix: function(i, a, s) {
      return i.copy(this.spaces[a].toXYZ).multiply(this.spaces[s].fromXYZ);
    },
    _getDrawingBufferColorSpace: function(i) {
      return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace;
    },
    _getUnpackColorSpace: function(i = this.workingColorSpace) {
      return this.spaces[i].workingColorSpaceConfig.unpackColorSpace;
    }
  }, e = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06], t = [0.2126, 0.7152, 0.0722], n = [0.3127, 0.329];
  return r.define({
    [Qa]: {
      primaries: e,
      whitePoint: n,
      transfer: Du,
      toXYZ: ov,
      fromXYZ: uv,
      luminanceCoefficients: t,
      workingColorSpaceConfig: { unpackColorSpace: Kr },
      outputColorSpaceConfig: { drawingBufferColorSpace: Kr }
    },
    [Kr]: {
      primaries: e,
      whitePoint: n,
      transfer: Ct,
      toXYZ: ov,
      fromXYZ: uv,
      luminanceCoefficients: t,
      outputColorSpaceConfig: { drawingBufferColorSpace: Kr }
    }
  }), r;
}
const xt = /* @__PURE__ */ gL();
function $n(r) {
  return r < 0.04045 ? r * 0.0773993808 : Math.pow(r * 0.9478672986 + 0.0521327014, 2.4);
}
function za(r) {
  return r < 31308e-7 ? r * 12.92 : 1.055 * Math.pow(r, 0.41666) - 0.055;
}
let da;
class yL {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      da === void 0 && (da = Tu("canvas")), da.width = e.width, da.height = e.height;
      const n = da.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = da;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = Tu("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const i = n.getImageData(0, 0, e.width, e.height), a = i.data;
      for (let s = 0; s < a.length; s++)
        a[s] = $n(a[s] / 255) * 255;
      return n.putImageData(i, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor($n(t[n] / 255) * 255) : t[n] = $n(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let xL = 0;
class Iy {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: xL++ }), this.uuid = us(), this.data = e, this.dataReady = !0, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, i = this.data;
    if (i !== null) {
      let a;
      if (Array.isArray(i)) {
        a = [];
        for (let s = 0, o = i.length; s < o; s++)
          i[s].isDataTexture ? a.push(bl(i[s].image)) : a.push(bl(i[s]));
      } else
        a = bl(i);
      n.url = a;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function bl(r) {
  return typeof HTMLImageElement < "u" && r instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && r instanceof ImageBitmap ? yL.getDataURL(r) : r.data ? {
    data: Array.from(r.data),
    width: r.width,
    height: r.height,
    type: r.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let _L = 0;
class Nr extends os {
  constructor(e = Nr.DEFAULT_IMAGE, t = Nr.DEFAULT_MAPPING, n = $i, i = $i, a = bn, s = Vi, o = cn, l = Wn, u = Nr.DEFAULT_ANISOTROPY, c = ii) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: _L++ }), this.uuid = us(), this.name = "", this.source = new Iy(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = a, this.minFilter = s, this.anisotropy = u, this.format = o, this.internalFormat = null, this.type = l, this.offset = new ft(0, 0), this.repeat = new ft(1, 1), this.center = new ft(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new ot(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = c, this.userData = {}, this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = !1, this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.renderTarget = e.renderTarget, this.isRenderTargetTexture = e.isRenderTargetTexture, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== by) return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case Rc:
          e.x = e.x - Math.floor(e.x);
          break;
        case $i:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Fc:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case Rc:
          e.y = e.y - Math.floor(e.y);
          break;
        case $i:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Fc:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
Nr.DEFAULT_IMAGE = null;
Nr.DEFAULT_MAPPING = by;
Nr.DEFAULT_ANISOTROPY = 1;
class Ht {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    Ht.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = i;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, i) {
    return this.x = e, this.y = t, this.z = n, this.w = i, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, a = this.w, s = e.elements;
    return this.x = s[0] * t + s[4] * n + s[8] * i + s[12] * a, this.y = s[1] * t + s[5] * n + s[9] * i + s[13] * a, this.z = s[2] * t + s[6] * n + s[10] * i + s[14] * a, this.w = s[3] * t + s[7] * n + s[11] * i + s[15] * a, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this.w /= e.w, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, i, a;
    const l = e.elements, u = l[0], c = l[4], f = l[8], h = l[1], d = l[5], m = l[9], p = l[2], g = l[6], v = l[10];
    if (Math.abs(c - h) < 0.01 && Math.abs(f - p) < 0.01 && Math.abs(m - g) < 0.01) {
      if (Math.abs(c + h) < 0.1 && Math.abs(f + p) < 0.1 && Math.abs(m + g) < 0.1 && Math.abs(u + d + v - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const x = (u + 1) / 2, y = (d + 1) / 2, b = (v + 1) / 2, _ = (c + h) / 4, M = (f + p) / 4, A = (m + g) / 4;
      return x > y && x > b ? x < 0.01 ? (n = 0, i = 0.707106781, a = 0.707106781) : (n = Math.sqrt(x), i = _ / n, a = M / n) : y > b ? y < 0.01 ? (n = 0.707106781, i = 0, a = 0.707106781) : (i = Math.sqrt(y), n = _ / i, a = A / i) : b < 0.01 ? (n = 0.707106781, i = 0.707106781, a = 0) : (a = Math.sqrt(b), n = M / a, i = A / a), this.set(n, i, a, t), this;
    }
    let S = Math.sqrt((g - m) * (g - m) + (f - p) * (f - p) + (h - c) * (h - c));
    return Math.abs(S) < 1e-3 && (S = 1), this.x = (g - m) / S, this.y = (f - p) / S, this.z = (h - c) / S, this.w = Math.acos((u + d + v - 1) / 2), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this.w = t[15], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = dt(this.x, e.x, t.x), this.y = dt(this.y, e.y, t.y), this.z = dt(this.z, e.z, t.z), this.w = dt(this.w, e.w, t.w), this;
  }
  clampScalar(e, t) {
    return this.x = dt(this.x, e, t), this.y = dt(this.y, e, t), this.z = dt(this.z, e, t), this.w = dt(this.w, e, t), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(dt(n, e, t));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class bL extends os {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new Ht(0, 0, e, t), this.scissorTest = !1, this.viewport = new Ht(0, 0, e, t);
    const i = { width: e, height: t, depth: 1 };
    n = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: bn,
      depthBuffer: !0,
      stencilBuffer: !1,
      resolveDepthBuffer: !0,
      resolveStencilBuffer: !0,
      depthTexture: null,
      samples: 0,
      count: 1
    }, n);
    const a = new Nr(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace);
    a.flipY = !1, a.generateMipmaps = n.generateMipmaps, a.internalFormat = n.internalFormat, this.textures = [];
    const s = n.count;
    for (let o = 0; o < s; o++)
      this.textures[o] = a.clone(), this.textures[o].isRenderTargetTexture = !0, this.textures[o].renderTarget = this;
    this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.resolveDepthBuffer = n.resolveDepthBuffer, this.resolveStencilBuffer = n.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  set depthTexture(e) {
    this._depthTexture !== null && (this._depthTexture.renderTarget = null), e !== null && (e.renderTarget = this), this._depthTexture = e;
  }
  get depthTexture() {
    return this._depthTexture;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let i = 0, a = this.textures.length; i < a; i++)
        this.textures[i].image.width = e, this.textures[i].image.height = t, this.textures[i].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
    for (let n = 0, i = e.textures.length; n < i; n++)
      this.textures[n] = e.textures[n].clone(), this.textures[n].isRenderTargetTexture = !0, this.textures[n].renderTarget = this;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new Iy(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.resolveDepthBuffer = e.resolveDepthBuffer, this.resolveStencilBuffer = e.resolveStencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Ji extends bL {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), this.isWebGLRenderTarget = !0;
  }
}
class Ly extends Nr {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = mn, this.minFilter = mn, this.wrapR = $i, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class wL extends Nr {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = mn, this.minFilter = mn, this.wrapR = $i, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class ls {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = i;
  }
  static slerpFlat(e, t, n, i, a, s, o) {
    let l = n[i + 0], u = n[i + 1], c = n[i + 2], f = n[i + 3];
    const h = a[s + 0], d = a[s + 1], m = a[s + 2], p = a[s + 3];
    if (o === 0) {
      e[t + 0] = l, e[t + 1] = u, e[t + 2] = c, e[t + 3] = f;
      return;
    }
    if (o === 1) {
      e[t + 0] = h, e[t + 1] = d, e[t + 2] = m, e[t + 3] = p;
      return;
    }
    if (f !== p || l !== h || u !== d || c !== m) {
      let g = 1 - o;
      const v = l * h + u * d + c * m + f * p, S = v >= 0 ? 1 : -1, x = 1 - v * v;
      if (x > Number.EPSILON) {
        const b = Math.sqrt(x), _ = Math.atan2(b, v * S);
        g = Math.sin(g * _) / b, o = Math.sin(o * _) / b;
      }
      const y = o * S;
      if (l = l * g + h * y, u = u * g + d * y, c = c * g + m * y, f = f * g + p * y, g === 1 - o) {
        const b = 1 / Math.sqrt(l * l + u * u + c * c + f * f);
        l *= b, u *= b, c *= b, f *= b;
      }
    }
    e[t] = l, e[t + 1] = u, e[t + 2] = c, e[t + 3] = f;
  }
  static multiplyQuaternionsFlat(e, t, n, i, a, s) {
    const o = n[i], l = n[i + 1], u = n[i + 2], c = n[i + 3], f = a[s], h = a[s + 1], d = a[s + 2], m = a[s + 3];
    return e[t] = o * m + c * f + l * d - u * h, e[t + 1] = l * m + c * h + u * f - o * d, e[t + 2] = u * m + c * d + o * h - l * f, e[t + 3] = c * m - o * f - l * h - u * d, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, i) {
    return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t = !0) {
    const n = e._x, i = e._y, a = e._z, s = e._order, o = Math.cos, l = Math.sin, u = o(n / 2), c = o(i / 2), f = o(a / 2), h = l(n / 2), d = l(i / 2), m = l(a / 2);
    switch (s) {
      case "XYZ":
        this._x = h * c * f + u * d * m, this._y = u * d * f - h * c * m, this._z = u * c * m + h * d * f, this._w = u * c * f - h * d * m;
        break;
      case "YXZ":
        this._x = h * c * f + u * d * m, this._y = u * d * f - h * c * m, this._z = u * c * m - h * d * f, this._w = u * c * f + h * d * m;
        break;
      case "ZXY":
        this._x = h * c * f - u * d * m, this._y = u * d * f + h * c * m, this._z = u * c * m + h * d * f, this._w = u * c * f - h * d * m;
        break;
      case "ZYX":
        this._x = h * c * f - u * d * m, this._y = u * d * f + h * c * m, this._z = u * c * m - h * d * f, this._w = u * c * f + h * d * m;
        break;
      case "YZX":
        this._x = h * c * f + u * d * m, this._y = u * d * f + h * c * m, this._z = u * c * m - h * d * f, this._w = u * c * f - h * d * m;
        break;
      case "XZY":
        this._x = h * c * f - u * d * m, this._y = u * d * f - h * c * m, this._z = u * c * m + h * d * f, this._w = u * c * f + h * d * m;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + s);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, i = Math.sin(n);
    return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], i = t[4], a = t[8], s = t[1], o = t[5], l = t[9], u = t[2], c = t[6], f = t[10], h = n + o + f;
    if (h > 0) {
      const d = 0.5 / Math.sqrt(h + 1);
      this._w = 0.25 / d, this._x = (c - l) * d, this._y = (a - u) * d, this._z = (s - i) * d;
    } else if (n > o && n > f) {
      const d = 2 * Math.sqrt(1 + n - o - f);
      this._w = (c - l) / d, this._x = 0.25 * d, this._y = (i + s) / d, this._z = (a + u) / d;
    } else if (o > f) {
      const d = 2 * Math.sqrt(1 + o - n - f);
      this._w = (a - u) / d, this._x = (i + s) / d, this._y = 0.25 * d, this._z = (l + c) / d;
    } else {
      const d = 2 * Math.sqrt(1 + f - n - o);
      this._w = (s - i) / d, this._x = (a + u) / d, this._y = (l + c) / d, this._z = 0.25 * d;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(dt(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0) return this;
    const i = Math.min(1, t / n);
    return this.slerp(e, i), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, i = e._y, a = e._z, s = e._w, o = t._x, l = t._y, u = t._z, c = t._w;
    return this._x = n * c + s * o + i * u - a * l, this._y = i * c + s * l + a * o - n * u, this._z = a * c + s * u + n * l - i * o, this._w = s * c - n * o - i * l - a * u, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(e);
    const n = this._x, i = this._y, a = this._z, s = this._w;
    let o = s * e._w + n * e._x + i * e._y + a * e._z;
    if (o < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, o = -o) : this.copy(e), o >= 1)
      return this._w = s, this._x = n, this._y = i, this._z = a, this;
    const l = 1 - o * o;
    if (l <= Number.EPSILON) {
      const d = 1 - t;
      return this._w = d * s + t * this._w, this._x = d * n + t * this._x, this._y = d * i + t * this._y, this._z = d * a + t * this._z, this.normalize(), this;
    }
    const u = Math.sqrt(l), c = Math.atan2(u, o), f = Math.sin((1 - t) * c) / u, h = Math.sin(t * c) / u;
    return this._w = s * f + this._w * h, this._x = n * f + this._x * h, this._y = i * f + this._y * h, this._z = a * f + this._z * h, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = 2 * Math.PI * Math.random(), t = 2 * Math.PI * Math.random(), n = Math.random(), i = Math.sqrt(1 - n), a = Math.sqrt(n);
    return this.set(
      i * Math.sin(e),
      i * Math.cos(e),
      a * Math.sin(t),
      a * Math.cos(t)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class ce {
  constructor(e = 0, t = 0, n = 0) {
    ce.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(lv.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(lv.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = this.z, a = e.elements;
    return this.x = a[0] * t + a[3] * n + a[6] * i, this.y = a[1] * t + a[4] * n + a[7] * i, this.z = a[2] * t + a[5] * n + a[8] * i, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, a = e.elements, s = 1 / (a[3] * t + a[7] * n + a[11] * i + a[15]);
    return this.x = (a[0] * t + a[4] * n + a[8] * i + a[12]) * s, this.y = (a[1] * t + a[5] * n + a[9] * i + a[13]) * s, this.z = (a[2] * t + a[6] * n + a[10] * i + a[14]) * s, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, i = this.z, a = e.x, s = e.y, o = e.z, l = e.w, u = 2 * (s * i - o * n), c = 2 * (o * t - a * i), f = 2 * (a * n - s * t);
    return this.x = t + l * u + s * f - o * c, this.y = n + l * c + o * u - a * f, this.z = i + l * f + a * c - s * u, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, i = this.z, a = e.elements;
    return this.x = a[0] * t + a[4] * n + a[8] * i, this.y = a[1] * t + a[5] * n + a[9] * i, this.z = a[2] * t + a[6] * n + a[10] * i, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = dt(this.x, e.x, t.x), this.y = dt(this.y, e.y, t.y), this.z = dt(this.z, e.z, t.z), this;
  }
  clampScalar(e, t) {
    return this.x = dt(this.x, e, t), this.y = dt(this.y, e, t), this.z = dt(this.z, e, t), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(dt(n, e, t));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, i = e.y, a = e.z, s = t.x, o = t.y, l = t.z;
    return this.x = i * l - a * o, this.y = a * s - n * l, this.z = n * o - i * s, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0) return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return wl.copy(this).projectOnVector(e), this.sub(wl);
  }
  reflect(e) {
    return this.sub(wl.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(dt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
    return t * t + n * n + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const i = Math.sin(t) * e;
    return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = i, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = Math.random() * Math.PI * 2, t = Math.random() * 2 - 1, n = Math.sqrt(1 - t * t);
    return this.x = n * Math.cos(e), this.y = t, this.z = n * Math.sin(e), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const wl = /* @__PURE__ */ new ce(), lv = /* @__PURE__ */ new ls();
class Ei {
  constructor(e = new ce(1 / 0, 1 / 0, 1 / 0), t = new ce(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(an.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(an.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = an.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const n = e.geometry;
    if (n !== void 0) {
      const a = n.getAttribute("position");
      if (t === !0 && a !== void 0 && e.isInstancedMesh !== !0)
        for (let s = 0, o = a.count; s < o; s++)
          e.isMesh === !0 ? e.getVertexPosition(s, an) : an.fromBufferAttribute(a, s), an.applyMatrix4(e.matrixWorld), this.expandByPoint(an);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), So.copy(e.boundingBox)) : (n.boundingBox === null && n.computeBoundingBox(), So.copy(n.boundingBox)), So.applyMatrix4(e.matrixWorld), this.union(So);
    }
    const i = e.children;
    for (let a = 0, s = i.length; a < s; a++)
      this.expandByObject(i[a], t);
    return this;
  }
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y && e.z >= this.min.z && e.z <= this.max.z;
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y && e.max.z >= this.min.z && e.min.z <= this.max.z;
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, an), an.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(ps), Eo.subVectors(this.max, ps), ma.subVectors(e.a, ps), pa.subVectors(e.b, ps), va.subVectors(e.c, ps), Yn.subVectors(pa, ma), Zn.subVectors(va, pa), Ci.subVectors(ma, va);
    let t = [
      0,
      -Yn.z,
      Yn.y,
      0,
      -Zn.z,
      Zn.y,
      0,
      -Ci.z,
      Ci.y,
      Yn.z,
      0,
      -Yn.x,
      Zn.z,
      0,
      -Zn.x,
      Ci.z,
      0,
      -Ci.x,
      -Yn.y,
      Yn.x,
      0,
      -Zn.y,
      Zn.x,
      0,
      -Ci.y,
      Ci.x,
      0
    ];
    return !Sl(t, ma, pa, va, Eo) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !Sl(t, ma, pa, va, Eo)) ? !1 : (Mo.crossVectors(Yn, Zn), t = [Mo.x, Mo.y, Mo.z], Sl(t, ma, pa, va, Eo));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, an).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(an).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (Rn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), Rn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), Rn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), Rn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), Rn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), Rn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), Rn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), Rn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(Rn), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Rn = [
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce(),
  /* @__PURE__ */ new ce()
], an = /* @__PURE__ */ new ce(), So = /* @__PURE__ */ new Ei(), ma = /* @__PURE__ */ new ce(), pa = /* @__PURE__ */ new ce(), va = /* @__PURE__ */ new ce(), Yn = /* @__PURE__ */ new ce(), Zn = /* @__PURE__ */ new ce(), Ci = /* @__PURE__ */ new ce(), ps = /* @__PURE__ */ new ce(), Eo = /* @__PURE__ */ new ce(), Mo = /* @__PURE__ */ new ce(), Ti = /* @__PURE__ */ new ce();
function Sl(r, e, t, n, i) {
  for (let a = 0, s = r.length - 3; a <= s; a += 3) {
    Ti.fromArray(r, a);
    const o = i.x * Math.abs(Ti.x) + i.y * Math.abs(Ti.y) + i.z * Math.abs(Ti.z), l = e.dot(Ti), u = t.dot(Ti), c = n.dot(Ti);
    if (Math.max(-Math.max(l, u, c), Math.min(l, u, c)) > o)
      return !1;
  }
  return !0;
}
const SL = /* @__PURE__ */ new Ei(), vs = /* @__PURE__ */ new ce(), El = /* @__PURE__ */ new ce();
class qf {
  constructor(e = new ce(), t = -1) {
    this.isSphere = !0, this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : SL.setFromPoints(e).getCenter(n);
    let i = 0;
    for (let a = 0, s = e.length; a < s; a++)
      i = Math.max(i, n.distanceToSquared(e[a]));
    return this.radius = Math.sqrt(i), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    vs.subVectors(e, this.center);
    const t = vs.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), i = (n - this.radius) * 0.5;
      this.center.addScaledVector(vs, i / n), this.radius += i;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (El.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(vs.copy(e.center).add(El)), this.expandByPoint(vs.copy(e.center).sub(El))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Fn = /* @__PURE__ */ new ce(), Ml = /* @__PURE__ */ new ce(), Ao = /* @__PURE__ */ new ce(), Kn = /* @__PURE__ */ new ce(), Al = /* @__PURE__ */ new ce(), Do = /* @__PURE__ */ new ce(), Dl = /* @__PURE__ */ new ce();
class Uy {
  constructor(e = new ce(), t = new ce(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, Fn)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = Fn.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (Fn.copy(this.origin).addScaledVector(this.direction, t), Fn.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, i) {
    Ml.copy(e).add(t).multiplyScalar(0.5), Ao.copy(t).sub(e).normalize(), Kn.copy(this.origin).sub(Ml);
    const a = e.distanceTo(t) * 0.5, s = -this.direction.dot(Ao), o = Kn.dot(this.direction), l = -Kn.dot(Ao), u = Kn.lengthSq(), c = Math.abs(1 - s * s);
    let f, h, d, m;
    if (c > 0)
      if (f = s * l - o, h = s * o - l, m = a * c, f >= 0)
        if (h >= -m)
          if (h <= m) {
            const p = 1 / c;
            f *= p, h *= p, d = f * (f + s * h + 2 * o) + h * (s * f + h + 2 * l) + u;
          } else
            h = a, f = Math.max(0, -(s * h + o)), d = -f * f + h * (h + 2 * l) + u;
        else
          h = -a, f = Math.max(0, -(s * h + o)), d = -f * f + h * (h + 2 * l) + u;
      else
        h <= -m ? (f = Math.max(0, -(-s * a + o)), h = f > 0 ? -a : Math.min(Math.max(-a, -l), a), d = -f * f + h * (h + 2 * l) + u) : h <= m ? (f = 0, h = Math.min(Math.max(-a, -l), a), d = h * (h + 2 * l) + u) : (f = Math.max(0, -(s * a + o)), h = f > 0 ? a : Math.min(Math.max(-a, -l), a), d = -f * f + h * (h + 2 * l) + u);
    else
      h = s > 0 ? -a : a, f = Math.max(0, -(s * h + o)), d = -f * f + h * (h + 2 * l) + u;
    return n && n.copy(this.origin).addScaledVector(this.direction, f), i && i.copy(Ml).addScaledVector(Ao, h), d;
  }
  intersectSphere(e, t) {
    Fn.subVectors(e.center, this.origin);
    const n = Fn.dot(this.direction), i = Fn.dot(Fn) - n * n, a = e.radius * e.radius;
    if (i > a) return null;
    const s = Math.sqrt(a - i), o = n - s, l = n + s;
    return l < 0 ? null : o < 0 ? this.at(l, t) : this.at(o, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, i, a, s, o, l;
    const u = 1 / this.direction.x, c = 1 / this.direction.y, f = 1 / this.direction.z, h = this.origin;
    return u >= 0 ? (n = (e.min.x - h.x) * u, i = (e.max.x - h.x) * u) : (n = (e.max.x - h.x) * u, i = (e.min.x - h.x) * u), c >= 0 ? (a = (e.min.y - h.y) * c, s = (e.max.y - h.y) * c) : (a = (e.max.y - h.y) * c, s = (e.min.y - h.y) * c), n > s || a > i || ((a > n || isNaN(n)) && (n = a), (s < i || isNaN(i)) && (i = s), f >= 0 ? (o = (e.min.z - h.z) * f, l = (e.max.z - h.z) * f) : (o = (e.max.z - h.z) * f, l = (e.min.z - h.z) * f), n > l || o > i) || ((o > n || n !== n) && (n = o), (l < i || i !== i) && (i = l), i < 0) ? null : this.at(n >= 0 ? n : i, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, Fn) !== null;
  }
  intersectTriangle(e, t, n, i, a) {
    Al.subVectors(t, e), Do.subVectors(n, e), Dl.crossVectors(Al, Do);
    let s = this.direction.dot(Dl), o;
    if (s > 0) {
      if (i) return null;
      o = 1;
    } else if (s < 0)
      o = -1, s = -s;
    else
      return null;
    Kn.subVectors(this.origin, e);
    const l = o * this.direction.dot(Do.crossVectors(Kn, Do));
    if (l < 0)
      return null;
    const u = o * this.direction.dot(Al.cross(Kn));
    if (u < 0 || l + u > s)
      return null;
    const c = -o * Kn.dot(Dl);
    return c < 0 ? null : this.at(c / s, a);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class mt {
  constructor(e, t, n, i, a, s, o, l, u, c, f, h, d, m, p, g) {
    mt.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, a, s, o, l, u, c, f, h, d, m, p, g);
  }
  set(e, t, n, i, a, s, o, l, u, c, f, h, d, m, p, g) {
    const v = this.elements;
    return v[0] = e, v[4] = t, v[8] = n, v[12] = i, v[1] = a, v[5] = s, v[9] = o, v[13] = l, v[2] = u, v[6] = c, v[10] = f, v[14] = h, v[3] = d, v[7] = m, v[11] = p, v[15] = g, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new mt().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, i = 1 / ga.setFromMatrixColumn(e, 0).length(), a = 1 / ga.setFromMatrixColumn(e, 1).length(), s = 1 / ga.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * a, t[5] = n[5] * a, t[6] = n[6] * a, t[7] = 0, t[8] = n[8] * s, t[9] = n[9] * s, t[10] = n[10] * s, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, i = e.y, a = e.z, s = Math.cos(n), o = Math.sin(n), l = Math.cos(i), u = Math.sin(i), c = Math.cos(a), f = Math.sin(a);
    if (e.order === "XYZ") {
      const h = s * c, d = s * f, m = o * c, p = o * f;
      t[0] = l * c, t[4] = -l * f, t[8] = u, t[1] = d + m * u, t[5] = h - p * u, t[9] = -o * l, t[2] = p - h * u, t[6] = m + d * u, t[10] = s * l;
    } else if (e.order === "YXZ") {
      const h = l * c, d = l * f, m = u * c, p = u * f;
      t[0] = h + p * o, t[4] = m * o - d, t[8] = s * u, t[1] = s * f, t[5] = s * c, t[9] = -o, t[2] = d * o - m, t[6] = p + h * o, t[10] = s * l;
    } else if (e.order === "ZXY") {
      const h = l * c, d = l * f, m = u * c, p = u * f;
      t[0] = h - p * o, t[4] = -s * f, t[8] = m + d * o, t[1] = d + m * o, t[5] = s * c, t[9] = p - h * o, t[2] = -s * u, t[6] = o, t[10] = s * l;
    } else if (e.order === "ZYX") {
      const h = s * c, d = s * f, m = o * c, p = o * f;
      t[0] = l * c, t[4] = m * u - d, t[8] = h * u + p, t[1] = l * f, t[5] = p * u + h, t[9] = d * u - m, t[2] = -u, t[6] = o * l, t[10] = s * l;
    } else if (e.order === "YZX") {
      const h = s * l, d = s * u, m = o * l, p = o * u;
      t[0] = l * c, t[4] = p - h * f, t[8] = m * f + d, t[1] = f, t[5] = s * c, t[9] = -o * c, t[2] = -u * c, t[6] = d * f + m, t[10] = h - p * f;
    } else if (e.order === "XZY") {
      const h = s * l, d = s * u, m = o * l, p = o * u;
      t[0] = l * c, t[4] = -f, t[8] = u * c, t[1] = h * f + p, t[5] = s * c, t[9] = d * f - m, t[2] = m * f - d, t[6] = o * c, t[10] = p * f + h;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(EL, e, ML);
  }
  lookAt(e, t, n) {
    const i = this.elements;
    return Br.subVectors(e, t), Br.lengthSq() === 0 && (Br.z = 1), Br.normalize(), Jn.crossVectors(n, Br), Jn.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Br.x += 1e-4 : Br.z += 1e-4, Br.normalize(), Jn.crossVectors(n, Br)), Jn.normalize(), Co.crossVectors(Br, Jn), i[0] = Jn.x, i[4] = Co.x, i[8] = Br.x, i[1] = Jn.y, i[5] = Co.y, i[9] = Br.y, i[2] = Jn.z, i[6] = Co.z, i[10] = Br.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, a = this.elements, s = n[0], o = n[4], l = n[8], u = n[12], c = n[1], f = n[5], h = n[9], d = n[13], m = n[2], p = n[6], g = n[10], v = n[14], S = n[3], x = n[7], y = n[11], b = n[15], _ = i[0], M = i[4], A = i[8], w = i[12], E = i[1], D = i[5], T = i[9], R = i[13], B = i[2], I = i[6], C = i[10], k = i[14], z = i[3], V = i[7], ee = i[11], re = i[15];
    return a[0] = s * _ + o * E + l * B + u * z, a[4] = s * M + o * D + l * I + u * V, a[8] = s * A + o * T + l * C + u * ee, a[12] = s * w + o * R + l * k + u * re, a[1] = c * _ + f * E + h * B + d * z, a[5] = c * M + f * D + h * I + d * V, a[9] = c * A + f * T + h * C + d * ee, a[13] = c * w + f * R + h * k + d * re, a[2] = m * _ + p * E + g * B + v * z, a[6] = m * M + p * D + g * I + v * V, a[10] = m * A + p * T + g * C + v * ee, a[14] = m * w + p * R + g * k + v * re, a[3] = S * _ + x * E + y * B + b * z, a[7] = S * M + x * D + y * I + b * V, a[11] = S * A + x * T + y * C + b * ee, a[15] = S * w + x * R + y * k + b * re, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], i = e[8], a = e[12], s = e[1], o = e[5], l = e[9], u = e[13], c = e[2], f = e[6], h = e[10], d = e[14], m = e[3], p = e[7], g = e[11], v = e[15];
    return m * (+a * l * f - i * u * f - a * o * h + n * u * h + i * o * d - n * l * d) + p * (+t * l * d - t * u * h + a * s * h - i * s * d + i * u * c - a * l * c) + g * (+t * u * f - t * o * d - a * s * f + n * s * d + a * o * c - n * u * c) + v * (-i * o * c - t * l * f + t * o * h + i * s * f - n * s * h + n * l * c);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const i = this.elements;
    return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], a = e[3], s = e[4], o = e[5], l = e[6], u = e[7], c = e[8], f = e[9], h = e[10], d = e[11], m = e[12], p = e[13], g = e[14], v = e[15], S = f * g * u - p * h * u + p * l * d - o * g * d - f * l * v + o * h * v, x = m * h * u - c * g * u - m * l * d + s * g * d + c * l * v - s * h * v, y = c * p * u - m * f * u + m * o * d - s * p * d - c * o * v + s * f * v, b = m * f * l - c * p * l - m * o * h + s * p * h + c * o * g - s * f * g, _ = t * S + n * x + i * y + a * b;
    if (_ === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const M = 1 / _;
    return e[0] = S * M, e[1] = (p * h * a - f * g * a - p * i * d + n * g * d + f * i * v - n * h * v) * M, e[2] = (o * g * a - p * l * a + p * i * u - n * g * u - o * i * v + n * l * v) * M, e[3] = (f * l * a - o * h * a - f * i * u + n * h * u + o * i * d - n * l * d) * M, e[4] = x * M, e[5] = (c * g * a - m * h * a + m * i * d - t * g * d - c * i * v + t * h * v) * M, e[6] = (m * l * a - s * g * a - m * i * u + t * g * u + s * i * v - t * l * v) * M, e[7] = (s * h * a - c * l * a + c * i * u - t * h * u - s * i * d + t * l * d) * M, e[8] = y * M, e[9] = (m * f * a - c * p * a - m * n * d + t * p * d + c * n * v - t * f * v) * M, e[10] = (s * p * a - m * o * a + m * n * u - t * p * u - s * n * v + t * o * v) * M, e[11] = (c * o * a - s * f * a - c * n * u + t * f * u + s * n * d - t * o * d) * M, e[12] = b * M, e[13] = (c * p * i - m * f * i + m * n * h - t * p * h - c * n * g + t * f * g) * M, e[14] = (m * o * i - s * p * i - m * n * l + t * p * l + s * n * g - t * o * g) * M, e[15] = (s * f * i - c * o * i + c * n * l - t * f * l - s * n * h + t * o * h) * M, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, i = e.y, a = e.z;
    return t[0] *= n, t[4] *= i, t[8] *= a, t[1] *= n, t[5] *= i, t[9] *= a, t[2] *= n, t[6] *= i, t[10] *= a, t[3] *= n, t[7] *= i, t[11] *= a, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, i));
  }
  makeTranslation(e, t, n) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), i = Math.sin(t), a = 1 - n, s = e.x, o = e.y, l = e.z, u = a * s, c = a * o;
    return this.set(
      u * s + n,
      u * o - i * l,
      u * l + i * o,
      0,
      u * o + i * l,
      c * o + n,
      c * l - i * s,
      0,
      u * l - i * o,
      c * l + i * s,
      a * l * l + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, i, a, s) {
    return this.set(
      1,
      n,
      a,
      0,
      e,
      1,
      s,
      0,
      t,
      i,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const i = this.elements, a = t._x, s = t._y, o = t._z, l = t._w, u = a + a, c = s + s, f = o + o, h = a * u, d = a * c, m = a * f, p = s * c, g = s * f, v = o * f, S = l * u, x = l * c, y = l * f, b = n.x, _ = n.y, M = n.z;
    return i[0] = (1 - (p + v)) * b, i[1] = (d + y) * b, i[2] = (m - x) * b, i[3] = 0, i[4] = (d - y) * _, i[5] = (1 - (h + v)) * _, i[6] = (g + S) * _, i[7] = 0, i[8] = (m + x) * M, i[9] = (g - S) * M, i[10] = (1 - (h + p)) * M, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
  }
  decompose(e, t, n) {
    const i = this.elements;
    let a = ga.set(i[0], i[1], i[2]).length();
    const s = ga.set(i[4], i[5], i[6]).length(), o = ga.set(i[8], i[9], i[10]).length();
    this.determinant() < 0 && (a = -a), e.x = i[12], e.y = i[13], e.z = i[14], sn.copy(this);
    const u = 1 / a, c = 1 / s, f = 1 / o;
    return sn.elements[0] *= u, sn.elements[1] *= u, sn.elements[2] *= u, sn.elements[4] *= c, sn.elements[5] *= c, sn.elements[6] *= c, sn.elements[8] *= f, sn.elements[9] *= f, sn.elements[10] *= f, t.setFromRotationMatrix(sn), n.x = a, n.y = s, n.z = o, this;
  }
  makePerspective(e, t, n, i, a, s, o = Gn) {
    const l = this.elements, u = 2 * a / (t - e), c = 2 * a / (n - i), f = (t + e) / (t - e), h = (n + i) / (n - i);
    let d, m;
    if (o === Gn)
      d = -(s + a) / (s - a), m = -2 * s * a / (s - a);
    else if (o === Cu)
      d = -s / (s - a), m = -s * a / (s - a);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + o);
    return l[0] = u, l[4] = 0, l[8] = f, l[12] = 0, l[1] = 0, l[5] = c, l[9] = h, l[13] = 0, l[2] = 0, l[6] = 0, l[10] = d, l[14] = m, l[3] = 0, l[7] = 0, l[11] = -1, l[15] = 0, this;
  }
  makeOrthographic(e, t, n, i, a, s, o = Gn) {
    const l = this.elements, u = 1 / (t - e), c = 1 / (n - i), f = 1 / (s - a), h = (t + e) * u, d = (n + i) * c;
    let m, p;
    if (o === Gn)
      m = (s + a) * f, p = -2 * f;
    else if (o === Cu)
      m = a * f, p = -1 * f;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + o);
    return l[0] = 2 * u, l[4] = 0, l[8] = 0, l[12] = -h, l[1] = 0, l[5] = 2 * c, l[9] = 0, l[13] = -d, l[2] = 0, l[6] = 0, l[10] = p, l[14] = -m, l[3] = 0, l[7] = 0, l[11] = 0, l[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 16; i++)
      if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const ga = /* @__PURE__ */ new ce(), sn = /* @__PURE__ */ new mt(), EL = /* @__PURE__ */ new ce(0, 0, 0), ML = /* @__PURE__ */ new ce(1, 1, 1), Jn = /* @__PURE__ */ new ce(), Co = /* @__PURE__ */ new ce(), Br = /* @__PURE__ */ new ce(), cv = /* @__PURE__ */ new mt(), fv = /* @__PURE__ */ new ls();
class An {
  constructor(e = 0, t = 0, n = 0, i = An.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = i;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, i = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const i = e.elements, a = i[0], s = i[4], o = i[8], l = i[1], u = i[5], c = i[9], f = i[2], h = i[6], d = i[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(dt(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(-c, d), this._z = Math.atan2(-s, a)) : (this._x = Math.atan2(h, u), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-dt(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._y = Math.atan2(o, d), this._z = Math.atan2(l, u)) : (this._y = Math.atan2(-f, a), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(dt(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._y = Math.atan2(-f, d), this._z = Math.atan2(-s, u)) : (this._y = 0, this._z = Math.atan2(l, a));
        break;
      case "ZYX":
        this._y = Math.asin(-dt(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._x = Math.atan2(h, d), this._z = Math.atan2(l, a)) : (this._x = 0, this._z = Math.atan2(-s, u));
        break;
      case "YZX":
        this._z = Math.asin(dt(l, -1, 1)), Math.abs(l) < 0.9999999 ? (this._x = Math.atan2(-c, u), this._y = Math.atan2(-f, a)) : (this._x = 0, this._y = Math.atan2(o, d));
        break;
      case "XZY":
        this._z = Math.asin(-dt(s, -1, 1)), Math.abs(s) < 0.9999999 ? (this._x = Math.atan2(h, u), this._y = Math.atan2(o, a)) : (this._x = Math.atan2(-c, d), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return cv.makeRotationFromQuaternion(e), this.setFromRotationMatrix(cv, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return fv.setFromEuler(this), this.setFromQuaternion(fv, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
An.DEFAULT_ORDER = "XYZ";
class Wf {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let AL = 0;
const hv = /* @__PURE__ */ new ce(), ya = /* @__PURE__ */ new ls(), On = /* @__PURE__ */ new mt(), To = /* @__PURE__ */ new ce(), gs = /* @__PURE__ */ new ce(), DL = /* @__PURE__ */ new ce(), CL = /* @__PURE__ */ new ls(), dv = /* @__PURE__ */ new ce(1, 0, 0), mv = /* @__PURE__ */ new ce(0, 1, 0), pv = /* @__PURE__ */ new ce(0, 0, 1), vv = { type: "added" }, TL = { type: "removed" }, xa = { type: "childadded", child: null }, Cl = { type: "childremoved", child: null };
class nr extends os {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: AL++ }), this.uuid = us(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = nr.DEFAULT_UP.clone();
    const e = new ce(), t = new An(), n = new ls(), i = new ce(1, 1, 1);
    function a() {
      n.setFromEuler(t, !1);
    }
    function s() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(a), n._onChange(s), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      modelViewMatrix: {
        value: new mt()
      },
      normalMatrix: {
        value: new ot()
      }
    }), this.matrix = new mt(), this.matrixWorld = new mt(), this.matrixAutoUpdate = nr.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = nr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new Wf(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return ya.setFromAxisAngle(e, t), this.quaternion.multiply(ya), this;
  }
  rotateOnWorldAxis(e, t) {
    return ya.setFromAxisAngle(e, t), this.quaternion.premultiply(ya), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(dv, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(mv, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(pv, e);
  }
  translateOnAxis(e, t) {
    return hv.copy(e).applyQuaternion(this.quaternion), this.position.add(hv.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(dv, e);
  }
  translateY(e) {
    return this.translateOnAxis(mv, e);
  }
  translateZ(e) {
    return this.translateOnAxis(pv, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(On.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? To.copy(e) : To.set(e, t, n);
    const i = this.parent;
    this.updateWorldMatrix(!0, !1), gs.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? On.lookAt(gs, To, this.up) : On.lookAt(To, gs, this.up), this.quaternion.setFromRotationMatrix(On), i && (On.extractRotation(i.matrixWorld), ya.setFromRotationMatrix(On), this.quaternion.premultiply(ya.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent(vv), xa.child = e, this.dispatchEvent(xa), xa.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(TL), Cl.child = e, this.dispatchEvent(Cl), Cl.child = null), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), On.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), On.multiply(e.parent.matrixWorld)), e.applyMatrix4(On), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(!1, !0), e.dispatchEvent(vv), xa.child = e, this.dispatchEvent(xa), xa.child = null, this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t) return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      const s = this.children[n].getObjectByProperty(e, t);
      if (s !== void 0)
        return s;
    }
  }
  getObjectsByProperty(e, t, n = []) {
    this[e] === t && n.push(this);
    const i = this.children;
    for (let a = 0, s = i.length; a < s; a++)
      i[a].getObjectsByProperty(e, t, n);
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(gs, e, DL), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(gs, CL, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1) return;
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].updateMatrixWorld(e);
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), t === !0) {
      const i = this.children;
      for (let a = 0, s = i.length; a < s; a++)
        i[a].updateWorldMatrix(!1, !0);
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const i = {};
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (i.type = "BatchedMesh", i.perObjectFrustumCulled = this.perObjectFrustumCulled, i.sortObjects = this.sortObjects, i.drawRanges = this._drawRanges, i.reservedRanges = this._reservedRanges, i.visibility = this._visibility, i.active = this._active, i.bounds = this._bounds.map((o) => ({
      boxInitialized: o.boxInitialized,
      boxMin: o.box.min.toArray(),
      boxMax: o.box.max.toArray(),
      sphereInitialized: o.sphereInitialized,
      sphereRadius: o.sphere.radius,
      sphereCenter: o.sphere.center.toArray()
    })), i.maxInstanceCount = this._maxInstanceCount, i.maxVertexCount = this._maxVertexCount, i.maxIndexCount = this._maxIndexCount, i.geometryInitialized = this._geometryInitialized, i.geometryCount = this._geometryCount, i.matricesTexture = this._matricesTexture.toJSON(e), this._colorsTexture !== null && (i.colorsTexture = this._colorsTexture.toJSON(e)), this.boundingSphere !== null && (i.boundingSphere = {
      center: i.boundingSphere.center.toArray(),
      radius: i.boundingSphere.radius
    }), this.boundingBox !== null && (i.boundingBox = {
      min: i.boundingBox.min.toArray(),
      max: i.boundingBox.max.toArray()
    }));
    function a(o, l) {
      return o[l.uuid] === void 0 && (o[l.uuid] = l.toJSON(e)), l.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (i.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = a(e.geometries, this.geometry);
      const o = this.geometry.parameters;
      if (o !== void 0 && o.shapes !== void 0) {
        const l = o.shapes;
        if (Array.isArray(l))
          for (let u = 0, c = l.length; u < c; u++) {
            const f = l[u];
            a(e.shapes, f);
          }
        else
          a(e.shapes, l);
      }
    }
    if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (a(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const o = [];
        for (let l = 0, u = this.material.length; l < u; l++)
          o.push(a(e.materials, this.material[l]));
        i.material = o;
      } else
        i.material = a(e.materials, this.material);
    if (this.children.length > 0) {
      i.children = [];
      for (let o = 0; o < this.children.length; o++)
        i.children.push(this.children[o].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let o = 0; o < this.animations.length; o++) {
        const l = this.animations[o];
        i.animations.push(a(e.animations, l));
      }
    }
    if (t) {
      const o = s(e.geometries), l = s(e.materials), u = s(e.textures), c = s(e.images), f = s(e.shapes), h = s(e.skeletons), d = s(e.animations), m = s(e.nodes);
      o.length > 0 && (n.geometries = o), l.length > 0 && (n.materials = l), u.length > 0 && (n.textures = u), c.length > 0 && (n.images = c), f.length > 0 && (n.shapes = f), h.length > 0 && (n.skeletons = h), d.length > 0 && (n.animations = d), m.length > 0 && (n.nodes = m);
    }
    return n.object = i, n;
    function s(o) {
      const l = [];
      for (const u in o) {
        const c = o[u];
        delete c.metadata, l.push(c);
      }
      return l;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const i = e.children[n];
        this.add(i.clone());
      }
    return this;
  }
}
nr.DEFAULT_UP = /* @__PURE__ */ new ce(0, 1, 0);
nr.DEFAULT_MATRIX_AUTO_UPDATE = !0;
nr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const on = /* @__PURE__ */ new ce(), Pn = /* @__PURE__ */ new ce(), Tl = /* @__PURE__ */ new ce(), Bn = /* @__PURE__ */ new ce(), _a = /* @__PURE__ */ new ce(), ba = /* @__PURE__ */ new ce(), gv = /* @__PURE__ */ new ce(), Nl = /* @__PURE__ */ new ce(), Rl = /* @__PURE__ */ new ce(), Fl = /* @__PURE__ */ new ce(), Ol = /* @__PURE__ */ new Ht(), Pl = /* @__PURE__ */ new Ht(), Bl = /* @__PURE__ */ new Ht();
class ln {
  constructor(e = new ce(), t = new ce(), n = new ce()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, i) {
    i.subVectors(n, t), on.subVectors(e, t), i.cross(on);
    const a = i.lengthSq();
    return a > 0 ? i.multiplyScalar(1 / Math.sqrt(a)) : i.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, i, a) {
    on.subVectors(i, t), Pn.subVectors(n, t), Tl.subVectors(e, t);
    const s = on.dot(on), o = on.dot(Pn), l = on.dot(Tl), u = Pn.dot(Pn), c = Pn.dot(Tl), f = s * u - o * o;
    if (f === 0)
      return a.set(0, 0, 0), null;
    const h = 1 / f, d = (u * l - o * c) * h, m = (s * c - o * l) * h;
    return a.set(1 - d - m, m, d);
  }
  static containsPoint(e, t, n, i) {
    return this.getBarycoord(e, t, n, i, Bn) === null ? !1 : Bn.x >= 0 && Bn.y >= 0 && Bn.x + Bn.y <= 1;
  }
  static getInterpolation(e, t, n, i, a, s, o, l) {
    return this.getBarycoord(e, t, n, i, Bn) === null ? (l.x = 0, l.y = 0, "z" in l && (l.z = 0), "w" in l && (l.w = 0), null) : (l.setScalar(0), l.addScaledVector(a, Bn.x), l.addScaledVector(s, Bn.y), l.addScaledVector(o, Bn.z), l);
  }
  static getInterpolatedAttribute(e, t, n, i, a, s) {
    return Ol.setScalar(0), Pl.setScalar(0), Bl.setScalar(0), Ol.fromBufferAttribute(e, t), Pl.fromBufferAttribute(e, n), Bl.fromBufferAttribute(e, i), s.setScalar(0), s.addScaledVector(Ol, a.x), s.addScaledVector(Pl, a.y), s.addScaledVector(Bl, a.z), s;
  }
  static isFrontFacing(e, t, n, i) {
    return on.subVectors(n, t), Pn.subVectors(e, t), on.cross(Pn).dot(i) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, i) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
  }
  setFromAttributeAndIndices(e, t, n, i) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return on.subVectors(this.c, this.b), Pn.subVectors(this.a, this.b), on.cross(Pn).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return ln.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return ln.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getInterpolation(e, t, n, i, a) {
    return ln.getInterpolation(e, this.a, this.b, this.c, t, n, i, a);
  }
  containsPoint(e) {
    return ln.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return ln.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, i = this.b, a = this.c;
    let s, o;
    _a.subVectors(i, n), ba.subVectors(a, n), Nl.subVectors(e, n);
    const l = _a.dot(Nl), u = ba.dot(Nl);
    if (l <= 0 && u <= 0)
      return t.copy(n);
    Rl.subVectors(e, i);
    const c = _a.dot(Rl), f = ba.dot(Rl);
    if (c >= 0 && f <= c)
      return t.copy(i);
    const h = l * f - c * u;
    if (h <= 0 && l >= 0 && c <= 0)
      return s = l / (l - c), t.copy(n).addScaledVector(_a, s);
    Fl.subVectors(e, a);
    const d = _a.dot(Fl), m = ba.dot(Fl);
    if (m >= 0 && d <= m)
      return t.copy(a);
    const p = d * u - l * m;
    if (p <= 0 && u >= 0 && m <= 0)
      return o = u / (u - m), t.copy(n).addScaledVector(ba, o);
    const g = c * m - d * f;
    if (g <= 0 && f - c >= 0 && d - m >= 0)
      return gv.subVectors(a, i), o = (f - c) / (f - c + (d - m)), t.copy(i).addScaledVector(gv, o);
    const v = 1 / (g + p + h);
    return s = p * v, o = h * v, t.copy(n).addScaledVector(_a, s).addScaledVector(ba, o);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const zy = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Qn = { h: 0, s: 0, l: 0 }, No = { h: 0, s: 0, l: 0 };
function Il(r, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? r + (e - r) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? r + (e - r) * 6 * (2 / 3 - t) : r;
}
class wt {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const i = e;
      i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
    } else
      this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = Kr) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, xt.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, i = xt.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, xt.toWorkingColorSpace(this, i), this;
  }
  setHSL(e, t, n, i = xt.workingColorSpace) {
    if (e = Vf(e, 1), t = dt(t, 0, 1), n = dt(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const a = n <= 0.5 ? n * (1 + t) : n + t - n * t, s = 2 * n - a;
      this.r = Il(s, a, e + 1 / 3), this.g = Il(s, a, e), this.b = Il(s, a, e - 1 / 3);
    }
    return xt.toWorkingColorSpace(this, i), this;
  }
  setStyle(e, t = Kr) {
    function n(a) {
      a !== void 0 && parseFloat(a) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let i;
    if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let a;
      const s = i[1], o = i[2];
      switch (s) {
        case "rgb":
        case "rgba":
          if (a = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
            return n(a[4]), this.setRGB(
              Math.min(255, parseInt(a[1], 10)) / 255,
              Math.min(255, parseInt(a[2], 10)) / 255,
              Math.min(255, parseInt(a[3], 10)) / 255,
              t
            );
          if (a = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
            return n(a[4]), this.setRGB(
              Math.min(100, parseInt(a[1], 10)) / 100,
              Math.min(100, parseInt(a[2], 10)) / 100,
              Math.min(100, parseInt(a[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (a = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
            return n(a[4]), this.setHSL(
              parseFloat(a[1]) / 360,
              parseFloat(a[2]) / 100,
              parseFloat(a[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const a = i[1], s = a.length;
      if (s === 3)
        return this.setRGB(
          parseInt(a.charAt(0), 16) / 15,
          parseInt(a.charAt(1), 16) / 15,
          parseInt(a.charAt(2), 16) / 15,
          t
        );
      if (s === 6)
        return this.setHex(parseInt(a, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = Kr) {
    const n = zy[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = $n(e.r), this.g = $n(e.g), this.b = $n(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = za(e.r), this.g = za(e.g), this.b = za(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = Kr) {
    return xt.fromWorkingColorSpace(dr.copy(this), e), Math.round(dt(dr.r * 255, 0, 255)) * 65536 + Math.round(dt(dr.g * 255, 0, 255)) * 256 + Math.round(dt(dr.b * 255, 0, 255));
  }
  getHexString(e = Kr) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = xt.workingColorSpace) {
    xt.fromWorkingColorSpace(dr.copy(this), t);
    const n = dr.r, i = dr.g, a = dr.b, s = Math.max(n, i, a), o = Math.min(n, i, a);
    let l, u;
    const c = (o + s) / 2;
    if (o === s)
      l = 0, u = 0;
    else {
      const f = s - o;
      switch (u = c <= 0.5 ? f / (s + o) : f / (2 - s - o), s) {
        case n:
          l = (i - a) / f + (i < a ? 6 : 0);
          break;
        case i:
          l = (a - n) / f + 2;
          break;
        case a:
          l = (n - i) / f + 4;
          break;
      }
      l /= 6;
    }
    return e.h = l, e.s = u, e.l = c, e;
  }
  getRGB(e, t = xt.workingColorSpace) {
    return xt.fromWorkingColorSpace(dr.copy(this), t), e.r = dr.r, e.g = dr.g, e.b = dr.b, e;
  }
  getStyle(e = Kr) {
    xt.fromWorkingColorSpace(dr.copy(this), e);
    const t = dr.r, n = dr.g, i = dr.b;
    return e !== Kr ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Qn), this.setHSL(Qn.h + e, Qn.s + t, Qn.l + n);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(Qn), e.getHSL(No);
    const n = Ms(Qn.h, No.h, t), i = Ms(Qn.s, No.s, t), a = Ms(Qn.l, No.l, t);
    return this.setHSL(n, i, a), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, i = this.b, a = e.elements;
    return this.r = a[0] * t + a[3] * n + a[6] * i, this.g = a[1] * t + a[4] * n + a[7] * i, this.b = a[2] * t + a[5] * n + a[8] * i, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const dr = /* @__PURE__ */ new wt();
wt.NAMES = zy;
let NL = 0;
class Vs extends os {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: NL++ }), this.uuid = us(), this.name = "", this.type = "Material", this.blending = La, this.side = gi, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = _c, this.blendDst = bc, this.blendEquation = zi, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new wt(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Xa, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = rv, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = ha, this.stencilZFail = ha, this.stencilZPass = ha, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const i = this[t];
        if (i === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (n.dispersion = this.dispersion), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapRotation !== void 0 && (n.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== La && (n.blending = this.blending), this.side !== gi && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), this.blendSrc !== _c && (n.blendSrc = this.blendSrc), this.blendDst !== bc && (n.blendDst = this.blendDst), this.blendEquation !== zi && (n.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha), this.depthFunc !== Xa && (n.depthFunc = this.depthFunc), this.depthTest === !1 && (n.depthTest = this.depthTest), this.depthWrite === !1 && (n.depthWrite = this.depthWrite), this.colorWrite === !1 && (n.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== rv && (n.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (n.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== ha && (n.stencilFail = this.stencilFail), this.stencilZFail !== ha && (n.stencilZFail = this.stencilZFail), this.stencilZPass !== ha && (n.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (n.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function i(a) {
      const s = [];
      for (const o in a) {
        const l = a[o];
        delete l.metadata, s.push(l);
      }
      return s;
    }
    if (t) {
      const a = i(e.textures), s = i(e.images);
      a.length > 0 && (n.textures = a), s.length > 0 && (n.images = s);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const i = t.length;
      n = new Array(i);
      for (let a = 0; a !== i; ++a)
        n[a] = t[a].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
}
class Wu extends Vs {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new wt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new An(), this.combine = _y, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const $t = /* @__PURE__ */ new ce(), Ro = /* @__PURE__ */ new ft();
class Sn {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = nv, this.updateRanges = [], this.gpuType = Hn, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let i = 0, a = this.itemSize; i < a; i++)
      this.array[e + i] = t.array[n + i];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Ro.fromBufferAttribute(this, t), Ro.applyMatrix3(e), this.setXY(t, Ro.x, Ro.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        $t.fromBufferAttribute(this, t), $t.applyMatrix3(e), this.setXYZ(t, $t.x, $t.y, $t.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      $t.fromBufferAttribute(this, t), $t.applyMatrix4(e), this.setXYZ(t, $t.x, $t.y, $t.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      $t.fromBufferAttribute(this, t), $t.applyNormalMatrix(e), this.setXYZ(t, $t.x, $t.y, $t.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      $t.fromBufferAttribute(this, t), $t.transformDirection(e), this.setXYZ(t, $t.x, $t.y, $t.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = Da(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = _r(n, this.array)), this.array[e * this.itemSize + t] = n, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Da(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = _r(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Da(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = _r(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Da(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = _r(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Da(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = _r(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = _r(t, this.array), n = _r(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, i) {
    return e *= this.itemSize, this.normalized && (t = _r(t, this.array), n = _r(n, this.array), i = _r(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
  }
  setXYZW(e, t, n, i, a) {
    return e *= this.itemSize, this.normalized && (t = _r(t, this.array), n = _r(n, this.array), i = _r(i, this.array), a = _r(a, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = a, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== nv && (e.usage = this.usage), e;
  }
}
class ky extends Sn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class Hy extends Sn {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class ur extends Sn {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
let RL = 0;
const Xr = /* @__PURE__ */ new mt(), Ll = /* @__PURE__ */ new nr(), wa = /* @__PURE__ */ new ce(), Ir = /* @__PURE__ */ new Ei(), ys = /* @__PURE__ */ new Ei(), tr = /* @__PURE__ */ new ce();
class yn extends os {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: RL++ }), this.uuid = us(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (By(e) ? Hy : ky)(e, 1) : this.index = e, this;
  }
  setIndirect(e) {
    return this.indirect = e, this;
  }
  getIndirect() {
    return this.indirect;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const a = new ot().getNormalMatrix(e);
      n.applyNormalMatrix(a), n.needsUpdate = !0;
    }
    const i = this.attributes.tangent;
    return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return Xr.makeRotationFromQuaternion(e), this.applyMatrix4(Xr), this;
  }
  rotateX(e) {
    return Xr.makeRotationX(e), this.applyMatrix4(Xr), this;
  }
  rotateY(e) {
    return Xr.makeRotationY(e), this.applyMatrix4(Xr), this;
  }
  rotateZ(e) {
    return Xr.makeRotationZ(e), this.applyMatrix4(Xr), this;
  }
  translate(e, t, n) {
    return Xr.makeTranslation(e, t, n), this.applyMatrix4(Xr), this;
  }
  scale(e, t, n) {
    return Xr.makeScale(e, t, n), this.applyMatrix4(Xr), this;
  }
  lookAt(e) {
    return Ll.lookAt(e), Ll.updateMatrix(), this.applyMatrix4(Ll.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(wa).negate(), this.translate(wa.x, wa.y, wa.z), this;
  }
  setFromPoints(e) {
    const t = this.getAttribute("position");
    if (t === void 0) {
      const n = [];
      for (let i = 0, a = e.length; i < a; i++) {
        const s = e[i];
        n.push(s.x, s.y, s.z || 0);
      }
      this.setAttribute("position", new ur(n, 3));
    } else {
      const n = Math.min(e.length, t.count);
      for (let i = 0; i < n; i++) {
        const a = e[i];
        t.setXYZ(i, a.x, a.y, a.z || 0);
      }
      e.length > t.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), t.needsUpdate = !0;
    }
    return this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ei());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new ce(-1 / 0, -1 / 0, -1 / 0),
        new ce(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, i = t.length; n < i; n++) {
          const a = t[n];
          Ir.setFromBufferAttribute(a), this.morphTargetsRelative ? (tr.addVectors(this.boundingBox.min, Ir.min), this.boundingBox.expandByPoint(tr), tr.addVectors(this.boundingBox.max, Ir.max), this.boundingBox.expandByPoint(tr)) : (this.boundingBox.expandByPoint(Ir.min), this.boundingBox.expandByPoint(Ir.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new qf());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new ce(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (Ir.setFromBufferAttribute(e), t)
        for (let a = 0, s = t.length; a < s; a++) {
          const o = t[a];
          ys.setFromBufferAttribute(o), this.morphTargetsRelative ? (tr.addVectors(Ir.min, ys.min), Ir.expandByPoint(tr), tr.addVectors(Ir.max, ys.max), Ir.expandByPoint(tr)) : (Ir.expandByPoint(ys.min), Ir.expandByPoint(ys.max));
        }
      Ir.getCenter(n);
      let i = 0;
      for (let a = 0, s = e.count; a < s; a++)
        tr.fromBufferAttribute(e, a), i = Math.max(i, n.distanceToSquared(tr));
      if (t)
        for (let a = 0, s = t.length; a < s; a++) {
          const o = t[a], l = this.morphTargetsRelative;
          for (let u = 0, c = o.count; u < c; u++)
            tr.fromBufferAttribute(o, u), l && (wa.fromBufferAttribute(e, u), tr.add(wa)), i = Math.max(i, n.distanceToSquared(tr));
        }
      this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = t.position, i = t.normal, a = t.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Sn(new Float32Array(4 * n.count), 4));
    const s = this.getAttribute("tangent"), o = [], l = [];
    for (let A = 0; A < n.count; A++)
      o[A] = new ce(), l[A] = new ce();
    const u = new ce(), c = new ce(), f = new ce(), h = new ft(), d = new ft(), m = new ft(), p = new ce(), g = new ce();
    function v(A, w, E) {
      u.fromBufferAttribute(n, A), c.fromBufferAttribute(n, w), f.fromBufferAttribute(n, E), h.fromBufferAttribute(a, A), d.fromBufferAttribute(a, w), m.fromBufferAttribute(a, E), c.sub(u), f.sub(u), d.sub(h), m.sub(h);
      const D = 1 / (d.x * m.y - m.x * d.y);
      isFinite(D) && (p.copy(c).multiplyScalar(m.y).addScaledVector(f, -d.y).multiplyScalar(D), g.copy(f).multiplyScalar(d.x).addScaledVector(c, -m.x).multiplyScalar(D), o[A].add(p), o[w].add(p), o[E].add(p), l[A].add(g), l[w].add(g), l[E].add(g));
    }
    let S = this.groups;
    S.length === 0 && (S = [{
      start: 0,
      count: e.count
    }]);
    for (let A = 0, w = S.length; A < w; ++A) {
      const E = S[A], D = E.start, T = E.count;
      for (let R = D, B = D + T; R < B; R += 3)
        v(
          e.getX(R + 0),
          e.getX(R + 1),
          e.getX(R + 2)
        );
    }
    const x = new ce(), y = new ce(), b = new ce(), _ = new ce();
    function M(A) {
      b.fromBufferAttribute(i, A), _.copy(b);
      const w = o[A];
      x.copy(w), x.sub(b.multiplyScalar(b.dot(w))).normalize(), y.crossVectors(_, w);
      const D = y.dot(l[A]) < 0 ? -1 : 1;
      s.setXYZW(A, x.x, x.y, x.z, D);
    }
    for (let A = 0, w = S.length; A < w; ++A) {
      const E = S[A], D = E.start, T = E.count;
      for (let R = D, B = D + T; R < B; R += 3)
        M(e.getX(R + 0)), M(e.getX(R + 1)), M(e.getX(R + 2));
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new Sn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let h = 0, d = n.count; h < d; h++)
          n.setXYZ(h, 0, 0, 0);
      const i = new ce(), a = new ce(), s = new ce(), o = new ce(), l = new ce(), u = new ce(), c = new ce(), f = new ce();
      if (e)
        for (let h = 0, d = e.count; h < d; h += 3) {
          const m = e.getX(h + 0), p = e.getX(h + 1), g = e.getX(h + 2);
          i.fromBufferAttribute(t, m), a.fromBufferAttribute(t, p), s.fromBufferAttribute(t, g), c.subVectors(s, a), f.subVectors(i, a), c.cross(f), o.fromBufferAttribute(n, m), l.fromBufferAttribute(n, p), u.fromBufferAttribute(n, g), o.add(c), l.add(c), u.add(c), n.setXYZ(m, o.x, o.y, o.z), n.setXYZ(p, l.x, l.y, l.z), n.setXYZ(g, u.x, u.y, u.z);
        }
      else
        for (let h = 0, d = t.count; h < d; h += 3)
          i.fromBufferAttribute(t, h + 0), a.fromBufferAttribute(t, h + 1), s.fromBufferAttribute(t, h + 2), c.subVectors(s, a), f.subVectors(i, a), c.cross(f), n.setXYZ(h + 0, c.x, c.y, c.z), n.setXYZ(h + 1, c.x, c.y, c.z), n.setXYZ(h + 2, c.x, c.y, c.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      tr.fromBufferAttribute(e, t), tr.normalize(), e.setXYZ(t, tr.x, tr.y, tr.z);
  }
  toNonIndexed() {
    function e(o, l) {
      const u = o.array, c = o.itemSize, f = o.normalized, h = new u.constructor(l.length * c);
      let d = 0, m = 0;
      for (let p = 0, g = l.length; p < g; p++) {
        o.isInterleavedBufferAttribute ? d = l[p] * o.data.stride + o.offset : d = l[p] * c;
        for (let v = 0; v < c; v++)
          h[m++] = u[d++];
      }
      return new Sn(h, c, f);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new yn(), n = this.index.array, i = this.attributes;
    for (const o in i) {
      const l = i[o], u = e(l, n);
      t.setAttribute(o, u);
    }
    const a = this.morphAttributes;
    for (const o in a) {
      const l = [], u = a[o];
      for (let c = 0, f = u.length; c < f; c++) {
        const h = u[c], d = e(h, n);
        l.push(d);
      }
      t.morphAttributes[o] = l;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const s = this.groups;
    for (let o = 0, l = s.length; o < l; o++) {
      const u = s[o];
      t.addGroup(u.start, u.count, u.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const l = this.parameters;
      for (const u in l)
        l[u] !== void 0 && (e[u] = l[u]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const l in n) {
      const u = n[l];
      e.data.attributes[l] = u.toJSON(e.data);
    }
    const i = {};
    let a = !1;
    for (const l in this.morphAttributes) {
      const u = this.morphAttributes[l], c = [];
      for (let f = 0, h = u.length; f < h; f++) {
        const d = u[f];
        c.push(d.toJSON(e.data));
      }
      c.length > 0 && (i[l] = c, a = !0);
    }
    a && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const s = this.groups;
    s.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(s)));
    const o = this.boundingSphere;
    return o !== null && (e.data.boundingSphere = {
      center: o.center.toArray(),
      radius: o.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const i = e.attributes;
    for (const u in i) {
      const c = i[u];
      this.setAttribute(u, c.clone(t));
    }
    const a = e.morphAttributes;
    for (const u in a) {
      const c = [], f = a[u];
      for (let h = 0, d = f.length; h < d; h++)
        c.push(f[h].clone(t));
      this.morphAttributes[u] = c;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const s = e.groups;
    for (let u = 0, c = s.length; u < c; u++) {
      const f = s[u];
      this.addGroup(f.start, f.count, f.materialIndex);
    }
    const o = e.boundingBox;
    o !== null && (this.boundingBox = o.clone());
    const l = e.boundingSphere;
    return l !== null && (this.boundingSphere = l.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const yv = /* @__PURE__ */ new mt(), Ni = /* @__PURE__ */ new Uy(), Fo = /* @__PURE__ */ new qf(), xv = /* @__PURE__ */ new ce(), Oo = /* @__PURE__ */ new ce(), Po = /* @__PURE__ */ new ce(), Bo = /* @__PURE__ */ new ce(), Ul = /* @__PURE__ */ new ce(), Io = /* @__PURE__ */ new ce(), _v = /* @__PURE__ */ new ce(), Lo = /* @__PURE__ */ new ce();
class Vt extends nr {
  constructor(e = new yn(), t = new Wu()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let a = 0, s = i.length; a < s; a++) {
          const o = i[a].name || String(a);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = a;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, i = n.attributes.position, a = n.morphAttributes.position, s = n.morphTargetsRelative;
    t.fromBufferAttribute(i, e);
    const o = this.morphTargetInfluences;
    if (a && o) {
      Io.set(0, 0, 0);
      for (let l = 0, u = a.length; l < u; l++) {
        const c = o[l], f = a[l];
        c !== 0 && (Ul.fromBufferAttribute(f, e), s ? Io.addScaledVector(Ul, c) : Io.addScaledVector(Ul.sub(t), c));
      }
      t.add(Io);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.material, a = this.matrixWorld;
    i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), Fo.copy(n.boundingSphere), Fo.applyMatrix4(a), Ni.copy(e.ray).recast(e.near), !(Fo.containsPoint(Ni.origin) === !1 && (Ni.intersectSphere(Fo, xv) === null || Ni.origin.distanceToSquared(xv) > (e.far - e.near) ** 2)) && (yv.copy(a).invert(), Ni.copy(e.ray).applyMatrix4(yv), !(n.boundingBox !== null && Ni.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Ni)));
  }
  _computeIntersections(e, t, n) {
    let i;
    const a = this.geometry, s = this.material, o = a.index, l = a.attributes.position, u = a.attributes.uv, c = a.attributes.uv1, f = a.attributes.normal, h = a.groups, d = a.drawRange;
    if (o !== null)
      if (Array.isArray(s))
        for (let m = 0, p = h.length; m < p; m++) {
          const g = h[m], v = s[g.materialIndex], S = Math.max(g.start, d.start), x = Math.min(o.count, Math.min(g.start + g.count, d.start + d.count));
          for (let y = S, b = x; y < b; y += 3) {
            const _ = o.getX(y), M = o.getX(y + 1), A = o.getX(y + 2);
            i = Uo(this, v, e, n, u, c, f, _, M, A), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
          }
        }
      else {
        const m = Math.max(0, d.start), p = Math.min(o.count, d.start + d.count);
        for (let g = m, v = p; g < v; g += 3) {
          const S = o.getX(g), x = o.getX(g + 1), y = o.getX(g + 2);
          i = Uo(this, s, e, n, u, c, f, S, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
        }
      }
    else if (l !== void 0)
      if (Array.isArray(s))
        for (let m = 0, p = h.length; m < p; m++) {
          const g = h[m], v = s[g.materialIndex], S = Math.max(g.start, d.start), x = Math.min(l.count, Math.min(g.start + g.count, d.start + d.count));
          for (let y = S, b = x; y < b; y += 3) {
            const _ = y, M = y + 1, A = y + 2;
            i = Uo(this, v, e, n, u, c, f, _, M, A), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
          }
        }
      else {
        const m = Math.max(0, d.start), p = Math.min(l.count, d.start + d.count);
        for (let g = m, v = p; g < v; g += 3) {
          const S = g, x = g + 1, y = g + 2;
          i = Uo(this, s, e, n, u, c, f, S, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
        }
      }
  }
}
function FL(r, e, t, n, i, a, s, o) {
  let l;
  if (e.side === vr ? l = n.intersectTriangle(s, a, i, !0, o) : l = n.intersectTriangle(i, a, s, e.side === gi, o), l === null) return null;
  Lo.copy(o), Lo.applyMatrix4(r.matrixWorld);
  const u = t.ray.origin.distanceTo(Lo);
  return u < t.near || u > t.far ? null : {
    distance: u,
    point: Lo.clone(),
    object: r
  };
}
function Uo(r, e, t, n, i, a, s, o, l, u) {
  r.getVertexPosition(o, Oo), r.getVertexPosition(l, Po), r.getVertexPosition(u, Bo);
  const c = FL(r, e, t, n, Oo, Po, Bo, _v);
  if (c) {
    const f = new ce();
    ln.getBarycoord(_v, Oo, Po, Bo, f), i && (c.uv = ln.getInterpolatedAttribute(i, o, l, u, f, new ft())), a && (c.uv1 = ln.getInterpolatedAttribute(a, o, l, u, f, new ft())), s && (c.normal = ln.getInterpolatedAttribute(s, o, l, u, f, new ce()), c.normal.dot(n.direction) > 0 && c.normal.multiplyScalar(-1));
    const h = {
      a: o,
      b: l,
      c: u,
      normal: new ce(),
      materialIndex: 0
    };
    ln.getNormal(Oo, Po, Bo, h.normal), c.face = h, c.barycoord = f;
  }
  return c;
}
class qs extends yn {
  constructor(e = 1, t = 1, n = 1, i = 1, a = 1, s = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: i,
      heightSegments: a,
      depthSegments: s
    };
    const o = this;
    i = Math.floor(i), a = Math.floor(a), s = Math.floor(s);
    const l = [], u = [], c = [], f = [];
    let h = 0, d = 0;
    m("z", "y", "x", -1, -1, n, t, e, s, a, 0), m("z", "y", "x", 1, -1, n, t, -e, s, a, 1), m("x", "z", "y", 1, 1, e, n, t, i, s, 2), m("x", "z", "y", 1, -1, e, n, -t, i, s, 3), m("x", "y", "z", 1, -1, e, t, n, i, a, 4), m("x", "y", "z", -1, -1, e, t, -n, i, a, 5), this.setIndex(l), this.setAttribute("position", new ur(u, 3)), this.setAttribute("normal", new ur(c, 3)), this.setAttribute("uv", new ur(f, 2));
    function m(p, g, v, S, x, y, b, _, M, A, w) {
      const E = y / M, D = b / A, T = y / 2, R = b / 2, B = _ / 2, I = M + 1, C = A + 1;
      let k = 0, z = 0;
      const V = new ce();
      for (let ee = 0; ee < C; ee++) {
        const re = ee * D - R;
        for (let L = 0; L < I; L++) {
          const J = L * E - T;
          V[p] = J * S, V[g] = re * x, V[v] = B, u.push(V.x, V.y, V.z), V[p] = 0, V[g] = 0, V[v] = _ > 0 ? 1 : -1, c.push(V.x, V.y, V.z), f.push(L / M), f.push(1 - ee / A), k += 1;
        }
      }
      for (let ee = 0; ee < A; ee++)
        for (let re = 0; re < M; re++) {
          const L = h + re + I * ee, J = h + re + I * (ee + 1), U = h + (re + 1) + I * (ee + 1), ue = h + (re + 1) + I * ee;
          l.push(L, J, ue), l.push(J, U, ue), z += 6;
        }
      o.addGroup(d, z, w), d += z, h += k;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new qs(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function es(r) {
  const e = {};
  for (const t in r) {
    e[t] = {};
    for (const n in r[t]) {
      const i = r[t][n];
      i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
    }
  }
  return e;
}
function br(r) {
  const e = {};
  for (let t = 0; t < r.length; t++) {
    const n = es(r[t]);
    for (const i in n)
      e[i] = n[i];
  }
  return e;
}
function OL(r) {
  const e = [];
  for (let t = 0; t < r.length; t++)
    e.push(r[t].clone());
  return e;
}
function Gy(r) {
  const e = r.getRenderTarget();
  return e === null ? r.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : xt.workingColorSpace;
}
const PL = { clone: es, merge: br };
var BL = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, IL = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class yi extends Vs {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = BL, this.fragmentShader = IL, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = es(e.uniforms), this.uniformsGroups = OL(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const i in this.uniforms) {
      const s = this.uniforms[i].value;
      s && s.isTexture ? t.uniforms[i] = {
        type: "t",
        value: s.toJSON(e).uuid
      } : s && s.isColor ? t.uniforms[i] = {
        type: "c",
        value: s.getHex()
      } : s && s.isVector2 ? t.uniforms[i] = {
        type: "v2",
        value: s.toArray()
      } : s && s.isVector3 ? t.uniforms[i] = {
        type: "v3",
        value: s.toArray()
      } : s && s.isVector4 ? t.uniforms[i] = {
        type: "v4",
        value: s.toArray()
      } : s && s.isMatrix3 ? t.uniforms[i] = {
        type: "m3",
        value: s.toArray()
      } : s && s.isMatrix4 ? t.uniforms[i] = {
        type: "m4",
        value: s.toArray()
      } : t.uniforms[i] = {
        value: s
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const n = {};
    for (const i in this.extensions)
      this.extensions[i] === !0 && (n[i] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class $y extends nr {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new mt(), this.projectionMatrix = new mt(), this.projectionMatrixInverse = new mt(), this.coordinateSystem = Gn;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const jn = /* @__PURE__ */ new ce(), bv = /* @__PURE__ */ new ft(), wv = /* @__PURE__ */ new ft();
class zr extends $y {
  constructor(e = 50, t = 1, n = 0.1, i = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = ja * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   *
   * @returns {number}
   */
  getFocalLength() {
    const e = Math.tan(Es * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return ja * 2 * Math.atan(
      Math.tan(Es * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   *
   * @param {number} distance
   * @param {Vector2} minTarget
   * @param {Vector2} maxTarget
   */
  getViewBounds(e, t, n) {
    jn.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), t.set(jn.x, jn.y).multiplyScalar(-e / jn.z), jn.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), n.set(jn.x, jn.y).multiplyScalar(-e / jn.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   *
   * @param {number} distance
   * @param {Vector2} target - Vector2 target used to store result where x is width and y is height.
   * @returns {Vector2}
   */
  getViewSize(e, t) {
    return this.getViewBounds(e, bv, wv), t.subVectors(wv, bv);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   *
   * @param {number} fullWidth
   * @param {number} fullHeight
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   */
  setViewOffset(e, t, n, i, a, s) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = a, this.view.height = s, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(Es * 0.5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, a = -0.5 * i;
    const s = this.view;
    if (this.view !== null && this.view.enabled) {
      const l = s.fullWidth, u = s.fullHeight;
      a += s.offsetX * i / l, t -= s.offsetY * n / u, i *= s.width / l, n *= s.height / u;
    }
    const o = this.filmOffset;
    o !== 0 && (a += e * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(a, a + i, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Sa = -90, Ea = 1;
class LL extends nr {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const i = new zr(Sa, Ea, e, t);
    i.layers = this.layers, this.add(i);
    const a = new zr(Sa, Ea, e, t);
    a.layers = this.layers, this.add(a);
    const s = new zr(Sa, Ea, e, t);
    s.layers = this.layers, this.add(s);
    const o = new zr(Sa, Ea, e, t);
    o.layers = this.layers, this.add(o);
    const l = new zr(Sa, Ea, e, t);
    l.layers = this.layers, this.add(l);
    const u = new zr(Sa, Ea, e, t);
    u.layers = this.layers, this.add(u);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [n, i, a, s, o, l] = t;
    for (const u of t) this.remove(u);
    if (e === Gn)
      n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), a.up.set(0, 0, -1), a.lookAt(0, 1, 0), s.up.set(0, 0, 1), s.lookAt(0, -1, 0), o.up.set(0, 1, 0), o.lookAt(0, 0, 1), l.up.set(0, 1, 0), l.lookAt(0, 0, -1);
    else if (e === Cu)
      n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), a.up.set(0, 0, 1), a.lookAt(0, 1, 0), s.up.set(0, 0, -1), s.lookAt(0, -1, 0), o.up.set(0, -1, 0), o.lookAt(0, 0, 1), l.up.set(0, -1, 0), l.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const u of t)
      this.add(u), u.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: i } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [a, s, o, l, u, c] = this.children, f = e.getRenderTarget(), h = e.getActiveCubeFace(), d = e.getActiveMipmapLevel(), m = e.xr.enabled;
    e.xr.enabled = !1;
    const p = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, i), e.render(t, a), e.setRenderTarget(n, 1, i), e.render(t, s), e.setRenderTarget(n, 2, i), e.render(t, o), e.setRenderTarget(n, 3, i), e.render(t, l), e.setRenderTarget(n, 4, i), e.render(t, u), n.texture.generateMipmaps = p, e.setRenderTarget(n, 5, i), e.render(t, c), e.setRenderTarget(f, h, d), e.xr.enabled = m, n.texture.needsPMREMUpdate = !0;
  }
}
class Vy extends Nr {
  constructor(e, t, n, i, a, s, o, l, u, c) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : Ya, super(e, t, n, i, a, s, o, l, u, c), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class UL extends Ji {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, i = [n, n, n, n, n, n];
    this.texture = new Vy(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : bn;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, i = new qs(5, 5, 5), a = new yi({
      name: "CubemapFromEquirect",
      uniforms: es(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: vr,
      blending: ci
    });
    a.uniforms.tEquirect.value = t;
    const s = new Vt(i, a), o = t.minFilter;
    return t.minFilter === Vi && (t.minFilter = bn), new LL(1, 10, this).update(e, s), t.minFilter = o, s.geometry.dispose(), s.material.dispose(), this;
  }
  clear(e, t, n, i) {
    const a = e.getRenderTarget();
    for (let s = 0; s < 6; s++)
      e.setRenderTarget(this, s), e.clear(t, n, i);
    e.setRenderTarget(a);
  }
}
class zL extends nr {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new An(), this.environmentIntensity = 1, this.environmentRotation = new An(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity), t.object.environmentRotation = this.environmentRotation.toArray(), t;
  }
}
const zl = /* @__PURE__ */ new ce(), kL = /* @__PURE__ */ new ce(), HL = /* @__PURE__ */ new ot();
class Ii {
  constructor(e = new ce(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, i) {
    return this.normal.set(e, t, n), this.constant = i, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const i = zl.subVectors(n, t).cross(kL.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(i, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(zl), i = this.normal.dot(n);
    if (i === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const a = -(e.start.dot(this.normal) + this.constant) / i;
    return a < 0 || a > 1 ? null : t.copy(e.start).addScaledVector(n, a);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || HL.getNormalMatrix(e), i = this.coplanarPoint(zl).applyMatrix4(e), a = this.normal.applyMatrix3(n).normalize();
    return this.constant = -i.dot(a), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Ri = /* @__PURE__ */ new qf(), zo = /* @__PURE__ */ new ce();
class Xf {
  constructor(e = new Ii(), t = new Ii(), n = new Ii(), i = new Ii(), a = new Ii(), s = new Ii()) {
    this.planes = [e, t, n, i, a, s];
  }
  set(e, t, n, i, a, s) {
    const o = this.planes;
    return o[0].copy(e), o[1].copy(t), o[2].copy(n), o[3].copy(i), o[4].copy(a), o[5].copy(s), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = Gn) {
    const n = this.planes, i = e.elements, a = i[0], s = i[1], o = i[2], l = i[3], u = i[4], c = i[5], f = i[6], h = i[7], d = i[8], m = i[9], p = i[10], g = i[11], v = i[12], S = i[13], x = i[14], y = i[15];
    if (n[0].setComponents(l - a, h - u, g - d, y - v).normalize(), n[1].setComponents(l + a, h + u, g + d, y + v).normalize(), n[2].setComponents(l + s, h + c, g + m, y + S).normalize(), n[3].setComponents(l - s, h - c, g - m, y - S).normalize(), n[4].setComponents(l - o, h - f, g - p, y - x).normalize(), t === Gn)
      n[5].setComponents(l + o, h + f, g + p, y + x).normalize();
    else if (t === Cu)
      n[5].setComponents(o, f, p, x).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Ri.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Ri.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Ri);
  }
  intersectsSprite(e) {
    return Ri.center.set(0, 0, 0), Ri.radius = 0.7071067811865476, Ri.applyMatrix4(e.matrixWorld), this.intersectsSphere(Ri);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, i = -e.radius;
    for (let a = 0; a < 6; a++)
      if (t[a].distanceToPoint(n) < i)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const i = t[n];
      if (zo.x = i.normal.x > 0 ? e.max.x : e.min.x, zo.y = i.normal.y > 0 ? e.max.y : e.min.y, zo.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(zo) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class ui extends nr {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
class qy extends Nr {
  constructor(e, t, n, i, a, s, o, l, u, c = Ua) {
    if (c !== Ua && c !== Ja)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && c === Ua && (n = Ki), n === void 0 && c === Ja && (n = Ka), super(null, i, a, s, o, l, c, n, u), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = o !== void 0 ? o : mn, this.minFilter = l !== void 0 ? l : mn, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
class Nu extends yn {
  constructor(e = 1, t = 1, n = 1, i = 32, a = 1, s = !1, o = 0, l = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: i,
      heightSegments: a,
      openEnded: s,
      thetaStart: o,
      thetaLength: l
    };
    const u = this;
    i = Math.floor(i), a = Math.floor(a);
    const c = [], f = [], h = [], d = [];
    let m = 0;
    const p = [], g = n / 2;
    let v = 0;
    S(), s === !1 && (e > 0 && x(!0), t > 0 && x(!1)), this.setIndex(c), this.setAttribute("position", new ur(f, 3)), this.setAttribute("normal", new ur(h, 3)), this.setAttribute("uv", new ur(d, 2));
    function S() {
      const y = new ce(), b = new ce();
      let _ = 0;
      const M = (t - e) / n;
      for (let A = 0; A <= a; A++) {
        const w = [], E = A / a, D = E * (t - e) + e;
        for (let T = 0; T <= i; T++) {
          const R = T / i, B = R * l + o, I = Math.sin(B), C = Math.cos(B);
          b.x = D * I, b.y = -E * n + g, b.z = D * C, f.push(b.x, b.y, b.z), y.set(I, M, C).normalize(), h.push(y.x, y.y, y.z), d.push(R, 1 - E), w.push(m++);
        }
        p.push(w);
      }
      for (let A = 0; A < i; A++)
        for (let w = 0; w < a; w++) {
          const E = p[w][A], D = p[w + 1][A], T = p[w + 1][A + 1], R = p[w][A + 1];
          (e > 0 || w !== 0) && (c.push(E, D, R), _ += 3), (t > 0 || w !== a - 1) && (c.push(D, T, R), _ += 3);
        }
      u.addGroup(v, _, 0), v += _;
    }
    function x(y) {
      const b = m, _ = new ft(), M = new ce();
      let A = 0;
      const w = y === !0 ? e : t, E = y === !0 ? 1 : -1;
      for (let T = 1; T <= i; T++)
        f.push(0, g * E, 0), h.push(0, E, 0), d.push(0.5, 0.5), m++;
      const D = m;
      for (let T = 0; T <= i; T++) {
        const B = T / i * l + o, I = Math.cos(B), C = Math.sin(B);
        M.x = w * C, M.y = g * E, M.z = w * I, f.push(M.x, M.y, M.z), h.push(0, E, 0), _.x = I * 0.5 + 0.5, _.y = C * 0.5 * E + 0.5, d.push(_.x, _.y), m++;
      }
      for (let T = 0; T < i; T++) {
        const R = b + T, B = D + T;
        y === !0 ? c.push(B, B + 1, R) : c.push(B + 1, B, R), A += 3;
      }
      u.addGroup(v, A, y === !0 ? 1 : 2), v += A;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Nu(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Xu extends yn {
  constructor(e = [], t = [], n = 1, i = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: i
    };
    const a = [], s = [];
    o(i), u(n), c(), this.setAttribute("position", new ur(a, 3)), this.setAttribute("normal", new ur(a.slice(), 3)), this.setAttribute("uv", new ur(s, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function o(S) {
      const x = new ce(), y = new ce(), b = new ce();
      for (let _ = 0; _ < t.length; _ += 3)
        d(t[_ + 0], x), d(t[_ + 1], y), d(t[_ + 2], b), l(x, y, b, S);
    }
    function l(S, x, y, b) {
      const _ = b + 1, M = [];
      for (let A = 0; A <= _; A++) {
        M[A] = [];
        const w = S.clone().lerp(y, A / _), E = x.clone().lerp(y, A / _), D = _ - A;
        for (let T = 0; T <= D; T++)
          T === 0 && A === _ ? M[A][T] = w : M[A][T] = w.clone().lerp(E, T / D);
      }
      for (let A = 0; A < _; A++)
        for (let w = 0; w < 2 * (_ - A) - 1; w++) {
          const E = Math.floor(w / 2);
          w % 2 === 0 ? (h(M[A][E + 1]), h(M[A + 1][E]), h(M[A][E])) : (h(M[A][E + 1]), h(M[A + 1][E + 1]), h(M[A + 1][E]));
        }
    }
    function u(S) {
      const x = new ce();
      for (let y = 0; y < a.length; y += 3)
        x.x = a[y + 0], x.y = a[y + 1], x.z = a[y + 2], x.normalize().multiplyScalar(S), a[y + 0] = x.x, a[y + 1] = x.y, a[y + 2] = x.z;
    }
    function c() {
      const S = new ce();
      for (let x = 0; x < a.length; x += 3) {
        S.x = a[x + 0], S.y = a[x + 1], S.z = a[x + 2];
        const y = g(S) / 2 / Math.PI + 0.5, b = v(S) / Math.PI + 0.5;
        s.push(y, 1 - b);
      }
      m(), f();
    }
    function f() {
      for (let S = 0; S < s.length; S += 6) {
        const x = s[S + 0], y = s[S + 2], b = s[S + 4], _ = Math.max(x, y, b), M = Math.min(x, y, b);
        _ > 0.9 && M < 0.1 && (x < 0.2 && (s[S + 0] += 1), y < 0.2 && (s[S + 2] += 1), b < 0.2 && (s[S + 4] += 1));
      }
    }
    function h(S) {
      a.push(S.x, S.y, S.z);
    }
    function d(S, x) {
      const y = S * 3;
      x.x = e[y + 0], x.y = e[y + 1], x.z = e[y + 2];
    }
    function m() {
      const S = new ce(), x = new ce(), y = new ce(), b = new ce(), _ = new ft(), M = new ft(), A = new ft();
      for (let w = 0, E = 0; w < a.length; w += 9, E += 6) {
        S.set(a[w + 0], a[w + 1], a[w + 2]), x.set(a[w + 3], a[w + 4], a[w + 5]), y.set(a[w + 6], a[w + 7], a[w + 8]), _.set(s[E + 0], s[E + 1]), M.set(s[E + 2], s[E + 3]), A.set(s[E + 4], s[E + 5]), b.copy(S).add(x).add(y).divideScalar(3);
        const D = g(b);
        p(_, E + 0, S, D), p(M, E + 2, x, D), p(A, E + 4, y, D);
      }
    }
    function p(S, x, y, b) {
      b < 0 && S.x === 1 && (s[x] = S.x - 1), y.x === 0 && y.z === 0 && (s[x] = b / 2 / Math.PI + 0.5);
    }
    function g(S) {
      return Math.atan2(S.z, -S.x);
    }
    function v(S) {
      return Math.atan2(-S.y, Math.sqrt(S.x * S.x + S.z * S.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Xu(e.vertices, e.indices, e.radius, e.details);
  }
}
class Yf extends Xu {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, i = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], a = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(i, a, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Yf(e.radius, e.detail);
  }
}
class Yu extends yn {
  constructor(e = 1, t = 1, n = 1, i = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: i
    };
    const a = e / 2, s = t / 2, o = Math.floor(n), l = Math.floor(i), u = o + 1, c = l + 1, f = e / o, h = t / l, d = [], m = [], p = [], g = [];
    for (let v = 0; v < c; v++) {
      const S = v * h - s;
      for (let x = 0; x < u; x++) {
        const y = x * f - a;
        m.push(y, -S, 0), p.push(0, 0, 1), g.push(x / o), g.push(1 - v / l);
      }
    }
    for (let v = 0; v < l; v++)
      for (let S = 0; S < o; S++) {
        const x = S + u * v, y = S + u * (v + 1), b = S + 1 + u * (v + 1), _ = S + 1 + u * v;
        d.push(x, y, _), d.push(y, b, _);
      }
    this.setIndex(d), this.setAttribute("position", new ur(m, 3)), this.setAttribute("normal", new ur(p, 3)), this.setAttribute("uv", new ur(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Yu(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
class Ps extends Xu {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], i = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, i, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Ps(e.radius, e.detail);
  }
}
class Zf extends yn {
  constructor(e = 1, t = 0.4, n = 12, i = 48, a = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: i,
      arc: a
    }, n = Math.floor(n), i = Math.floor(i);
    const s = [], o = [], l = [], u = [], c = new ce(), f = new ce(), h = new ce();
    for (let d = 0; d <= n; d++)
      for (let m = 0; m <= i; m++) {
        const p = m / i * a, g = d / n * Math.PI * 2;
        f.x = (e + t * Math.cos(g)) * Math.cos(p), f.y = (e + t * Math.cos(g)) * Math.sin(p), f.z = t * Math.sin(g), o.push(f.x, f.y, f.z), c.x = e * Math.cos(p), c.y = e * Math.sin(p), h.subVectors(f, c).normalize(), l.push(h.x, h.y, h.z), u.push(m / i), u.push(d / n);
      }
    for (let d = 1; d <= n; d++)
      for (let m = 1; m <= i; m++) {
        const p = (i + 1) * d + m - 1, g = (i + 1) * (d - 1) + m - 1, v = (i + 1) * (d - 1) + m, S = (i + 1) * d + m;
        s.push(p, g, S), s.push(g, v, S);
      }
    this.setIndex(s), this.setAttribute("position", new ur(o, 3)), this.setAttribute("normal", new ur(l, 3)), this.setAttribute("uv", new ur(u, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Zf(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class ko extends Vs {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.type = "MeshStandardMaterial", this.defines = { STANDARD: "" }, this.color = new wt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new wt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Fy, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new An(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class GL extends Vs {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = H8, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class $L extends Vs {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
class Zu extends nr {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new wt(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (t.object.target = this.target.uuid), t;
  }
}
const kl = /* @__PURE__ */ new mt(), Sv = /* @__PURE__ */ new ce(), Ev = /* @__PURE__ */ new ce();
class Wy {
  constructor(e) {
    this.camera = e, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ft(512, 512), this.map = null, this.mapPass = null, this.matrix = new mt(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Xf(), this._frameExtents = new ft(1, 1), this._viewportCount = 1, this._viewports = [
      new Ht(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    Sv.setFromMatrixPosition(e.matrixWorld), t.position.copy(Sv), Ev.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(Ev), t.updateMatrixWorld(), kl.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(kl), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(kl);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.intensity = e.intensity, this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.intensity !== 1 && (e.intensity = this.intensity), this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class VL extends Wy {
  constructor() {
    super(new zr(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = ja * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, a = e.distance || t.far;
    (n !== t.fov || i !== t.aspect || a !== t.far) && (t.fov = n, t.aspect = i, t.far = a, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class qL extends Zu {
  constructor(e, t, n = 0, i = Math.PI / 3, a = 0, s = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(nr.DEFAULT_UP), this.updateMatrix(), this.target = new nr(), this.distance = n, this.angle = i, this.penumbra = a, this.decay = s, this.map = null, this.shadow = new VL();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class Kf extends $y {
  constructor(e = -1, t = 1, n = 1, i = -1, a = 0.1, s = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = a, this.far = s, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, i, a, s) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = a, this.view.height = s, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2;
    let a = n - e, s = n + e, o = i + t, l = i - t;
    if (this.view !== null && this.view.enabled) {
      const u = (this.right - this.left) / this.view.fullWidth / this.zoom, c = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      a += u * this.view.offsetX, s = a + u * this.view.width, o -= c * this.view.offsetY, l = o - c * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(a, s, o, l, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
class WL extends Wy {
  constructor() {
    super(new Kf(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class XL extends Zu {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(nr.DEFAULT_UP), this.updateMatrix(), this.target = new nr(), this.shadow = new WL();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class YL extends Zu {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class ZL extends zr {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
const Mv = /* @__PURE__ */ new mt();
class KL {
  constructor(e, t, n = 0, i = 1 / 0) {
    this.ray = new Uy(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new Wf(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  setFromXRController(e) {
    return Mv.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Mv), this;
  }
  intersectObject(e, t = !0, n = []) {
    return sf(e, this, n, t), n.sort(Av), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let i = 0, a = e.length; i < a; i++)
      sf(e[i], this, n, t);
    return n.sort(Av), n;
  }
}
function Av(r, e) {
  return r.distance - e.distance;
}
function sf(r, e, t, n) {
  let i = !0;
  if (r.layers.test(e.layers) && r.raycast(e, t) === !1 && (i = !1), i === !0 && n === !0) {
    const a = r.children;
    for (let s = 0, o = a.length; s < o; s++)
      sf(a[s], e, t, !0);
  }
}
function Dv(r, e, t, n) {
  const i = JL(n);
  switch (t) {
    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    case My:
      return r * e;
    case Dy:
      return r * e;
    case Cy:
      return r * e * 2;
    case Ty:
      return r * e / i.components * i.byteLength;
    case Hf:
      return r * e / i.components * i.byteLength;
    case Ny:
      return r * e * 2 / i.components * i.byteLength;
    case Gf:
      return r * e * 2 / i.components * i.byteLength;
    case Ay:
      return r * e * 3 / i.components * i.byteLength;
    case cn:
      return r * e * 4 / i.components * i.byteLength;
    case $f:
      return r * e * 4 / i.components * i.byteLength;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    case jo:
    case eu:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case tu:
    case ru:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    case Pc:
    case Ic:
      return Math.max(r, 16) * Math.max(e, 8) / 4;
    case Oc:
    case Bc:
      return Math.max(r, 8) * Math.max(e, 8) / 2;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    case Lc:
    case Uc:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case zc:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    case kc:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case Hc:
      return Math.floor((r + 4) / 5) * Math.floor((e + 3) / 4) * 16;
    case Gc:
      return Math.floor((r + 4) / 5) * Math.floor((e + 4) / 5) * 16;
    case $c:
      return Math.floor((r + 5) / 6) * Math.floor((e + 4) / 5) * 16;
    case Vc:
      return Math.floor((r + 5) / 6) * Math.floor((e + 5) / 6) * 16;
    case qc:
      return Math.floor((r + 7) / 8) * Math.floor((e + 4) / 5) * 16;
    case Wc:
      return Math.floor((r + 7) / 8) * Math.floor((e + 5) / 6) * 16;
    case Xc:
      return Math.floor((r + 7) / 8) * Math.floor((e + 7) / 8) * 16;
    case Yc:
      return Math.floor((r + 9) / 10) * Math.floor((e + 4) / 5) * 16;
    case Zc:
      return Math.floor((r + 9) / 10) * Math.floor((e + 5) / 6) * 16;
    case Kc:
      return Math.floor((r + 9) / 10) * Math.floor((e + 7) / 8) * 16;
    case Jc:
      return Math.floor((r + 9) / 10) * Math.floor((e + 9) / 10) * 16;
    case Qc:
      return Math.floor((r + 11) / 12) * Math.floor((e + 9) / 10) * 16;
    case jc:
      return Math.floor((r + 11) / 12) * Math.floor((e + 11) / 12) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    case nu:
    case ef:
    case tf:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    case Ry:
    case rf:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 8;
    case nf:
    case af:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${t} format.`
  );
}
function JL(r) {
  switch (r) {
    case Wn:
    case wy:
      return { byteLength: 1, components: 1 };
    case Os:
    case Sy:
    case $s:
      return { byteLength: 2, components: 1 };
    case zf:
    case kf:
      return { byteLength: 2, components: 4 };
    case Ki:
    case Uf:
    case Hn:
      return { byteLength: 4, components: 1 };
    case Ey:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${r}.`);
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: Lf
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Lf);
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function Xy() {
  let r = null, e = !1, t = null, n = null;
  function i(a, s) {
    t(a, s), n = r.requestAnimationFrame(i);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = r.requestAnimationFrame(i), e = !0);
    },
    stop: function() {
      r.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(a) {
      t = a;
    },
    setContext: function(a) {
      r = a;
    }
  };
}
function QL(r) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(o, l) {
    const u = o.array, c = o.usage, f = u.byteLength, h = r.createBuffer();
    r.bindBuffer(l, h), r.bufferData(l, u, c), o.onUploadCallback();
    let d;
    if (u instanceof Float32Array)
      d = r.FLOAT;
    else if (u instanceof Uint16Array)
      o.isFloat16BufferAttribute ? d = r.HALF_FLOAT : d = r.UNSIGNED_SHORT;
    else if (u instanceof Int16Array)
      d = r.SHORT;
    else if (u instanceof Uint32Array)
      d = r.UNSIGNED_INT;
    else if (u instanceof Int32Array)
      d = r.INT;
    else if (u instanceof Int8Array)
      d = r.BYTE;
    else if (u instanceof Uint8Array)
      d = r.UNSIGNED_BYTE;
    else if (u instanceof Uint8ClampedArray)
      d = r.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + u);
    return {
      buffer: h,
      type: d,
      bytesPerElement: u.BYTES_PER_ELEMENT,
      version: o.version,
      size: f
    };
  }
  function n(o, l, u) {
    const c = l.array, f = l.updateRanges;
    if (r.bindBuffer(u, o), f.length === 0)
      r.bufferSubData(u, 0, c);
    else {
      f.sort((d, m) => d.start - m.start);
      let h = 0;
      for (let d = 1; d < f.length; d++) {
        const m = f[h], p = f[d];
        p.start <= m.start + m.count + 1 ? m.count = Math.max(
          m.count,
          p.start + p.count - m.start
        ) : (++h, f[h] = p);
      }
      f.length = h + 1;
      for (let d = 0, m = f.length; d < m; d++) {
        const p = f[d];
        r.bufferSubData(
          u,
          p.start * c.BYTES_PER_ELEMENT,
          c,
          p.start,
          p.count
        );
      }
      l.clearUpdateRanges();
    }
    l.onUploadCallback();
  }
  function i(o) {
    return o.isInterleavedBufferAttribute && (o = o.data), e.get(o);
  }
  function a(o) {
    o.isInterleavedBufferAttribute && (o = o.data);
    const l = e.get(o);
    l && (r.deleteBuffer(l.buffer), e.delete(o));
  }
  function s(o, l) {
    if (o.isInterleavedBufferAttribute && (o = o.data), o.isGLBufferAttribute) {
      const c = e.get(o);
      (!c || c.version < o.version) && e.set(o, {
        buffer: o.buffer,
        type: o.type,
        bytesPerElement: o.elementSize,
        version: o.version
      });
      return;
    }
    const u = e.get(o);
    if (u === void 0)
      e.set(o, t(o, l));
    else if (u.version < o.version) {
      if (u.size !== o.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      n(u.buffer, o, l), u.version = o.version;
    }
  }
  return {
    get: i,
    remove: a,
    update: s
  };
}
var jL = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, eU = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, tU = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, rU = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, nU = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, iU = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, aU = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, sU = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, oU = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, uU = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, lU = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, cU = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, fU = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, hU = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, dU = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, mU = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, pU = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, vU = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, gU = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, yU = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, xU = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, _U = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, bU = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, wU = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, SU = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, EU = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, MU = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, AU = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, DU = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, CU = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, TU = "gl_FragColor = linearToOutputTexel( gl_FragColor );", NU = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, RU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, FU = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, OU = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, PU = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, BU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, IU = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, LU = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, UU = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, zU = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, kU = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, HU = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, GU = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, $U = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, VU = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, qU = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, WU = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, XU = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, YU = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, ZU = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, KU = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, JU = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, QU = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, jU = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, e6 = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, t6 = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, r6 = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, n6 = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, i6 = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, a6 = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, s6 = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, o6 = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, u6 = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, l6 = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, c6 = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, f6 = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, h6 = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, d6 = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, m6 = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, p6 = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, v6 = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, g6 = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, y6 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, x6 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, _6 = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, b6 = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, w6 = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, S6 = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, E6 = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, M6 = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, A6 = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, D6 = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, C6 = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, T6 = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, N6 = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, R6 = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, F6 = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, O6 = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, P6 = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, B6 = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, I6 = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, L6 = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, U6 = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, z6 = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, k6 = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, H6 = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, G6 = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, $6 = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, V6 = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, q6 = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, W6 = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, X6 = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, Y6 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, Z6 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, K6 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, J6 = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const Q6 = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, j6 = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, e7 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, t7 = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, r7 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, n7 = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, i7 = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, a7 = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, s7 = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, o7 = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, u7 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, l7 = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, c7 = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, f7 = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, h7 = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, d7 = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, m7 = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, p7 = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, v7 = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, g7 = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, y7 = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, x7 = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, _7 = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, b7 = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, w7 = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, S7 = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, E7 = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, M7 = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, A7 = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, D7 = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, C7 = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, T7 = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, N7 = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, R7 = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, ct = {
  alphahash_fragment: jL,
  alphahash_pars_fragment: eU,
  alphamap_fragment: tU,
  alphamap_pars_fragment: rU,
  alphatest_fragment: nU,
  alphatest_pars_fragment: iU,
  aomap_fragment: aU,
  aomap_pars_fragment: sU,
  batching_pars_vertex: oU,
  batching_vertex: uU,
  begin_vertex: lU,
  beginnormal_vertex: cU,
  bsdfs: fU,
  iridescence_fragment: hU,
  bumpmap_pars_fragment: dU,
  clipping_planes_fragment: mU,
  clipping_planes_pars_fragment: pU,
  clipping_planes_pars_vertex: vU,
  clipping_planes_vertex: gU,
  color_fragment: yU,
  color_pars_fragment: xU,
  color_pars_vertex: _U,
  color_vertex: bU,
  common: wU,
  cube_uv_reflection_fragment: SU,
  defaultnormal_vertex: EU,
  displacementmap_pars_vertex: MU,
  displacementmap_vertex: AU,
  emissivemap_fragment: DU,
  emissivemap_pars_fragment: CU,
  colorspace_fragment: TU,
  colorspace_pars_fragment: NU,
  envmap_fragment: RU,
  envmap_common_pars_fragment: FU,
  envmap_pars_fragment: OU,
  envmap_pars_vertex: PU,
  envmap_physical_pars_fragment: qU,
  envmap_vertex: BU,
  fog_vertex: IU,
  fog_pars_vertex: LU,
  fog_fragment: UU,
  fog_pars_fragment: zU,
  gradientmap_pars_fragment: kU,
  lightmap_pars_fragment: HU,
  lights_lambert_fragment: GU,
  lights_lambert_pars_fragment: $U,
  lights_pars_begin: VU,
  lights_toon_fragment: WU,
  lights_toon_pars_fragment: XU,
  lights_phong_fragment: YU,
  lights_phong_pars_fragment: ZU,
  lights_physical_fragment: KU,
  lights_physical_pars_fragment: JU,
  lights_fragment_begin: QU,
  lights_fragment_maps: jU,
  lights_fragment_end: e6,
  logdepthbuf_fragment: t6,
  logdepthbuf_pars_fragment: r6,
  logdepthbuf_pars_vertex: n6,
  logdepthbuf_vertex: i6,
  map_fragment: a6,
  map_pars_fragment: s6,
  map_particle_fragment: o6,
  map_particle_pars_fragment: u6,
  metalnessmap_fragment: l6,
  metalnessmap_pars_fragment: c6,
  morphinstance_vertex: f6,
  morphcolor_vertex: h6,
  morphnormal_vertex: d6,
  morphtarget_pars_vertex: m6,
  morphtarget_vertex: p6,
  normal_fragment_begin: v6,
  normal_fragment_maps: g6,
  normal_pars_fragment: y6,
  normal_pars_vertex: x6,
  normal_vertex: _6,
  normalmap_pars_fragment: b6,
  clearcoat_normal_fragment_begin: w6,
  clearcoat_normal_fragment_maps: S6,
  clearcoat_pars_fragment: E6,
  iridescence_pars_fragment: M6,
  opaque_fragment: A6,
  packing: D6,
  premultiplied_alpha_fragment: C6,
  project_vertex: T6,
  dithering_fragment: N6,
  dithering_pars_fragment: R6,
  roughnessmap_fragment: F6,
  roughnessmap_pars_fragment: O6,
  shadowmap_pars_fragment: P6,
  shadowmap_pars_vertex: B6,
  shadowmap_vertex: I6,
  shadowmask_pars_fragment: L6,
  skinbase_vertex: U6,
  skinning_pars_vertex: z6,
  skinning_vertex: k6,
  skinnormal_vertex: H6,
  specularmap_fragment: G6,
  specularmap_pars_fragment: $6,
  tonemapping_fragment: V6,
  tonemapping_pars_fragment: q6,
  transmission_fragment: W6,
  transmission_pars_fragment: X6,
  uv_pars_fragment: Y6,
  uv_pars_vertex: Z6,
  uv_vertex: K6,
  worldpos_vertex: J6,
  background_vert: Q6,
  background_frag: j6,
  backgroundCube_vert: e7,
  backgroundCube_frag: t7,
  cube_vert: r7,
  cube_frag: n7,
  depth_vert: i7,
  depth_frag: a7,
  distanceRGBA_vert: s7,
  distanceRGBA_frag: o7,
  equirect_vert: u7,
  equirect_frag: l7,
  linedashed_vert: c7,
  linedashed_frag: f7,
  meshbasic_vert: h7,
  meshbasic_frag: d7,
  meshlambert_vert: m7,
  meshlambert_frag: p7,
  meshmatcap_vert: v7,
  meshmatcap_frag: g7,
  meshnormal_vert: y7,
  meshnormal_frag: x7,
  meshphong_vert: _7,
  meshphong_frag: b7,
  meshphysical_vert: w7,
  meshphysical_frag: S7,
  meshtoon_vert: E7,
  meshtoon_frag: M7,
  points_vert: A7,
  points_frag: D7,
  shadow_vert: C7,
  shadow_frag: T7,
  sprite_vert: N7,
  sprite_frag: R7
}, Le = {
  common: {
    diffuse: { value: /* @__PURE__ */ new wt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new ot() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ot() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new ot() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new ot() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new ot() },
    normalScale: { value: /* @__PURE__ */ new ft(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new ot() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new ot() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new wt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new wt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ot() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new ot() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new wt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new ft(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new ot() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ot() },
    alphaTest: { value: 0 }
  }
}, xn = {
  basic: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.specularmap,
      Le.envmap,
      Le.aomap,
      Le.lightmap,
      Le.fog
    ]),
    vertexShader: ct.meshbasic_vert,
    fragmentShader: ct.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.specularmap,
      Le.envmap,
      Le.aomap,
      Le.lightmap,
      Le.emissivemap,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      Le.fog,
      Le.lights,
      {
        emissive: { value: /* @__PURE__ */ new wt(0) }
      }
    ]),
    vertexShader: ct.meshlambert_vert,
    fragmentShader: ct.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.specularmap,
      Le.envmap,
      Le.aomap,
      Le.lightmap,
      Le.emissivemap,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      Le.fog,
      Le.lights,
      {
        emissive: { value: /* @__PURE__ */ new wt(0) },
        specular: { value: /* @__PURE__ */ new wt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ct.meshphong_vert,
    fragmentShader: ct.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.envmap,
      Le.aomap,
      Le.lightmap,
      Le.emissivemap,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      Le.roughnessmap,
      Le.metalnessmap,
      Le.fog,
      Le.lights,
      {
        emissive: { value: /* @__PURE__ */ new wt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ct.meshphysical_vert,
    fragmentShader: ct.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.aomap,
      Le.lightmap,
      Le.emissivemap,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      Le.gradientmap,
      Le.fog,
      Le.lights,
      {
        emissive: { value: /* @__PURE__ */ new wt(0) }
      }
    ]),
    vertexShader: ct.meshtoon_vert,
    fragmentShader: ct.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      Le.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ct.meshmatcap_vert,
    fragmentShader: ct.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ br([
      Le.points,
      Le.fog
    ]),
    vertexShader: ct.points_vert,
    fragmentShader: ct.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ct.linedashed_vert,
    fragmentShader: ct.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.displacementmap
    ]),
    vertexShader: ct.depth_vert,
    fragmentShader: ct.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.bumpmap,
      Le.normalmap,
      Le.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ct.meshnormal_vert,
    fragmentShader: ct.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ br([
      Le.sprite,
      Le.fog
    ]),
    vertexShader: ct.sprite_vert,
    fragmentShader: ct.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new ot() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ct.background_vert,
    fragmentShader: ct.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new ot() }
    },
    vertexShader: ct.backgroundCube_vert,
    fragmentShader: ct.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ct.cube_vert,
    fragmentShader: ct.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ct.equirect_vert,
    fragmentShader: ct.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ br([
      Le.common,
      Le.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new ce() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ct.distanceRGBA_vert,
    fragmentShader: ct.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ br([
      Le.lights,
      Le.fog,
      {
        color: { value: /* @__PURE__ */ new wt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ct.shadow_vert,
    fragmentShader: ct.shadow_frag
  }
};
xn.physical = {
  uniforms: /* @__PURE__ */ br([
    xn.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new ot() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new ot() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new ft(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new ot() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new ot() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new ot() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new wt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new ot() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new ot() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new ot() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new ft() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new ot() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new wt(0) },
      specularColor: { value: /* @__PURE__ */ new wt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new ot() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new ot() },
      anisotropyVector: { value: /* @__PURE__ */ new ft() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new ot() }
    }
  ]),
  vertexShader: ct.meshphysical_vert,
  fragmentShader: ct.meshphysical_frag
};
const Ho = { r: 0, b: 0, g: 0 }, Fi = /* @__PURE__ */ new An(), F7 = /* @__PURE__ */ new mt();
function O7(r, e, t, n, i, a, s) {
  const o = new wt(0);
  let l = a === !0 ? 0 : 1, u, c, f = null, h = 0, d = null;
  function m(x) {
    let y = x.isScene === !0 ? x.background : null;
    return y && y.isTexture && (y = (x.backgroundBlurriness > 0 ? t : e).get(y)), y;
  }
  function p(x) {
    let y = !1;
    const b = m(x);
    b === null ? v(o, l) : b && b.isColor && (v(b, 1), y = !0);
    const _ = r.xr.getEnvironmentBlendMode();
    _ === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, s) : _ === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, s), (r.autoClear || y) && (n.buffers.depth.setTest(!0), n.buffers.depth.setMask(!0), n.buffers.color.setMask(!0), r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil));
  }
  function g(x, y) {
    const b = m(y);
    b && (b.isCubeTexture || b.mapping === qu) ? (c === void 0 && (c = new Vt(
      new qs(1, 1, 1),
      new yi({
        name: "BackgroundCubeMaterial",
        uniforms: es(xn.backgroundCube.uniforms),
        vertexShader: xn.backgroundCube.vertexShader,
        fragmentShader: xn.backgroundCube.fragmentShader,
        side: vr,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), c.geometry.deleteAttribute("normal"), c.geometry.deleteAttribute("uv"), c.onBeforeRender = function(_, M, A) {
      this.matrixWorld.copyPosition(A.matrixWorld);
    }, Object.defineProperty(c.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), i.update(c)), Fi.copy(y.backgroundRotation), Fi.x *= -1, Fi.y *= -1, Fi.z *= -1, b.isCubeTexture && b.isRenderTargetTexture === !1 && (Fi.y *= -1, Fi.z *= -1), c.material.uniforms.envMap.value = b, c.material.uniforms.flipEnvMap.value = b.isCubeTexture && b.isRenderTargetTexture === !1 ? -1 : 1, c.material.uniforms.backgroundBlurriness.value = y.backgroundBlurriness, c.material.uniforms.backgroundIntensity.value = y.backgroundIntensity, c.material.uniforms.backgroundRotation.value.setFromMatrix4(F7.makeRotationFromEuler(Fi)), c.material.toneMapped = xt.getTransfer(b.colorSpace) !== Ct, (f !== b || h !== b.version || d !== r.toneMapping) && (c.material.needsUpdate = !0, f = b, h = b.version, d = r.toneMapping), c.layers.enableAll(), x.unshift(c, c.geometry, c.material, 0, 0, null)) : b && b.isTexture && (u === void 0 && (u = new Vt(
      new Yu(2, 2),
      new yi({
        name: "BackgroundMaterial",
        uniforms: es(xn.background.uniforms),
        vertexShader: xn.background.vertexShader,
        fragmentShader: xn.background.fragmentShader,
        side: gi,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), u.geometry.deleteAttribute("normal"), Object.defineProperty(u.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), i.update(u)), u.material.uniforms.t2D.value = b, u.material.uniforms.backgroundIntensity.value = y.backgroundIntensity, u.material.toneMapped = xt.getTransfer(b.colorSpace) !== Ct, b.matrixAutoUpdate === !0 && b.updateMatrix(), u.material.uniforms.uvTransform.value.copy(b.matrix), (f !== b || h !== b.version || d !== r.toneMapping) && (u.material.needsUpdate = !0, f = b, h = b.version, d = r.toneMapping), u.layers.enableAll(), x.unshift(u, u.geometry, u.material, 0, 0, null));
  }
  function v(x, y) {
    x.getRGB(Ho, Gy(r)), n.buffers.color.setClear(Ho.r, Ho.g, Ho.b, y, s);
  }
  function S() {
    c !== void 0 && (c.geometry.dispose(), c.material.dispose()), u !== void 0 && (u.geometry.dispose(), u.material.dispose());
  }
  return {
    getClearColor: function() {
      return o;
    },
    setClearColor: function(x, y = 1) {
      o.set(x), l = y, v(o, l);
    },
    getClearAlpha: function() {
      return l;
    },
    setClearAlpha: function(x) {
      l = x, v(o, l);
    },
    render: p,
    addToRenderList: g,
    dispose: S
  };
}
function P7(r, e) {
  const t = r.getParameter(r.MAX_VERTEX_ATTRIBS), n = {}, i = h(null);
  let a = i, s = !1;
  function o(E, D, T, R, B) {
    let I = !1;
    const C = f(R, T, D);
    a !== C && (a = C, u(a.object)), I = d(E, R, T, B), I && m(E, R, T, B), B !== null && e.update(B, r.ELEMENT_ARRAY_BUFFER), (I || s) && (s = !1, y(E, D, T, R), B !== null && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, e.get(B).buffer));
  }
  function l() {
    return r.createVertexArray();
  }
  function u(E) {
    return r.bindVertexArray(E);
  }
  function c(E) {
    return r.deleteVertexArray(E);
  }
  function f(E, D, T) {
    const R = T.wireframe === !0;
    let B = n[E.id];
    B === void 0 && (B = {}, n[E.id] = B);
    let I = B[D.id];
    I === void 0 && (I = {}, B[D.id] = I);
    let C = I[R];
    return C === void 0 && (C = h(l()), I[R] = C), C;
  }
  function h(E) {
    const D = [], T = [], R = [];
    for (let B = 0; B < t; B++)
      D[B] = 0, T[B] = 0, R[B] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: D,
      enabledAttributes: T,
      attributeDivisors: R,
      object: E,
      attributes: {},
      index: null
    };
  }
  function d(E, D, T, R) {
    const B = a.attributes, I = D.attributes;
    let C = 0;
    const k = T.getAttributes();
    for (const z in k)
      if (k[z].location >= 0) {
        const ee = B[z];
        let re = I[z];
        if (re === void 0 && (z === "instanceMatrix" && E.instanceMatrix && (re = E.instanceMatrix), z === "instanceColor" && E.instanceColor && (re = E.instanceColor)), ee === void 0 || ee.attribute !== re || re && ee.data !== re.data) return !0;
        C++;
      }
    return a.attributesNum !== C || a.index !== R;
  }
  function m(E, D, T, R) {
    const B = {}, I = D.attributes;
    let C = 0;
    const k = T.getAttributes();
    for (const z in k)
      if (k[z].location >= 0) {
        let ee = I[z];
        ee === void 0 && (z === "instanceMatrix" && E.instanceMatrix && (ee = E.instanceMatrix), z === "instanceColor" && E.instanceColor && (ee = E.instanceColor));
        const re = {};
        re.attribute = ee, ee && ee.data && (re.data = ee.data), B[z] = re, C++;
      }
    a.attributes = B, a.attributesNum = C, a.index = R;
  }
  function p() {
    const E = a.newAttributes;
    for (let D = 0, T = E.length; D < T; D++)
      E[D] = 0;
  }
  function g(E) {
    v(E, 0);
  }
  function v(E, D) {
    const T = a.newAttributes, R = a.enabledAttributes, B = a.attributeDivisors;
    T[E] = 1, R[E] === 0 && (r.enableVertexAttribArray(E), R[E] = 1), B[E] !== D && (r.vertexAttribDivisor(E, D), B[E] = D);
  }
  function S() {
    const E = a.newAttributes, D = a.enabledAttributes;
    for (let T = 0, R = D.length; T < R; T++)
      D[T] !== E[T] && (r.disableVertexAttribArray(T), D[T] = 0);
  }
  function x(E, D, T, R, B, I, C) {
    C === !0 ? r.vertexAttribIPointer(E, D, T, B, I) : r.vertexAttribPointer(E, D, T, R, B, I);
  }
  function y(E, D, T, R) {
    p();
    const B = R.attributes, I = T.getAttributes(), C = D.defaultAttributeValues;
    for (const k in I) {
      const z = I[k];
      if (z.location >= 0) {
        let V = B[k];
        if (V === void 0 && (k === "instanceMatrix" && E.instanceMatrix && (V = E.instanceMatrix), k === "instanceColor" && E.instanceColor && (V = E.instanceColor)), V !== void 0) {
          const ee = V.normalized, re = V.itemSize, L = e.get(V);
          if (L === void 0) continue;
          const J = L.buffer, U = L.type, ue = L.bytesPerElement, oe = U === r.INT || U === r.UNSIGNED_INT || V.gpuType === Uf;
          if (V.isInterleavedBufferAttribute) {
            const ie = V.data, G = ie.stride, Z = V.offset;
            if (ie.isInstancedInterleavedBuffer) {
              for (let te = 0; te < z.locationSize; te++)
                v(z.location + te, ie.meshPerAttribute);
              E.isInstancedMesh !== !0 && R._maxInstanceCount === void 0 && (R._maxInstanceCount = ie.meshPerAttribute * ie.count);
            } else
              for (let te = 0; te < z.locationSize; te++)
                g(z.location + te);
            r.bindBuffer(r.ARRAY_BUFFER, J);
            for (let te = 0; te < z.locationSize; te++)
              x(
                z.location + te,
                re / z.locationSize,
                U,
                ee,
                G * ue,
                (Z + re / z.locationSize * te) * ue,
                oe
              );
          } else {
            if (V.isInstancedBufferAttribute) {
              for (let ie = 0; ie < z.locationSize; ie++)
                v(z.location + ie, V.meshPerAttribute);
              E.isInstancedMesh !== !0 && R._maxInstanceCount === void 0 && (R._maxInstanceCount = V.meshPerAttribute * V.count);
            } else
              for (let ie = 0; ie < z.locationSize; ie++)
                g(z.location + ie);
            r.bindBuffer(r.ARRAY_BUFFER, J);
            for (let ie = 0; ie < z.locationSize; ie++)
              x(
                z.location + ie,
                re / z.locationSize,
                U,
                ee,
                re * ue,
                re / z.locationSize * ie * ue,
                oe
              );
          }
        } else if (C !== void 0) {
          const ee = C[k];
          if (ee !== void 0)
            switch (ee.length) {
              case 2:
                r.vertexAttrib2fv(z.location, ee);
                break;
              case 3:
                r.vertexAttrib3fv(z.location, ee);
                break;
              case 4:
                r.vertexAttrib4fv(z.location, ee);
                break;
              default:
                r.vertexAttrib1fv(z.location, ee);
            }
        }
      }
    }
    S();
  }
  function b() {
    A();
    for (const E in n) {
      const D = n[E];
      for (const T in D) {
        const R = D[T];
        for (const B in R)
          c(R[B].object), delete R[B];
        delete D[T];
      }
      delete n[E];
    }
  }
  function _(E) {
    if (n[E.id] === void 0) return;
    const D = n[E.id];
    for (const T in D) {
      const R = D[T];
      for (const B in R)
        c(R[B].object), delete R[B];
      delete D[T];
    }
    delete n[E.id];
  }
  function M(E) {
    for (const D in n) {
      const T = n[D];
      if (T[E.id] === void 0) continue;
      const R = T[E.id];
      for (const B in R)
        c(R[B].object), delete R[B];
      delete T[E.id];
    }
  }
  function A() {
    w(), s = !0, a !== i && (a = i, u(a.object));
  }
  function w() {
    i.geometry = null, i.program = null, i.wireframe = !1;
  }
  return {
    setup: o,
    reset: A,
    resetDefaultState: w,
    dispose: b,
    releaseStatesOfGeometry: _,
    releaseStatesOfProgram: M,
    initAttributes: p,
    enableAttribute: g,
    disableUnusedAttributes: S
  };
}
function B7(r, e, t) {
  let n;
  function i(u) {
    n = u;
  }
  function a(u, c) {
    r.drawArrays(n, u, c), t.update(c, n, 1);
  }
  function s(u, c, f) {
    f !== 0 && (r.drawArraysInstanced(n, u, c, f), t.update(c, n, f));
  }
  function o(u, c, f) {
    if (f === 0) return;
    e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n, u, 0, c, 0, f);
    let d = 0;
    for (let m = 0; m < f; m++)
      d += c[m];
    t.update(d, n, 1);
  }
  function l(u, c, f, h) {
    if (f === 0) return;
    const d = e.get("WEBGL_multi_draw");
    if (d === null)
      for (let m = 0; m < u.length; m++)
        s(u[m], c[m], h[m]);
    else {
      d.multiDrawArraysInstancedWEBGL(n, u, 0, c, 0, h, 0, f);
      let m = 0;
      for (let p = 0; p < f; p++)
        m += c[p] * h[p];
      t.update(m, n, 1);
    }
  }
  this.setMode = i, this.render = a, this.renderInstances = s, this.renderMultiDraw = o, this.renderMultiDrawInstances = l;
}
function I7(r, e, t, n) {
  let i;
  function a() {
    if (i !== void 0) return i;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const M = e.get("EXT_texture_filter_anisotropic");
      i = r.getParameter(M.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      i = 0;
    return i;
  }
  function s(M) {
    return !(M !== cn && n.convert(M) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function o(M) {
    const A = M === $s && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
    return !(M !== Wn && n.convert(M) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    M !== Hn && !A);
  }
  function l(M) {
    if (M === "highp") {
      if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0)
        return "highp";
      M = "mediump";
    }
    return M === "mediump" && r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let u = t.precision !== void 0 ? t.precision : "highp";
  const c = l(u);
  c !== u && (console.warn("THREE.WebGLRenderer:", u, "not supported, using", c, "instead."), u = c);
  const f = t.logarithmicDepthBuffer === !0, h = t.reverseDepthBuffer === !0 && e.has("EXT_clip_control"), d = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS), m = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS), p = r.getParameter(r.MAX_TEXTURE_SIZE), g = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE), v = r.getParameter(r.MAX_VERTEX_ATTRIBS), S = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS), x = r.getParameter(r.MAX_VARYING_VECTORS), y = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS), b = m > 0, _ = r.getParameter(r.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: a,
    getMaxPrecision: l,
    textureFormatReadable: s,
    textureTypeReadable: o,
    precision: u,
    logarithmicDepthBuffer: f,
    reverseDepthBuffer: h,
    maxTextures: d,
    maxVertexTextures: m,
    maxTextureSize: p,
    maxCubemapSize: g,
    maxAttributes: v,
    maxVertexUniforms: S,
    maxVaryings: x,
    maxFragmentUniforms: y,
    vertexTextures: b,
    maxSamples: _
  };
}
function L7(r) {
  const e = this;
  let t = null, n = 0, i = !1, a = !1;
  const s = new Ii(), o = new ot(), l = { value: null, needsUpdate: !1 };
  this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function(f, h) {
    const d = f.length !== 0 || h || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || i;
    return i = h, n = f.length, d;
  }, this.beginShadows = function() {
    a = !0, c(null);
  }, this.endShadows = function() {
    a = !1;
  }, this.setGlobalState = function(f, h) {
    t = c(f, h, 0);
  }, this.setState = function(f, h, d) {
    const m = f.clippingPlanes, p = f.clipIntersection, g = f.clipShadows, v = r.get(f);
    if (!i || m === null || m.length === 0 || a && !g)
      a ? c(null) : u();
    else {
      const S = a ? 0 : n, x = S * 4;
      let y = v.clippingState || null;
      l.value = y, y = c(m, h, x, d);
      for (let b = 0; b !== x; ++b)
        y[b] = t[b];
      v.clippingState = y, this.numIntersection = p ? this.numPlanes : 0, this.numPlanes += S;
    }
  };
  function u() {
    l.value !== t && (l.value = t, l.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function c(f, h, d, m) {
    const p = f !== null ? f.length : 0;
    let g = null;
    if (p !== 0) {
      if (g = l.value, m !== !0 || g === null) {
        const v = d + p * 4, S = h.matrixWorldInverse;
        o.getNormalMatrix(S), (g === null || g.length < v) && (g = new Float32Array(v));
        for (let x = 0, y = d; x !== p; ++x, y += 4)
          s.copy(f[x]).applyMatrix4(S, o), s.normal.toArray(g, y), g[y + 3] = s.constant;
      }
      l.value = g, l.needsUpdate = !0;
    }
    return e.numPlanes = p, e.numIntersection = 0, g;
  }
}
function U7(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(s, o) {
    return o === Tc ? s.mapping = Ya : o === Nc && (s.mapping = Za), s;
  }
  function n(s) {
    if (s && s.isTexture) {
      const o = s.mapping;
      if (o === Tc || o === Nc)
        if (e.has(s)) {
          const l = e.get(s).texture;
          return t(l, s.mapping);
        } else {
          const l = s.image;
          if (l && l.height > 0) {
            const u = new UL(l.height);
            return u.fromEquirectangularTexture(r, s), e.set(s, u), s.addEventListener("dispose", i), t(u.texture, s.mapping);
          } else
            return null;
        }
    }
    return s;
  }
  function i(s) {
    const o = s.target;
    o.removeEventListener("dispose", i);
    const l = e.get(o);
    l !== void 0 && (e.delete(o), l.dispose());
  }
  function a() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: a
  };
}
const Ra = 4, Cv = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], ki = 20, Hl = /* @__PURE__ */ new Kf(), Tv = /* @__PURE__ */ new wt();
let Gl = null, $l = 0, Vl = 0, ql = !1;
const Li = (1 + Math.sqrt(5)) / 2, Ma = 1 / Li, Nv = [
  /* @__PURE__ */ new ce(-Li, Ma, 0),
  /* @__PURE__ */ new ce(Li, Ma, 0),
  /* @__PURE__ */ new ce(-Ma, 0, Li),
  /* @__PURE__ */ new ce(Ma, 0, Li),
  /* @__PURE__ */ new ce(0, Li, -Ma),
  /* @__PURE__ */ new ce(0, Li, Ma),
  /* @__PURE__ */ new ce(-1, 1, -1),
  /* @__PURE__ */ new ce(1, 1, -1),
  /* @__PURE__ */ new ce(-1, 1, 1),
  /* @__PURE__ */ new ce(1, 1, 1)
];
class Rv {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   *
   * @param {Scene} scene
   * @param {number} sigma
   * @param {number} near
   * @param {number} far
   * @return {WebGLRenderTarget}
   */
  fromScene(e, t = 0, n = 0.1, i = 100) {
    Gl = this._renderer.getRenderTarget(), $l = this._renderer.getActiveCubeFace(), Vl = this._renderer.getActiveMipmapLevel(), ql = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(256);
    const a = this._allocateTargets();
    return a.depthBuffer = !0, this._sceneToCubeUV(e, n, i, a), t > 0 && this._blur(a, 0, 0, t), this._applyPMREM(a), this._cleanup(a), a;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported equirectangular image size is 64 x 32.
   *
   * @param {Texture} equirectangular
   * @param {WebGLRenderTarget} [renderTarget=null] - Optional render target.
   * @return {WebGLRenderTarget}
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported cube size is 16 x 16.
   *
   * @param {Texture} cubemap
   * @param {null} [renderTarget=null] - Optional render target.
   * @return {WebGLRenderTarget}
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = Pv(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = Ov(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(Gl, $l, Vl), this._renderer.xr.enabled = ql, e.scissorTest = !1, Go(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === Ya || e.mapping === Za ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), Gl = this._renderer.getRenderTarget(), $l = this._renderer.getActiveCubeFace(), Vl = this._renderer.getActiveMipmapLevel(), ql = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: bn,
      minFilter: bn,
      generateMipmaps: !1,
      type: $s,
      format: cn,
      colorSpace: Qa,
      depthBuffer: !1
    }, i = Fv(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = Fv(e, t, n);
      const { _lodMax: a } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = z7(a)), this._blurMaterial = k7(a, e, t);
    }
    return i;
  }
  _compileMaterial(e) {
    const t = new Vt(this._lodPlanes[0], e);
    this._renderer.compile(t, Hl);
  }
  _sceneToCubeUV(e, t, n, i) {
    const o = new zr(90, 1, t, n), l = [1, -1, 1, 1, 1, 1], u = [1, 1, 1, -1, -1, -1], c = this._renderer, f = c.autoClear, h = c.toneMapping;
    c.getClearColor(Tv), c.toneMapping = fi, c.autoClear = !1;
    const d = new Wu({
      name: "PMREM.Background",
      side: vr,
      depthWrite: !1,
      depthTest: !1
    }), m = new Vt(new qs(), d);
    let p = !1;
    const g = e.background;
    g ? g.isColor && (d.color.copy(g), e.background = null, p = !0) : (d.color.copy(Tv), p = !0);
    for (let v = 0; v < 6; v++) {
      const S = v % 3;
      S === 0 ? (o.up.set(0, l[v], 0), o.lookAt(u[v], 0, 0)) : S === 1 ? (o.up.set(0, 0, l[v]), o.lookAt(0, u[v], 0)) : (o.up.set(0, l[v], 0), o.lookAt(0, 0, u[v]));
      const x = this._cubeSize;
      Go(i, S * x, v > 2 ? x : 0, x, x), c.setRenderTarget(i), p && c.render(m, o), c.render(e, o);
    }
    m.geometry.dispose(), m.material.dispose(), c.toneMapping = h, c.autoClear = f, e.background = g;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, i = e.mapping === Ya || e.mapping === Za;
    i ? (this._cubemapMaterial === null && (this._cubemapMaterial = Pv()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = Ov());
    const a = i ? this._cubemapMaterial : this._equirectMaterial, s = new Vt(this._lodPlanes[0], a), o = a.uniforms;
    o.envMap.value = e;
    const l = this._cubeSize;
    Go(t, 0, 0, 3 * l, 2 * l), n.setRenderTarget(t), n.render(s, Hl);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    const i = this._lodPlanes.length;
    for (let a = 1; a < i; a++) {
      const s = Math.sqrt(this._sigmas[a] * this._sigmas[a] - this._sigmas[a - 1] * this._sigmas[a - 1]), o = Nv[(i - a - 1) % Nv.length];
      this._blur(e, a - 1, a, s, o);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @param {WebGLRenderTarget} cubeUVRenderTarget
   * @param {number} lodIn
   * @param {number} lodOut
   * @param {number} sigma
   * @param {Vector3} [poleAxis]
   */
  _blur(e, t, n, i, a) {
    const s = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      s,
      t,
      n,
      i,
      "latitudinal",
      a
    ), this._halfBlur(
      s,
      e,
      n,
      n,
      i,
      "longitudinal",
      a
    );
  }
  _halfBlur(e, t, n, i, a, s, o) {
    const l = this._renderer, u = this._blurMaterial;
    s !== "latitudinal" && s !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const c = 3, f = new Vt(this._lodPlanes[i], u), h = u.uniforms, d = this._sizeLods[n] - 1, m = isFinite(a) ? Math.PI / (2 * d) : 2 * Math.PI / (2 * ki - 1), p = a / m, g = isFinite(a) ? 1 + Math.floor(c * p) : ki;
    g > ki && console.warn(`sigmaRadians, ${a}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${ki}`);
    const v = [];
    let S = 0;
    for (let M = 0; M < ki; ++M) {
      const A = M / p, w = Math.exp(-A * A / 2);
      v.push(w), M === 0 ? S += w : M < g && (S += 2 * w);
    }
    for (let M = 0; M < v.length; M++)
      v[M] = v[M] / S;
    h.envMap.value = e.texture, h.samples.value = g, h.weights.value = v, h.latitudinal.value = s === "latitudinal", o && (h.poleAxis.value = o);
    const { _lodMax: x } = this;
    h.dTheta.value = m, h.mipInt.value = x - n;
    const y = this._sizeLods[i], b = 3 * y * (i > x - Ra ? i - x + Ra : 0), _ = 4 * (this._cubeSize - y);
    Go(t, b, _, 3 * y, 2 * y), l.setRenderTarget(t), l.render(f, Hl);
  }
}
function z7(r) {
  const e = [], t = [], n = [];
  let i = r;
  const a = r - Ra + 1 + Cv.length;
  for (let s = 0; s < a; s++) {
    const o = Math.pow(2, i);
    t.push(o);
    let l = 1 / o;
    s > r - Ra ? l = Cv[s - r + Ra - 1] : s === 0 && (l = 0), n.push(l);
    const u = 1 / (o - 2), c = -u, f = 1 + u, h = [c, c, f, c, f, f, c, c, f, f, c, f], d = 6, m = 6, p = 3, g = 2, v = 1, S = new Float32Array(p * m * d), x = new Float32Array(g * m * d), y = new Float32Array(v * m * d);
    for (let _ = 0; _ < d; _++) {
      const M = _ % 3 * 2 / 3 - 1, A = _ > 2 ? 0 : -1, w = [
        M,
        A,
        0,
        M + 2 / 3,
        A,
        0,
        M + 2 / 3,
        A + 1,
        0,
        M,
        A,
        0,
        M + 2 / 3,
        A + 1,
        0,
        M,
        A + 1,
        0
      ];
      S.set(w, p * m * _), x.set(h, g * m * _);
      const E = [_, _, _, _, _, _];
      y.set(E, v * m * _);
    }
    const b = new yn();
    b.setAttribute("position", new Sn(S, p)), b.setAttribute("uv", new Sn(x, g)), b.setAttribute("faceIndex", new Sn(y, v)), e.push(b), i > Ra && i--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function Fv(r, e, t) {
  const n = new Ji(r, e, t);
  return n.texture.mapping = qu, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function Go(r, e, t, n, i) {
  r.viewport.set(e, t, n, i), r.scissor.set(e, t, n, i);
}
function k7(r, e, t) {
  const n = new Float32Array(ki), i = new ce(0, 1, 0);
  return new yi({
    name: "SphericalGaussianBlur",
    defines: {
      n: ki,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${r}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: i }
    },
    vertexShader: Jf(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: ci,
    depthTest: !1,
    depthWrite: !1
  });
}
function Ov() {
  return new yi({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: Jf(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: ci,
    depthTest: !1,
    depthWrite: !1
  });
}
function Pv() {
  return new yi({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: Jf(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: ci,
    depthTest: !1,
    depthWrite: !1
  });
}
function Jf() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function H7(r) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(o) {
    if (o && o.isTexture) {
      const l = o.mapping, u = l === Tc || l === Nc, c = l === Ya || l === Za;
      if (u || c) {
        let f = e.get(o);
        const h = f !== void 0 ? f.texture.pmremVersion : 0;
        if (o.isRenderTargetTexture && o.pmremVersion !== h)
          return t === null && (t = new Rv(r)), f = u ? t.fromEquirectangular(o, f) : t.fromCubemap(o, f), f.texture.pmremVersion = o.pmremVersion, e.set(o, f), f.texture;
        if (f !== void 0)
          return f.texture;
        {
          const d = o.image;
          return u && d && d.height > 0 || c && d && i(d) ? (t === null && (t = new Rv(r)), f = u ? t.fromEquirectangular(o) : t.fromCubemap(o), f.texture.pmremVersion = o.pmremVersion, e.set(o, f), o.addEventListener("dispose", a), f.texture) : null;
        }
      }
    }
    return o;
  }
  function i(o) {
    let l = 0;
    const u = 6;
    for (let c = 0; c < u; c++)
      o[c] !== void 0 && l++;
    return l === u;
  }
  function a(o) {
    const l = o.target;
    l.removeEventListener("dispose", a);
    const u = e.get(l);
    u !== void 0 && (e.delete(l), u.dispose());
  }
  function s() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: s
  };
}
function G7(r) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i = r.getExtension("WEBGL_depth_texture") || r.getExtension("MOZ_WEBGL_depth_texture") || r.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i = r.getExtension("EXT_texture_filter_anisotropic") || r.getExtension("MOZ_EXT_texture_filter_anisotropic") || r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i = r.getExtension("WEBGL_compressed_texture_s3tc") || r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = r.getExtension(n);
    }
    return e[n] = i, i;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function() {
      t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance"), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture"), t("WEBGL_render_shared_exponent");
    },
    get: function(n) {
      const i = t(n);
      return i === null && Ca("THREE.WebGLRenderer: " + n + " extension not supported."), i;
    }
  };
}
function $7(r, e, t, n) {
  const i = {}, a = /* @__PURE__ */ new WeakMap();
  function s(f) {
    const h = f.target;
    h.index !== null && e.remove(h.index);
    for (const m in h.attributes)
      e.remove(h.attributes[m]);
    h.removeEventListener("dispose", s), delete i[h.id];
    const d = a.get(h);
    d && (e.remove(d), a.delete(h)), n.releaseStatesOfGeometry(h), h.isInstancedBufferGeometry === !0 && delete h._maxInstanceCount, t.memory.geometries--;
  }
  function o(f, h) {
    return i[h.id] === !0 || (h.addEventListener("dispose", s), i[h.id] = !0, t.memory.geometries++), h;
  }
  function l(f) {
    const h = f.attributes;
    for (const d in h)
      e.update(h[d], r.ARRAY_BUFFER);
  }
  function u(f) {
    const h = [], d = f.index, m = f.attributes.position;
    let p = 0;
    if (d !== null) {
      const S = d.array;
      p = d.version;
      for (let x = 0, y = S.length; x < y; x += 3) {
        const b = S[x + 0], _ = S[x + 1], M = S[x + 2];
        h.push(b, _, _, M, M, b);
      }
    } else if (m !== void 0) {
      const S = m.array;
      p = m.version;
      for (let x = 0, y = S.length / 3 - 1; x < y; x += 3) {
        const b = x + 0, _ = x + 1, M = x + 2;
        h.push(b, _, _, M, M, b);
      }
    } else
      return;
    const g = new (By(h) ? Hy : ky)(h, 1);
    g.version = p;
    const v = a.get(f);
    v && e.remove(v), a.set(f, g);
  }
  function c(f) {
    const h = a.get(f);
    if (h) {
      const d = f.index;
      d !== null && h.version < d.version && u(f);
    } else
      u(f);
    return a.get(f);
  }
  return {
    get: o,
    update: l,
    getWireframeAttribute: c
  };
}
function V7(r, e, t) {
  let n;
  function i(h) {
    n = h;
  }
  let a, s;
  function o(h) {
    a = h.type, s = h.bytesPerElement;
  }
  function l(h, d) {
    r.drawElements(n, d, a, h * s), t.update(d, n, 1);
  }
  function u(h, d, m) {
    m !== 0 && (r.drawElementsInstanced(n, d, a, h * s, m), t.update(d, n, m));
  }
  function c(h, d, m) {
    if (m === 0) return;
    e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n, d, 0, a, h, 0, m);
    let g = 0;
    for (let v = 0; v < m; v++)
      g += d[v];
    t.update(g, n, 1);
  }
  function f(h, d, m, p) {
    if (m === 0) return;
    const g = e.get("WEBGL_multi_draw");
    if (g === null)
      for (let v = 0; v < h.length; v++)
        u(h[v] / s, d[v], p[v]);
    else {
      g.multiDrawElementsInstancedWEBGL(n, d, 0, a, h, 0, p, 0, m);
      let v = 0;
      for (let S = 0; S < m; S++)
        v += d[S] * p[S];
      t.update(v, n, 1);
    }
  }
  this.setMode = i, this.setIndex = o, this.render = l, this.renderInstances = u, this.renderMultiDraw = c, this.renderMultiDrawInstances = f;
}
function q7(r) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(a, s, o) {
    switch (t.calls++, s) {
      case r.TRIANGLES:
        t.triangles += o * (a / 3);
        break;
      case r.LINES:
        t.lines += o * (a / 2);
        break;
      case r.LINE_STRIP:
        t.lines += o * (a - 1);
        break;
      case r.LINE_LOOP:
        t.lines += o * a;
        break;
      case r.POINTS:
        t.points += o * a;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", s);
        break;
    }
  }
  function i() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: i,
    update: n
  };
}
function W7(r, e, t) {
  const n = /* @__PURE__ */ new WeakMap(), i = new Ht();
  function a(s, o, l) {
    const u = s.morphTargetInfluences, c = o.morphAttributes.position || o.morphAttributes.normal || o.morphAttributes.color, f = c !== void 0 ? c.length : 0;
    let h = n.get(o);
    if (h === void 0 || h.count !== f) {
      let w = function() {
        M.dispose(), n.delete(o), o.removeEventListener("dispose", w);
      };
      h !== void 0 && h.texture.dispose();
      const d = o.morphAttributes.position !== void 0, m = o.morphAttributes.normal !== void 0, p = o.morphAttributes.color !== void 0, g = o.morphAttributes.position || [], v = o.morphAttributes.normal || [], S = o.morphAttributes.color || [];
      let x = 0;
      d === !0 && (x = 1), m === !0 && (x = 2), p === !0 && (x = 3);
      let y = o.attributes.position.count * x, b = 1;
      y > e.maxTextureSize && (b = Math.ceil(y / e.maxTextureSize), y = e.maxTextureSize);
      const _ = new Float32Array(y * b * 4 * f), M = new Ly(_, y, b, f);
      M.type = Hn, M.needsUpdate = !0;
      const A = x * 4;
      for (let E = 0; E < f; E++) {
        const D = g[E], T = v[E], R = S[E], B = y * b * 4 * E;
        for (let I = 0; I < D.count; I++) {
          const C = I * A;
          d === !0 && (i.fromBufferAttribute(D, I), _[B + C + 0] = i.x, _[B + C + 1] = i.y, _[B + C + 2] = i.z, _[B + C + 3] = 0), m === !0 && (i.fromBufferAttribute(T, I), _[B + C + 4] = i.x, _[B + C + 5] = i.y, _[B + C + 6] = i.z, _[B + C + 7] = 0), p === !0 && (i.fromBufferAttribute(R, I), _[B + C + 8] = i.x, _[B + C + 9] = i.y, _[B + C + 10] = i.z, _[B + C + 11] = R.itemSize === 4 ? i.w : 1);
        }
      }
      h = {
        count: f,
        texture: M,
        size: new ft(y, b)
      }, n.set(o, h), o.addEventListener("dispose", w);
    }
    if (s.isInstancedMesh === !0 && s.morphTexture !== null)
      l.getUniforms().setValue(r, "morphTexture", s.morphTexture, t);
    else {
      let d = 0;
      for (let p = 0; p < u.length; p++)
        d += u[p];
      const m = o.morphTargetsRelative ? 1 : 1 - d;
      l.getUniforms().setValue(r, "morphTargetBaseInfluence", m), l.getUniforms().setValue(r, "morphTargetInfluences", u);
    }
    l.getUniforms().setValue(r, "morphTargetsTexture", h.texture, t), l.getUniforms().setValue(r, "morphTargetsTextureSize", h.size);
  }
  return {
    update: a
  };
}
function X7(r, e, t, n) {
  let i = /* @__PURE__ */ new WeakMap();
  function a(l) {
    const u = n.render.frame, c = l.geometry, f = e.get(l, c);
    if (i.get(f) !== u && (e.update(f), i.set(f, u)), l.isInstancedMesh && (l.hasEventListener("dispose", o) === !1 && l.addEventListener("dispose", o), i.get(l) !== u && (t.update(l.instanceMatrix, r.ARRAY_BUFFER), l.instanceColor !== null && t.update(l.instanceColor, r.ARRAY_BUFFER), i.set(l, u))), l.isSkinnedMesh) {
      const h = l.skeleton;
      i.get(h) !== u && (h.update(), i.set(h, u));
    }
    return f;
  }
  function s() {
    i = /* @__PURE__ */ new WeakMap();
  }
  function o(l) {
    const u = l.target;
    u.removeEventListener("dispose", o), t.remove(u.instanceMatrix), u.instanceColor !== null && t.remove(u.instanceColor);
  }
  return {
    update: a,
    dispose: s
  };
}
const Yy = /* @__PURE__ */ new Nr(), Bv = /* @__PURE__ */ new qy(1, 1), Zy = /* @__PURE__ */ new Ly(), Ky = /* @__PURE__ */ new wL(), Jy = /* @__PURE__ */ new Vy(), Iv = [], Lv = [], Uv = new Float32Array(16), zv = new Float32Array(9), kv = new Float32Array(4);
function cs(r, e, t) {
  const n = r[0];
  if (n <= 0 || n > 0) return r;
  const i = e * t;
  let a = Iv[i];
  if (a === void 0 && (a = new Float32Array(i), Iv[i] = a), e !== 0) {
    n.toArray(a, 0);
    for (let s = 1, o = 0; s !== e; ++s)
      o += t, r[s].toArray(a, o);
  }
  return a;
}
function Kt(r, e) {
  if (r.length !== e.length) return !1;
  for (let t = 0, n = r.length; t < n; t++)
    if (r[t] !== e[t]) return !1;
  return !0;
}
function Jt(r, e) {
  for (let t = 0, n = e.length; t < n; t++)
    r[t] = e[t];
}
function Ku(r, e) {
  let t = Lv[e];
  t === void 0 && (t = new Int32Array(e), Lv[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = r.allocateTextureUnit();
  return t;
}
function Y7(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1f(this.addr, e), t[0] = e);
}
function Z7(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Kt(t, e)) return;
    r.uniform2fv(this.addr, e), Jt(t, e);
  }
}
function K7(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (r.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Kt(t, e)) return;
    r.uniform3fv(this.addr, e), Jt(t, e);
  }
}
function J7(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Kt(t, e)) return;
    r.uniform4fv(this.addr, e), Jt(t, e);
  }
}
function Q7(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Kt(t, e)) return;
    r.uniformMatrix2fv(this.addr, !1, e), Jt(t, e);
  } else {
    if (Kt(t, n)) return;
    kv.set(n), r.uniformMatrix2fv(this.addr, !1, kv), Jt(t, n);
  }
}
function j7(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Kt(t, e)) return;
    r.uniformMatrix3fv(this.addr, !1, e), Jt(t, e);
  } else {
    if (Kt(t, n)) return;
    zv.set(n), r.uniformMatrix3fv(this.addr, !1, zv), Jt(t, n);
  }
}
function e9(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Kt(t, e)) return;
    r.uniformMatrix4fv(this.addr, !1, e), Jt(t, e);
  } else {
    if (Kt(t, n)) return;
    Uv.set(n), r.uniformMatrix4fv(this.addr, !1, Uv), Jt(t, n);
  }
}
function t9(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1i(this.addr, e), t[0] = e);
}
function r9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Kt(t, e)) return;
    r.uniform2iv(this.addr, e), Jt(t, e);
  }
}
function n9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Kt(t, e)) return;
    r.uniform3iv(this.addr, e), Jt(t, e);
  }
}
function i9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Kt(t, e)) return;
    r.uniform4iv(this.addr, e), Jt(t, e);
  }
}
function a9(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1ui(this.addr, e), t[0] = e);
}
function s9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Kt(t, e)) return;
    r.uniform2uiv(this.addr, e), Jt(t, e);
  }
}
function o9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Kt(t, e)) return;
    r.uniform3uiv(this.addr, e), Jt(t, e);
  }
}
function u9(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Kt(t, e)) return;
    r.uniform4uiv(this.addr, e), Jt(t, e);
  }
}
function l9(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i);
  let a;
  this.type === r.SAMPLER_2D_SHADOW ? (Bv.compareFunction = Oy, a = Bv) : a = Yy, t.setTexture2D(e || a, i);
}
function c9(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || Ky, i);
}
function f9(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTextureCube(e || Jy, i);
}
function h9(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || Zy, i);
}
function d9(r) {
  switch (r) {
    case 5126:
      return Y7;
    // FLOAT
    case 35664:
      return Z7;
    // _VEC2
    case 35665:
      return K7;
    // _VEC3
    case 35666:
      return J7;
    // _VEC4
    case 35674:
      return Q7;
    // _MAT2
    case 35675:
      return j7;
    // _MAT3
    case 35676:
      return e9;
    // _MAT4
    case 5124:
    case 35670:
      return t9;
    // INT, BOOL
    case 35667:
    case 35671:
      return r9;
    // _VEC2
    case 35668:
    case 35672:
      return n9;
    // _VEC3
    case 35669:
    case 35673:
      return i9;
    // _VEC4
    case 5125:
      return a9;
    // UINT
    case 36294:
      return s9;
    // _VEC2
    case 36295:
      return o9;
    // _VEC3
    case 36296:
      return u9;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return l9;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return c9;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return f9;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return h9;
  }
}
function m9(r, e) {
  r.uniform1fv(this.addr, e);
}
function p9(r, e) {
  const t = cs(e, this.size, 2);
  r.uniform2fv(this.addr, t);
}
function v9(r, e) {
  const t = cs(e, this.size, 3);
  r.uniform3fv(this.addr, t);
}
function g9(r, e) {
  const t = cs(e, this.size, 4);
  r.uniform4fv(this.addr, t);
}
function y9(r, e) {
  const t = cs(e, this.size, 4);
  r.uniformMatrix2fv(this.addr, !1, t);
}
function x9(r, e) {
  const t = cs(e, this.size, 9);
  r.uniformMatrix3fv(this.addr, !1, t);
}
function _9(r, e) {
  const t = cs(e, this.size, 16);
  r.uniformMatrix4fv(this.addr, !1, t);
}
function b9(r, e) {
  r.uniform1iv(this.addr, e);
}
function w9(r, e) {
  r.uniform2iv(this.addr, e);
}
function S9(r, e) {
  r.uniform3iv(this.addr, e);
}
function E9(r, e) {
  r.uniform4iv(this.addr, e);
}
function M9(r, e) {
  r.uniform1uiv(this.addr, e);
}
function A9(r, e) {
  r.uniform2uiv(this.addr, e);
}
function D9(r, e) {
  r.uniform3uiv(this.addr, e);
}
function C9(r, e) {
  r.uniform4uiv(this.addr, e);
}
function T9(r, e, t) {
  const n = this.cache, i = e.length, a = Ku(t, i);
  Kt(n, a) || (r.uniform1iv(this.addr, a), Jt(n, a));
  for (let s = 0; s !== i; ++s)
    t.setTexture2D(e[s] || Yy, a[s]);
}
function N9(r, e, t) {
  const n = this.cache, i = e.length, a = Ku(t, i);
  Kt(n, a) || (r.uniform1iv(this.addr, a), Jt(n, a));
  for (let s = 0; s !== i; ++s)
    t.setTexture3D(e[s] || Ky, a[s]);
}
function R9(r, e, t) {
  const n = this.cache, i = e.length, a = Ku(t, i);
  Kt(n, a) || (r.uniform1iv(this.addr, a), Jt(n, a));
  for (let s = 0; s !== i; ++s)
    t.setTextureCube(e[s] || Jy, a[s]);
}
function F9(r, e, t) {
  const n = this.cache, i = e.length, a = Ku(t, i);
  Kt(n, a) || (r.uniform1iv(this.addr, a), Jt(n, a));
  for (let s = 0; s !== i; ++s)
    t.setTexture2DArray(e[s] || Zy, a[s]);
}
function O9(r) {
  switch (r) {
    case 5126:
      return m9;
    // FLOAT
    case 35664:
      return p9;
    // _VEC2
    case 35665:
      return v9;
    // _VEC3
    case 35666:
      return g9;
    // _VEC4
    case 35674:
      return y9;
    // _MAT2
    case 35675:
      return x9;
    // _MAT3
    case 35676:
      return _9;
    // _MAT4
    case 5124:
    case 35670:
      return b9;
    // INT, BOOL
    case 35667:
    case 35671:
      return w9;
    // _VEC2
    case 35668:
    case 35672:
      return S9;
    // _VEC3
    case 35669:
    case 35673:
      return E9;
    // _VEC4
    case 5125:
      return M9;
    // UINT
    case 36294:
      return A9;
    // _VEC2
    case 36295:
      return D9;
    // _VEC3
    case 36296:
      return C9;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return T9;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return N9;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return R9;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return F9;
  }
}
class P9 {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.setValue = d9(t.type);
  }
}
class B9 {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = O9(t.type);
  }
}
class I9 {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const i = this.seq;
    for (let a = 0, s = i.length; a !== s; ++a) {
      const o = i[a];
      o.setValue(e, t[o.id], n);
    }
  }
}
const Wl = /(\w+)(\])?(\[|\.)?/g;
function Hv(r, e) {
  r.seq.push(e), r.map[e.id] = e;
}
function L9(r, e, t) {
  const n = r.name, i = n.length;
  for (Wl.lastIndex = 0; ; ) {
    const a = Wl.exec(n), s = Wl.lastIndex;
    let o = a[1];
    const l = a[2] === "]", u = a[3];
    if (l && (o = o | 0), u === void 0 || u === "[" && s + 2 === i) {
      Hv(t, u === void 0 ? new P9(o, r, e) : new B9(o, r, e));
      break;
    } else {
      let f = t.map[o];
      f === void 0 && (f = new I9(o), Hv(t, f)), t = f;
    }
  }
}
class iu {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const a = e.getActiveUniform(t, i), s = e.getUniformLocation(t, a.name);
      L9(a, s, this);
    }
  }
  setValue(e, t, n, i) {
    const a = this.map[t];
    a !== void 0 && a.setValue(e, n, i);
  }
  setOptional(e, t, n) {
    const i = t[n];
    i !== void 0 && this.setValue(e, n, i);
  }
  static upload(e, t, n, i) {
    for (let a = 0, s = t.length; a !== s; ++a) {
      const o = t[a], l = n[o.id];
      l.needsUpdate !== !1 && o.setValue(e, l.value, i);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let i = 0, a = e.length; i !== a; ++i) {
      const s = e[i];
      s.id in t && n.push(s);
    }
    return n;
  }
}
function Gv(r, e, t) {
  const n = r.createShader(e);
  return r.shaderSource(n, t), r.compileShader(n), n;
}
const U9 = 37297;
let z9 = 0;
function k9(r, e) {
  const t = r.split(`
`), n = [], i = Math.max(e - 6, 0), a = Math.min(e + 6, t.length);
  for (let s = i; s < a; s++) {
    const o = s + 1;
    n.push(`${o === e ? ">" : " "} ${o}: ${t[s]}`);
  }
  return n.join(`
`);
}
const $v = /* @__PURE__ */ new ot();
function H9(r) {
  xt._getMatrix($v, xt.workingColorSpace, r);
  const e = `mat3( ${$v.elements.map((t) => t.toFixed(4))} )`;
  switch (xt.getTransfer(r)) {
    case Du:
      return [e, "LinearTransferOETF"];
    case Ct:
      return [e, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space: ", r), [e, "LinearTransferOETF"];
  }
}
function Vv(r, e, t) {
  const n = r.getShaderParameter(e, r.COMPILE_STATUS), i = r.getShaderInfoLog(e).trim();
  if (n && i === "") return "";
  const a = /ERROR: 0:(\d+)/.exec(i);
  if (a) {
    const s = parseInt(a[1]);
    return t.toUpperCase() + `

` + i + `

` + k9(r.getShaderSource(e), s);
  } else
    return i;
}
function G9(r, e) {
  const t = H9(e);
  return [
    `vec4 ${r}( vec4 value ) {`,
    `	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,
    "}"
  ].join(`
`);
}
function $9(r, e) {
  let t;
  switch (e) {
    case O8:
      t = "Linear";
      break;
    case P8:
      t = "Reinhard";
      break;
    case B8:
      t = "Cineon";
      break;
    case I8:
      t = "ACESFilmic";
      break;
    case U8:
      t = "AgX";
      break;
    case z8:
      t = "Neutral";
      break;
    case L8:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + r + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
const $o = /* @__PURE__ */ new ce();
function V9() {
  xt.getLuminanceCoefficients($o);
  const r = $o.x.toFixed(4), e = $o.y.toFixed(4), t = $o.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join(`
`);
}
function q9(r) {
  return [
    r.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    r.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(bs).join(`
`);
}
function W9(r) {
  const e = [];
  for (const t in r) {
    const n = r[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function X9(r, e) {
  const t = {}, n = r.getProgramParameter(e, r.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const a = r.getActiveAttrib(e, i), s = a.name;
    let o = 1;
    a.type === r.FLOAT_MAT2 && (o = 2), a.type === r.FLOAT_MAT3 && (o = 3), a.type === r.FLOAT_MAT4 && (o = 4), t[s] = {
      type: a.type,
      location: r.getAttribLocation(e, s),
      locationSize: o
    };
  }
  return t;
}
function bs(r) {
  return r !== "";
}
function qv(r, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return r.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function Wv(r, e) {
  return r.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const Y9 = /^[ \t]*#include +<([\w\d./]+)>/gm;
function of(r) {
  return r.replace(Y9, K9);
}
const Z9 = /* @__PURE__ */ new Map();
function K9(r, e) {
  let t = ct[e];
  if (t === void 0) {
    const n = Z9.get(e);
    if (n !== void 0)
      t = ct[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return of(t);
}
const J9 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function Xv(r) {
  return r.replace(J9, Q9);
}
function Q9(r, e, t, n) {
  let i = "";
  for (let a = parseInt(e); a < parseInt(t); a++)
    i += n.replace(/\[\s*i\s*\]/g, "[ " + a + " ]").replace(/UNROLLED_LOOP_INDEX/g, a);
  return i;
}
function Yv(r) {
  let e = `precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;
  return r.precision === "highp" ? e += `
#define HIGH_PRECISION` : r.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : r.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function j9(r) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return r.shadowMapType === xy ? e = "SHADOWMAP_TYPE_PCF" : r.shadowMapType === h8 ? e = "SHADOWMAP_TYPE_PCF_SOFT" : r.shadowMapType === Ln && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function ez(r) {
  let e = "ENVMAP_TYPE_CUBE";
  if (r.envMap)
    switch (r.envMapMode) {
      case Ya:
      case Za:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case qu:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function tz(r) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (r.envMap)
    switch (r.envMapMode) {
      case Za:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function rz(r) {
  let e = "ENVMAP_BLENDING_NONE";
  if (r.envMap)
    switch (r.combine) {
      case _y:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case R8:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case F8:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function nz(r) {
  const e = r.envMapCubeUVHeight;
  if (e === null) return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 112)), texelHeight: n, maxMip: t };
}
function iz(r, e, t, n) {
  const i = r.getContext(), a = t.defines;
  let s = t.vertexShader, o = t.fragmentShader;
  const l = j9(t), u = ez(t), c = tz(t), f = rz(t), h = nz(t), d = q9(t), m = W9(a), p = i.createProgram();
  let g, v, S = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (g = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    m
  ].filter(bs).join(`
`), g.length > 0 && (g += `
`), v = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    m
  ].filter(bs).join(`
`), v.length > 0 && (v += `
`)) : (g = [
    Yv(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    m,
    t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    t.batching ? "#define USE_BATCHING" : "",
    t.batchingColor ? "#define USE_BATCHING_COLOR" : "",
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + c : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + l : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(bs).join(`
`), v = [
    Yv(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    m,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + u : "",
    t.envMap ? "#define " + c : "",
    t.envMap ? "#define " + f : "",
    h ? "#define CUBEUV_TEXEL_WIDTH " + h.texelWidth : "",
    h ? "#define CUBEUV_TEXEL_HEIGHT " + h.texelHeight : "",
    h ? "#define CUBEUV_MAX_MIP " + h.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.dispersion ? "#define USE_DISPERSION" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor || t.batchingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + l : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== fi ? "#define TONE_MAPPING" : "",
    t.toneMapping !== fi ? ct.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== fi ? $9("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    ct.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    G9("linearToOutputTexel", t.outputColorSpace),
    V9(),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(bs).join(`
`)), s = of(s), s = qv(s, t), s = Wv(s, t), o = of(o), o = qv(o, t), o = Wv(o, t), s = Xv(s), o = Xv(o), t.isRawShaderMaterial !== !0 && (S = `#version 300 es
`, g = [
    d,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + g, v = [
    "#define varying in",
    t.glslVersion === iv ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === iv ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + v);
  const x = S + g + s, y = S + v + o, b = Gv(i, i.VERTEX_SHADER, x), _ = Gv(i, i.FRAGMENT_SHADER, y);
  i.attachShader(p, b), i.attachShader(p, _), t.index0AttributeName !== void 0 ? i.bindAttribLocation(p, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(p, 0, "position"), i.linkProgram(p);
  function M(D) {
    if (r.debug.checkShaderErrors) {
      const T = i.getProgramInfoLog(p).trim(), R = i.getShaderInfoLog(b).trim(), B = i.getShaderInfoLog(_).trim();
      let I = !0, C = !0;
      if (i.getProgramParameter(p, i.LINK_STATUS) === !1)
        if (I = !1, typeof r.debug.onShaderError == "function")
          r.debug.onShaderError(i, p, b, _);
        else {
          const k = Vv(i, b, "vertex"), z = Vv(i, _, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(p, i.VALIDATE_STATUS) + `

Material Name: ` + D.name + `
Material Type: ` + D.type + `

Program Info Log: ` + T + `
` + k + `
` + z
          );
        }
      else T !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", T) : (R === "" || B === "") && (C = !1);
      C && (D.diagnostics = {
        runnable: I,
        programLog: T,
        vertexShader: {
          log: R,
          prefix: g
        },
        fragmentShader: {
          log: B,
          prefix: v
        }
      });
    }
    i.deleteShader(b), i.deleteShader(_), A = new iu(i, p), w = X9(i, p);
  }
  let A;
  this.getUniforms = function() {
    return A === void 0 && M(this), A;
  };
  let w;
  this.getAttributes = function() {
    return w === void 0 && M(this), w;
  };
  let E = t.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return E === !1 && (E = i.getProgramParameter(p, U9)), E;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), i.deleteProgram(p), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = z9++, this.cacheKey = e, this.usedTimes = 1, this.program = p, this.vertexShader = b, this.fragmentShader = _, this;
}
let az = 0;
class sz {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), a = this._getShaderStage(n), s = this._getShaderCacheForMaterial(e);
    return s.has(i) === !1 && (s.add(i), i.usedTimes++), s.has(a) === !1 && (s.add(a), a.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new oz(e), t.set(e, n)), n;
  }
}
class oz {
  constructor(e) {
    this.id = az++, this.code = e, this.usedTimes = 0;
  }
}
function uz(r, e, t, n, i, a, s) {
  const o = new Wf(), l = new sz(), u = /* @__PURE__ */ new Set(), c = [], f = i.logarithmicDepthBuffer, h = i.vertexTextures;
  let d = i.precision;
  const m = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function p(w) {
    return u.add(w), w === 0 ? "uv" : `uv${w}`;
  }
  function g(w, E, D, T, R) {
    const B = T.fog, I = R.geometry, C = w.isMeshStandardMaterial ? T.environment : null, k = (w.isMeshStandardMaterial ? t : e).get(w.envMap || C), z = k && k.mapping === qu ? k.image.height : null, V = m[w.type];
    w.precision !== null && (d = i.getMaxPrecision(w.precision), d !== w.precision && console.warn("THREE.WebGLProgram.getParameters:", w.precision, "not supported, using", d, "instead."));
    const ee = I.morphAttributes.position || I.morphAttributes.normal || I.morphAttributes.color, re = ee !== void 0 ? ee.length : 0;
    let L = 0;
    I.morphAttributes.position !== void 0 && (L = 1), I.morphAttributes.normal !== void 0 && (L = 2), I.morphAttributes.color !== void 0 && (L = 3);
    let J, U, ue, oe;
    if (V) {
      const _t = xn[V];
      J = _t.vertexShader, U = _t.fragmentShader;
    } else
      J = w.vertexShader, U = w.fragmentShader, l.update(w), ue = l.getVertexShaderID(w), oe = l.getFragmentShaderID(w);
    const ie = r.getRenderTarget(), G = r.state.buffers.depth.getReversed(), Z = R.isInstancedMesh === !0, te = R.isBatchedMesh === !0, ne = !!w.map, ae = !!w.matcap, xe = !!k, q = !!w.aoMap, Ae = !!w.lightMap, De = !!w.bumpMap, Ne = !!w.normalMap, we = !!w.displacementMap, Pe = !!w.emissiveMap, $ = !!w.metalnessMap, P = !!w.roughnessMap, O = w.anisotropy > 0, F = w.clearcoat > 0, H = w.dispersion > 0, X = w.iridescence > 0, K = w.sheen > 0, se = w.transmission > 0, le = O && !!w.anisotropyMap, ge = F && !!w.clearcoatMap, be = F && !!w.clearcoatNormalMap, he = F && !!w.clearcoatRoughnessMap, ye = X && !!w.iridescenceMap, Oe = X && !!w.iridescenceThicknessMap, Te = K && !!w.sheenColorMap, Fe = K && !!w.sheenRoughnessMap, N = !!w.specularMap, j = !!w.specularColorMap, de = !!w.specularIntensityMap, Q = se && !!w.transmissionMap, Se = se && !!w.thicknessMap, pe = !!w.gradientMap, Ee = !!w.alphaMap, ze = w.alphaTest > 0, ke = !!w.alphaHash, at = !!w.extensions;
    let Bt = fi;
    w.toneMapped && (ie === null || ie.isXRRenderTarget === !0) && (Bt = r.toneMapping);
    const jt = {
      shaderID: V,
      shaderType: w.type,
      shaderName: w.name,
      vertexShader: J,
      fragmentShader: U,
      defines: w.defines,
      customVertexShaderID: ue,
      customFragmentShaderID: oe,
      isRawShaderMaterial: w.isRawShaderMaterial === !0,
      glslVersion: w.glslVersion,
      precision: d,
      batching: te,
      batchingColor: te && R._colorsTexture !== null,
      instancing: Z,
      instancingColor: Z && R.instanceColor !== null,
      instancingMorph: Z && R.morphTexture !== null,
      supportsVertexTextures: h,
      outputColorSpace: ie === null ? r.outputColorSpace : ie.isXRRenderTarget === !0 ? ie.texture.colorSpace : Qa,
      alphaToCoverage: !!w.alphaToCoverage,
      map: ne,
      matcap: ae,
      envMap: xe,
      envMapMode: xe && k.mapping,
      envMapCubeUVHeight: z,
      aoMap: q,
      lightMap: Ae,
      bumpMap: De,
      normalMap: Ne,
      displacementMap: h && we,
      emissiveMap: Pe,
      normalMapObjectSpace: Ne && w.normalMapType === $8,
      normalMapTangentSpace: Ne && w.normalMapType === Fy,
      metalnessMap: $,
      roughnessMap: P,
      anisotropy: O,
      anisotropyMap: le,
      clearcoat: F,
      clearcoatMap: ge,
      clearcoatNormalMap: be,
      clearcoatRoughnessMap: he,
      dispersion: H,
      iridescence: X,
      iridescenceMap: ye,
      iridescenceThicknessMap: Oe,
      sheen: K,
      sheenColorMap: Te,
      sheenRoughnessMap: Fe,
      specularMap: N,
      specularColorMap: j,
      specularIntensityMap: de,
      transmission: se,
      transmissionMap: Q,
      thicknessMap: Se,
      gradientMap: pe,
      opaque: w.transparent === !1 && w.blending === La && w.alphaToCoverage === !1,
      alphaMap: Ee,
      alphaTest: ze,
      alphaHash: ke,
      combine: w.combine,
      //
      mapUv: ne && p(w.map.channel),
      aoMapUv: q && p(w.aoMap.channel),
      lightMapUv: Ae && p(w.lightMap.channel),
      bumpMapUv: De && p(w.bumpMap.channel),
      normalMapUv: Ne && p(w.normalMap.channel),
      displacementMapUv: we && p(w.displacementMap.channel),
      emissiveMapUv: Pe && p(w.emissiveMap.channel),
      metalnessMapUv: $ && p(w.metalnessMap.channel),
      roughnessMapUv: P && p(w.roughnessMap.channel),
      anisotropyMapUv: le && p(w.anisotropyMap.channel),
      clearcoatMapUv: ge && p(w.clearcoatMap.channel),
      clearcoatNormalMapUv: be && p(w.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: he && p(w.clearcoatRoughnessMap.channel),
      iridescenceMapUv: ye && p(w.iridescenceMap.channel),
      iridescenceThicknessMapUv: Oe && p(w.iridescenceThicknessMap.channel),
      sheenColorMapUv: Te && p(w.sheenColorMap.channel),
      sheenRoughnessMapUv: Fe && p(w.sheenRoughnessMap.channel),
      specularMapUv: N && p(w.specularMap.channel),
      specularColorMapUv: j && p(w.specularColorMap.channel),
      specularIntensityMapUv: de && p(w.specularIntensityMap.channel),
      transmissionMapUv: Q && p(w.transmissionMap.channel),
      thicknessMapUv: Se && p(w.thicknessMap.channel),
      alphaMapUv: Ee && p(w.alphaMap.channel),
      //
      vertexTangents: !!I.attributes.tangent && (Ne || O),
      vertexColors: w.vertexColors,
      vertexAlphas: w.vertexColors === !0 && !!I.attributes.color && I.attributes.color.itemSize === 4,
      pointsUvs: R.isPoints === !0 && !!I.attributes.uv && (ne || Ee),
      fog: !!B,
      useFog: w.fog === !0,
      fogExp2: !!B && B.isFogExp2,
      flatShading: w.flatShading === !0,
      sizeAttenuation: w.sizeAttenuation === !0,
      logarithmicDepthBuffer: f,
      reverseDepthBuffer: G,
      skinning: R.isSkinnedMesh === !0,
      morphTargets: I.morphAttributes.position !== void 0,
      morphNormals: I.morphAttributes.normal !== void 0,
      morphColors: I.morphAttributes.color !== void 0,
      morphTargetsCount: re,
      morphTextureStride: L,
      numDirLights: E.directional.length,
      numPointLights: E.point.length,
      numSpotLights: E.spot.length,
      numSpotLightMaps: E.spotLightMap.length,
      numRectAreaLights: E.rectArea.length,
      numHemiLights: E.hemi.length,
      numDirLightShadows: E.directionalShadowMap.length,
      numPointLightShadows: E.pointShadowMap.length,
      numSpotLightShadows: E.spotShadowMap.length,
      numSpotLightShadowsWithMaps: E.numSpotLightShadowsWithMaps,
      numLightProbes: E.numLightProbes,
      numClippingPlanes: s.numPlanes,
      numClipIntersection: s.numIntersection,
      dithering: w.dithering,
      shadowMapEnabled: r.shadowMap.enabled && D.length > 0,
      shadowMapType: r.shadowMap.type,
      toneMapping: Bt,
      decodeVideoTexture: ne && w.map.isVideoTexture === !0 && xt.getTransfer(w.map.colorSpace) === Ct,
      decodeVideoTextureEmissive: Pe && w.emissiveMap.isVideoTexture === !0 && xt.getTransfer(w.emissiveMap.colorSpace) === Ct,
      premultipliedAlpha: w.premultipliedAlpha,
      doubleSided: w.side === Un,
      flipSided: w.side === vr,
      useDepthPacking: w.depthPacking >= 0,
      depthPacking: w.depthPacking || 0,
      index0AttributeName: w.index0AttributeName,
      extensionClipCullDistance: at && w.extensions.clipCullDistance === !0 && n.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (at && w.extensions.multiDraw === !0 || te) && n.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: w.customProgramCacheKey()
    };
    return jt.vertexUv1s = u.has(1), jt.vertexUv2s = u.has(2), jt.vertexUv3s = u.has(3), u.clear(), jt;
  }
  function v(w) {
    const E = [];
    if (w.shaderID ? E.push(w.shaderID) : (E.push(w.customVertexShaderID), E.push(w.customFragmentShaderID)), w.defines !== void 0)
      for (const D in w.defines)
        E.push(D), E.push(w.defines[D]);
    return w.isRawShaderMaterial === !1 && (S(E, w), x(E, w), E.push(r.outputColorSpace)), E.push(w.customProgramCacheKey), E.join();
  }
  function S(w, E) {
    w.push(E.precision), w.push(E.outputColorSpace), w.push(E.envMapMode), w.push(E.envMapCubeUVHeight), w.push(E.mapUv), w.push(E.alphaMapUv), w.push(E.lightMapUv), w.push(E.aoMapUv), w.push(E.bumpMapUv), w.push(E.normalMapUv), w.push(E.displacementMapUv), w.push(E.emissiveMapUv), w.push(E.metalnessMapUv), w.push(E.roughnessMapUv), w.push(E.anisotropyMapUv), w.push(E.clearcoatMapUv), w.push(E.clearcoatNormalMapUv), w.push(E.clearcoatRoughnessMapUv), w.push(E.iridescenceMapUv), w.push(E.iridescenceThicknessMapUv), w.push(E.sheenColorMapUv), w.push(E.sheenRoughnessMapUv), w.push(E.specularMapUv), w.push(E.specularColorMapUv), w.push(E.specularIntensityMapUv), w.push(E.transmissionMapUv), w.push(E.thicknessMapUv), w.push(E.combine), w.push(E.fogExp2), w.push(E.sizeAttenuation), w.push(E.morphTargetsCount), w.push(E.morphAttributeCount), w.push(E.numDirLights), w.push(E.numPointLights), w.push(E.numSpotLights), w.push(E.numSpotLightMaps), w.push(E.numHemiLights), w.push(E.numRectAreaLights), w.push(E.numDirLightShadows), w.push(E.numPointLightShadows), w.push(E.numSpotLightShadows), w.push(E.numSpotLightShadowsWithMaps), w.push(E.numLightProbes), w.push(E.shadowMapType), w.push(E.toneMapping), w.push(E.numClippingPlanes), w.push(E.numClipIntersection), w.push(E.depthPacking);
  }
  function x(w, E) {
    o.disableAll(), E.supportsVertexTextures && o.enable(0), E.instancing && o.enable(1), E.instancingColor && o.enable(2), E.instancingMorph && o.enable(3), E.matcap && o.enable(4), E.envMap && o.enable(5), E.normalMapObjectSpace && o.enable(6), E.normalMapTangentSpace && o.enable(7), E.clearcoat && o.enable(8), E.iridescence && o.enable(9), E.alphaTest && o.enable(10), E.vertexColors && o.enable(11), E.vertexAlphas && o.enable(12), E.vertexUv1s && o.enable(13), E.vertexUv2s && o.enable(14), E.vertexUv3s && o.enable(15), E.vertexTangents && o.enable(16), E.anisotropy && o.enable(17), E.alphaHash && o.enable(18), E.batching && o.enable(19), E.dispersion && o.enable(20), E.batchingColor && o.enable(21), w.push(o.mask), o.disableAll(), E.fog && o.enable(0), E.useFog && o.enable(1), E.flatShading && o.enable(2), E.logarithmicDepthBuffer && o.enable(3), E.reverseDepthBuffer && o.enable(4), E.skinning && o.enable(5), E.morphTargets && o.enable(6), E.morphNormals && o.enable(7), E.morphColors && o.enable(8), E.premultipliedAlpha && o.enable(9), E.shadowMapEnabled && o.enable(10), E.doubleSided && o.enable(11), E.flipSided && o.enable(12), E.useDepthPacking && o.enable(13), E.dithering && o.enable(14), E.transmission && o.enable(15), E.sheen && o.enable(16), E.opaque && o.enable(17), E.pointsUvs && o.enable(18), E.decodeVideoTexture && o.enable(19), E.decodeVideoTextureEmissive && o.enable(20), E.alphaToCoverage && o.enable(21), w.push(o.mask);
  }
  function y(w) {
    const E = m[w.type];
    let D;
    if (E) {
      const T = xn[E];
      D = PL.clone(T.uniforms);
    } else
      D = w.uniforms;
    return D;
  }
  function b(w, E) {
    let D;
    for (let T = 0, R = c.length; T < R; T++) {
      const B = c[T];
      if (B.cacheKey === E) {
        D = B, ++D.usedTimes;
        break;
      }
    }
    return D === void 0 && (D = new iz(r, E, w, a), c.push(D)), D;
  }
  function _(w) {
    if (--w.usedTimes === 0) {
      const E = c.indexOf(w);
      c[E] = c[c.length - 1], c.pop(), w.destroy();
    }
  }
  function M(w) {
    l.remove(w);
  }
  function A() {
    l.dispose();
  }
  return {
    getParameters: g,
    getProgramCacheKey: v,
    getUniforms: y,
    acquireProgram: b,
    releaseProgram: _,
    releaseShaderCache: M,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: c,
    dispose: A
  };
}
function lz() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(s) {
    return r.has(s);
  }
  function t(s) {
    let o = r.get(s);
    return o === void 0 && (o = {}, r.set(s, o)), o;
  }
  function n(s) {
    r.delete(s);
  }
  function i(s, o, l) {
    r.get(s)[o] = l;
  }
  function a() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    has: e,
    get: t,
    remove: n,
    update: i,
    dispose: a
  };
}
function cz(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.material.id !== e.material.id ? r.material.id - e.material.id : r.z !== e.z ? r.z - e.z : r.id - e.id;
}
function Zv(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.z !== e.z ? e.z - r.z : r.id - e.id;
}
function Kv() {
  const r = [];
  let e = 0;
  const t = [], n = [], i = [];
  function a() {
    e = 0, t.length = 0, n.length = 0, i.length = 0;
  }
  function s(f, h, d, m, p, g) {
    let v = r[e];
    return v === void 0 ? (v = {
      id: f.id,
      object: f,
      geometry: h,
      material: d,
      groupOrder: m,
      renderOrder: f.renderOrder,
      z: p,
      group: g
    }, r[e] = v) : (v.id = f.id, v.object = f, v.geometry = h, v.material = d, v.groupOrder = m, v.renderOrder = f.renderOrder, v.z = p, v.group = g), e++, v;
  }
  function o(f, h, d, m, p, g) {
    const v = s(f, h, d, m, p, g);
    d.transmission > 0 ? n.push(v) : d.transparent === !0 ? i.push(v) : t.push(v);
  }
  function l(f, h, d, m, p, g) {
    const v = s(f, h, d, m, p, g);
    d.transmission > 0 ? n.unshift(v) : d.transparent === !0 ? i.unshift(v) : t.unshift(v);
  }
  function u(f, h) {
    t.length > 1 && t.sort(f || cz), n.length > 1 && n.sort(h || Zv), i.length > 1 && i.sort(h || Zv);
  }
  function c() {
    for (let f = e, h = r.length; f < h; f++) {
      const d = r[f];
      if (d.id === null) break;
      d.id = null, d.object = null, d.geometry = null, d.material = null, d.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: i,
    init: a,
    push: o,
    unshift: l,
    finish: c,
    sort: u
  };
}
function fz() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(n, i) {
    const a = r.get(n);
    let s;
    return a === void 0 ? (s = new Kv(), r.set(n, [s])) : i >= a.length ? (s = new Kv(), a.push(s)) : s = a[i], s;
  }
  function t() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function hz() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new ce(),
            color: new wt()
          };
          break;
        case "SpotLight":
          t = {
            position: new ce(),
            direction: new ce(),
            color: new wt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new ce(),
            color: new wt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new ce(),
            skyColor: new wt(),
            groundColor: new wt()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new wt(),
            position: new ce(),
            halfWidth: new ce(),
            halfHeight: new ce()
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
function dz() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft()
          };
          break;
        case "SpotLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft()
          };
          break;
        case "PointLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
let mz = 0;
function pz(r, e) {
  return (e.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (r.map ? 1 : 0);
}
function vz(r) {
  const e = new hz(), t = dz(), n = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let u = 0; u < 9; u++) n.probe.push(new ce());
  const i = new ce(), a = new mt(), s = new mt();
  function o(u) {
    let c = 0, f = 0, h = 0;
    for (let w = 0; w < 9; w++) n.probe[w].set(0, 0, 0);
    let d = 0, m = 0, p = 0, g = 0, v = 0, S = 0, x = 0, y = 0, b = 0, _ = 0, M = 0;
    u.sort(pz);
    for (let w = 0, E = u.length; w < E; w++) {
      const D = u[w], T = D.color, R = D.intensity, B = D.distance, I = D.shadow && D.shadow.map ? D.shadow.map.texture : null;
      if (D.isAmbientLight)
        c += T.r * R, f += T.g * R, h += T.b * R;
      else if (D.isLightProbe) {
        for (let C = 0; C < 9; C++)
          n.probe[C].addScaledVector(D.sh.coefficients[C], R);
        M++;
      } else if (D.isDirectionalLight) {
        const C = e.get(D);
        if (C.color.copy(D.color).multiplyScalar(D.intensity), D.castShadow) {
          const k = D.shadow, z = t.get(D);
          z.shadowIntensity = k.intensity, z.shadowBias = k.bias, z.shadowNormalBias = k.normalBias, z.shadowRadius = k.radius, z.shadowMapSize = k.mapSize, n.directionalShadow[d] = z, n.directionalShadowMap[d] = I, n.directionalShadowMatrix[d] = D.shadow.matrix, S++;
        }
        n.directional[d] = C, d++;
      } else if (D.isSpotLight) {
        const C = e.get(D);
        C.position.setFromMatrixPosition(D.matrixWorld), C.color.copy(T).multiplyScalar(R), C.distance = B, C.coneCos = Math.cos(D.angle), C.penumbraCos = Math.cos(D.angle * (1 - D.penumbra)), C.decay = D.decay, n.spot[p] = C;
        const k = D.shadow;
        if (D.map && (n.spotLightMap[b] = D.map, b++, k.updateMatrices(D), D.castShadow && _++), n.spotLightMatrix[p] = k.matrix, D.castShadow) {
          const z = t.get(D);
          z.shadowIntensity = k.intensity, z.shadowBias = k.bias, z.shadowNormalBias = k.normalBias, z.shadowRadius = k.radius, z.shadowMapSize = k.mapSize, n.spotShadow[p] = z, n.spotShadowMap[p] = I, y++;
        }
        p++;
      } else if (D.isRectAreaLight) {
        const C = e.get(D);
        C.color.copy(T).multiplyScalar(R), C.halfWidth.set(D.width * 0.5, 0, 0), C.halfHeight.set(0, D.height * 0.5, 0), n.rectArea[g] = C, g++;
      } else if (D.isPointLight) {
        const C = e.get(D);
        if (C.color.copy(D.color).multiplyScalar(D.intensity), C.distance = D.distance, C.decay = D.decay, D.castShadow) {
          const k = D.shadow, z = t.get(D);
          z.shadowIntensity = k.intensity, z.shadowBias = k.bias, z.shadowNormalBias = k.normalBias, z.shadowRadius = k.radius, z.shadowMapSize = k.mapSize, z.shadowCameraNear = k.camera.near, z.shadowCameraFar = k.camera.far, n.pointShadow[m] = z, n.pointShadowMap[m] = I, n.pointShadowMatrix[m] = D.shadow.matrix, x++;
        }
        n.point[m] = C, m++;
      } else if (D.isHemisphereLight) {
        const C = e.get(D);
        C.skyColor.copy(D.color).multiplyScalar(R), C.groundColor.copy(D.groundColor).multiplyScalar(R), n.hemi[v] = C, v++;
      }
    }
    g > 0 && (r.has("OES_texture_float_linear") === !0 ? (n.rectAreaLTC1 = Le.LTC_FLOAT_1, n.rectAreaLTC2 = Le.LTC_FLOAT_2) : (n.rectAreaLTC1 = Le.LTC_HALF_1, n.rectAreaLTC2 = Le.LTC_HALF_2)), n.ambient[0] = c, n.ambient[1] = f, n.ambient[2] = h;
    const A = n.hash;
    (A.directionalLength !== d || A.pointLength !== m || A.spotLength !== p || A.rectAreaLength !== g || A.hemiLength !== v || A.numDirectionalShadows !== S || A.numPointShadows !== x || A.numSpotShadows !== y || A.numSpotMaps !== b || A.numLightProbes !== M) && (n.directional.length = d, n.spot.length = p, n.rectArea.length = g, n.point.length = m, n.hemi.length = v, n.directionalShadow.length = S, n.directionalShadowMap.length = S, n.pointShadow.length = x, n.pointShadowMap.length = x, n.spotShadow.length = y, n.spotShadowMap.length = y, n.directionalShadowMatrix.length = S, n.pointShadowMatrix.length = x, n.spotLightMatrix.length = y + b - _, n.spotLightMap.length = b, n.numSpotLightShadowsWithMaps = _, n.numLightProbes = M, A.directionalLength = d, A.pointLength = m, A.spotLength = p, A.rectAreaLength = g, A.hemiLength = v, A.numDirectionalShadows = S, A.numPointShadows = x, A.numSpotShadows = y, A.numSpotMaps = b, A.numLightProbes = M, n.version = mz++);
  }
  function l(u, c) {
    let f = 0, h = 0, d = 0, m = 0, p = 0;
    const g = c.matrixWorldInverse;
    for (let v = 0, S = u.length; v < S; v++) {
      const x = u[v];
      if (x.isDirectionalLight) {
        const y = n.directional[f];
        y.direction.setFromMatrixPosition(x.matrixWorld), i.setFromMatrixPosition(x.target.matrixWorld), y.direction.sub(i), y.direction.transformDirection(g), f++;
      } else if (x.isSpotLight) {
        const y = n.spot[d];
        y.position.setFromMatrixPosition(x.matrixWorld), y.position.applyMatrix4(g), y.direction.setFromMatrixPosition(x.matrixWorld), i.setFromMatrixPosition(x.target.matrixWorld), y.direction.sub(i), y.direction.transformDirection(g), d++;
      } else if (x.isRectAreaLight) {
        const y = n.rectArea[m];
        y.position.setFromMatrixPosition(x.matrixWorld), y.position.applyMatrix4(g), s.identity(), a.copy(x.matrixWorld), a.premultiply(g), s.extractRotation(a), y.halfWidth.set(x.width * 0.5, 0, 0), y.halfHeight.set(0, x.height * 0.5, 0), y.halfWidth.applyMatrix4(s), y.halfHeight.applyMatrix4(s), m++;
      } else if (x.isPointLight) {
        const y = n.point[h];
        y.position.setFromMatrixPosition(x.matrixWorld), y.position.applyMatrix4(g), h++;
      } else if (x.isHemisphereLight) {
        const y = n.hemi[p];
        y.direction.setFromMatrixPosition(x.matrixWorld), y.direction.transformDirection(g), p++;
      }
    }
  }
  return {
    setup: o,
    setupView: l,
    state: n
  };
}
function Jv(r) {
  const e = new vz(r), t = [], n = [];
  function i(c) {
    u.camera = c, t.length = 0, n.length = 0;
  }
  function a(c) {
    t.push(c);
  }
  function s(c) {
    n.push(c);
  }
  function o() {
    e.setup(t);
  }
  function l(c) {
    e.setupView(t, c);
  }
  const u = {
    lightsArray: t,
    shadowsArray: n,
    camera: null,
    lights: e,
    transmissionRenderTarget: {}
  };
  return {
    init: i,
    state: u,
    setupLights: o,
    setupLightsView: l,
    pushLight: a,
    pushShadow: s
  };
}
function gz(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(i, a = 0) {
    const s = e.get(i);
    let o;
    return s === void 0 ? (o = new Jv(r), e.set(i, [o])) : a >= s.length ? (o = new Jv(r), s.push(o)) : o = s[a], o;
  }
  function n() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: t,
    dispose: n
  };
}
const yz = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, xz = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function _z(r, e, t) {
  let n = new Xf();
  const i = new ft(), a = new ft(), s = new Ht(), o = new GL({ depthPacking: G8 }), l = new $L(), u = {}, c = t.maxTextureSize, f = { [gi]: vr, [vr]: gi, [Un]: Un }, h = new yi({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new ft() },
      radius: { value: 4 }
    },
    vertexShader: yz,
    fragmentShader: xz
  }), d = h.clone();
  d.defines.HORIZONTAL_PASS = 1;
  const m = new yn();
  m.setAttribute(
    "position",
    new Sn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const p = new Vt(m, h), g = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = xy;
  let v = this.type;
  this.render = function(_, M, A) {
    if (g.enabled === !1 || g.autoUpdate === !1 && g.needsUpdate === !1 || _.length === 0) return;
    const w = r.getRenderTarget(), E = r.getActiveCubeFace(), D = r.getActiveMipmapLevel(), T = r.state;
    T.setBlending(ci), T.buffers.color.setClear(1, 1, 1, 1), T.buffers.depth.setTest(!0), T.setScissorTest(!1);
    const R = v !== Ln && this.type === Ln, B = v === Ln && this.type !== Ln;
    for (let I = 0, C = _.length; I < C; I++) {
      const k = _[I], z = k.shadow;
      if (z === void 0) {
        console.warn("THREE.WebGLShadowMap:", k, "has no shadow.");
        continue;
      }
      if (z.autoUpdate === !1 && z.needsUpdate === !1) continue;
      i.copy(z.mapSize);
      const V = z.getFrameExtents();
      if (i.multiply(V), a.copy(z.mapSize), (i.x > c || i.y > c) && (i.x > c && (a.x = Math.floor(c / V.x), i.x = a.x * V.x, z.mapSize.x = a.x), i.y > c && (a.y = Math.floor(c / V.y), i.y = a.y * V.y, z.mapSize.y = a.y)), z.map === null || R === !0 || B === !0) {
        const re = this.type !== Ln ? { minFilter: mn, magFilter: mn } : {};
        z.map !== null && z.map.dispose(), z.map = new Ji(i.x, i.y, re), z.map.texture.name = k.name + ".shadowMap", z.camera.updateProjectionMatrix();
      }
      r.setRenderTarget(z.map), r.clear();
      const ee = z.getViewportCount();
      for (let re = 0; re < ee; re++) {
        const L = z.getViewport(re);
        s.set(
          a.x * L.x,
          a.y * L.y,
          a.x * L.z,
          a.y * L.w
        ), T.viewport(s), z.updateMatrices(k, re), n = z.getFrustum(), y(M, A, z.camera, k, this.type);
      }
      z.isPointLightShadow !== !0 && this.type === Ln && S(z, A), z.needsUpdate = !1;
    }
    v = this.type, g.needsUpdate = !1, r.setRenderTarget(w, E, D);
  };
  function S(_, M) {
    const A = e.update(p);
    h.defines.VSM_SAMPLES !== _.blurSamples && (h.defines.VSM_SAMPLES = _.blurSamples, d.defines.VSM_SAMPLES = _.blurSamples, h.needsUpdate = !0, d.needsUpdate = !0), _.mapPass === null && (_.mapPass = new Ji(i.x, i.y)), h.uniforms.shadow_pass.value = _.map.texture, h.uniforms.resolution.value = _.mapSize, h.uniforms.radius.value = _.radius, r.setRenderTarget(_.mapPass), r.clear(), r.renderBufferDirect(M, null, A, h, p, null), d.uniforms.shadow_pass.value = _.mapPass.texture, d.uniforms.resolution.value = _.mapSize, d.uniforms.radius.value = _.radius, r.setRenderTarget(_.map), r.clear(), r.renderBufferDirect(M, null, A, d, p, null);
  }
  function x(_, M, A, w) {
    let E = null;
    const D = A.isPointLight === !0 ? _.customDistanceMaterial : _.customDepthMaterial;
    if (D !== void 0)
      E = D;
    else if (E = A.isPointLight === !0 ? l : o, r.localClippingEnabled && M.clipShadows === !0 && Array.isArray(M.clippingPlanes) && M.clippingPlanes.length !== 0 || M.displacementMap && M.displacementScale !== 0 || M.alphaMap && M.alphaTest > 0 || M.map && M.alphaTest > 0) {
      const T = E.uuid, R = M.uuid;
      let B = u[T];
      B === void 0 && (B = {}, u[T] = B);
      let I = B[R];
      I === void 0 && (I = E.clone(), B[R] = I, M.addEventListener("dispose", b)), E = I;
    }
    if (E.visible = M.visible, E.wireframe = M.wireframe, w === Ln ? E.side = M.shadowSide !== null ? M.shadowSide : M.side : E.side = M.shadowSide !== null ? M.shadowSide : f[M.side], E.alphaMap = M.alphaMap, E.alphaTest = M.alphaTest, E.map = M.map, E.clipShadows = M.clipShadows, E.clippingPlanes = M.clippingPlanes, E.clipIntersection = M.clipIntersection, E.displacementMap = M.displacementMap, E.displacementScale = M.displacementScale, E.displacementBias = M.displacementBias, E.wireframeLinewidth = M.wireframeLinewidth, E.linewidth = M.linewidth, A.isPointLight === !0 && E.isMeshDistanceMaterial === !0) {
      const T = r.properties.get(E);
      T.light = A;
    }
    return E;
  }
  function y(_, M, A, w, E) {
    if (_.visible === !1) return;
    if (_.layers.test(M.layers) && (_.isMesh || _.isLine || _.isPoints) && (_.castShadow || _.receiveShadow && E === Ln) && (!_.frustumCulled || n.intersectsObject(_))) {
      _.modelViewMatrix.multiplyMatrices(A.matrixWorldInverse, _.matrixWorld);
      const R = e.update(_), B = _.material;
      if (Array.isArray(B)) {
        const I = R.groups;
        for (let C = 0, k = I.length; C < k; C++) {
          const z = I[C], V = B[z.materialIndex];
          if (V && V.visible) {
            const ee = x(_, V, w, E);
            _.onBeforeShadow(r, _, M, A, R, ee, z), r.renderBufferDirect(A, null, R, ee, _, z), _.onAfterShadow(r, _, M, A, R, ee, z);
          }
        }
      } else if (B.visible) {
        const I = x(_, B, w, E);
        _.onBeforeShadow(r, _, M, A, R, I, null), r.renderBufferDirect(A, null, R, I, _, null), _.onAfterShadow(r, _, M, A, R, I, null);
      }
    }
    const T = _.children;
    for (let R = 0, B = T.length; R < B; R++)
      y(T[R], M, A, w, E);
  }
  function b(_) {
    _.target.removeEventListener("dispose", b);
    for (const A in u) {
      const w = u[A], E = _.target.uuid;
      E in w && (w[E].dispose(), delete w[E]);
    }
  }
}
const bz = {
  [wc]: Sc,
  [Ec]: Dc,
  [Mc]: Cc,
  [Xa]: Ac,
  [Sc]: wc,
  [Dc]: Ec,
  [Cc]: Mc,
  [Ac]: Xa
};
function wz(r, e) {
  function t() {
    let Q = !1;
    const Se = new Ht();
    let pe = null;
    const Ee = new Ht(0, 0, 0, 0);
    return {
      setMask: function(ze) {
        pe !== ze && !Q && (r.colorMask(ze, ze, ze, ze), pe = ze);
      },
      setLocked: function(ze) {
        Q = ze;
      },
      setClear: function(ze, ke, at, Bt, jt) {
        jt === !0 && (ze *= Bt, ke *= Bt, at *= Bt), Se.set(ze, ke, at, Bt), Ee.equals(Se) === !1 && (r.clearColor(ze, ke, at, Bt), Ee.copy(Se));
      },
      reset: function() {
        Q = !1, pe = null, Ee.set(-1, 0, 0, 0);
      }
    };
  }
  function n() {
    let Q = !1, Se = !1, pe = null, Ee = null, ze = null;
    return {
      setReversed: function(ke) {
        if (Se !== ke) {
          const at = e.get("EXT_clip_control");
          Se ? at.clipControlEXT(at.LOWER_LEFT_EXT, at.ZERO_TO_ONE_EXT) : at.clipControlEXT(at.LOWER_LEFT_EXT, at.NEGATIVE_ONE_TO_ONE_EXT);
          const Bt = ze;
          ze = null, this.setClear(Bt);
        }
        Se = ke;
      },
      getReversed: function() {
        return Se;
      },
      setTest: function(ke) {
        ke ? ie(r.DEPTH_TEST) : G(r.DEPTH_TEST);
      },
      setMask: function(ke) {
        pe !== ke && !Q && (r.depthMask(ke), pe = ke);
      },
      setFunc: function(ke) {
        if (Se && (ke = bz[ke]), Ee !== ke) {
          switch (ke) {
            case wc:
              r.depthFunc(r.NEVER);
              break;
            case Sc:
              r.depthFunc(r.ALWAYS);
              break;
            case Ec:
              r.depthFunc(r.LESS);
              break;
            case Xa:
              r.depthFunc(r.LEQUAL);
              break;
            case Mc:
              r.depthFunc(r.EQUAL);
              break;
            case Ac:
              r.depthFunc(r.GEQUAL);
              break;
            case Dc:
              r.depthFunc(r.GREATER);
              break;
            case Cc:
              r.depthFunc(r.NOTEQUAL);
              break;
            default:
              r.depthFunc(r.LEQUAL);
          }
          Ee = ke;
        }
      },
      setLocked: function(ke) {
        Q = ke;
      },
      setClear: function(ke) {
        ze !== ke && (Se && (ke = 1 - ke), r.clearDepth(ke), ze = ke);
      },
      reset: function() {
        Q = !1, pe = null, Ee = null, ze = null, Se = !1;
      }
    };
  }
  function i() {
    let Q = !1, Se = null, pe = null, Ee = null, ze = null, ke = null, at = null, Bt = null, jt = null;
    return {
      setTest: function(_t) {
        Q || (_t ? ie(r.STENCIL_TEST) : G(r.STENCIL_TEST));
      },
      setMask: function(_t) {
        Se !== _t && !Q && (r.stencilMask(_t), Se = _t);
      },
      setFunc: function(_t, Fr, en) {
        (pe !== _t || Ee !== Fr || ze !== en) && (r.stencilFunc(_t, Fr, en), pe = _t, Ee = Fr, ze = en);
      },
      setOp: function(_t, Fr, en) {
        (ke !== _t || at !== Fr || Bt !== en) && (r.stencilOp(_t, Fr, en), ke = _t, at = Fr, Bt = en);
      },
      setLocked: function(_t) {
        Q = _t;
      },
      setClear: function(_t) {
        jt !== _t && (r.clearStencil(_t), jt = _t);
      },
      reset: function() {
        Q = !1, Se = null, pe = null, Ee = null, ze = null, ke = null, at = null, Bt = null, jt = null;
      }
    };
  }
  const a = new t(), s = new n(), o = new i(), l = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap();
  let c = {}, f = {}, h = /* @__PURE__ */ new WeakMap(), d = [], m = null, p = !1, g = null, v = null, S = null, x = null, y = null, b = null, _ = null, M = new wt(0, 0, 0), A = 0, w = !1, E = null, D = null, T = null, R = null, B = null;
  const I = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let C = !1, k = 0;
  const z = r.getParameter(r.VERSION);
  z.indexOf("WebGL") !== -1 ? (k = parseFloat(/^WebGL (\d)/.exec(z)[1]), C = k >= 1) : z.indexOf("OpenGL ES") !== -1 && (k = parseFloat(/^OpenGL ES (\d)/.exec(z)[1]), C = k >= 2);
  let V = null, ee = {};
  const re = r.getParameter(r.SCISSOR_BOX), L = r.getParameter(r.VIEWPORT), J = new Ht().fromArray(re), U = new Ht().fromArray(L);
  function ue(Q, Se, pe, Ee) {
    const ze = new Uint8Array(4), ke = r.createTexture();
    r.bindTexture(Q, ke), r.texParameteri(Q, r.TEXTURE_MIN_FILTER, r.NEAREST), r.texParameteri(Q, r.TEXTURE_MAG_FILTER, r.NEAREST);
    for (let at = 0; at < pe; at++)
      Q === r.TEXTURE_3D || Q === r.TEXTURE_2D_ARRAY ? r.texImage3D(Se, 0, r.RGBA, 1, 1, Ee, 0, r.RGBA, r.UNSIGNED_BYTE, ze) : r.texImage2D(Se + at, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, ze);
    return ke;
  }
  const oe = {};
  oe[r.TEXTURE_2D] = ue(r.TEXTURE_2D, r.TEXTURE_2D, 1), oe[r.TEXTURE_CUBE_MAP] = ue(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6), oe[r.TEXTURE_2D_ARRAY] = ue(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1), oe[r.TEXTURE_3D] = ue(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1), a.setClear(0, 0, 0, 1), s.setClear(1), o.setClear(0), ie(r.DEPTH_TEST), s.setFunc(Xa), De(!1), Ne(Q0), ie(r.CULL_FACE), q(ci);
  function ie(Q) {
    c[Q] !== !0 && (r.enable(Q), c[Q] = !0);
  }
  function G(Q) {
    c[Q] !== !1 && (r.disable(Q), c[Q] = !1);
  }
  function Z(Q, Se) {
    return f[Q] !== Se ? (r.bindFramebuffer(Q, Se), f[Q] = Se, Q === r.DRAW_FRAMEBUFFER && (f[r.FRAMEBUFFER] = Se), Q === r.FRAMEBUFFER && (f[r.DRAW_FRAMEBUFFER] = Se), !0) : !1;
  }
  function te(Q, Se) {
    let pe = d, Ee = !1;
    if (Q) {
      pe = h.get(Se), pe === void 0 && (pe = [], h.set(Se, pe));
      const ze = Q.textures;
      if (pe.length !== ze.length || pe[0] !== r.COLOR_ATTACHMENT0) {
        for (let ke = 0, at = ze.length; ke < at; ke++)
          pe[ke] = r.COLOR_ATTACHMENT0 + ke;
        pe.length = ze.length, Ee = !0;
      }
    } else
      pe[0] !== r.BACK && (pe[0] = r.BACK, Ee = !0);
    Ee && r.drawBuffers(pe);
  }
  function ne(Q) {
    return m !== Q ? (r.useProgram(Q), m = Q, !0) : !1;
  }
  const ae = {
    [zi]: r.FUNC_ADD,
    [m8]: r.FUNC_SUBTRACT,
    [p8]: r.FUNC_REVERSE_SUBTRACT
  };
  ae[v8] = r.MIN, ae[g8] = r.MAX;
  const xe = {
    [y8]: r.ZERO,
    [x8]: r.ONE,
    [_8]: r.SRC_COLOR,
    [_c]: r.SRC_ALPHA,
    [A8]: r.SRC_ALPHA_SATURATE,
    [E8]: r.DST_COLOR,
    [w8]: r.DST_ALPHA,
    [b8]: r.ONE_MINUS_SRC_COLOR,
    [bc]: r.ONE_MINUS_SRC_ALPHA,
    [M8]: r.ONE_MINUS_DST_COLOR,
    [S8]: r.ONE_MINUS_DST_ALPHA,
    [D8]: r.CONSTANT_COLOR,
    [C8]: r.ONE_MINUS_CONSTANT_COLOR,
    [T8]: r.CONSTANT_ALPHA,
    [N8]: r.ONE_MINUS_CONSTANT_ALPHA
  };
  function q(Q, Se, pe, Ee, ze, ke, at, Bt, jt, _t) {
    if (Q === ci) {
      p === !0 && (G(r.BLEND), p = !1);
      return;
    }
    if (p === !1 && (ie(r.BLEND), p = !0), Q !== d8) {
      if (Q !== g || _t !== w) {
        if ((v !== zi || y !== zi) && (r.blendEquation(r.FUNC_ADD), v = zi, y = zi), _t)
          switch (Q) {
            case La:
              r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case j0:
              r.blendFunc(r.ONE, r.ONE);
              break;
            case ev:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case tv:
              r.blendFuncSeparate(r.ZERO, r.SRC_COLOR, r.ZERO, r.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", Q);
              break;
          }
        else
          switch (Q) {
            case La:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case j0:
              r.blendFunc(r.SRC_ALPHA, r.ONE);
              break;
            case ev:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case tv:
              r.blendFunc(r.ZERO, r.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", Q);
              break;
          }
        S = null, x = null, b = null, _ = null, M.set(0, 0, 0), A = 0, g = Q, w = _t;
      }
      return;
    }
    ze = ze || Se, ke = ke || pe, at = at || Ee, (Se !== v || ze !== y) && (r.blendEquationSeparate(ae[Se], ae[ze]), v = Se, y = ze), (pe !== S || Ee !== x || ke !== b || at !== _) && (r.blendFuncSeparate(xe[pe], xe[Ee], xe[ke], xe[at]), S = pe, x = Ee, b = ke, _ = at), (Bt.equals(M) === !1 || jt !== A) && (r.blendColor(Bt.r, Bt.g, Bt.b, jt), M.copy(Bt), A = jt), g = Q, w = !1;
  }
  function Ae(Q, Se) {
    Q.side === Un ? G(r.CULL_FACE) : ie(r.CULL_FACE);
    let pe = Q.side === vr;
    Se && (pe = !pe), De(pe), Q.blending === La && Q.transparent === !1 ? q(ci) : q(Q.blending, Q.blendEquation, Q.blendSrc, Q.blendDst, Q.blendEquationAlpha, Q.blendSrcAlpha, Q.blendDstAlpha, Q.blendColor, Q.blendAlpha, Q.premultipliedAlpha), s.setFunc(Q.depthFunc), s.setTest(Q.depthTest), s.setMask(Q.depthWrite), a.setMask(Q.colorWrite);
    const Ee = Q.stencilWrite;
    o.setTest(Ee), Ee && (o.setMask(Q.stencilWriteMask), o.setFunc(Q.stencilFunc, Q.stencilRef, Q.stencilFuncMask), o.setOp(Q.stencilFail, Q.stencilZFail, Q.stencilZPass)), Pe(Q.polygonOffset, Q.polygonOffsetFactor, Q.polygonOffsetUnits), Q.alphaToCoverage === !0 ? ie(r.SAMPLE_ALPHA_TO_COVERAGE) : G(r.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function De(Q) {
    E !== Q && (Q ? r.frontFace(r.CW) : r.frontFace(r.CCW), E = Q);
  }
  function Ne(Q) {
    Q !== c8 ? (ie(r.CULL_FACE), Q !== D && (Q === Q0 ? r.cullFace(r.BACK) : Q === f8 ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK))) : G(r.CULL_FACE), D = Q;
  }
  function we(Q) {
    Q !== T && (C && r.lineWidth(Q), T = Q);
  }
  function Pe(Q, Se, pe) {
    Q ? (ie(r.POLYGON_OFFSET_FILL), (R !== Se || B !== pe) && (r.polygonOffset(Se, pe), R = Se, B = pe)) : G(r.POLYGON_OFFSET_FILL);
  }
  function $(Q) {
    Q ? ie(r.SCISSOR_TEST) : G(r.SCISSOR_TEST);
  }
  function P(Q) {
    Q === void 0 && (Q = r.TEXTURE0 + I - 1), V !== Q && (r.activeTexture(Q), V = Q);
  }
  function O(Q, Se, pe) {
    pe === void 0 && (V === null ? pe = r.TEXTURE0 + I - 1 : pe = V);
    let Ee = ee[pe];
    Ee === void 0 && (Ee = { type: void 0, texture: void 0 }, ee[pe] = Ee), (Ee.type !== Q || Ee.texture !== Se) && (V !== pe && (r.activeTexture(pe), V = pe), r.bindTexture(Q, Se || oe[Q]), Ee.type = Q, Ee.texture = Se);
  }
  function F() {
    const Q = ee[V];
    Q !== void 0 && Q.type !== void 0 && (r.bindTexture(Q.type, null), Q.type = void 0, Q.texture = void 0);
  }
  function H() {
    try {
      r.compressedTexImage2D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function X() {
    try {
      r.compressedTexImage3D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function K() {
    try {
      r.texSubImage2D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function se() {
    try {
      r.texSubImage3D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function le() {
    try {
      r.compressedTexSubImage2D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function ge() {
    try {
      r.compressedTexSubImage3D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function be() {
    try {
      r.texStorage2D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function he() {
    try {
      r.texStorage3D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function ye() {
    try {
      r.texImage2D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function Oe() {
    try {
      r.texImage3D.apply(r, arguments);
    } catch (Q) {
      console.error("THREE.WebGLState:", Q);
    }
  }
  function Te(Q) {
    J.equals(Q) === !1 && (r.scissor(Q.x, Q.y, Q.z, Q.w), J.copy(Q));
  }
  function Fe(Q) {
    U.equals(Q) === !1 && (r.viewport(Q.x, Q.y, Q.z, Q.w), U.copy(Q));
  }
  function N(Q, Se) {
    let pe = u.get(Se);
    pe === void 0 && (pe = /* @__PURE__ */ new WeakMap(), u.set(Se, pe));
    let Ee = pe.get(Q);
    Ee === void 0 && (Ee = r.getUniformBlockIndex(Se, Q.name), pe.set(Q, Ee));
  }
  function j(Q, Se) {
    const Ee = u.get(Se).get(Q);
    l.get(Se) !== Ee && (r.uniformBlockBinding(Se, Ee, Q.__bindingPointIndex), l.set(Se, Ee));
  }
  function de() {
    r.disable(r.BLEND), r.disable(r.CULL_FACE), r.disable(r.DEPTH_TEST), r.disable(r.POLYGON_OFFSET_FILL), r.disable(r.SCISSOR_TEST), r.disable(r.STENCIL_TEST), r.disable(r.SAMPLE_ALPHA_TO_COVERAGE), r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ZERO), r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO), r.blendColor(0, 0, 0, 0), r.colorMask(!0, !0, !0, !0), r.clearColor(0, 0, 0, 0), r.depthMask(!0), r.depthFunc(r.LESS), s.setReversed(!1), r.clearDepth(1), r.stencilMask(4294967295), r.stencilFunc(r.ALWAYS, 0, 4294967295), r.stencilOp(r.KEEP, r.KEEP, r.KEEP), r.clearStencil(0), r.cullFace(r.BACK), r.frontFace(r.CCW), r.polygonOffset(0, 0), r.activeTexture(r.TEXTURE0), r.bindFramebuffer(r.FRAMEBUFFER, null), r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), r.bindFramebuffer(r.READ_FRAMEBUFFER, null), r.useProgram(null), r.lineWidth(1), r.scissor(0, 0, r.canvas.width, r.canvas.height), r.viewport(0, 0, r.canvas.width, r.canvas.height), c = {}, V = null, ee = {}, f = {}, h = /* @__PURE__ */ new WeakMap(), d = [], m = null, p = !1, g = null, v = null, S = null, x = null, y = null, b = null, _ = null, M = new wt(0, 0, 0), A = 0, w = !1, E = null, D = null, T = null, R = null, B = null, J.set(0, 0, r.canvas.width, r.canvas.height), U.set(0, 0, r.canvas.width, r.canvas.height), a.reset(), s.reset(), o.reset();
  }
  return {
    buffers: {
      color: a,
      depth: s,
      stencil: o
    },
    enable: ie,
    disable: G,
    bindFramebuffer: Z,
    drawBuffers: te,
    useProgram: ne,
    setBlending: q,
    setMaterial: Ae,
    setFlipSided: De,
    setCullFace: Ne,
    setLineWidth: we,
    setPolygonOffset: Pe,
    setScissorTest: $,
    activeTexture: P,
    bindTexture: O,
    unbindTexture: F,
    compressedTexImage2D: H,
    compressedTexImage3D: X,
    texImage2D: ye,
    texImage3D: Oe,
    updateUBOMapping: N,
    uniformBlockBinding: j,
    texStorage2D: be,
    texStorage3D: he,
    texSubImage2D: K,
    texSubImage3D: se,
    compressedTexSubImage2D: le,
    compressedTexSubImage3D: ge,
    scissor: Te,
    viewport: Fe,
    reset: de
  };
}
function Sz(r, e, t, n, i, a, s) {
  const o = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, l = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), u = new ft(), c = /* @__PURE__ */ new WeakMap();
  let f;
  const h = /* @__PURE__ */ new WeakMap();
  let d = !1;
  try {
    d = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function m(P, O) {
    return d ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(P, O)
    ) : Tu("canvas");
  }
  function p(P, O, F) {
    let H = 1;
    const X = $(P);
    if ((X.width > F || X.height > F) && (H = F / Math.max(X.width, X.height)), H < 1)
      if (typeof HTMLImageElement < "u" && P instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && P instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && P instanceof ImageBitmap || typeof VideoFrame < "u" && P instanceof VideoFrame) {
        const K = Math.floor(H * X.width), se = Math.floor(H * X.height);
        f === void 0 && (f = m(K, se));
        const le = O ? m(K, se) : f;
        return le.width = K, le.height = se, le.getContext("2d").drawImage(P, 0, 0, K, se), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + X.width + "x" + X.height + ") to (" + K + "x" + se + ")."), le;
      } else
        return "data" in P && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + X.width + "x" + X.height + ")."), P;
    return P;
  }
  function g(P) {
    return P.generateMipmaps;
  }
  function v(P) {
    r.generateMipmap(P);
  }
  function S(P) {
    return P.isWebGLCubeRenderTarget ? r.TEXTURE_CUBE_MAP : P.isWebGL3DRenderTarget ? r.TEXTURE_3D : P.isWebGLArrayRenderTarget || P.isCompressedArrayTexture ? r.TEXTURE_2D_ARRAY : r.TEXTURE_2D;
  }
  function x(P, O, F, H, X = !1) {
    if (P !== null) {
      if (r[P] !== void 0) return r[P];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + P + "'");
    }
    let K = O;
    if (O === r.RED && (F === r.FLOAT && (K = r.R32F), F === r.HALF_FLOAT && (K = r.R16F), F === r.UNSIGNED_BYTE && (K = r.R8)), O === r.RED_INTEGER && (F === r.UNSIGNED_BYTE && (K = r.R8UI), F === r.UNSIGNED_SHORT && (K = r.R16UI), F === r.UNSIGNED_INT && (K = r.R32UI), F === r.BYTE && (K = r.R8I), F === r.SHORT && (K = r.R16I), F === r.INT && (K = r.R32I)), O === r.RG && (F === r.FLOAT && (K = r.RG32F), F === r.HALF_FLOAT && (K = r.RG16F), F === r.UNSIGNED_BYTE && (K = r.RG8)), O === r.RG_INTEGER && (F === r.UNSIGNED_BYTE && (K = r.RG8UI), F === r.UNSIGNED_SHORT && (K = r.RG16UI), F === r.UNSIGNED_INT && (K = r.RG32UI), F === r.BYTE && (K = r.RG8I), F === r.SHORT && (K = r.RG16I), F === r.INT && (K = r.RG32I)), O === r.RGB_INTEGER && (F === r.UNSIGNED_BYTE && (K = r.RGB8UI), F === r.UNSIGNED_SHORT && (K = r.RGB16UI), F === r.UNSIGNED_INT && (K = r.RGB32UI), F === r.BYTE && (K = r.RGB8I), F === r.SHORT && (K = r.RGB16I), F === r.INT && (K = r.RGB32I)), O === r.RGBA_INTEGER && (F === r.UNSIGNED_BYTE && (K = r.RGBA8UI), F === r.UNSIGNED_SHORT && (K = r.RGBA16UI), F === r.UNSIGNED_INT && (K = r.RGBA32UI), F === r.BYTE && (K = r.RGBA8I), F === r.SHORT && (K = r.RGBA16I), F === r.INT && (K = r.RGBA32I)), O === r.RGB && F === r.UNSIGNED_INT_5_9_9_9_REV && (K = r.RGB9_E5), O === r.RGBA) {
      const se = X ? Du : xt.getTransfer(H);
      F === r.FLOAT && (K = r.RGBA32F), F === r.HALF_FLOAT && (K = r.RGBA16F), F === r.UNSIGNED_BYTE && (K = se === Ct ? r.SRGB8_ALPHA8 : r.RGBA8), F === r.UNSIGNED_SHORT_4_4_4_4 && (K = r.RGBA4), F === r.UNSIGNED_SHORT_5_5_5_1 && (K = r.RGB5_A1);
    }
    return (K === r.R16F || K === r.R32F || K === r.RG16F || K === r.RG32F || K === r.RGBA16F || K === r.RGBA32F) && e.get("EXT_color_buffer_float"), K;
  }
  function y(P, O) {
    let F;
    return P ? O === null || O === Ki || O === Ka ? F = r.DEPTH24_STENCIL8 : O === Hn ? F = r.DEPTH32F_STENCIL8 : O === Os && (F = r.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : O === null || O === Ki || O === Ka ? F = r.DEPTH_COMPONENT24 : O === Hn ? F = r.DEPTH_COMPONENT32F : O === Os && (F = r.DEPTH_COMPONENT16), F;
  }
  function b(P, O) {
    return g(P) === !0 || P.isFramebufferTexture && P.minFilter !== mn && P.minFilter !== bn ? Math.log2(Math.max(O.width, O.height)) + 1 : P.mipmaps !== void 0 && P.mipmaps.length > 0 ? P.mipmaps.length : P.isCompressedTexture && Array.isArray(P.image) ? O.mipmaps.length : 1;
  }
  function _(P) {
    const O = P.target;
    O.removeEventListener("dispose", _), A(O), O.isVideoTexture && c.delete(O);
  }
  function M(P) {
    const O = P.target;
    O.removeEventListener("dispose", M), E(O);
  }
  function A(P) {
    const O = n.get(P);
    if (O.__webglInit === void 0) return;
    const F = P.source, H = h.get(F);
    if (H) {
      const X = H[O.__cacheKey];
      X.usedTimes--, X.usedTimes === 0 && w(P), Object.keys(H).length === 0 && h.delete(F);
    }
    n.remove(P);
  }
  function w(P) {
    const O = n.get(P);
    r.deleteTexture(O.__webglTexture);
    const F = P.source, H = h.get(F);
    delete H[O.__cacheKey], s.memory.textures--;
  }
  function E(P) {
    const O = n.get(P);
    if (P.depthTexture && (P.depthTexture.dispose(), n.remove(P.depthTexture)), P.isWebGLCubeRenderTarget)
      for (let H = 0; H < 6; H++) {
        if (Array.isArray(O.__webglFramebuffer[H]))
          for (let X = 0; X < O.__webglFramebuffer[H].length; X++) r.deleteFramebuffer(O.__webglFramebuffer[H][X]);
        else
          r.deleteFramebuffer(O.__webglFramebuffer[H]);
        O.__webglDepthbuffer && r.deleteRenderbuffer(O.__webglDepthbuffer[H]);
      }
    else {
      if (Array.isArray(O.__webglFramebuffer))
        for (let H = 0; H < O.__webglFramebuffer.length; H++) r.deleteFramebuffer(O.__webglFramebuffer[H]);
      else
        r.deleteFramebuffer(O.__webglFramebuffer);
      if (O.__webglDepthbuffer && r.deleteRenderbuffer(O.__webglDepthbuffer), O.__webglMultisampledFramebuffer && r.deleteFramebuffer(O.__webglMultisampledFramebuffer), O.__webglColorRenderbuffer)
        for (let H = 0; H < O.__webglColorRenderbuffer.length; H++)
          O.__webglColorRenderbuffer[H] && r.deleteRenderbuffer(O.__webglColorRenderbuffer[H]);
      O.__webglDepthRenderbuffer && r.deleteRenderbuffer(O.__webglDepthRenderbuffer);
    }
    const F = P.textures;
    for (let H = 0, X = F.length; H < X; H++) {
      const K = n.get(F[H]);
      K.__webglTexture && (r.deleteTexture(K.__webglTexture), s.memory.textures--), n.remove(F[H]);
    }
    n.remove(P);
  }
  let D = 0;
  function T() {
    D = 0;
  }
  function R() {
    const P = D;
    return P >= i.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + P + " texture units while this GPU supports only " + i.maxTextures), D += 1, P;
  }
  function B(P) {
    const O = [];
    return O.push(P.wrapS), O.push(P.wrapT), O.push(P.wrapR || 0), O.push(P.magFilter), O.push(P.minFilter), O.push(P.anisotropy), O.push(P.internalFormat), O.push(P.format), O.push(P.type), O.push(P.generateMipmaps), O.push(P.premultiplyAlpha), O.push(P.flipY), O.push(P.unpackAlignment), O.push(P.colorSpace), O.join();
  }
  function I(P, O) {
    const F = n.get(P);
    if (P.isVideoTexture && we(P), P.isRenderTargetTexture === !1 && P.version > 0 && F.__version !== P.version) {
      const H = P.image;
      if (H === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (H.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        U(F, P, O);
        return;
      }
    }
    t.bindTexture(r.TEXTURE_2D, F.__webglTexture, r.TEXTURE0 + O);
  }
  function C(P, O) {
    const F = n.get(P);
    if (P.version > 0 && F.__version !== P.version) {
      U(F, P, O);
      return;
    }
    t.bindTexture(r.TEXTURE_2D_ARRAY, F.__webglTexture, r.TEXTURE0 + O);
  }
  function k(P, O) {
    const F = n.get(P);
    if (P.version > 0 && F.__version !== P.version) {
      U(F, P, O);
      return;
    }
    t.bindTexture(r.TEXTURE_3D, F.__webglTexture, r.TEXTURE0 + O);
  }
  function z(P, O) {
    const F = n.get(P);
    if (P.version > 0 && F.__version !== P.version) {
      ue(F, P, O);
      return;
    }
    t.bindTexture(r.TEXTURE_CUBE_MAP, F.__webglTexture, r.TEXTURE0 + O);
  }
  const V = {
    [Rc]: r.REPEAT,
    [$i]: r.CLAMP_TO_EDGE,
    [Fc]: r.MIRRORED_REPEAT
  }, ee = {
    [mn]: r.NEAREST,
    [k8]: r.NEAREST_MIPMAP_NEAREST,
    [wo]: r.NEAREST_MIPMAP_LINEAR,
    [bn]: r.LINEAR,
    [xl]: r.LINEAR_MIPMAP_NEAREST,
    [Vi]: r.LINEAR_MIPMAP_LINEAR
  }, re = {
    [V8]: r.NEVER,
    [K8]: r.ALWAYS,
    [q8]: r.LESS,
    [Oy]: r.LEQUAL,
    [W8]: r.EQUAL,
    [Z8]: r.GEQUAL,
    [X8]: r.GREATER,
    [Y8]: r.NOTEQUAL
  };
  function L(P, O) {
    if (O.type === Hn && e.has("OES_texture_float_linear") === !1 && (O.magFilter === bn || O.magFilter === xl || O.magFilter === wo || O.magFilter === Vi || O.minFilter === bn || O.minFilter === xl || O.minFilter === wo || O.minFilter === Vi) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), r.texParameteri(P, r.TEXTURE_WRAP_S, V[O.wrapS]), r.texParameteri(P, r.TEXTURE_WRAP_T, V[O.wrapT]), (P === r.TEXTURE_3D || P === r.TEXTURE_2D_ARRAY) && r.texParameteri(P, r.TEXTURE_WRAP_R, V[O.wrapR]), r.texParameteri(P, r.TEXTURE_MAG_FILTER, ee[O.magFilter]), r.texParameteri(P, r.TEXTURE_MIN_FILTER, ee[O.minFilter]), O.compareFunction && (r.texParameteri(P, r.TEXTURE_COMPARE_MODE, r.COMPARE_REF_TO_TEXTURE), r.texParameteri(P, r.TEXTURE_COMPARE_FUNC, re[O.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      if (O.magFilter === mn || O.minFilter !== wo && O.minFilter !== Vi || O.type === Hn && e.has("OES_texture_float_linear") === !1) return;
      if (O.anisotropy > 1 || n.get(O).__currentAnisotropy) {
        const F = e.get("EXT_texture_filter_anisotropic");
        r.texParameterf(P, F.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(O.anisotropy, i.getMaxAnisotropy())), n.get(O).__currentAnisotropy = O.anisotropy;
      }
    }
  }
  function J(P, O) {
    let F = !1;
    P.__webglInit === void 0 && (P.__webglInit = !0, O.addEventListener("dispose", _));
    const H = O.source;
    let X = h.get(H);
    X === void 0 && (X = {}, h.set(H, X));
    const K = B(O);
    if (K !== P.__cacheKey) {
      X[K] === void 0 && (X[K] = {
        texture: r.createTexture(),
        usedTimes: 0
      }, s.memory.textures++, F = !0), X[K].usedTimes++;
      const se = X[P.__cacheKey];
      se !== void 0 && (X[P.__cacheKey].usedTimes--, se.usedTimes === 0 && w(O)), P.__cacheKey = K, P.__webglTexture = X[K].texture;
    }
    return F;
  }
  function U(P, O, F) {
    let H = r.TEXTURE_2D;
    (O.isDataArrayTexture || O.isCompressedArrayTexture) && (H = r.TEXTURE_2D_ARRAY), O.isData3DTexture && (H = r.TEXTURE_3D);
    const X = J(P, O), K = O.source;
    t.bindTexture(H, P.__webglTexture, r.TEXTURE0 + F);
    const se = n.get(K);
    if (K.version !== se.__version || X === !0) {
      t.activeTexture(r.TEXTURE0 + F);
      const le = xt.getPrimaries(xt.workingColorSpace), ge = O.colorSpace === ii ? null : xt.getPrimaries(O.colorSpace), be = O.colorSpace === ii || le === ge ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, O.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, O.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, be);
      let he = p(O.image, !1, i.maxTextureSize);
      he = Pe(O, he);
      const ye = a.convert(O.format, O.colorSpace), Oe = a.convert(O.type);
      let Te = x(O.internalFormat, ye, Oe, O.colorSpace, O.isVideoTexture);
      L(H, O);
      let Fe;
      const N = O.mipmaps, j = O.isVideoTexture !== !0, de = se.__version === void 0 || X === !0, Q = K.dataReady, Se = b(O, he);
      if (O.isDepthTexture)
        Te = y(O.format === Ja, O.type), de && (j ? t.texStorage2D(r.TEXTURE_2D, 1, Te, he.width, he.height) : t.texImage2D(r.TEXTURE_2D, 0, Te, he.width, he.height, 0, ye, Oe, null));
      else if (O.isDataTexture)
        if (N.length > 0) {
          j && de && t.texStorage2D(r.TEXTURE_2D, Se, Te, N[0].width, N[0].height);
          for (let pe = 0, Ee = N.length; pe < Ee; pe++)
            Fe = N[pe], j ? Q && t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, Fe.width, Fe.height, ye, Oe, Fe.data) : t.texImage2D(r.TEXTURE_2D, pe, Te, Fe.width, Fe.height, 0, ye, Oe, Fe.data);
          O.generateMipmaps = !1;
        } else
          j ? (de && t.texStorage2D(r.TEXTURE_2D, Se, Te, he.width, he.height), Q && t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, he.width, he.height, ye, Oe, he.data)) : t.texImage2D(r.TEXTURE_2D, 0, Te, he.width, he.height, 0, ye, Oe, he.data);
      else if (O.isCompressedTexture)
        if (O.isCompressedArrayTexture) {
          j && de && t.texStorage3D(r.TEXTURE_2D_ARRAY, Se, Te, N[0].width, N[0].height, he.depth);
          for (let pe = 0, Ee = N.length; pe < Ee; pe++)
            if (Fe = N[pe], O.format !== cn)
              if (ye !== null)
                if (j) {
                  if (Q)
                    if (O.layerUpdates.size > 0) {
                      const ze = Dv(Fe.width, Fe.height, O.format, O.type);
                      for (const ke of O.layerUpdates) {
                        const at = Fe.data.subarray(
                          ke * ze / Fe.data.BYTES_PER_ELEMENT,
                          (ke + 1) * ze / Fe.data.BYTES_PER_ELEMENT
                        );
                        t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, pe, 0, 0, ke, Fe.width, Fe.height, 1, ye, at);
                      }
                      O.clearLayerUpdates();
                    } else
                      t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, pe, 0, 0, 0, Fe.width, Fe.height, he.depth, ye, Fe.data);
                } else
                  t.compressedTexImage3D(r.TEXTURE_2D_ARRAY, pe, Te, Fe.width, Fe.height, he.depth, 0, Fe.data, 0, 0);
              else
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            else
              j ? Q && t.texSubImage3D(r.TEXTURE_2D_ARRAY, pe, 0, 0, 0, Fe.width, Fe.height, he.depth, ye, Oe, Fe.data) : t.texImage3D(r.TEXTURE_2D_ARRAY, pe, Te, Fe.width, Fe.height, he.depth, 0, ye, Oe, Fe.data);
        } else {
          j && de && t.texStorage2D(r.TEXTURE_2D, Se, Te, N[0].width, N[0].height);
          for (let pe = 0, Ee = N.length; pe < Ee; pe++)
            Fe = N[pe], O.format !== cn ? ye !== null ? j ? Q && t.compressedTexSubImage2D(r.TEXTURE_2D, pe, 0, 0, Fe.width, Fe.height, ye, Fe.data) : t.compressedTexImage2D(r.TEXTURE_2D, pe, Te, Fe.width, Fe.height, 0, Fe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : j ? Q && t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, Fe.width, Fe.height, ye, Oe, Fe.data) : t.texImage2D(r.TEXTURE_2D, pe, Te, Fe.width, Fe.height, 0, ye, Oe, Fe.data);
        }
      else if (O.isDataArrayTexture)
        if (j) {
          if (de && t.texStorage3D(r.TEXTURE_2D_ARRAY, Se, Te, he.width, he.height, he.depth), Q)
            if (O.layerUpdates.size > 0) {
              const pe = Dv(he.width, he.height, O.format, O.type);
              for (const Ee of O.layerUpdates) {
                const ze = he.data.subarray(
                  Ee * pe / he.data.BYTES_PER_ELEMENT,
                  (Ee + 1) * pe / he.data.BYTES_PER_ELEMENT
                );
                t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, Ee, he.width, he.height, 1, ye, Oe, ze);
              }
              O.clearLayerUpdates();
            } else
              t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, he.width, he.height, he.depth, ye, Oe, he.data);
        } else
          t.texImage3D(r.TEXTURE_2D_ARRAY, 0, Te, he.width, he.height, he.depth, 0, ye, Oe, he.data);
      else if (O.isData3DTexture)
        j ? (de && t.texStorage3D(r.TEXTURE_3D, Se, Te, he.width, he.height, he.depth), Q && t.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, he.width, he.height, he.depth, ye, Oe, he.data)) : t.texImage3D(r.TEXTURE_3D, 0, Te, he.width, he.height, he.depth, 0, ye, Oe, he.data);
      else if (O.isFramebufferTexture) {
        if (de)
          if (j)
            t.texStorage2D(r.TEXTURE_2D, Se, Te, he.width, he.height);
          else {
            let pe = he.width, Ee = he.height;
            for (let ze = 0; ze < Se; ze++)
              t.texImage2D(r.TEXTURE_2D, ze, Te, pe, Ee, 0, ye, Oe, null), pe >>= 1, Ee >>= 1;
          }
      } else if (N.length > 0) {
        if (j && de) {
          const pe = $(N[0]);
          t.texStorage2D(r.TEXTURE_2D, Se, Te, pe.width, pe.height);
        }
        for (let pe = 0, Ee = N.length; pe < Ee; pe++)
          Fe = N[pe], j ? Q && t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, ye, Oe, Fe) : t.texImage2D(r.TEXTURE_2D, pe, Te, ye, Oe, Fe);
        O.generateMipmaps = !1;
      } else if (j) {
        if (de) {
          const pe = $(he);
          t.texStorage2D(r.TEXTURE_2D, Se, Te, pe.width, pe.height);
        }
        Q && t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, ye, Oe, he);
      } else
        t.texImage2D(r.TEXTURE_2D, 0, Te, ye, Oe, he);
      g(O) && v(H), se.__version = K.version, O.onUpdate && O.onUpdate(O);
    }
    P.__version = O.version;
  }
  function ue(P, O, F) {
    if (O.image.length !== 6) return;
    const H = J(P, O), X = O.source;
    t.bindTexture(r.TEXTURE_CUBE_MAP, P.__webglTexture, r.TEXTURE0 + F);
    const K = n.get(X);
    if (X.version !== K.__version || H === !0) {
      t.activeTexture(r.TEXTURE0 + F);
      const se = xt.getPrimaries(xt.workingColorSpace), le = O.colorSpace === ii ? null : xt.getPrimaries(O.colorSpace), ge = O.colorSpace === ii || se === le ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, O.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, O.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, ge);
      const be = O.isCompressedTexture || O.image[0].isCompressedTexture, he = O.image[0] && O.image[0].isDataTexture, ye = [];
      for (let Ee = 0; Ee < 6; Ee++)
        !be && !he ? ye[Ee] = p(O.image[Ee], !0, i.maxCubemapSize) : ye[Ee] = he ? O.image[Ee].image : O.image[Ee], ye[Ee] = Pe(O, ye[Ee]);
      const Oe = ye[0], Te = a.convert(O.format, O.colorSpace), Fe = a.convert(O.type), N = x(O.internalFormat, Te, Fe, O.colorSpace), j = O.isVideoTexture !== !0, de = K.__version === void 0 || H === !0, Q = X.dataReady;
      let Se = b(O, Oe);
      L(r.TEXTURE_CUBE_MAP, O);
      let pe;
      if (be) {
        j && de && t.texStorage2D(r.TEXTURE_CUBE_MAP, Se, N, Oe.width, Oe.height);
        for (let Ee = 0; Ee < 6; Ee++) {
          pe = ye[Ee].mipmaps;
          for (let ze = 0; ze < pe.length; ze++) {
            const ke = pe[ze];
            O.format !== cn ? Te !== null ? j ? Q && t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze, 0, 0, ke.width, ke.height, Te, ke.data) : t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze, N, ke.width, ke.height, 0, ke.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : j ? Q && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze, 0, 0, ke.width, ke.height, Te, Fe, ke.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze, N, ke.width, ke.height, 0, Te, Fe, ke.data);
          }
        }
      } else {
        if (pe = O.mipmaps, j && de) {
          pe.length > 0 && Se++;
          const Ee = $(ye[0]);
          t.texStorage2D(r.TEXTURE_CUBE_MAP, Se, N, Ee.width, Ee.height);
        }
        for (let Ee = 0; Ee < 6; Ee++)
          if (he) {
            j ? Q && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, 0, 0, 0, ye[Ee].width, ye[Ee].height, Te, Fe, ye[Ee].data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, 0, N, ye[Ee].width, ye[Ee].height, 0, Te, Fe, ye[Ee].data);
            for (let ze = 0; ze < pe.length; ze++) {
              const at = pe[ze].image[Ee].image;
              j ? Q && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze + 1, 0, 0, at.width, at.height, Te, Fe, at.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze + 1, N, at.width, at.height, 0, Te, Fe, at.data);
            }
          } else {
            j ? Q && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, 0, 0, 0, Te, Fe, ye[Ee]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, 0, N, Te, Fe, ye[Ee]);
            for (let ze = 0; ze < pe.length; ze++) {
              const ke = pe[ze];
              j ? Q && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze + 1, 0, 0, Te, Fe, ke.image[Ee]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, ze + 1, N, Te, Fe, ke.image[Ee]);
            }
          }
      }
      g(O) && v(r.TEXTURE_CUBE_MAP), K.__version = X.version, O.onUpdate && O.onUpdate(O);
    }
    P.__version = O.version;
  }
  function oe(P, O, F, H, X, K) {
    const se = a.convert(F.format, F.colorSpace), le = a.convert(F.type), ge = x(F.internalFormat, se, le, F.colorSpace), be = n.get(O), he = n.get(F);
    if (he.__renderTarget = O, !be.__hasExternalTextures) {
      const ye = Math.max(1, O.width >> K), Oe = Math.max(1, O.height >> K);
      X === r.TEXTURE_3D || X === r.TEXTURE_2D_ARRAY ? t.texImage3D(X, K, ge, ye, Oe, O.depth, 0, se, le, null) : t.texImage2D(X, K, ge, ye, Oe, 0, se, le, null);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, P), Ne(O) ? o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, H, X, he.__webglTexture, 0, De(O)) : (X === r.TEXTURE_2D || X >= r.TEXTURE_CUBE_MAP_POSITIVE_X && X <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z) && r.framebufferTexture2D(r.FRAMEBUFFER, H, X, he.__webglTexture, K), t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function ie(P, O, F) {
    if (r.bindRenderbuffer(r.RENDERBUFFER, P), O.depthBuffer) {
      const H = O.depthTexture, X = H && H.isDepthTexture ? H.type : null, K = y(O.stencilBuffer, X), se = O.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, le = De(O);
      Ne(O) ? o.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, le, K, O.width, O.height) : F ? r.renderbufferStorageMultisample(r.RENDERBUFFER, le, K, O.width, O.height) : r.renderbufferStorage(r.RENDERBUFFER, K, O.width, O.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, se, r.RENDERBUFFER, P);
    } else {
      const H = O.textures;
      for (let X = 0; X < H.length; X++) {
        const K = H[X], se = a.convert(K.format, K.colorSpace), le = a.convert(K.type), ge = x(K.internalFormat, se, le, K.colorSpace), be = De(O);
        F && Ne(O) === !1 ? r.renderbufferStorageMultisample(r.RENDERBUFFER, be, ge, O.width, O.height) : Ne(O) ? o.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, be, ge, O.width, O.height) : r.renderbufferStorage(r.RENDERBUFFER, ge, O.width, O.height);
      }
    }
    r.bindRenderbuffer(r.RENDERBUFFER, null);
  }
  function G(P, O) {
    if (O && O.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(r.FRAMEBUFFER, P), !(O.depthTexture && O.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    const H = n.get(O.depthTexture);
    H.__renderTarget = O, (!H.__webglTexture || O.depthTexture.image.width !== O.width || O.depthTexture.image.height !== O.height) && (O.depthTexture.image.width = O.width, O.depthTexture.image.height = O.height, O.depthTexture.needsUpdate = !0), I(O.depthTexture, 0);
    const X = H.__webglTexture, K = De(O);
    if (O.depthTexture.format === Ua)
      Ne(O) ? o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, X, 0, K) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, X, 0);
    else if (O.depthTexture.format === Ja)
      Ne(O) ? o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, X, 0, K) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, X, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function Z(P) {
    const O = n.get(P), F = P.isWebGLCubeRenderTarget === !0;
    if (O.__boundDepthTexture !== P.depthTexture) {
      const H = P.depthTexture;
      if (O.__depthDisposeCallback && O.__depthDisposeCallback(), H) {
        const X = () => {
          delete O.__boundDepthTexture, delete O.__depthDisposeCallback, H.removeEventListener("dispose", X);
        };
        H.addEventListener("dispose", X), O.__depthDisposeCallback = X;
      }
      O.__boundDepthTexture = H;
    }
    if (P.depthTexture && !O.__autoAllocateDepthBuffer) {
      if (F) throw new Error("target.depthTexture not supported in Cube render targets");
      G(O.__webglFramebuffer, P);
    } else if (F) {
      O.__webglDepthbuffer = [];
      for (let H = 0; H < 6; H++)
        if (t.bindFramebuffer(r.FRAMEBUFFER, O.__webglFramebuffer[H]), O.__webglDepthbuffer[H] === void 0)
          O.__webglDepthbuffer[H] = r.createRenderbuffer(), ie(O.__webglDepthbuffer[H], P, !1);
        else {
          const X = P.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, K = O.__webglDepthbuffer[H];
          r.bindRenderbuffer(r.RENDERBUFFER, K), r.framebufferRenderbuffer(r.FRAMEBUFFER, X, r.RENDERBUFFER, K);
        }
    } else if (t.bindFramebuffer(r.FRAMEBUFFER, O.__webglFramebuffer), O.__webglDepthbuffer === void 0)
      O.__webglDepthbuffer = r.createRenderbuffer(), ie(O.__webglDepthbuffer, P, !1);
    else {
      const H = P.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, X = O.__webglDepthbuffer;
      r.bindRenderbuffer(r.RENDERBUFFER, X), r.framebufferRenderbuffer(r.FRAMEBUFFER, H, r.RENDERBUFFER, X);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function te(P, O, F) {
    const H = n.get(P);
    O !== void 0 && oe(H.__webglFramebuffer, P, P.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, 0), F !== void 0 && Z(P);
  }
  function ne(P) {
    const O = P.texture, F = n.get(P), H = n.get(O);
    P.addEventListener("dispose", M);
    const X = P.textures, K = P.isWebGLCubeRenderTarget === !0, se = X.length > 1;
    if (se || (H.__webglTexture === void 0 && (H.__webglTexture = r.createTexture()), H.__version = O.version, s.memory.textures++), K) {
      F.__webglFramebuffer = [];
      for (let le = 0; le < 6; le++)
        if (O.mipmaps && O.mipmaps.length > 0) {
          F.__webglFramebuffer[le] = [];
          for (let ge = 0; ge < O.mipmaps.length; ge++)
            F.__webglFramebuffer[le][ge] = r.createFramebuffer();
        } else
          F.__webglFramebuffer[le] = r.createFramebuffer();
    } else {
      if (O.mipmaps && O.mipmaps.length > 0) {
        F.__webglFramebuffer = [];
        for (let le = 0; le < O.mipmaps.length; le++)
          F.__webglFramebuffer[le] = r.createFramebuffer();
      } else
        F.__webglFramebuffer = r.createFramebuffer();
      if (se)
        for (let le = 0, ge = X.length; le < ge; le++) {
          const be = n.get(X[le]);
          be.__webglTexture === void 0 && (be.__webglTexture = r.createTexture(), s.memory.textures++);
        }
      if (P.samples > 0 && Ne(P) === !1) {
        F.__webglMultisampledFramebuffer = r.createFramebuffer(), F.__webglColorRenderbuffer = [], t.bindFramebuffer(r.FRAMEBUFFER, F.__webglMultisampledFramebuffer);
        for (let le = 0; le < X.length; le++) {
          const ge = X[le];
          F.__webglColorRenderbuffer[le] = r.createRenderbuffer(), r.bindRenderbuffer(r.RENDERBUFFER, F.__webglColorRenderbuffer[le]);
          const be = a.convert(ge.format, ge.colorSpace), he = a.convert(ge.type), ye = x(ge.internalFormat, be, he, ge.colorSpace, P.isXRRenderTarget === !0), Oe = De(P);
          r.renderbufferStorageMultisample(r.RENDERBUFFER, Oe, ye, P.width, P.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + le, r.RENDERBUFFER, F.__webglColorRenderbuffer[le]);
        }
        r.bindRenderbuffer(r.RENDERBUFFER, null), P.depthBuffer && (F.__webglDepthRenderbuffer = r.createRenderbuffer(), ie(F.__webglDepthRenderbuffer, P, !0)), t.bindFramebuffer(r.FRAMEBUFFER, null);
      }
    }
    if (K) {
      t.bindTexture(r.TEXTURE_CUBE_MAP, H.__webglTexture), L(r.TEXTURE_CUBE_MAP, O);
      for (let le = 0; le < 6; le++)
        if (O.mipmaps && O.mipmaps.length > 0)
          for (let ge = 0; ge < O.mipmaps.length; ge++)
            oe(F.__webglFramebuffer[le][ge], P, O, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + le, ge);
        else
          oe(F.__webglFramebuffer[le], P, O, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + le, 0);
      g(O) && v(r.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (se) {
      for (let le = 0, ge = X.length; le < ge; le++) {
        const be = X[le], he = n.get(be);
        t.bindTexture(r.TEXTURE_2D, he.__webglTexture), L(r.TEXTURE_2D, be), oe(F.__webglFramebuffer, P, be, r.COLOR_ATTACHMENT0 + le, r.TEXTURE_2D, 0), g(be) && v(r.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let le = r.TEXTURE_2D;
      if ((P.isWebGL3DRenderTarget || P.isWebGLArrayRenderTarget) && (le = P.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY), t.bindTexture(le, H.__webglTexture), L(le, O), O.mipmaps && O.mipmaps.length > 0)
        for (let ge = 0; ge < O.mipmaps.length; ge++)
          oe(F.__webglFramebuffer[ge], P, O, r.COLOR_ATTACHMENT0, le, ge);
      else
        oe(F.__webglFramebuffer, P, O, r.COLOR_ATTACHMENT0, le, 0);
      g(O) && v(le), t.unbindTexture();
    }
    P.depthBuffer && Z(P);
  }
  function ae(P) {
    const O = P.textures;
    for (let F = 0, H = O.length; F < H; F++) {
      const X = O[F];
      if (g(X)) {
        const K = S(P), se = n.get(X).__webglTexture;
        t.bindTexture(K, se), v(K), t.unbindTexture();
      }
    }
  }
  const xe = [], q = [];
  function Ae(P) {
    if (P.samples > 0) {
      if (Ne(P) === !1) {
        const O = P.textures, F = P.width, H = P.height;
        let X = r.COLOR_BUFFER_BIT;
        const K = P.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, se = n.get(P), le = O.length > 1;
        if (le)
          for (let ge = 0; ge < O.length; ge++)
            t.bindFramebuffer(r.FRAMEBUFFER, se.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ge, r.RENDERBUFFER, null), t.bindFramebuffer(r.FRAMEBUFFER, se.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ge, r.TEXTURE_2D, null, 0);
        t.bindFramebuffer(r.READ_FRAMEBUFFER, se.__webglMultisampledFramebuffer), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, se.__webglFramebuffer);
        for (let ge = 0; ge < O.length; ge++) {
          if (P.resolveDepthBuffer && (P.depthBuffer && (X |= r.DEPTH_BUFFER_BIT), P.stencilBuffer && P.resolveStencilBuffer && (X |= r.STENCIL_BUFFER_BIT)), le) {
            r.framebufferRenderbuffer(r.READ_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.RENDERBUFFER, se.__webglColorRenderbuffer[ge]);
            const be = n.get(O[ge]).__webglTexture;
            r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, be, 0);
          }
          r.blitFramebuffer(0, 0, F, H, 0, 0, F, H, X, r.NEAREST), l === !0 && (xe.length = 0, q.length = 0, xe.push(r.COLOR_ATTACHMENT0 + ge), P.depthBuffer && P.resolveDepthBuffer === !1 && (xe.push(K), q.push(K), r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, q)), r.invalidateFramebuffer(r.READ_FRAMEBUFFER, xe));
        }
        if (t.bindFramebuffer(r.READ_FRAMEBUFFER, null), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), le)
          for (let ge = 0; ge < O.length; ge++) {
            t.bindFramebuffer(r.FRAMEBUFFER, se.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ge, r.RENDERBUFFER, se.__webglColorRenderbuffer[ge]);
            const be = n.get(O[ge]).__webglTexture;
            t.bindFramebuffer(r.FRAMEBUFFER, se.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ge, r.TEXTURE_2D, be, 0);
          }
        t.bindFramebuffer(r.DRAW_FRAMEBUFFER, se.__webglMultisampledFramebuffer);
      } else if (P.depthBuffer && P.resolveDepthBuffer === !1 && l) {
        const O = P.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
        r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [O]);
      }
    }
  }
  function De(P) {
    return Math.min(i.maxSamples, P.samples);
  }
  function Ne(P) {
    const O = n.get(P);
    return P.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && O.__useRenderToTexture !== !1;
  }
  function we(P) {
    const O = s.render.frame;
    c.get(P) !== O && (c.set(P, O), P.update());
  }
  function Pe(P, O) {
    const F = P.colorSpace, H = P.format, X = P.type;
    return P.isCompressedTexture === !0 || P.isVideoTexture === !0 || F !== Qa && F !== ii && (xt.getTransfer(F) === Ct ? (H !== cn || X !== Wn) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", F)), O;
  }
  function $(P) {
    return typeof HTMLImageElement < "u" && P instanceof HTMLImageElement ? (u.width = P.naturalWidth || P.width, u.height = P.naturalHeight || P.height) : typeof VideoFrame < "u" && P instanceof VideoFrame ? (u.width = P.displayWidth, u.height = P.displayHeight) : (u.width = P.width, u.height = P.height), u;
  }
  this.allocateTextureUnit = R, this.resetTextureUnits = T, this.setTexture2D = I, this.setTexture2DArray = C, this.setTexture3D = k, this.setTextureCube = z, this.rebindTextures = te, this.setupRenderTarget = ne, this.updateRenderTargetMipmap = ae, this.updateMultisampleRenderTarget = Ae, this.setupDepthRenderbuffer = Z, this.setupFrameBufferTexture = oe, this.useMultisampledRTT = Ne;
}
function Ez(r, e) {
  function t(n, i = ii) {
    let a;
    const s = xt.getTransfer(i);
    if (n === Wn) return r.UNSIGNED_BYTE;
    if (n === zf) return r.UNSIGNED_SHORT_4_4_4_4;
    if (n === kf) return r.UNSIGNED_SHORT_5_5_5_1;
    if (n === Ey) return r.UNSIGNED_INT_5_9_9_9_REV;
    if (n === wy) return r.BYTE;
    if (n === Sy) return r.SHORT;
    if (n === Os) return r.UNSIGNED_SHORT;
    if (n === Uf) return r.INT;
    if (n === Ki) return r.UNSIGNED_INT;
    if (n === Hn) return r.FLOAT;
    if (n === $s) return r.HALF_FLOAT;
    if (n === My) return r.ALPHA;
    if (n === Ay) return r.RGB;
    if (n === cn) return r.RGBA;
    if (n === Dy) return r.LUMINANCE;
    if (n === Cy) return r.LUMINANCE_ALPHA;
    if (n === Ua) return r.DEPTH_COMPONENT;
    if (n === Ja) return r.DEPTH_STENCIL;
    if (n === Ty) return r.RED;
    if (n === Hf) return r.RED_INTEGER;
    if (n === Ny) return r.RG;
    if (n === Gf) return r.RG_INTEGER;
    if (n === $f) return r.RGBA_INTEGER;
    if (n === jo || n === eu || n === tu || n === ru)
      if (s === Ct)
        if (a = e.get("WEBGL_compressed_texture_s3tc_srgb"), a !== null) {
          if (n === jo) return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (n === eu) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (n === tu) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (n === ru) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (a = e.get("WEBGL_compressed_texture_s3tc"), a !== null) {
        if (n === jo) return a.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (n === eu) return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (n === tu) return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (n === ru) return a.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (n === Oc || n === Pc || n === Bc || n === Ic)
      if (a = e.get("WEBGL_compressed_texture_pvrtc"), a !== null) {
        if (n === Oc) return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (n === Pc) return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (n === Bc) return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (n === Ic) return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (n === Lc || n === Uc || n === zc)
      if (a = e.get("WEBGL_compressed_texture_etc"), a !== null) {
        if (n === Lc || n === Uc) return s === Ct ? a.COMPRESSED_SRGB8_ETC2 : a.COMPRESSED_RGB8_ETC2;
        if (n === zc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : a.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (n === kc || n === Hc || n === Gc || n === $c || n === Vc || n === qc || n === Wc || n === Xc || n === Yc || n === Zc || n === Kc || n === Jc || n === Qc || n === jc)
      if (a = e.get("WEBGL_compressed_texture_astc"), a !== null) {
        if (n === kc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : a.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (n === Hc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : a.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (n === Gc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : a.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (n === $c) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : a.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (n === Vc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : a.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (n === qc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : a.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (n === Wc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : a.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (n === Xc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : a.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (n === Yc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : a.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (n === Zc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : a.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (n === Kc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : a.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (n === Jc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : a.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (n === Qc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : a.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (n === jc) return s === Ct ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : a.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (n === nu || n === ef || n === tf)
      if (a = e.get("EXT_texture_compression_bptc"), a !== null) {
        if (n === nu) return s === Ct ? a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : a.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (n === ef) return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (n === tf) return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (n === Ry || n === rf || n === nf || n === af)
      if (a = e.get("EXT_texture_compression_rgtc"), a !== null) {
        if (n === nu) return a.COMPRESSED_RED_RGTC1_EXT;
        if (n === rf) return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (n === nf) return a.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (n === af) return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return n === Ka ? r.UNSIGNED_INT_24_8 : r[n] !== void 0 ? r[n] : null;
  }
  return { convert: t };
}
const Mz = { type: "move" };
class Xl {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new ui(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new ui(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new ce(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new ce()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new ui(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new ce(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new ce()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let i = null, a = null, s = null;
    const o = this._targetRay, l = this._grip, u = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (u && e.hand) {
        s = !0;
        for (const p of e.hand.values()) {
          const g = t.getJointPose(p, n), v = this._getHandJoint(u, p);
          g !== null && (v.matrix.fromArray(g.transform.matrix), v.matrix.decompose(v.position, v.rotation, v.scale), v.matrixWorldNeedsUpdate = !0, v.jointRadius = g.radius), v.visible = g !== null;
        }
        const c = u.joints["index-finger-tip"], f = u.joints["thumb-tip"], h = c.position.distanceTo(f.position), d = 0.02, m = 5e-3;
        u.inputState.pinching && h > d + m ? (u.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !u.inputState.pinching && h <= d - m && (u.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        l !== null && e.gripSpace && (a = t.getPose(e.gripSpace, n), a !== null && (l.matrix.fromArray(a.transform.matrix), l.matrix.decompose(l.position, l.rotation, l.scale), l.matrixWorldNeedsUpdate = !0, a.linearVelocity ? (l.hasLinearVelocity = !0, l.linearVelocity.copy(a.linearVelocity)) : l.hasLinearVelocity = !1, a.angularVelocity ? (l.hasAngularVelocity = !0, l.angularVelocity.copy(a.angularVelocity)) : l.hasAngularVelocity = !1));
      o !== null && (i = t.getPose(e.targetRaySpace, n), i === null && a !== null && (i = a), i !== null && (o.matrix.fromArray(i.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), o.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(i.linearVelocity)) : o.hasLinearVelocity = !1, i.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(i.angularVelocity)) : o.hasAngularVelocity = !1, this.dispatchEvent(Mz)));
    }
    return o !== null && (o.visible = i !== null), l !== null && (l.visible = a !== null), u !== null && (u.visible = s !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new ui();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
const Az = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, Dz = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class Cz {
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  init(e, t, n) {
    if (this.texture === null) {
      const i = new Nr(), a = e.properties.get(i);
      a.__webglTexture = t.texture, (t.depthNear !== n.depthNear || t.depthFar !== n.depthFar) && (this.depthNear = t.depthNear, this.depthFar = t.depthFar), this.texture = i;
    }
  }
  getMesh(e) {
    if (this.texture !== null && this.mesh === null) {
      const t = e.cameras[0].viewport, n = new yi({
        vertexShader: Az,
        fragmentShader: Dz,
        uniforms: {
          depthColor: { value: this.texture },
          depthWidth: { value: t.z },
          depthHeight: { value: t.w }
        }
      });
      this.mesh = new Vt(new Yu(20, 20), n);
    }
    return this.mesh;
  }
  reset() {
    this.texture = null, this.mesh = null;
  }
  getDepthTexture() {
    return this.texture;
  }
}
class Tz extends os {
  constructor(e, t) {
    super();
    const n = this;
    let i = null, a = 1, s = null, o = "local-floor", l = 1, u = null, c = null, f = null, h = null, d = null, m = null;
    const p = new Cz(), g = t.getContextAttributes();
    let v = null, S = null;
    const x = [], y = [], b = new ft();
    let _ = null;
    const M = new zr();
    M.viewport = new Ht();
    const A = new zr();
    A.viewport = new Ht();
    const w = [M, A], E = new ZL();
    let D = null, T = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(U) {
      let ue = x[U];
      return ue === void 0 && (ue = new Xl(), x[U] = ue), ue.getTargetRaySpace();
    }, this.getControllerGrip = function(U) {
      let ue = x[U];
      return ue === void 0 && (ue = new Xl(), x[U] = ue), ue.getGripSpace();
    }, this.getHand = function(U) {
      let ue = x[U];
      return ue === void 0 && (ue = new Xl(), x[U] = ue), ue.getHandSpace();
    };
    function R(U) {
      const ue = y.indexOf(U.inputSource);
      if (ue === -1)
        return;
      const oe = x[ue];
      oe !== void 0 && (oe.update(U.inputSource, U.frame, u || s), oe.dispatchEvent({ type: U.type, data: U.inputSource }));
    }
    function B() {
      i.removeEventListener("select", R), i.removeEventListener("selectstart", R), i.removeEventListener("selectend", R), i.removeEventListener("squeeze", R), i.removeEventListener("squeezestart", R), i.removeEventListener("squeezeend", R), i.removeEventListener("end", B), i.removeEventListener("inputsourceschange", I);
      for (let U = 0; U < x.length; U++) {
        const ue = y[U];
        ue !== null && (y[U] = null, x[U].disconnect(ue));
      }
      D = null, T = null, p.reset(), e.setRenderTarget(v), d = null, h = null, f = null, i = null, S = null, J.stop(), n.isPresenting = !1, e.setPixelRatio(_), e.setSize(b.width, b.height, !1), n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(U) {
      a = U, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(U) {
      o = U, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return u || s;
    }, this.setReferenceSpace = function(U) {
      u = U;
    }, this.getBaseLayer = function() {
      return h !== null ? h : d;
    }, this.getBinding = function() {
      return f;
    }, this.getFrame = function() {
      return m;
    }, this.getSession = function() {
      return i;
    }, this.setSession = async function(U) {
      if (i = U, i !== null) {
        if (v = e.getRenderTarget(), i.addEventListener("select", R), i.addEventListener("selectstart", R), i.addEventListener("selectend", R), i.addEventListener("squeeze", R), i.addEventListener("squeezestart", R), i.addEventListener("squeezeend", R), i.addEventListener("end", B), i.addEventListener("inputsourceschange", I), g.xrCompatible !== !0 && await t.makeXRCompatible(), _ = e.getPixelRatio(), e.getSize(b), i.enabledFeatures !== void 0 && i.enabledFeatures.includes("layers")) {
          let oe = null, ie = null, G = null;
          g.depth && (G = g.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, oe = g.stencil ? Ja : Ua, ie = g.stencil ? Ka : Ki);
          const Z = {
            colorFormat: t.RGBA8,
            depthFormat: G,
            scaleFactor: a
          };
          f = new XRWebGLBinding(i, t), h = f.createProjectionLayer(Z), i.updateRenderState({ layers: [h] }), e.setPixelRatio(1), e.setSize(h.textureWidth, h.textureHeight, !1), S = new Ji(
            h.textureWidth,
            h.textureHeight,
            {
              format: cn,
              type: Wn,
              depthTexture: new qy(h.textureWidth, h.textureHeight, ie, void 0, void 0, void 0, void 0, void 0, void 0, oe),
              stencilBuffer: g.stencil,
              colorSpace: e.outputColorSpace,
              samples: g.antialias ? 4 : 0,
              resolveDepthBuffer: h.ignoreDepthValues === !1
            }
          );
        } else {
          const oe = {
            antialias: g.antialias,
            alpha: !0,
            depth: g.depth,
            stencil: g.stencil,
            framebufferScaleFactor: a
          };
          d = new XRWebGLLayer(i, t, oe), i.updateRenderState({ baseLayer: d }), e.setPixelRatio(1), e.setSize(d.framebufferWidth, d.framebufferHeight, !1), S = new Ji(
            d.framebufferWidth,
            d.framebufferHeight,
            {
              format: cn,
              type: Wn,
              colorSpace: e.outputColorSpace,
              stencilBuffer: g.stencil
            }
          );
        }
        S.isXRRenderTarget = !0, this.setFoveation(l), u = null, s = await i.requestReferenceSpace(o), J.setContext(i), J.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (i !== null)
        return i.environmentBlendMode;
    }, this.getDepthTexture = function() {
      return p.getDepthTexture();
    };
    function I(U) {
      for (let ue = 0; ue < U.removed.length; ue++) {
        const oe = U.removed[ue], ie = y.indexOf(oe);
        ie >= 0 && (y[ie] = null, x[ie].disconnect(oe));
      }
      for (let ue = 0; ue < U.added.length; ue++) {
        const oe = U.added[ue];
        let ie = y.indexOf(oe);
        if (ie === -1) {
          for (let Z = 0; Z < x.length; Z++)
            if (Z >= y.length) {
              y.push(oe), ie = Z;
              break;
            } else if (y[Z] === null) {
              y[Z] = oe, ie = Z;
              break;
            }
          if (ie === -1) break;
        }
        const G = x[ie];
        G && G.connect(oe);
      }
    }
    const C = new ce(), k = new ce();
    function z(U, ue, oe) {
      C.setFromMatrixPosition(ue.matrixWorld), k.setFromMatrixPosition(oe.matrixWorld);
      const ie = C.distanceTo(k), G = ue.projectionMatrix.elements, Z = oe.projectionMatrix.elements, te = G[14] / (G[10] - 1), ne = G[14] / (G[10] + 1), ae = (G[9] + 1) / G[5], xe = (G[9] - 1) / G[5], q = (G[8] - 1) / G[0], Ae = (Z[8] + 1) / Z[0], De = te * q, Ne = te * Ae, we = ie / (-q + Ae), Pe = we * -q;
      if (ue.matrixWorld.decompose(U.position, U.quaternion, U.scale), U.translateX(Pe), U.translateZ(we), U.matrixWorld.compose(U.position, U.quaternion, U.scale), U.matrixWorldInverse.copy(U.matrixWorld).invert(), G[10] === -1)
        U.projectionMatrix.copy(ue.projectionMatrix), U.projectionMatrixInverse.copy(ue.projectionMatrixInverse);
      else {
        const $ = te + we, P = ne + we, O = De - Pe, F = Ne + (ie - Pe), H = ae * ne / P * $, X = xe * ne / P * $;
        U.projectionMatrix.makePerspective(O, F, H, X, $, P), U.projectionMatrixInverse.copy(U.projectionMatrix).invert();
      }
    }
    function V(U, ue) {
      ue === null ? U.matrixWorld.copy(U.matrix) : U.matrixWorld.multiplyMatrices(ue.matrixWorld, U.matrix), U.matrixWorldInverse.copy(U.matrixWorld).invert();
    }
    this.updateCamera = function(U) {
      if (i === null) return;
      let ue = U.near, oe = U.far;
      p.texture !== null && (p.depthNear > 0 && (ue = p.depthNear), p.depthFar > 0 && (oe = p.depthFar)), E.near = A.near = M.near = ue, E.far = A.far = M.far = oe, (D !== E.near || T !== E.far) && (i.updateRenderState({
        depthNear: E.near,
        depthFar: E.far
      }), D = E.near, T = E.far), M.layers.mask = U.layers.mask | 2, A.layers.mask = U.layers.mask | 4, E.layers.mask = M.layers.mask | A.layers.mask;
      const ie = U.parent, G = E.cameras;
      V(E, ie);
      for (let Z = 0; Z < G.length; Z++)
        V(G[Z], ie);
      G.length === 2 ? z(E, M, A) : E.projectionMatrix.copy(M.projectionMatrix), ee(U, E, ie);
    };
    function ee(U, ue, oe) {
      oe === null ? U.matrix.copy(ue.matrixWorld) : (U.matrix.copy(oe.matrixWorld), U.matrix.invert(), U.matrix.multiply(ue.matrixWorld)), U.matrix.decompose(U.position, U.quaternion, U.scale), U.updateMatrixWorld(!0), U.projectionMatrix.copy(ue.projectionMatrix), U.projectionMatrixInverse.copy(ue.projectionMatrixInverse), U.isPerspectiveCamera && (U.fov = ja * 2 * Math.atan(1 / U.projectionMatrix.elements[5]), U.zoom = 1);
    }
    this.getCamera = function() {
      return E;
    }, this.getFoveation = function() {
      if (!(h === null && d === null))
        return l;
    }, this.setFoveation = function(U) {
      l = U, h !== null && (h.fixedFoveation = U), d !== null && d.fixedFoveation !== void 0 && (d.fixedFoveation = U);
    }, this.hasDepthSensing = function() {
      return p.texture !== null;
    }, this.getDepthSensingMesh = function() {
      return p.getMesh(E);
    };
    let re = null;
    function L(U, ue) {
      if (c = ue.getViewerPose(u || s), m = ue, c !== null) {
        const oe = c.views;
        d !== null && (e.setRenderTargetFramebuffer(S, d.framebuffer), e.setRenderTarget(S));
        let ie = !1;
        oe.length !== E.cameras.length && (E.cameras.length = 0, ie = !0);
        for (let Z = 0; Z < oe.length; Z++) {
          const te = oe[Z];
          let ne = null;
          if (d !== null)
            ne = d.getViewport(te);
          else {
            const xe = f.getViewSubImage(h, te);
            ne = xe.viewport, Z === 0 && (e.setRenderTargetTextures(
              S,
              xe.colorTexture,
              h.ignoreDepthValues ? void 0 : xe.depthStencilTexture
            ), e.setRenderTarget(S));
          }
          let ae = w[Z];
          ae === void 0 && (ae = new zr(), ae.layers.enable(Z), ae.viewport = new Ht(), w[Z] = ae), ae.matrix.fromArray(te.transform.matrix), ae.matrix.decompose(ae.position, ae.quaternion, ae.scale), ae.projectionMatrix.fromArray(te.projectionMatrix), ae.projectionMatrixInverse.copy(ae.projectionMatrix).invert(), ae.viewport.set(ne.x, ne.y, ne.width, ne.height), Z === 0 && (E.matrix.copy(ae.matrix), E.matrix.decompose(E.position, E.quaternion, E.scale)), ie === !0 && E.cameras.push(ae);
        }
        const G = i.enabledFeatures;
        if (G && G.includes("depth-sensing")) {
          const Z = f.getDepthInformation(oe[0]);
          Z && Z.isValid && Z.texture && p.init(e, Z, i.renderState);
        }
      }
      for (let oe = 0; oe < x.length; oe++) {
        const ie = y[oe], G = x[oe];
        ie !== null && G !== void 0 && G.update(ie, ue, u || s);
      }
      re && re(U, ue), ue.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: ue }), m = null;
    }
    const J = new Xy();
    J.setAnimationLoop(L), this.setAnimationLoop = function(U) {
      re = U;
    }, this.dispose = function() {
    };
  }
}
const Oi = /* @__PURE__ */ new An(), Nz = /* @__PURE__ */ new mt();
function Rz(r, e) {
  function t(g, v) {
    g.matrixAutoUpdate === !0 && g.updateMatrix(), v.value.copy(g.matrix);
  }
  function n(g, v) {
    v.color.getRGB(g.fogColor.value, Gy(r)), v.isFog ? (g.fogNear.value = v.near, g.fogFar.value = v.far) : v.isFogExp2 && (g.fogDensity.value = v.density);
  }
  function i(g, v, S, x, y) {
    v.isMeshBasicMaterial || v.isMeshLambertMaterial ? a(g, v) : v.isMeshToonMaterial ? (a(g, v), f(g, v)) : v.isMeshPhongMaterial ? (a(g, v), c(g, v)) : v.isMeshStandardMaterial ? (a(g, v), h(g, v), v.isMeshPhysicalMaterial && d(g, v, y)) : v.isMeshMatcapMaterial ? (a(g, v), m(g, v)) : v.isMeshDepthMaterial ? a(g, v) : v.isMeshDistanceMaterial ? (a(g, v), p(g, v)) : v.isMeshNormalMaterial ? a(g, v) : v.isLineBasicMaterial ? (s(g, v), v.isLineDashedMaterial && o(g, v)) : v.isPointsMaterial ? l(g, v, S, x) : v.isSpriteMaterial ? u(g, v) : v.isShadowMaterial ? (g.color.value.copy(v.color), g.opacity.value = v.opacity) : v.isShaderMaterial && (v.uniformsNeedUpdate = !1);
  }
  function a(g, v) {
    g.opacity.value = v.opacity, v.color && g.diffuse.value.copy(v.color), v.emissive && g.emissive.value.copy(v.emissive).multiplyScalar(v.emissiveIntensity), v.map && (g.map.value = v.map, t(v.map, g.mapTransform)), v.alphaMap && (g.alphaMap.value = v.alphaMap, t(v.alphaMap, g.alphaMapTransform)), v.bumpMap && (g.bumpMap.value = v.bumpMap, t(v.bumpMap, g.bumpMapTransform), g.bumpScale.value = v.bumpScale, v.side === vr && (g.bumpScale.value *= -1)), v.normalMap && (g.normalMap.value = v.normalMap, t(v.normalMap, g.normalMapTransform), g.normalScale.value.copy(v.normalScale), v.side === vr && g.normalScale.value.negate()), v.displacementMap && (g.displacementMap.value = v.displacementMap, t(v.displacementMap, g.displacementMapTransform), g.displacementScale.value = v.displacementScale, g.displacementBias.value = v.displacementBias), v.emissiveMap && (g.emissiveMap.value = v.emissiveMap, t(v.emissiveMap, g.emissiveMapTransform)), v.specularMap && (g.specularMap.value = v.specularMap, t(v.specularMap, g.specularMapTransform)), v.alphaTest > 0 && (g.alphaTest.value = v.alphaTest);
    const S = e.get(v), x = S.envMap, y = S.envMapRotation;
    x && (g.envMap.value = x, Oi.copy(y), Oi.x *= -1, Oi.y *= -1, Oi.z *= -1, x.isCubeTexture && x.isRenderTargetTexture === !1 && (Oi.y *= -1, Oi.z *= -1), g.envMapRotation.value.setFromMatrix4(Nz.makeRotationFromEuler(Oi)), g.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === !1 ? -1 : 1, g.reflectivity.value = v.reflectivity, g.ior.value = v.ior, g.refractionRatio.value = v.refractionRatio), v.lightMap && (g.lightMap.value = v.lightMap, g.lightMapIntensity.value = v.lightMapIntensity, t(v.lightMap, g.lightMapTransform)), v.aoMap && (g.aoMap.value = v.aoMap, g.aoMapIntensity.value = v.aoMapIntensity, t(v.aoMap, g.aoMapTransform));
  }
  function s(g, v) {
    g.diffuse.value.copy(v.color), g.opacity.value = v.opacity, v.map && (g.map.value = v.map, t(v.map, g.mapTransform));
  }
  function o(g, v) {
    g.dashSize.value = v.dashSize, g.totalSize.value = v.dashSize + v.gapSize, g.scale.value = v.scale;
  }
  function l(g, v, S, x) {
    g.diffuse.value.copy(v.color), g.opacity.value = v.opacity, g.size.value = v.size * S, g.scale.value = x * 0.5, v.map && (g.map.value = v.map, t(v.map, g.uvTransform)), v.alphaMap && (g.alphaMap.value = v.alphaMap, t(v.alphaMap, g.alphaMapTransform)), v.alphaTest > 0 && (g.alphaTest.value = v.alphaTest);
  }
  function u(g, v) {
    g.diffuse.value.copy(v.color), g.opacity.value = v.opacity, g.rotation.value = v.rotation, v.map && (g.map.value = v.map, t(v.map, g.mapTransform)), v.alphaMap && (g.alphaMap.value = v.alphaMap, t(v.alphaMap, g.alphaMapTransform)), v.alphaTest > 0 && (g.alphaTest.value = v.alphaTest);
  }
  function c(g, v) {
    g.specular.value.copy(v.specular), g.shininess.value = Math.max(v.shininess, 1e-4);
  }
  function f(g, v) {
    v.gradientMap && (g.gradientMap.value = v.gradientMap);
  }
  function h(g, v) {
    g.metalness.value = v.metalness, v.metalnessMap && (g.metalnessMap.value = v.metalnessMap, t(v.metalnessMap, g.metalnessMapTransform)), g.roughness.value = v.roughness, v.roughnessMap && (g.roughnessMap.value = v.roughnessMap, t(v.roughnessMap, g.roughnessMapTransform)), v.envMap && (g.envMapIntensity.value = v.envMapIntensity);
  }
  function d(g, v, S) {
    g.ior.value = v.ior, v.sheen > 0 && (g.sheenColor.value.copy(v.sheenColor).multiplyScalar(v.sheen), g.sheenRoughness.value = v.sheenRoughness, v.sheenColorMap && (g.sheenColorMap.value = v.sheenColorMap, t(v.sheenColorMap, g.sheenColorMapTransform)), v.sheenRoughnessMap && (g.sheenRoughnessMap.value = v.sheenRoughnessMap, t(v.sheenRoughnessMap, g.sheenRoughnessMapTransform))), v.clearcoat > 0 && (g.clearcoat.value = v.clearcoat, g.clearcoatRoughness.value = v.clearcoatRoughness, v.clearcoatMap && (g.clearcoatMap.value = v.clearcoatMap, t(v.clearcoatMap, g.clearcoatMapTransform)), v.clearcoatRoughnessMap && (g.clearcoatRoughnessMap.value = v.clearcoatRoughnessMap, t(v.clearcoatRoughnessMap, g.clearcoatRoughnessMapTransform)), v.clearcoatNormalMap && (g.clearcoatNormalMap.value = v.clearcoatNormalMap, t(v.clearcoatNormalMap, g.clearcoatNormalMapTransform), g.clearcoatNormalScale.value.copy(v.clearcoatNormalScale), v.side === vr && g.clearcoatNormalScale.value.negate())), v.dispersion > 0 && (g.dispersion.value = v.dispersion), v.iridescence > 0 && (g.iridescence.value = v.iridescence, g.iridescenceIOR.value = v.iridescenceIOR, g.iridescenceThicknessMinimum.value = v.iridescenceThicknessRange[0], g.iridescenceThicknessMaximum.value = v.iridescenceThicknessRange[1], v.iridescenceMap && (g.iridescenceMap.value = v.iridescenceMap, t(v.iridescenceMap, g.iridescenceMapTransform)), v.iridescenceThicknessMap && (g.iridescenceThicknessMap.value = v.iridescenceThicknessMap, t(v.iridescenceThicknessMap, g.iridescenceThicknessMapTransform))), v.transmission > 0 && (g.transmission.value = v.transmission, g.transmissionSamplerMap.value = S.texture, g.transmissionSamplerSize.value.set(S.width, S.height), v.transmissionMap && (g.transmissionMap.value = v.transmissionMap, t(v.transmissionMap, g.transmissionMapTransform)), g.thickness.value = v.thickness, v.thicknessMap && (g.thicknessMap.value = v.thicknessMap, t(v.thicknessMap, g.thicknessMapTransform)), g.attenuationDistance.value = v.attenuationDistance, g.attenuationColor.value.copy(v.attenuationColor)), v.anisotropy > 0 && (g.anisotropyVector.value.set(v.anisotropy * Math.cos(v.anisotropyRotation), v.anisotropy * Math.sin(v.anisotropyRotation)), v.anisotropyMap && (g.anisotropyMap.value = v.anisotropyMap, t(v.anisotropyMap, g.anisotropyMapTransform))), g.specularIntensity.value = v.specularIntensity, g.specularColor.value.copy(v.specularColor), v.specularColorMap && (g.specularColorMap.value = v.specularColorMap, t(v.specularColorMap, g.specularColorMapTransform)), v.specularIntensityMap && (g.specularIntensityMap.value = v.specularIntensityMap, t(v.specularIntensityMap, g.specularIntensityMapTransform));
  }
  function m(g, v) {
    v.matcap && (g.matcap.value = v.matcap);
  }
  function p(g, v) {
    const S = e.get(v).light;
    g.referencePosition.value.setFromMatrixPosition(S.matrixWorld), g.nearDistance.value = S.shadow.camera.near, g.farDistance.value = S.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: i
  };
}
function Fz(r, e, t, n) {
  let i = {}, a = {}, s = [];
  const o = r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);
  function l(S, x) {
    const y = x.program;
    n.uniformBlockBinding(S, y);
  }
  function u(S, x) {
    let y = i[S.id];
    y === void 0 && (m(S), y = c(S), i[S.id] = y, S.addEventListener("dispose", g));
    const b = x.program;
    n.updateUBOMapping(S, b);
    const _ = e.render.frame;
    a[S.id] !== _ && (h(S), a[S.id] = _);
  }
  function c(S) {
    const x = f();
    S.__bindingPointIndex = x;
    const y = r.createBuffer(), b = S.__size, _ = S.usage;
    return r.bindBuffer(r.UNIFORM_BUFFER, y), r.bufferData(r.UNIFORM_BUFFER, b, _), r.bindBuffer(r.UNIFORM_BUFFER, null), r.bindBufferBase(r.UNIFORM_BUFFER, x, y), y;
  }
  function f() {
    for (let S = 0; S < o; S++)
      if (s.indexOf(S) === -1)
        return s.push(S), S;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function h(S) {
    const x = i[S.id], y = S.uniforms, b = S.__cache;
    r.bindBuffer(r.UNIFORM_BUFFER, x);
    for (let _ = 0, M = y.length; _ < M; _++) {
      const A = Array.isArray(y[_]) ? y[_] : [y[_]];
      for (let w = 0, E = A.length; w < E; w++) {
        const D = A[w];
        if (d(D, _, w, b) === !0) {
          const T = D.__offset, R = Array.isArray(D.value) ? D.value : [D.value];
          let B = 0;
          for (let I = 0; I < R.length; I++) {
            const C = R[I], k = p(C);
            typeof C == "number" || typeof C == "boolean" ? (D.__data[0] = C, r.bufferSubData(r.UNIFORM_BUFFER, T + B, D.__data)) : C.isMatrix3 ? (D.__data[0] = C.elements[0], D.__data[1] = C.elements[1], D.__data[2] = C.elements[2], D.__data[3] = 0, D.__data[4] = C.elements[3], D.__data[5] = C.elements[4], D.__data[6] = C.elements[5], D.__data[7] = 0, D.__data[8] = C.elements[6], D.__data[9] = C.elements[7], D.__data[10] = C.elements[8], D.__data[11] = 0) : (C.toArray(D.__data, B), B += k.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          r.bufferSubData(r.UNIFORM_BUFFER, T, D.__data);
        }
      }
    }
    r.bindBuffer(r.UNIFORM_BUFFER, null);
  }
  function d(S, x, y, b) {
    const _ = S.value, M = x + "_" + y;
    if (b[M] === void 0)
      return typeof _ == "number" || typeof _ == "boolean" ? b[M] = _ : b[M] = _.clone(), !0;
    {
      const A = b[M];
      if (typeof _ == "number" || typeof _ == "boolean") {
        if (A !== _)
          return b[M] = _, !0;
      } else if (A.equals(_) === !1)
        return A.copy(_), !0;
    }
    return !1;
  }
  function m(S) {
    const x = S.uniforms;
    let y = 0;
    const b = 16;
    for (let M = 0, A = x.length; M < A; M++) {
      const w = Array.isArray(x[M]) ? x[M] : [x[M]];
      for (let E = 0, D = w.length; E < D; E++) {
        const T = w[E], R = Array.isArray(T.value) ? T.value : [T.value];
        for (let B = 0, I = R.length; B < I; B++) {
          const C = R[B], k = p(C), z = y % b, V = z % k.boundary, ee = z + V;
          y += V, ee !== 0 && b - ee < k.storage && (y += b - ee), T.__data = new Float32Array(k.storage / Float32Array.BYTES_PER_ELEMENT), T.__offset = y, y += k.storage;
        }
      }
    }
    const _ = y % b;
    return _ > 0 && (y += b - _), S.__size = y, S.__cache = {}, this;
  }
  function p(S) {
    const x = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof S == "number" || typeof S == "boolean" ? (x.boundary = 4, x.storage = 4) : S.isVector2 ? (x.boundary = 8, x.storage = 8) : S.isVector3 || S.isColor ? (x.boundary = 16, x.storage = 12) : S.isVector4 ? (x.boundary = 16, x.storage = 16) : S.isMatrix3 ? (x.boundary = 48, x.storage = 48) : S.isMatrix4 ? (x.boundary = 64, x.storage = 64) : S.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", S), x;
  }
  function g(S) {
    const x = S.target;
    x.removeEventListener("dispose", g);
    const y = s.indexOf(x.__bindingPointIndex);
    s.splice(y, 1), r.deleteBuffer(i[x.id]), delete i[x.id], delete a[x.id];
  }
  function v() {
    for (const S in i)
      r.deleteBuffer(i[S]);
    s = [], i = {}, a = {};
  }
  return {
    bind: l,
    update: u,
    dispose: v
  };
}
class Oz {
  constructor(e = {}) {
    const {
      canvas: t = dL(),
      context: n = null,
      depth: i = !0,
      stencil: a = !1,
      alpha: s = !1,
      antialias: o = !1,
      premultipliedAlpha: l = !0,
      preserveDrawingBuffer: u = !1,
      powerPreference: c = "default",
      failIfMajorPerformanceCaveat: f = !1,
      reverseDepthBuffer: h = !1
    } = e;
    this.isWebGLRenderer = !0;
    let d;
    if (n !== null) {
      if (typeof WebGLRenderingContext < "u" && n instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      d = n.getContextAttributes().alpha;
    } else
      d = s;
    const m = new Uint32Array(4), p = new Int32Array(4);
    let g = null, v = null;
    const S = [], x = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = Kr, this.toneMapping = fi, this.toneMappingExposure = 1;
    const y = this;
    let b = !1, _ = 0, M = 0, A = null, w = -1, E = null;
    const D = new Ht(), T = new Ht();
    let R = null;
    const B = new wt(0);
    let I = 0, C = t.width, k = t.height, z = 1, V = null, ee = null;
    const re = new Ht(0, 0, C, k), L = new Ht(0, 0, C, k);
    let J = !1;
    const U = new Xf();
    let ue = !1, oe = !1;
    this.transmissionResolutionScale = 1;
    const ie = new mt(), G = new mt(), Z = new ce(), te = new Ht(), ne = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let ae = !1;
    function xe() {
      return A === null ? z : 1;
    }
    let q = n;
    function Ae(Y, me) {
      return t.getContext(Y, me);
    }
    try {
      const Y = {
        alpha: !0,
        depth: i,
        stencil: a,
        antialias: o,
        premultipliedAlpha: l,
        preserveDrawingBuffer: u,
        powerPreference: c,
        failIfMajorPerformanceCaveat: f
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Lf}`), t.addEventListener("webglcontextlost", Ee, !1), t.addEventListener("webglcontextrestored", ze, !1), t.addEventListener("webglcontextcreationerror", ke, !1), q === null) {
        const me = "webgl2";
        if (q = Ae(me, Y), q === null)
          throw Ae(me) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (Y) {
      throw console.error("THREE.WebGLRenderer: " + Y.message), Y;
    }
    let De, Ne, we, Pe, $, P, O, F, H, X, K, se, le, ge, be, he, ye, Oe, Te, Fe, N, j, de, Q;
    function Se() {
      De = new G7(q), De.init(), j = new Ez(q, De), Ne = new I7(q, De, e, j), we = new wz(q, De), Ne.reverseDepthBuffer && h && we.buffers.depth.setReversed(!0), Pe = new q7(q), $ = new lz(), P = new Sz(q, De, we, $, Ne, j, Pe), O = new U7(y), F = new H7(y), H = new QL(q), de = new P7(q, H), X = new $7(q, H, Pe, de), K = new X7(q, X, H, Pe), Te = new W7(q, Ne, P), he = new L7($), se = new uz(y, O, F, De, Ne, de, he), le = new Rz(y, $), ge = new fz(), be = new gz(De), Oe = new O7(y, O, F, we, K, d, l), ye = new _z(y, K, Ne), Q = new Fz(q, Pe, Ne, we), Fe = new B7(q, De, Pe), N = new V7(q, De, Pe), Pe.programs = se.programs, y.capabilities = Ne, y.extensions = De, y.properties = $, y.renderLists = ge, y.shadowMap = ye, y.state = we, y.info = Pe;
    }
    Se();
    const pe = new Tz(y, q);
    this.xr = pe, this.getContext = function() {
      return q;
    }, this.getContextAttributes = function() {
      return q.getContextAttributes();
    }, this.forceContextLoss = function() {
      const Y = De.get("WEBGL_lose_context");
      Y && Y.loseContext();
    }, this.forceContextRestore = function() {
      const Y = De.get("WEBGL_lose_context");
      Y && Y.restoreContext();
    }, this.getPixelRatio = function() {
      return z;
    }, this.setPixelRatio = function(Y) {
      Y !== void 0 && (z = Y, this.setSize(C, k, !1));
    }, this.getSize = function(Y) {
      return Y.set(C, k);
    }, this.setSize = function(Y, me, _e = !0) {
      if (pe.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      C = Y, k = me, t.width = Math.floor(Y * z), t.height = Math.floor(me * z), _e === !0 && (t.style.width = Y + "px", t.style.height = me + "px"), this.setViewport(0, 0, Y, me);
    }, this.getDrawingBufferSize = function(Y) {
      return Y.set(C * z, k * z).floor();
    }, this.setDrawingBufferSize = function(Y, me, _e) {
      C = Y, k = me, z = _e, t.width = Math.floor(Y * _e), t.height = Math.floor(me * _e), this.setViewport(0, 0, Y, me);
    }, this.getCurrentViewport = function(Y) {
      return Y.copy(D);
    }, this.getViewport = function(Y) {
      return Y.copy(re);
    }, this.setViewport = function(Y, me, _e, ve) {
      Y.isVector4 ? re.set(Y.x, Y.y, Y.z, Y.w) : re.set(Y, me, _e, ve), we.viewport(D.copy(re).multiplyScalar(z).round());
    }, this.getScissor = function(Y) {
      return Y.copy(L);
    }, this.setScissor = function(Y, me, _e, ve) {
      Y.isVector4 ? L.set(Y.x, Y.y, Y.z, Y.w) : L.set(Y, me, _e, ve), we.scissor(T.copy(L).multiplyScalar(z).round());
    }, this.getScissorTest = function() {
      return J;
    }, this.setScissorTest = function(Y) {
      we.setScissorTest(J = Y);
    }, this.setOpaqueSort = function(Y) {
      V = Y;
    }, this.setTransparentSort = function(Y) {
      ee = Y;
    }, this.getClearColor = function(Y) {
      return Y.copy(Oe.getClearColor());
    }, this.setClearColor = function() {
      Oe.setClearColor.apply(Oe, arguments);
    }, this.getClearAlpha = function() {
      return Oe.getClearAlpha();
    }, this.setClearAlpha = function() {
      Oe.setClearAlpha.apply(Oe, arguments);
    }, this.clear = function(Y = !0, me = !0, _e = !0) {
      let ve = 0;
      if (Y) {
        let fe = !1;
        if (A !== null) {
          const Re = A.texture.format;
          fe = Re === $f || Re === Gf || Re === Hf;
        }
        if (fe) {
          const Re = A.texture.type, Be = Re === Wn || Re === Ki || Re === Os || Re === Ka || Re === zf || Re === kf, He = Oe.getClearColor(), Ge = Oe.getClearAlpha(), rt = He.r, it = He.g, Xe = He.b;
          Be ? (m[0] = rt, m[1] = it, m[2] = Xe, m[3] = Ge, q.clearBufferuiv(q.COLOR, 0, m)) : (p[0] = rt, p[1] = it, p[2] = Xe, p[3] = Ge, q.clearBufferiv(q.COLOR, 0, p));
        } else
          ve |= q.COLOR_BUFFER_BIT;
      }
      me && (ve |= q.DEPTH_BUFFER_BIT), _e && (ve |= q.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), q.clear(ve);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", Ee, !1), t.removeEventListener("webglcontextrestored", ze, !1), t.removeEventListener("webglcontextcreationerror", ke, !1), Oe.dispose(), ge.dispose(), be.dispose(), $.dispose(), O.dispose(), F.dispose(), K.dispose(), de.dispose(), Q.dispose(), se.dispose(), pe.dispose(), pe.removeEventListener("sessionstart", Ws), pe.removeEventListener("sessionend", Xs), Cn.stop();
    };
    function Ee(Y) {
      Y.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), b = !0;
    }
    function ze() {
      console.log("THREE.WebGLRenderer: Context Restored."), b = !1;
      const Y = Pe.autoReset, me = ye.enabled, _e = ye.autoUpdate, ve = ye.needsUpdate, fe = ye.type;
      Se(), Pe.autoReset = Y, ye.enabled = me, ye.autoUpdate = _e, ye.needsUpdate = ve, ye.type = fe;
    }
    function ke(Y) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", Y.statusMessage);
    }
    function at(Y) {
      const me = Y.target;
      me.removeEventListener("dispose", at), Bt(me);
    }
    function Bt(Y) {
      jt(Y), $.remove(Y);
    }
    function jt(Y) {
      const me = $.get(Y).programs;
      me !== void 0 && (me.forEach(function(_e) {
        se.releaseProgram(_e);
      }), Y.isShaderMaterial && se.releaseShaderCache(Y));
    }
    this.renderBufferDirect = function(Y, me, _e, ve, fe, Re) {
      me === null && (me = ne);
      const Be = fe.isMesh && fe.matrixWorld.determinant() < 0, He = ju(Y, me, _e, ve, fe);
      we.setMaterial(ve, Be);
      let Ge = _e.index, rt = 1;
      if (ve.wireframe === !0) {
        if (Ge = X.getWireframeAttribute(_e), Ge === void 0) return;
        rt = 2;
      }
      const it = _e.drawRange, Xe = _e.attributes.position;
      let gt = it.start * rt, St = (it.start + it.count) * rt;
      Re !== null && (gt = Math.max(gt, Re.start * rt), St = Math.min(St, (Re.start + Re.count) * rt)), Ge !== null ? (gt = Math.max(gt, 0), St = Math.min(St, Ge.count)) : Xe != null && (gt = Math.max(gt, 0), St = Math.min(St, Xe.count));
      const Gt = St - gt;
      if (Gt < 0 || Gt === 1 / 0) return;
      de.setup(fe, ve, He, _e, Ge);
      let Ut, yt = Fe;
      if (Ge !== null && (Ut = H.get(Ge), yt = N, yt.setIndex(Ut)), fe.isMesh)
        ve.wireframe === !0 ? (we.setLineWidth(ve.wireframeLinewidth * xe()), yt.setMode(q.LINES)) : yt.setMode(q.TRIANGLES);
      else if (fe.isLine) {
        let Ze = ve.linewidth;
        Ze === void 0 && (Ze = 1), we.setLineWidth(Ze * xe()), fe.isLineSegments ? yt.setMode(q.LINES) : fe.isLineLoop ? yt.setMode(q.LINE_LOOP) : yt.setMode(q.LINE_STRIP);
      } else fe.isPoints ? yt.setMode(q.POINTS) : fe.isSprite && yt.setMode(q.TRIANGLES);
      if (fe.isBatchedMesh)
        if (fe._multiDrawInstances !== null)
          yt.renderMultiDrawInstances(fe._multiDrawStarts, fe._multiDrawCounts, fe._multiDrawCount, fe._multiDrawInstances);
        else if (De.get("WEBGL_multi_draw"))
          yt.renderMultiDraw(fe._multiDrawStarts, fe._multiDrawCounts, fe._multiDrawCount);
        else {
          const Ze = fe._multiDrawStarts, ir = fe._multiDrawCounts, Et = fe._multiDrawCount, tn = Ge ? H.get(Ge).bytesPerElement : 1, aa = $.get(ve).currentProgram.getUniforms();
          for (let Or = 0; Or < Et; Or++)
            aa.setValue(q, "_gl_DrawID", Or), yt.render(Ze[Or] / tn, ir[Or]);
        }
      else if (fe.isInstancedMesh)
        yt.renderInstances(gt, Gt, fe.count);
      else if (_e.isInstancedBufferGeometry) {
        const Ze = _e._maxInstanceCount !== void 0 ? _e._maxInstanceCount : 1 / 0, ir = Math.min(_e.instanceCount, Ze);
        yt.renderInstances(gt, Gt, ir);
      } else
        yt.render(gt, Gt);
    };
    function _t(Y, me, _e) {
      Y.transparent === !0 && Y.side === Un && Y.forceSinglePass === !1 ? (Y.side = vr, Y.needsUpdate = !0, ia(Y, me, _e), Y.side = gi, Y.needsUpdate = !0, ia(Y, me, _e), Y.side = Un) : ia(Y, me, _e);
    }
    this.compile = function(Y, me, _e = null) {
      _e === null && (_e = Y), v = be.get(_e), v.init(me), x.push(v), _e.traverseVisible(function(fe) {
        fe.isLight && fe.layers.test(me.layers) && (v.pushLight(fe), fe.castShadow && v.pushShadow(fe));
      }), Y !== _e && Y.traverseVisible(function(fe) {
        fe.isLight && fe.layers.test(me.layers) && (v.pushLight(fe), fe.castShadow && v.pushShadow(fe));
      }), v.setupLights();
      const ve = /* @__PURE__ */ new Set();
      return Y.traverse(function(fe) {
        if (!(fe.isMesh || fe.isPoints || fe.isLine || fe.isSprite))
          return;
        const Re = fe.material;
        if (Re)
          if (Array.isArray(Re))
            for (let Be = 0; Be < Re.length; Be++) {
              const He = Re[Be];
              _t(He, _e, fe), ve.add(He);
            }
          else
            _t(Re, _e, fe), ve.add(Re);
      }), x.pop(), v = null, ve;
    }, this.compileAsync = function(Y, me, _e = null) {
      const ve = this.compile(Y, me, _e);
      return new Promise((fe) => {
        function Re() {
          if (ve.forEach(function(Be) {
            $.get(Be).currentProgram.isReady() && ve.delete(Be);
          }), ve.size === 0) {
            fe(Y);
            return;
          }
          setTimeout(Re, 10);
        }
        De.get("KHR_parallel_shader_compile") !== null ? Re() : setTimeout(Re, 10);
      });
    };
    let Fr = null;
    function en(Y) {
      Fr && Fr(Y);
    }
    function Ws() {
      Cn.stop();
    }
    function Xs() {
      Cn.start();
    }
    const Cn = new Xy();
    Cn.setAnimationLoop(en), typeof self < "u" && Cn.setContext(self), this.setAnimationLoop = function(Y) {
      Fr = Y, pe.setAnimationLoop(Y), Y === null ? Cn.stop() : Cn.start();
    }, pe.addEventListener("sessionstart", Ws), pe.addEventListener("sessionend", Xs), this.render = function(Y, me) {
      if (me !== void 0 && me.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (b === !0) return;
      if (Y.matrixWorldAutoUpdate === !0 && Y.updateMatrixWorld(), me.parent === null && me.matrixWorldAutoUpdate === !0 && me.updateMatrixWorld(), pe.enabled === !0 && pe.isPresenting === !0 && (pe.cameraAutoUpdate === !0 && pe.updateCamera(me), me = pe.getCamera()), Y.isScene === !0 && Y.onBeforeRender(y, Y, me, A), v = be.get(Y, x.length), v.init(me), x.push(v), G.multiplyMatrices(me.projectionMatrix, me.matrixWorldInverse), U.setFromProjectionMatrix(G), oe = this.localClippingEnabled, ue = he.init(this.clippingPlanes, oe), g = ge.get(Y, S.length), g.init(), S.push(g), pe.enabled === !0 && pe.isPresenting === !0) {
        const Re = y.xr.getDepthSensingMesh();
        Re !== null && fs(Re, me, -1 / 0, y.sortObjects);
      }
      fs(Y, me, 0, y.sortObjects), g.finish(), y.sortObjects === !0 && g.sort(V, ee), ae = pe.enabled === !1 || pe.isPresenting === !1 || pe.hasDepthSensing() === !1, ae && Oe.addToRenderList(g, Y), this.info.render.frame++, ue === !0 && he.beginShadows();
      const _e = v.state.shadowsArray;
      ye.render(_e, Y, me), ue === !0 && he.endShadows(), this.info.autoReset === !0 && this.info.reset();
      const ve = g.opaque, fe = g.transmissive;
      if (v.setupLights(), me.isArrayCamera) {
        const Re = me.cameras;
        if (fe.length > 0)
          for (let Be = 0, He = Re.length; Be < He; Be++) {
            const Ge = Re[Be];
            Zs(ve, fe, Y, Ge);
          }
        ae && Oe.render(Y);
        for (let Be = 0, He = Re.length; Be < He; Be++) {
          const Ge = Re[Be];
          Ys(g, Y, Ge, Ge.viewport);
        }
      } else
        fe.length > 0 && Zs(ve, fe, Y, me), ae && Oe.render(Y), Ys(g, Y, me);
      A !== null && M === 0 && (P.updateMultisampleRenderTarget(A), P.updateRenderTargetMipmap(A)), Y.isScene === !0 && Y.onAfterRender(y, Y, me), de.resetDefaultState(), w = -1, E = null, x.pop(), x.length > 0 ? (v = x[x.length - 1], ue === !0 && he.setGlobalState(y.clippingPlanes, v.state.camera)) : v = null, S.pop(), S.length > 0 ? g = S[S.length - 1] : g = null;
    };
    function fs(Y, me, _e, ve) {
      if (Y.visible === !1) return;
      if (Y.layers.test(me.layers)) {
        if (Y.isGroup)
          _e = Y.renderOrder;
        else if (Y.isLOD)
          Y.autoUpdate === !0 && Y.update(me);
        else if (Y.isLight)
          v.pushLight(Y), Y.castShadow && v.pushShadow(Y);
        else if (Y.isSprite) {
          if (!Y.frustumCulled || U.intersectsSprite(Y)) {
            ve && te.setFromMatrixPosition(Y.matrixWorld).applyMatrix4(G);
            const Be = K.update(Y), He = Y.material;
            He.visible && g.push(Y, Be, He, _e, te.z, null);
          }
        } else if ((Y.isMesh || Y.isLine || Y.isPoints) && (!Y.frustumCulled || U.intersectsObject(Y))) {
          const Be = K.update(Y), He = Y.material;
          if (ve && (Y.boundingSphere !== void 0 ? (Y.boundingSphere === null && Y.computeBoundingSphere(), te.copy(Y.boundingSphere.center)) : (Be.boundingSphere === null && Be.computeBoundingSphere(), te.copy(Be.boundingSphere.center)), te.applyMatrix4(Y.matrixWorld).applyMatrix4(G)), Array.isArray(He)) {
            const Ge = Be.groups;
            for (let rt = 0, it = Ge.length; rt < it; rt++) {
              const Xe = Ge[rt], gt = He[Xe.materialIndex];
              gt && gt.visible && g.push(Y, Be, gt, _e, te.z, Xe);
            }
          } else He.visible && g.push(Y, Be, He, _e, te.z, null);
        }
      }
      const Re = Y.children;
      for (let Be = 0, He = Re.length; Be < He; Be++)
        fs(Re[Be], me, _e, ve);
    }
    function Ys(Y, me, _e, ve) {
      const fe = Y.opaque, Re = Y.transmissive, Be = Y.transparent;
      v.setupLightsView(_e), ue === !0 && he.setGlobalState(y.clippingPlanes, _e), ve && we.viewport(D.copy(ve)), fe.length > 0 && na(fe, me, _e), Re.length > 0 && na(Re, me, _e), Be.length > 0 && na(Be, me, _e), we.buffers.depth.setTest(!0), we.buffers.depth.setMask(!0), we.buffers.color.setMask(!0), we.setPolygonOffset(!1);
    }
    function Zs(Y, me, _e, ve) {
      if ((_e.isScene === !0 ? _e.overrideMaterial : null) !== null)
        return;
      v.state.transmissionRenderTarget[ve.id] === void 0 && (v.state.transmissionRenderTarget[ve.id] = new Ji(1, 1, {
        generateMipmaps: !0,
        type: De.has("EXT_color_buffer_half_float") || De.has("EXT_color_buffer_float") ? $s : Wn,
        minFilter: Vi,
        samples: 4,
        stencilBuffer: a,
        resolveDepthBuffer: !1,
        resolveStencilBuffer: !1,
        colorSpace: xt.workingColorSpace
      }));
      const Re = v.state.transmissionRenderTarget[ve.id], Be = ve.viewport || D;
      Re.setSize(Be.z * y.transmissionResolutionScale, Be.w * y.transmissionResolutionScale);
      const He = y.getRenderTarget();
      y.setRenderTarget(Re), y.getClearColor(B), I = y.getClearAlpha(), I < 1 && y.setClearColor(16777215, 0.5), y.clear(), ae && Oe.render(_e);
      const Ge = y.toneMapping;
      y.toneMapping = fi;
      const rt = ve.viewport;
      if (ve.viewport !== void 0 && (ve.viewport = void 0), v.setupLightsView(ve), ue === !0 && he.setGlobalState(y.clippingPlanes, ve), na(Y, _e, ve), P.updateMultisampleRenderTarget(Re), P.updateRenderTargetMipmap(Re), De.has("WEBGL_multisampled_render_to_texture") === !1) {
        let it = !1;
        for (let Xe = 0, gt = me.length; Xe < gt; Xe++) {
          const St = me[Xe], Gt = St.object, Ut = St.geometry, yt = St.material, Ze = St.group;
          if (yt.side === Un && Gt.layers.test(ve.layers)) {
            const ir = yt.side;
            yt.side = vr, yt.needsUpdate = !0, Ks(Gt, _e, ve, Ut, yt, Ze), yt.side = ir, yt.needsUpdate = !0, it = !0;
          }
        }
        it === !0 && (P.updateMultisampleRenderTarget(Re), P.updateRenderTargetMipmap(Re));
      }
      y.setRenderTarget(He), y.setClearColor(B, I), rt !== void 0 && (ve.viewport = rt), y.toneMapping = Ge;
    }
    function na(Y, me, _e) {
      const ve = me.isScene === !0 ? me.overrideMaterial : null;
      for (let fe = 0, Re = Y.length; fe < Re; fe++) {
        const Be = Y[fe], He = Be.object, Ge = Be.geometry, rt = ve === null ? Be.material : ve, it = Be.group;
        He.layers.test(_e.layers) && Ks(He, me, _e, Ge, rt, it);
      }
    }
    function Ks(Y, me, _e, ve, fe, Re) {
      Y.onBeforeRender(y, me, _e, ve, fe, Re), Y.modelViewMatrix.multiplyMatrices(_e.matrixWorldInverse, Y.matrixWorld), Y.normalMatrix.getNormalMatrix(Y.modelViewMatrix), fe.onBeforeRender(y, me, _e, ve, Y, Re), fe.transparent === !0 && fe.side === Un && fe.forceSinglePass === !1 ? (fe.side = vr, fe.needsUpdate = !0, y.renderBufferDirect(_e, me, ve, fe, Y, Re), fe.side = gi, fe.needsUpdate = !0, y.renderBufferDirect(_e, me, ve, fe, Y, Re), fe.side = Un) : y.renderBufferDirect(_e, me, ve, fe, Y, Re), Y.onAfterRender(y, me, _e, ve, fe, Re);
    }
    function ia(Y, me, _e) {
      me.isScene !== !0 && (me = ne);
      const ve = $.get(Y), fe = v.state.lights, Re = v.state.shadowsArray, Be = fe.state.version, He = se.getParameters(Y, fe.state, Re, me, _e), Ge = se.getProgramCacheKey(He);
      let rt = ve.programs;
      ve.environment = Y.isMeshStandardMaterial ? me.environment : null, ve.fog = me.fog, ve.envMap = (Y.isMeshStandardMaterial ? F : O).get(Y.envMap || ve.environment), ve.envMapRotation = ve.environment !== null && Y.envMap === null ? me.environmentRotation : Y.envMapRotation, rt === void 0 && (Y.addEventListener("dispose", at), rt = /* @__PURE__ */ new Map(), ve.programs = rt);
      let it = rt.get(Ge);
      if (it !== void 0) {
        if (ve.currentProgram === it && ve.lightsStateVersion === Be)
          return Qs(Y, He), it;
      } else
        He.uniforms = se.getUniforms(Y), Y.onBeforeCompile(He, y), it = se.acquireProgram(He, Ge), rt.set(Ge, it), ve.uniforms = He.uniforms;
      const Xe = ve.uniforms;
      return (!Y.isShaderMaterial && !Y.isRawShaderMaterial || Y.clipping === !0) && (Xe.clippingPlanes = he.uniform), Qs(Y, He), ve.needsLights = tl(Y), ve.lightsStateVersion = Be, ve.needsLights && (Xe.ambientLightColor.value = fe.state.ambient, Xe.lightProbe.value = fe.state.probe, Xe.directionalLights.value = fe.state.directional, Xe.directionalLightShadows.value = fe.state.directionalShadow, Xe.spotLights.value = fe.state.spot, Xe.spotLightShadows.value = fe.state.spotShadow, Xe.rectAreaLights.value = fe.state.rectArea, Xe.ltc_1.value = fe.state.rectAreaLTC1, Xe.ltc_2.value = fe.state.rectAreaLTC2, Xe.pointLights.value = fe.state.point, Xe.pointLightShadows.value = fe.state.pointShadow, Xe.hemisphereLights.value = fe.state.hemi, Xe.directionalShadowMap.value = fe.state.directionalShadowMap, Xe.directionalShadowMatrix.value = fe.state.directionalShadowMatrix, Xe.spotShadowMap.value = fe.state.spotShadowMap, Xe.spotLightMatrix.value = fe.state.spotLightMatrix, Xe.spotLightMap.value = fe.state.spotLightMap, Xe.pointShadowMap.value = fe.state.pointShadowMap, Xe.pointShadowMatrix.value = fe.state.pointShadowMatrix), ve.currentProgram = it, ve.uniformsList = null, it;
    }
    function Js(Y) {
      if (Y.uniformsList === null) {
        const me = Y.currentProgram.getUniforms();
        Y.uniformsList = iu.seqWithValue(me.seq, Y.uniforms);
      }
      return Y.uniformsList;
    }
    function Qs(Y, me) {
      const _e = $.get(Y);
      _e.outputColorSpace = me.outputColorSpace, _e.batching = me.batching, _e.batchingColor = me.batchingColor, _e.instancing = me.instancing, _e.instancingColor = me.instancingColor, _e.instancingMorph = me.instancingMorph, _e.skinning = me.skinning, _e.morphTargets = me.morphTargets, _e.morphNormals = me.morphNormals, _e.morphColors = me.morphColors, _e.morphTargetsCount = me.morphTargetsCount, _e.numClippingPlanes = me.numClippingPlanes, _e.numIntersection = me.numClipIntersection, _e.vertexAlphas = me.vertexAlphas, _e.vertexTangents = me.vertexTangents, _e.toneMapping = me.toneMapping;
    }
    function ju(Y, me, _e, ve, fe) {
      me.isScene !== !0 && (me = ne), P.resetTextureUnits();
      const Re = me.fog, Be = ve.isMeshStandardMaterial ? me.environment : null, He = A === null ? y.outputColorSpace : A.isXRRenderTarget === !0 ? A.texture.colorSpace : Qa, Ge = (ve.isMeshStandardMaterial ? F : O).get(ve.envMap || Be), rt = ve.vertexColors === !0 && !!_e.attributes.color && _e.attributes.color.itemSize === 4, it = !!_e.attributes.tangent && (!!ve.normalMap || ve.anisotropy > 0), Xe = !!_e.morphAttributes.position, gt = !!_e.morphAttributes.normal, St = !!_e.morphAttributes.color;
      let Gt = fi;
      ve.toneMapped && (A === null || A.isXRRenderTarget === !0) && (Gt = y.toneMapping);
      const Ut = _e.morphAttributes.position || _e.morphAttributes.normal || _e.morphAttributes.color, yt = Ut !== void 0 ? Ut.length : 0, Ze = $.get(ve), ir = v.state.lights;
      if (ue === !0 && (oe === !0 || Y !== E)) {
        const xr = Y === E && ve.id === w;
        he.setState(ve, Y, xr);
      }
      let Et = !1;
      ve.version === Ze.__version ? (Ze.needsLights && Ze.lightsStateVersion !== ir.state.version || Ze.outputColorSpace !== He || fe.isBatchedMesh && Ze.batching === !1 || !fe.isBatchedMesh && Ze.batching === !0 || fe.isBatchedMesh && Ze.batchingColor === !0 && fe.colorTexture === null || fe.isBatchedMesh && Ze.batchingColor === !1 && fe.colorTexture !== null || fe.isInstancedMesh && Ze.instancing === !1 || !fe.isInstancedMesh && Ze.instancing === !0 || fe.isSkinnedMesh && Ze.skinning === !1 || !fe.isSkinnedMesh && Ze.skinning === !0 || fe.isInstancedMesh && Ze.instancingColor === !0 && fe.instanceColor === null || fe.isInstancedMesh && Ze.instancingColor === !1 && fe.instanceColor !== null || fe.isInstancedMesh && Ze.instancingMorph === !0 && fe.morphTexture === null || fe.isInstancedMesh && Ze.instancingMorph === !1 && fe.morphTexture !== null || Ze.envMap !== Ge || ve.fog === !0 && Ze.fog !== Re || Ze.numClippingPlanes !== void 0 && (Ze.numClippingPlanes !== he.numPlanes || Ze.numIntersection !== he.numIntersection) || Ze.vertexAlphas !== rt || Ze.vertexTangents !== it || Ze.morphTargets !== Xe || Ze.morphNormals !== gt || Ze.morphColors !== St || Ze.toneMapping !== Gt || Ze.morphTargetsCount !== yt) && (Et = !0) : (Et = !0, Ze.__version = ve.version);
      let tn = Ze.currentProgram;
      Et === !0 && (tn = ia(ve, me, fe));
      let aa = !1, Or = !1, hs = !1;
      const It = tn.getUniforms(), Gr = Ze.uniforms;
      if (we.useProgram(tn.program) && (aa = !0, Or = !0, hs = !0), ve.id !== w && (w = ve.id, Or = !0), aa || E !== Y) {
        we.buffers.depth.getReversed() ? (ie.copy(Y.projectionMatrix), pL(ie), vL(ie), It.setValue(q, "projectionMatrix", ie)) : It.setValue(q, "projectionMatrix", Y.projectionMatrix), It.setValue(q, "viewMatrix", Y.matrixWorldInverse);
        const Dr = It.map.cameraPosition;
        Dr !== void 0 && Dr.setValue(q, Z.setFromMatrixPosition(Y.matrixWorld)), Ne.logarithmicDepthBuffer && It.setValue(
          q,
          "logDepthBufFC",
          2 / (Math.log(Y.far + 1) / Math.LN2)
        ), (ve.isMeshPhongMaterial || ve.isMeshToonMaterial || ve.isMeshLambertMaterial || ve.isMeshBasicMaterial || ve.isMeshStandardMaterial || ve.isShaderMaterial) && It.setValue(q, "isOrthographic", Y.isOrthographicCamera === !0), E !== Y && (E = Y, Or = !0, hs = !0);
      }
      if (fe.isSkinnedMesh) {
        It.setOptional(q, fe, "bindMatrix"), It.setOptional(q, fe, "bindMatrixInverse");
        const xr = fe.skeleton;
        xr && (xr.boneTexture === null && xr.computeBoneTexture(), It.setValue(q, "boneTexture", xr.boneTexture, P));
      }
      fe.isBatchedMesh && (It.setOptional(q, fe, "batchingTexture"), It.setValue(q, "batchingTexture", fe._matricesTexture, P), It.setOptional(q, fe, "batchingIdTexture"), It.setValue(q, "batchingIdTexture", fe._indirectTexture, P), It.setOptional(q, fe, "batchingColorTexture"), fe._colorsTexture !== null && It.setValue(q, "batchingColorTexture", fe._colorsTexture, P));
      const $r = _e.morphAttributes;
      if (($r.position !== void 0 || $r.normal !== void 0 || $r.color !== void 0) && Te.update(fe, _e, tn), (Or || Ze.receiveShadow !== fe.receiveShadow) && (Ze.receiveShadow = fe.receiveShadow, It.setValue(q, "receiveShadow", fe.receiveShadow)), ve.isMeshGouraudMaterial && ve.envMap !== null && (Gr.envMap.value = Ge, Gr.flipEnvMap.value = Ge.isCubeTexture && Ge.isRenderTargetTexture === !1 ? -1 : 1), ve.isMeshStandardMaterial && ve.envMap === null && me.environment !== null && (Gr.envMapIntensity.value = me.environmentIntensity), Or && (It.setValue(q, "toneMappingExposure", y.toneMappingExposure), Ze.needsLights && el(Gr, hs), Re && ve.fog === !0 && le.refreshFogUniforms(Gr, Re), le.refreshMaterialUniforms(Gr, ve, z, k, v.state.transmissionRenderTarget[Y.id]), iu.upload(q, Js(Ze), Gr, P)), ve.isShaderMaterial && ve.uniformsNeedUpdate === !0 && (iu.upload(q, Js(Ze), Gr, P), ve.uniformsNeedUpdate = !1), ve.isSpriteMaterial && It.setValue(q, "center", fe.center), It.setValue(q, "modelViewMatrix", fe.modelViewMatrix), It.setValue(q, "normalMatrix", fe.normalMatrix), It.setValue(q, "modelMatrix", fe.matrixWorld), ve.isShaderMaterial || ve.isRawShaderMaterial) {
        const xr = ve.uniformsGroups;
        for (let Dr = 0, al = xr.length; Dr < al; Dr++) {
          const Ai = xr[Dr];
          Q.update(Ai, tn), Q.bind(Ai, tn);
        }
      }
      return tn;
    }
    function el(Y, me) {
      Y.ambientLightColor.needsUpdate = me, Y.lightProbe.needsUpdate = me, Y.directionalLights.needsUpdate = me, Y.directionalLightShadows.needsUpdate = me, Y.pointLights.needsUpdate = me, Y.pointLightShadows.needsUpdate = me, Y.spotLights.needsUpdate = me, Y.spotLightShadows.needsUpdate = me, Y.rectAreaLights.needsUpdate = me, Y.hemisphereLights.needsUpdate = me;
    }
    function tl(Y) {
      return Y.isMeshLambertMaterial || Y.isMeshToonMaterial || Y.isMeshPhongMaterial || Y.isMeshStandardMaterial || Y.isShadowMaterial || Y.isShaderMaterial && Y.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return _;
    }, this.getActiveMipmapLevel = function() {
      return M;
    }, this.getRenderTarget = function() {
      return A;
    }, this.setRenderTargetTextures = function(Y, me, _e) {
      $.get(Y.texture).__webglTexture = me, $.get(Y.depthTexture).__webglTexture = _e;
      const ve = $.get(Y);
      ve.__hasExternalTextures = !0, ve.__autoAllocateDepthBuffer = _e === void 0, ve.__autoAllocateDepthBuffer || De.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), ve.__useRenderToTexture = !1);
    }, this.setRenderTargetFramebuffer = function(Y, me) {
      const _e = $.get(Y);
      _e.__webglFramebuffer = me, _e.__useDefaultFramebuffer = me === void 0;
    };
    const rl = q.createFramebuffer();
    this.setRenderTarget = function(Y, me = 0, _e = 0) {
      A = Y, _ = me, M = _e;
      let ve = !0, fe = null, Re = !1, Be = !1;
      if (Y) {
        const Ge = $.get(Y);
        if (Ge.__useDefaultFramebuffer !== void 0)
          we.bindFramebuffer(q.FRAMEBUFFER, null), ve = !1;
        else if (Ge.__webglFramebuffer === void 0)
          P.setupRenderTarget(Y);
        else if (Ge.__hasExternalTextures)
          P.rebindTextures(Y, $.get(Y.texture).__webglTexture, $.get(Y.depthTexture).__webglTexture);
        else if (Y.depthBuffer) {
          const Xe = Y.depthTexture;
          if (Ge.__boundDepthTexture !== Xe) {
            if (Xe !== null && $.has(Xe) && (Y.width !== Xe.image.width || Y.height !== Xe.image.height))
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            P.setupDepthRenderbuffer(Y);
          }
        }
        const rt = Y.texture;
        (rt.isData3DTexture || rt.isDataArrayTexture || rt.isCompressedArrayTexture) && (Be = !0);
        const it = $.get(Y).__webglFramebuffer;
        Y.isWebGLCubeRenderTarget ? (Array.isArray(it[me]) ? fe = it[me][_e] : fe = it[me], Re = !0) : Y.samples > 0 && P.useMultisampledRTT(Y) === !1 ? fe = $.get(Y).__webglMultisampledFramebuffer : Array.isArray(it) ? fe = it[_e] : fe = it, D.copy(Y.viewport), T.copy(Y.scissor), R = Y.scissorTest;
      } else
        D.copy(re).multiplyScalar(z).floor(), T.copy(L).multiplyScalar(z).floor(), R = J;
      if (_e !== 0 && (fe = rl), we.bindFramebuffer(q.FRAMEBUFFER, fe) && ve && we.drawBuffers(Y, fe), we.viewport(D), we.scissor(T), we.setScissorTest(R), Re) {
        const Ge = $.get(Y.texture);
        q.framebufferTexture2D(q.FRAMEBUFFER, q.COLOR_ATTACHMENT0, q.TEXTURE_CUBE_MAP_POSITIVE_X + me, Ge.__webglTexture, _e);
      } else if (Be) {
        const Ge = $.get(Y.texture), rt = me;
        q.framebufferTextureLayer(q.FRAMEBUFFER, q.COLOR_ATTACHMENT0, Ge.__webglTexture, _e, rt);
      } else if (Y !== null && _e !== 0) {
        const Ge = $.get(Y.texture);
        q.framebufferTexture2D(q.FRAMEBUFFER, q.COLOR_ATTACHMENT0, q.TEXTURE_2D, Ge.__webglTexture, _e);
      }
      w = -1;
    }, this.readRenderTargetPixels = function(Y, me, _e, ve, fe, Re, Be) {
      if (!(Y && Y.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let He = $.get(Y).__webglFramebuffer;
      if (Y.isWebGLCubeRenderTarget && Be !== void 0 && (He = He[Be]), He) {
        we.bindFramebuffer(q.FRAMEBUFFER, He);
        try {
          const Ge = Y.texture, rt = Ge.format, it = Ge.type;
          if (!Ne.textureFormatReadable(rt)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!Ne.textureTypeReadable(it)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          me >= 0 && me <= Y.width - ve && _e >= 0 && _e <= Y.height - fe && q.readPixels(me, _e, ve, fe, j.convert(rt), j.convert(it), Re);
        } finally {
          const Ge = A !== null ? $.get(A).__webglFramebuffer : null;
          we.bindFramebuffer(q.FRAMEBUFFER, Ge);
        }
      }
    }, this.readRenderTargetPixelsAsync = async function(Y, me, _e, ve, fe, Re, Be) {
      if (!(Y && Y.isWebGLRenderTarget))
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      let He = $.get(Y).__webglFramebuffer;
      if (Y.isWebGLCubeRenderTarget && Be !== void 0 && (He = He[Be]), He) {
        const Ge = Y.texture, rt = Ge.format, it = Ge.type;
        if (!Ne.textureFormatReadable(rt))
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
        if (!Ne.textureTypeReadable(it))
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
        if (me >= 0 && me <= Y.width - ve && _e >= 0 && _e <= Y.height - fe) {
          we.bindFramebuffer(q.FRAMEBUFFER, He);
          const Xe = q.createBuffer();
          q.bindBuffer(q.PIXEL_PACK_BUFFER, Xe), q.bufferData(q.PIXEL_PACK_BUFFER, Re.byteLength, q.STREAM_READ), q.readPixels(me, _e, ve, fe, j.convert(rt), j.convert(it), 0);
          const gt = A !== null ? $.get(A).__webglFramebuffer : null;
          we.bindFramebuffer(q.FRAMEBUFFER, gt);
          const St = q.fenceSync(q.SYNC_GPU_COMMANDS_COMPLETE, 0);
          return q.flush(), await mL(q, St, 4), q.bindBuffer(q.PIXEL_PACK_BUFFER, Xe), q.getBufferSubData(q.PIXEL_PACK_BUFFER, 0, Re), q.deleteBuffer(Xe), q.deleteSync(St), Re;
        } else
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
      }
    }, this.copyFramebufferToTexture = function(Y, me = null, _e = 0) {
      Y.isTexture !== !0 && (Ca("WebGLRenderer: copyFramebufferToTexture function signature has changed."), me = arguments[0] || null, Y = arguments[1]);
      const ve = Math.pow(2, -_e), fe = Math.floor(Y.image.width * ve), Re = Math.floor(Y.image.height * ve), Be = me !== null ? me.x : 0, He = me !== null ? me.y : 0;
      P.setTexture2D(Y, 0), q.copyTexSubImage2D(q.TEXTURE_2D, _e, 0, 0, Be, He, fe, Re), we.unbindTexture();
    };
    const nl = q.createFramebuffer(), il = q.createFramebuffer();
    this.copyTextureToTexture = function(Y, me, _e = null, ve = null, fe = 0, Re = null) {
      Y.isTexture !== !0 && (Ca("WebGLRenderer: copyTextureToTexture function signature has changed."), ve = arguments[0] || null, Y = arguments[1], me = arguments[2], Re = arguments[3] || 0, _e = null), Re === null && (fe !== 0 ? (Ca("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), Re = fe, fe = 0) : Re = 0);
      let Be, He, Ge, rt, it, Xe, gt, St, Gt;
      const Ut = Y.isCompressedTexture ? Y.mipmaps[Re] : Y.image;
      if (_e !== null)
        Be = _e.max.x - _e.min.x, He = _e.max.y - _e.min.y, Ge = _e.isBox3 ? _e.max.z - _e.min.z : 1, rt = _e.min.x, it = _e.min.y, Xe = _e.isBox3 ? _e.min.z : 0;
      else {
        const $r = Math.pow(2, -fe);
        Be = Math.floor(Ut.width * $r), He = Math.floor(Ut.height * $r), Y.isDataArrayTexture ? Ge = Ut.depth : Y.isData3DTexture ? Ge = Math.floor(Ut.depth * $r) : Ge = 1, rt = 0, it = 0, Xe = 0;
      }
      ve !== null ? (gt = ve.x, St = ve.y, Gt = ve.z) : (gt = 0, St = 0, Gt = 0);
      const yt = j.convert(me.format), Ze = j.convert(me.type);
      let ir;
      me.isData3DTexture ? (P.setTexture3D(me, 0), ir = q.TEXTURE_3D) : me.isDataArrayTexture || me.isCompressedArrayTexture ? (P.setTexture2DArray(me, 0), ir = q.TEXTURE_2D_ARRAY) : (P.setTexture2D(me, 0), ir = q.TEXTURE_2D), q.pixelStorei(q.UNPACK_FLIP_Y_WEBGL, me.flipY), q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL, me.premultiplyAlpha), q.pixelStorei(q.UNPACK_ALIGNMENT, me.unpackAlignment);
      const Et = q.getParameter(q.UNPACK_ROW_LENGTH), tn = q.getParameter(q.UNPACK_IMAGE_HEIGHT), aa = q.getParameter(q.UNPACK_SKIP_PIXELS), Or = q.getParameter(q.UNPACK_SKIP_ROWS), hs = q.getParameter(q.UNPACK_SKIP_IMAGES);
      q.pixelStorei(q.UNPACK_ROW_LENGTH, Ut.width), q.pixelStorei(q.UNPACK_IMAGE_HEIGHT, Ut.height), q.pixelStorei(q.UNPACK_SKIP_PIXELS, rt), q.pixelStorei(q.UNPACK_SKIP_ROWS, it), q.pixelStorei(q.UNPACK_SKIP_IMAGES, Xe);
      const It = Y.isDataArrayTexture || Y.isData3DTexture, Gr = me.isDataArrayTexture || me.isData3DTexture;
      if (Y.isDepthTexture) {
        const $r = $.get(Y), xr = $.get(me), Dr = $.get($r.__renderTarget), al = $.get(xr.__renderTarget);
        we.bindFramebuffer(q.READ_FRAMEBUFFER, Dr.__webglFramebuffer), we.bindFramebuffer(q.DRAW_FRAMEBUFFER, al.__webglFramebuffer);
        for (let Ai = 0; Ai < Ge; Ai++)
          It && (q.framebufferTextureLayer(q.READ_FRAMEBUFFER, q.COLOR_ATTACHMENT0, $.get(Y).__webglTexture, fe, Xe + Ai), q.framebufferTextureLayer(q.DRAW_FRAMEBUFFER, q.COLOR_ATTACHMENT0, $.get(me).__webglTexture, Re, Gt + Ai)), q.blitFramebuffer(rt, it, Be, He, gt, St, Be, He, q.DEPTH_BUFFER_BIT, q.NEAREST);
        we.bindFramebuffer(q.READ_FRAMEBUFFER, null), we.bindFramebuffer(q.DRAW_FRAMEBUFFER, null);
      } else if (fe !== 0 || Y.isRenderTargetTexture || $.has(Y)) {
        const $r = $.get(Y), xr = $.get(me);
        we.bindFramebuffer(q.READ_FRAMEBUFFER, nl), we.bindFramebuffer(q.DRAW_FRAMEBUFFER, il);
        for (let Dr = 0; Dr < Ge; Dr++)
          It ? q.framebufferTextureLayer(q.READ_FRAMEBUFFER, q.COLOR_ATTACHMENT0, $r.__webglTexture, fe, Xe + Dr) : q.framebufferTexture2D(q.READ_FRAMEBUFFER, q.COLOR_ATTACHMENT0, q.TEXTURE_2D, $r.__webglTexture, fe), Gr ? q.framebufferTextureLayer(q.DRAW_FRAMEBUFFER, q.COLOR_ATTACHMENT0, xr.__webglTexture, Re, Gt + Dr) : q.framebufferTexture2D(q.DRAW_FRAMEBUFFER, q.COLOR_ATTACHMENT0, q.TEXTURE_2D, xr.__webglTexture, Re), fe !== 0 ? q.blitFramebuffer(rt, it, Be, He, gt, St, Be, He, q.COLOR_BUFFER_BIT, q.NEAREST) : Gr ? q.copyTexSubImage3D(ir, Re, gt, St, Gt + Dr, rt, it, Be, He) : q.copyTexSubImage2D(ir, Re, gt, St, rt, it, Be, He);
        we.bindFramebuffer(q.READ_FRAMEBUFFER, null), we.bindFramebuffer(q.DRAW_FRAMEBUFFER, null);
      } else
        Gr ? Y.isDataTexture || Y.isData3DTexture ? q.texSubImage3D(ir, Re, gt, St, Gt, Be, He, Ge, yt, Ze, Ut.data) : me.isCompressedArrayTexture ? q.compressedTexSubImage3D(ir, Re, gt, St, Gt, Be, He, Ge, yt, Ut.data) : q.texSubImage3D(ir, Re, gt, St, Gt, Be, He, Ge, yt, Ze, Ut) : Y.isDataTexture ? q.texSubImage2D(q.TEXTURE_2D, Re, gt, St, Be, He, yt, Ze, Ut.data) : Y.isCompressedTexture ? q.compressedTexSubImage2D(q.TEXTURE_2D, Re, gt, St, Ut.width, Ut.height, yt, Ut.data) : q.texSubImage2D(q.TEXTURE_2D, Re, gt, St, Be, He, yt, Ze, Ut);
      q.pixelStorei(q.UNPACK_ROW_LENGTH, Et), q.pixelStorei(q.UNPACK_IMAGE_HEIGHT, tn), q.pixelStorei(q.UNPACK_SKIP_PIXELS, aa), q.pixelStorei(q.UNPACK_SKIP_ROWS, Or), q.pixelStorei(q.UNPACK_SKIP_IMAGES, hs), Re === 0 && me.generateMipmaps && q.generateMipmap(ir), we.unbindTexture();
    }, this.copyTextureToTexture3D = function(Y, me, _e = null, ve = null, fe = 0) {
      return Y.isTexture !== !0 && (Ca("WebGLRenderer: copyTextureToTexture3D function signature has changed."), _e = arguments[0] || null, ve = arguments[1] || null, Y = arguments[2], me = arguments[3], fe = arguments[4] || 0), Ca('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(Y, me, _e, ve, fe);
    }, this.initRenderTarget = function(Y) {
      $.get(Y).__webglFramebuffer === void 0 && P.setupRenderTarget(Y);
    }, this.initTexture = function(Y) {
      Y.isCubeTexture ? P.setTextureCube(Y, 0) : Y.isData3DTexture ? P.setTexture3D(Y, 0) : Y.isDataArrayTexture || Y.isCompressedArrayTexture ? P.setTexture2DArray(Y, 0) : P.setTexture2D(Y, 0), we.unbindTexture();
    }, this.resetState = function() {
      _ = 0, M = 0, A = null, we.reset(), de.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return Gn;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorspace = xt._getDrawingBufferColorSpace(e), t.unpackColorSpace = xt._getUnpackColorSpace();
  }
}
const Ft = {
  camera: {
    type: "orthographic",
    minDistance: 1,
    maxDistance: 100,
    wheelZoomSpeed: 8e-4,
    pinchZoomSpeed: 1e-3,
    initialPosition: [0, 0, 10],
    fov: 45,
    near: 0.1,
    far: 1e3
  },
  selection: {
    mode: "multiple",
    markerMult: 1.3,
    bondMarkerMult: 1.7,
    highlightEmissive: 11184810,
    markerColors: [
      2062260,
      16744206,
      2924588,
      14034728,
      9725885,
      9197131,
      14907330,
      8355711,
      12369186,
      1556175
    ]
  },
  interaction: {
    rotationSpeed: 5,
    clickThreshold: 200,
    mouseRaycast: {
      lineThreshold: 0.5,
      pointsThreshold: 0.5,
      meshThreshold: 0.1
    },
    touchRaycast: {
      lineThreshold: 2,
      pointsThreshold: 2,
      meshThreshold: 0.2
    }
  },
  renderMode: "onDemand",
  // starting values for hydrogen, disorder and symmetry display
  hydrogenMode: "none",
  disorderMode: "all",
  symmetryMode: "bonds-no-hbonds-no",
  bondGrowToleranceFactor: 1.2,
  fixCifErrors: !1,
  // atom visualisation Settings
  atomDetail: 3,
  atomColorRoughness: 0.4,
  atomColorMetalness: 0.5,
  atomADPRingWidthFactor: 1,
  atomADPRingHeight: 0.06,
  atomADPRingSections: 18,
  atomADPInnerSections: 7,
  atomConstantRadiusMultiplier: 0.25,
  // Bond visualisation settings
  bondRadius: 0.05,
  bondSections: 15,
  bondColor: "#666666",
  bondColorRoughness: 0.3,
  bondColorMetalness: 0.1,
  // Hydrogen bond visualisation settings
  hbondRadius: 0.04,
  hbondColor: "#AAAAAA",
  hbondColorRoughness: 0.3,
  hbondColorMetalness: 0.1,
  hbondDashSegmentLength: 0.3,
  // Target length for each dash+gap segment
  hbondDashFraction: 0.6,
  // Fraction of segment that is solid (vs gap)
  elementProperties: {
    H: { radius: 0.31, atomColor: "#ffffff", ringColor: "#000000" },
    D: { radius: 0.31, atomColor: "#ffffff", ringColor: "#000000" },
    He: { radius: 0.28, atomColor: "#d9ffff", ringColor: "#000000" },
    Li: { radius: 1.28, atomColor: "#cc80ff", ringColor: "#000000" },
    Be: { radius: 0.96, atomColor: "#c2ff00", ringColor: "#000000" },
    B: { radius: 0.85, atomColor: "#ffb5b5", ringColor: "#000000" },
    C: { radius: 0.76, atomColor: "#000000ff", ringColor: "#ffffff" },
    N: { radius: 0.71, atomColor: "#657efaff", ringColor: "#ffffff" },
    O: { radius: 0.66, atomColor: "#d10a0aff", ringColor: "#ffffff" },
    F: { radius: 0.57, atomColor: "#90e050", ringColor: "#000000" },
    Ne: { radius: 0.58, atomColor: "#b3e3f5", ringColor: "#000000" },
    Na: { radius: 1.66, atomColor: "#ab5cf2", ringColor: "#ffffff" },
    Mg: { radius: 1.41, atomColor: "#8aff00", ringColor: "#000000" },
    Al: { radius: 1.21, atomColor: "#bfa6a6", ringColor: "#000000" },
    Si: { radius: 1.11, atomColor: "#f0c8a0", ringColor: "#000000" },
    P: { radius: 1.07, atomColor: "#ff8000", ringColor: "#000000" },
    S: { radius: 1.05, atomColor: "#ffff30", ringColor: "#000000" },
    Cl: { radius: 1.02, atomColor: "#1ff01f", ringColor: "#000000" },
    Ar: { radius: 1.06, atomColor: "#80d1e3", ringColor: "#000000" },
    K: { radius: 2.03, atomColor: "#8f40d4", ringColor: "#ffffff" },
    Ca: { radius: 1.76, atomColor: "#3dff00", ringColor: "#000000" },
    Sc: { radius: 1.7, atomColor: "#e6e6e6", ringColor: "#000000" },
    Ti: { radius: 1.6, atomColor: "#bfc2c7", ringColor: "#000000" },
    V: { radius: 1.53, atomColor: "#a6a6ab", ringColor: "#000000" },
    Cr: { radius: 1.39, atomColor: "#8a99c7", ringColor: "#000000" },
    Mn: { radius: 1.39, atomColor: "#9c7ac7", ringColor: "#000000" },
    Fe: { radius: 1.32, atomColor: "#e06633", ringColor: "#ffffff" },
    Co: { radius: 1.26, atomColor: "#f090a0", ringColor: "#000000" },
    Ni: { radius: 1.24, atomColor: "#50d050", ringColor: "#000000" },
    Cu: { radius: 1.32, atomColor: "#c88033", ringColor: "#000000" },
    Zn: { radius: 1.22, atomColor: "#7d80b0", ringColor: "#000000" },
    Ga: { radius: 1.22, atomColor: "#c28f8f", ringColor: "#000000" },
    Ge: { radius: 1.2, atomColor: "#668f8f", ringColor: "#000000" },
    As: { radius: 1.19, atomColor: "#bd80e3", ringColor: "#000000" },
    Se: { radius: 1.2, atomColor: "#ffa100", ringColor: "#000000" },
    Br: { radius: 1.2, atomColor: "#a62929", ringColor: "#ffffff" },
    Kr: { radius: 1.16, atomColor: "#5cb8d1", ringColor: "#000000" },
    Rb: { radius: 2.2, atomColor: "#702eb0", ringColor: "#ffffff" },
    Sr: { radius: 1.95, atomColor: "#00ff00", ringColor: "#000000" },
    Y: { radius: 1.9, atomColor: "#94ffff", ringColor: "#000000" },
    Zr: { radius: 1.75, atomColor: "#94e0e0", ringColor: "#000000" },
    Nb: { radius: 1.64, atomColor: "#73c2c9", ringColor: "#000000" },
    Mo: { radius: 1.54, atomColor: "#54b5b5", ringColor: "#000000" },
    Tc: { radius: 1.47, atomColor: "#3b9e9e", ringColor: "#000000" },
    Ru: { radius: 1.46, atomColor: "#248f8f", ringColor: "#000000" },
    Rh: { radius: 1.42, atomColor: "#0a7d8c", ringColor: "#000000" },
    Pd: { radius: 1.39, atomColor: "#006985", ringColor: "#ffffff" },
    Ag: { radius: 1.45, atomColor: "#c0c0c0", ringColor: "#000000" },
    Cd: { radius: 1.44, atomColor: "#ffd98f", ringColor: "#000000" },
    In: { radius: 1.42, atomColor: "#a67573", ringColor: "#000000" },
    Sn: { radius: 1.39, atomColor: "#668080", ringColor: "#000000" },
    Sb: { radius: 1.39, atomColor: "#9e63b5", ringColor: "#ffffff" },
    Te: { radius: 1.38, atomColor: "#d47a00", ringColor: "#000000" },
    I: { radius: 1.39, atomColor: "#940094", ringColor: "#ffffff" },
    Xe: { radius: 1.4, atomColor: "#429eb0", ringColor: "#000000" },
    Cs: { radius: 2.44, atomColor: "#57178f", ringColor: "#ffffff" },
    Ba: { radius: 2.15, atomColor: "#00c900", ringColor: "#000000" },
    La: { radius: 2.07, atomColor: "#70d4ff", ringColor: "#000000" },
    Ce: { radius: 2.04, atomColor: "#ffffc7", ringColor: "#000000" },
    Pr: { radius: 2.03, atomColor: "#d9ffc7", ringColor: "#000000" },
    Nd: { radius: 2.01, atomColor: "#c7ffc7", ringColor: "#000000" },
    Pm: { radius: 1.99, atomColor: "#a3ffc7", ringColor: "#000000" },
    Sm: { radius: 1.98, atomColor: "#8fffc7", ringColor: "#000000" },
    Eu: { radius: 1.98, atomColor: "#61ffc7", ringColor: "#000000" },
    Gd: { radius: 1.96, atomColor: "#45ffc7", ringColor: "#000000" },
    Tb: { radius: 1.94, atomColor: "#30ffc7", ringColor: "#000000" },
    Dy: { radius: 1.92, atomColor: "#1fffc7", ringColor: "#000000" },
    Ho: { radius: 1.92, atomColor: "#00ff9c", ringColor: "#000000" },
    Er: { radius: 1.89, atomColor: "#00e675", ringColor: "#000000" },
    Tm: { radius: 1.9, atomColor: "#00d452", ringColor: "#000000" },
    Yb: { radius: 1.87, atomColor: "#00bf38", ringColor: "#000000" },
    Lu: { radius: 1.87, atomColor: "#00ab24", ringColor: "#000000" },
    Hf: { radius: 1.75, atomColor: "#4dc2ff", ringColor: "#000000" },
    Ta: { radius: 1.7, atomColor: "#4da6ff", ringColor: "#000000" },
    W: { radius: 1.62, atomColor: "#2194d6", ringColor: "#000000" },
    Re: { radius: 1.51, atomColor: "#267dab", ringColor: "#000000" },
    Os: { radius: 1.44, atomColor: "#266696", ringColor: "#ffffff" },
    Ir: { radius: 1.41, atomColor: "#175487", ringColor: "#ffffff" },
    Pt: { radius: 1.36, atomColor: "#d0d0e0", ringColor: "#000000" },
    Au: { radius: 1.36, atomColor: "#ffd123", ringColor: "#000000" },
    Hg: { radius: 1.32, atomColor: "#b8b8d0", ringColor: "#000000" },
    Tl: { radius: 1.45, atomColor: "#a6544d", ringColor: "#ffffff" },
    Pb: { radius: 1.46, atomColor: "#575961", ringColor: "#ffffff" },
    Bi: { radius: 1.48, atomColor: "#9e4fb5", ringColor: "#ffffff" },
    Po: { radius: 1.4, atomColor: "#ab5c00", ringColor: "#ffffff" },
    At: { radius: 1.5, atomColor: "#754f45", ringColor: "#ffffff" },
    Rn: { radius: 1.5, atomColor: "#428296", ringColor: "#000000" },
    Fr: { radius: 2.6, atomColor: "#420066", ringColor: "#ffffff" },
    Ra: { radius: 2.21, atomColor: "#007d00", ringColor: "#000000" },
    Ac: { radius: 2.15, atomColor: "#70abfa", ringColor: "#000000" },
    Th: { radius: 2.06, atomColor: "#00baff", ringColor: "#000000" },
    Pa: { radius: 2, atomColor: "#00a1ff", ringColor: "#000000" },
    U: { radius: 1.96, atomColor: "#008fff", ringColor: "#000000" },
    Np: { radius: 1.9, atomColor: "#0080ff", ringColor: "#000000" },
    Pu: { radius: 1.87, atomColor: "#006bff", ringColor: "#ffffff" },
    Am: { radius: 1.8, atomColor: "#545cf2", ringColor: "#ffffff" },
    Cm: { radius: 1.69, atomColor: "#785ce3", ringColor: "#ffffff" },
    Bk: { radius: 1.65, atomColor: "#8a4fe3", ringColor: "#ffffff" },
    Cf: { radius: 1.81, atomColor: "#a136d4", ringColor: "#ffffff" }
  }
};
class Mi {
  /**
   * Creates a new filter
   * @param {[key: string]} modes - Dictionary of valid modes
   * @param {string} defaultMode - Initial mode to use
   * @param {string} filterName - Name of the filter for error messages
   * @param {Array<string>} fallBackOrder - Ordering of modes that are tried out if the current one is invalid
   */
  constructor(e, t, n, i = []) {
    if (new.target === Mi)
      throw new TypeError("Cannot instantiate BaseFilter directly");
    this.MODES = Object.freeze(e), this.PREFERRED_FALLBACK_ORDER = Object.freeze(i), this.filterName = n, this._mode = null, this.mode = t;
  }
  get requiresCameraUpdate() {
    return !1;
  }
  /**
   * Gets the current mode
   * @returns {string} Current mode
   */
  get mode() {
    return this._mode;
  }
  /**
   * Sets the current mode with validation
   * @param {string} value - New mode to set
   * @throws {Error} If mode is invalid
   */
  set mode(e) {
    const t = e.toLowerCase().replace(/_/g, "-"), n = Object.values(this.MODES);
    if (!n.includes(t))
      throw new Error(
        `Invalid ${this.filterName} mode: "${e}". Valid modes are: ${n.join(", ")}`
      );
    this._mode = t;
  }
  ensureValidMode(e) {
    const t = this.getApplicableModes(e);
    t.includes(this.mode) || (this.mode = this.PREFERRED_FALLBACK_ORDER.find((n) => t.includes(n)) || t[0]);
  }
  /**
   * Abstract method: Applies the filter to a structure
   * @abstract
   * @param {CrystalStructure} _structure - Structure to filter
   * @returns {CrystalStructure} Filtered structure
   * @throws {Error} If not implemented by subclass
   */
  apply(e) {
    throw new Error('Method "apply" must be implemented by subclass');
  }
  /**
   * Abstract method: Gets modes applicable to the given structure
   * @abstract
   * @param {CrystalStructure} _structure - Structure to analyze
   * @returns {string[]} Array of applicable mode names
   * @throws {Error} If not implemented by subclass
   */
  getApplicableModes(e) {
    throw new Error('Method "getApplicableModes" must be implemented by subclass');
  }
  /**
   * Cycles to the next applicable mode for the given structure
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {string} New mode after cycling
   */
  cycleMode(e) {
    const t = this.getApplicableModes(e);
    this.ensureValidMode(e);
    const n = t.indexOf(this._mode);
    return this._mode = t[(n + 1) % t.length], this._mode;
  }
}
Si(ra);
const ar = class ar extends Mi {
  /**
   * Creates a new hydrogen filter
   * @param {HydrogenFilter.MODES} [mode] - Initial filter mode
   */
  constructor(e = ar.MODES.NONE) {
    super(ar.MODES, e, "HydrogenFilter", ar.PREFERRED_FALLBACK_ORDER);
  }
  /**
   * Applies hydrogen filtering according to current mode
   * @param {CrystalStructure} structure - Structure to filter
   * @returns {CrystalStructure} New structure with filtered hydrogens
   */
  apply(e) {
    this.ensureValidMode(e);
    const t = e.atoms.filter((a) => a.atomType !== "H" || this.mode !== ar.MODES.NONE).map((a) => new Gs(
      a.label,
      a.atomType,
      a.position,
      a.atomType === "H" && this.mode === ar.MODES.CONSTANT ? null : a.adp,
      a.disorderGroup
    )), n = e.bonds.filter((a) => {
      if (this.mode === ar.MODES.NONE) {
        const s = e.getAtomByLabel(a.atom1Label), o = e.getAtomByLabel(a.atom2Label);
        return !(s.atomType === "H" || o.atomType === "H");
      }
      return !0;
    }), i = this.mode === ar.MODES.NONE ? [] : e.hBonds;
    return new dn(
      e.cell,
      t,
      n,
      i,
      e.symmetry
    );
  }
  /**
   * Gets applicable modes based on presence of hydrogens and their ADPs
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<string>} Array of applicable mode names
   */
  getApplicableModes(e) {
    const t = [ar.MODES.NONE];
    return e.atoms.some((a) => a.atomType === "H") && (t.push(ar.MODES.CONSTANT), e.atoms.some(
      (a) => a.atomType === "H" && a.adp instanceof vi
    ) && t.push(ar.MODES.ANISOTROPIC)), t;
  }
};
Vr(ar, "MODES", Object.freeze({
  NONE: "none",
  CONSTANT: "constant",
  ANISOTROPIC: "anisotropic"
})), Vr(ar, "PREFERRED_FALLBACK_ORDER", [
  ar.MODES.ANISOTROPIC,
  ar.MODES.CONSTANT,
  ar.MODES.NONE
]);
let uf = ar;
const Wt = class Wt extends Mi {
  /**
   * Creates a new disorder filter
   * @param {DisorderFilter.MODES} [mode] - Initial filter mode
   */
  constructor(e = Wt.MODES.ALL) {
    super(Wt.MODES, e, "DisorderFilter", Wt.PREFERRED_FALLBACK_ORDER);
  }
  /**
   * Applies disorder filtering according to current mode
   * @param {CrystalStructure} structure - Structure to filter
   * @returns {CrystalStructure} New structure with filtered disorder groups
   */
  apply(e) {
    this.ensureValidMode(e);
    const t = e.atoms.filter((a) => !(this.mode === Wt.MODES.GROUP1 && a.disorderGroup > 1 || this.mode === Wt.MODES.GROUP2 && a.disorderGroup === 1)), n = e.bonds.filter((a) => {
      const s = e.getAtomByLabel(a.atom1Label), o = e.getAtomByLabel(a.atom2Label);
      return !(this.mode === Wt.MODES.GROUP1 && (s.disorderGroup > 1 || o.disorderGroup > 1) || this.mode === Wt.MODES.GROUP2 && (s.disorderGroup === 1 || o.disorderGroup === 1));
    }), i = e.hBonds.filter((a) => {
      const s = e.getAtomByLabel(a.donorAtomLabel), o = e.getAtomByLabel(a.hydrogenAtomLabel), l = e.getAtomByLabel(a.acceptorAtomLabel);
      return !(this.mode === Wt.MODES.GROUP1 && (s.disorderGroup > 1 || o.disorderGroup > 1 || l.disorderGroup > 1) || this.mode === Wt.MODES.GROUP2 && (s.disorderGroup === 1 || o.disorderGroup === 1 || l.disorderGroup === 1));
    });
    return new dn(
      e.cell,
      t,
      n,
      i,
      e.symmetry
    );
  }
  /**
   * Gets applicable modes based on presence of disorder groups
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<string>} Array of applicable mode names
   */
  getApplicableModes(e) {
    const t = [Wt.MODES.ALL];
    return e.atoms.some((i) => i.disorderGroup > 0) && (e.atoms.some((i) => i.disorderGroup === 1) && t.push(Wt.MODES.GROUP1), e.atoms.some((i) => i.disorderGroup > 1) && t.push(Wt.MODES.GROUP2)), t;
  }
};
Vr(Wt, "MODES", Object.freeze({
  ALL: "all",
  GROUP1: "group1",
  GROUP2: "group2"
})), Vr(Wt, "PREFERRED_FALLBACK_ORDER", [
  Wt.MODES.ALL,
  Wt.MODES.GROUP1,
  Wt.MODES.GROUP2
]);
let lf = Wt;
const Rt = class Rt extends Mi {
  /**
   * Creates a new symmetry grower
   * @param {SymmetryGrower.MODES} [mode] - Initial mode for growing symmetry
   */
  constructor(e = Rt.MODES.BONDS_NO_HBONDS_NO) {
    super(Rt.MODES, e, "SymmetryGrower", Rt.PREFERRED_FALLBACK_ORDER);
  }
  get requiresCameraUpdate() {
    return !0;
  }
  /**
   * Combines an atom label with a symmetry operation code to create a unique identifier
   * @param {string} atomLabel - Original atom label
   * @param {string} symOp - Symmetry operation code (e.g., "2_555")
   * @returns {string} Combined label or original label if no symmetry operation
   */
  static combineSymOpLabel(e, t) {
    return !t || t === "." ? e : `${e}@${t}`;
  }
  /**
   * Finds atoms that can be grown through symmetry operations
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {object} Atoms that can be grown through bonds and hydrogen bonds
   */
  findGrowableAtoms(e) {
    const t = e.bonds.filter(({ atom2SiteSymmetry: i }) => i && i !== ".").map(({ atom2Label: i, atom2SiteSymmetry: a }) => [i, a]), n = e.hBonds.filter(
      ({ acceptorAtomSymmetry: i }) => i && i !== "."
    ).map(
      ({ acceptorAtomLabel: i, acceptorAtomSymmetry: a }) => [i, a]
    );
    return { bondAtoms: t, hBondAtoms: n };
  }
  /**
   * Grows a set of atoms and their connected groups using symmetry operations
   * @param {CrystalStructure} structure - Original structure containing atoms to grow
   * @param {Array<[string, string]>} atomsToGrow - Array of [atomLabel, symmetryOperation] pairs
   * @param {object} growthState - Current state of structure growth
   * @returns {object} Updated growth state including new atoms and bonds
   * @throws {Error} If an atom is not found in any connected group
   */
  growAtomArray(e, t, n) {
    for (const [i, a] of t) {
      const s = Rt.combineSymOpLabel(i, a);
      if (n.labels.has(s))
        continue;
      const o = e.connectedGroups.find(
        (u) => u.atoms.some((c) => c.label === i)
      );
      if (!o)
        throw new Error(
          `Atom ${i} is not in any group. Typo or structure.recalculateConnectedGroups()?`
        );
      e.symmetry.applySymmetry(a, o.atoms).forEach((u) => {
        u.label = Rt.combineSymOpLabel(u.label, a), n.labels.add(u.label), n.atoms.add(u);
      }), o.bonds.filter(({ atom2SiteSymmetry: u }) => u === ".").forEach((u) => {
        n.bonds.add(new wn(
          Rt.combineSymOpLabel(u.atom1Label, a),
          Rt.combineSymOpLabel(u.atom2Label, a),
          u.bondLength,
          u.bondLengthSU,
          "."
        ));
      }), o.hBonds.filter(({ acceptorAtomSymmetry: u }) => u === ".").forEach((u) => {
        n.hBonds.add(new Wa(
          Rt.combineSymOpLabel(u.donorAtomLabel, a),
          Rt.combineSymOpLabel(u.hydrogenAtomLabel, a),
          Rt.combineSymOpLabel(u.acceptorAtomLabel, a),
          u.donorHydrogenDistance,
          u.donorHydrogenDistanceSU,
          u.acceptorHydrogenDistance,
          u.acceptorHydrogenDistanceSU,
          u.donorAcceptorDistance,
          u.donorAcceptorDistanceSU,
          u.hBondAngle,
          u.hBondAngleSU,
          "."
        ));
      });
    }
    return n;
  }
  /**
   * Grows the structure according to the current mode. Switches mode with a warning if
   * current mode is not applicable.
   * @param {CrystalStructure} structure - Structure to grow
   * @returns {CrystalStructure} New structure with grown atoms and bonds
   */
  apply(e) {
    this.ensureValidMode(e);
    const t = this.findGrowableAtoms(e), n = {
      atoms: new Set(e.atoms),
      bonds: new Set(e.bonds),
      hBonds: new Set(e.hBonds),
      labels: new Set(e.atoms.map(({ label: s }) => s))
    };
    this.mode.startsWith("bonds-yes") && this.growAtomArray(e, t.bondAtoms, n), this.mode.includes("hbonds-yes") && this.growAtomArray(e, t.hBondAtoms, n);
    const i = Array.from(n.atoms);
    for (const s of e.bonds) {
      if (s.atom2SiteSymmetry === ".")
        continue;
      const o = Rt.combineSymOpLabel(s.atom2Label, s.atom2SiteSymmetry);
      i.some((l) => l.label === o) && n.bonds.add(
        new wn(s.atom1Label, o, s.bondLength, s.bondLengthSU, ".")
      );
    }
    for (const s of e.hBonds) {
      if (s.acceptorAtomSymmetry === ".")
        continue;
      const o = Rt.combineSymOpLabel(s.acceptorAtomLabel, s.acceptorAtomSymmetry);
      i.some((l) => l.label === o) && n.hBonds.add(
        new Wa(
          s.donorAtomLabel,
          s.hydrogenAtomLabel,
          o,
          s.donorHydrogenDistance,
          s.donorHydrogenDistanceSU,
          s.acceptorHydrogenDistance,
          s.acceptorHydrogenDistanceSU,
          s.donorAcceptorDistance,
          s.donorAcceptorDistanceSU,
          s.hBondAngle,
          s.hBondAngleSU,
          "."
        )
      );
    }
    const a = Array.from(n.hBonds).filter(({ acceptorAtomLabel: s, hydrogenAtomLabel: o, donorAtomLabel: l }) => {
      const u = n.labels.has(s), c = n.labels.has(o), f = n.labels.has(l);
      return u && c && f;
    });
    return new dn(
      e.cell,
      i,
      Array.from(n.bonds),
      a,
      e.symmetry
    );
  }
  /**
   * Gets the modes that can be applied to the structure based on content
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<string>} Array of applicable mode names
   */
  getApplicableModes(e) {
    const t = this.findGrowableAtoms(e), n = t.bondAtoms.length > 0, i = t.hBondAtoms.length > 0;
    return !n && !i ? [Rt.MODES.BONDS_NONE_HBONDS_NONE] : n ? i ? [
      Rt.MODES.BONDS_YES_HBONDS_YES,
      Rt.MODES.BONDS_YES_HBONDS_NO,
      Rt.MODES.BONDS_NO_HBONDS_NO
    ] : [
      Rt.MODES.BONDS_YES_HBONDS_NONE,
      Rt.MODES.BONDS_NO_HBONDS_NONE
    ] : [
      Rt.MODES.BONDS_NONE_HBONDS_YES,
      Rt.MODES.BONDS_NONE_HBONDS_NO
    ];
  }
};
Vr(Rt, "MODES", Object.freeze({
  BONDS_YES_HBONDS_YES: "bonds-yes-hbonds-yes",
  BONDS_YES_HBONDS_NO: "bonds-yes-hbonds-no",
  BONDS_YES_HBONDS_NONE: "bonds-yes-hbonds-none",
  BONDS_NO_HBONDS_NO: "bonds-no-hbonds-no",
  BONDS_NO_HBONDS_NONE: "bonds-no-hbonds-none",
  BONDS_NONE_HBONDS_YES: "bonds-none-hbonds-yes",
  BONDS_NONE_HBONDS_NO: "bonds-none-hbonds-no",
  BONDS_NONE_HBONDS_NONE: "bonds-none-hbonds-none"
})), Vr(Rt, "PREFERRED_FALLBACK_ORDER", [
  Rt.MODES.BONDS_NO_HBONDS_NO,
  Rt.MODES.BONDS_NO_HBONDS_NONE,
  Rt.MODES.BONDS_NONE_HBONDS_NO
]);
let Bs = Rt;
function Pz(r) {
  const e = {
    position: 0,
    rotation: 0,
    scale: 0,
    matrix: 0
  };
  function t(n) {
    const i = n.position, a = n.rotation, s = n.scale, o = n.matrix.elements;
    [i.x, i.y, i.z].some(isNaN) && (console.log("pos"), console.log(i), console.log(n.userData), e.position++), [a.x, a.y, a.z].some(isNaN) && (e.rotation++, console.log("rot"), console.log(a), console.log(n.userData)), [s.x, s.y, s.z].some(isNaN) && (console.log("scale"), console.log(s), console.log(n.userData), e.scale++), o.some(isNaN) && (e.matrix++, console.log("matrix"), console.log(o), console.log(n.userData));
    for (const l of n.children)
      t(l);
  }
  return t(r), e;
}
function Bz(r, e) {
  const n = r.getEllipsoidMatrix(e).toArray();
  return new mt(
    n[0][0],
    n[0][1],
    n[0][2],
    0,
    n[1][0],
    n[1][1],
    n[1][2],
    0,
    n[2][0],
    n[2][1],
    n[2][2],
    0,
    0,
    0,
    0,
    1
  );
}
function Qy(r, e) {
  const t = e.clone().sub(r), n = t.length();
  if (n === 0)
    throw new Error("Error in ORTEP Bond Creation. Trying to create a zero length bond.");
  const i = t.divideScalar(n), a = new ce(0, 1, 0), s = new ce().crossVectors(i, a), o = -Math.acos(i.dot(a));
  return new mt().makeScale(1, n, 1).premultiply(new mt().makeRotationAxis(
    s.normalize(),
    o
  )).setPosition(
    r.clone().add(e).multiplyScalar(0.5)
  );
}
class Iz {
  /**
   * Creates a new geometry and material cache.
   * @param {object} [options] - Visualisation options with defaults from structure-settings.js
   */
  constructor(e = {}) {
    const t = e || {};
    this.options = {
      ...Ft,
      ...t,
      elementProperties: {
        ...Ft.elementProperties,
        ...t.elementProperties || {}
      }
    }, this.scaling = 1.5384, this.geometries = {}, this.materials = {}, this.elementMaterials = {}, this.initializeGeometries(), this.initializeMaterials();
  }
  /**
   * Creates and caches base geometries for atoms, ADP rings, bonds and H-bonds.
   * @private
   */
  initializeGeometries() {
    this.geometries.atom = new Yf(
      this.scaling,
      this.options.atomDetail
    ), this.geometries.adpRing = this.createADPHalfTorus(), this.geometries.bond = new Nu(
      this.options.bondRadius,
      this.options.bondRadius,
      0.98,
      this.options.bondSections,
      1,
      !0
    ), this.geometries.hbond = new Nu(
      this.options.hbondRadius,
      this.options.hbondRadius,
      0.98,
      this.options.bondSections,
      1,
      !0
    );
  }
  /**
   * Creates and caches base materials for bonds and H-bonds.
   * @private
   */
  initializeMaterials() {
    this.materials.bond = new ko({
      color: this.options.bondColor,
      roughness: this.options.bondColorRoughness,
      metalness: this.options.bondColorMetalness
    }), this.materials.hbond = new ko({
      color: this.options.hbondColor,
      roughness: this.options.hbondColorRoughness,
      metalness: this.options.hbondColorMetalness
    });
  }
  /**
   * Validates that properties exist for given element type.
   * @param {string} elementType - Chemical element symbol
   * @throws {Error} If element properties not found
   */
  validateElementType(e) {
    if (!this.options.elementProperties[e])
      throw new Error(
        `Unknown element type: ${e}. Please ensure element properties are defined.Pass the type settings as custom options, ifthey are element from periodic table`
      );
  }
  /**
   * Gets or creates cached materials for given atom type.
   * @param {string} atomType - Chemical element symbol
   * @returns {[THREE.Material, THREE.Material]} Array containing [atomMaterial, ringMaterial]
   */
  getAtomMaterials(e) {
    let t = e;
    this.options.elementProperties[t] || (t = Vu(e)), this.validateElementType(t);
    const n = `${t}_materials`;
    if (!this.elementMaterials[n]) {
      const i = this.options.elementProperties[t], a = new ko({
        color: i.atomColor,
        roughness: this.options.atomColorRoughness,
        metalness: this.options.atomColorMetalness
      }), s = new ko({
        color: i.ringColor,
        roughness: this.options.atomColorRoughness,
        metalness: this.options.atomColorMetalness
      });
      this.elementMaterials[n] = [a, s];
    }
    return this.elementMaterials[n];
  }
  /**
   * Creates geometry for anisotropic displacement parameter visualisation,
   * by removing the inner vertices of a torus that would be obstructed by
   * the atom sphere anyway.
   * @private
   * @returns {THREE.BufferGeometry} Half torus geometry for ADP visualisation
   */
  createADPHalfTorus() {
    const e = new Zf(
      this.scaling * this.options.atomADPRingWidthFactor,
      this.options.atomADPRingHeight,
      this.options.atomADPInnerSections,
      this.options.atomADPRingSections
    ), t = e.attributes.position.array, n = e.index.array, i = [], a = [], s = /* @__PURE__ */ new Set();
    for (let c = 0; c < n.length; c += 3) {
      const f = n[c] * 3, h = n[c + 1] * 3, d = n[c + 2] * 3, m = [f, h, d].map((p) => ({
        index: p / 3,
        distance: Math.sqrt(
          t[p] * t[p] + t[p + 1] * t[p + 1] + t[p + 2] * t[p + 2]
        )
      }));
      m.some((p) => p.distance >= this.scaling) && m.forEach((p) => s.add(n[c + p.index % 3]));
    }
    const o = /* @__PURE__ */ new Map();
    let l = 0;
    s.forEach((c) => {
      const f = c * 3;
      i.push(
        t[f],
        t[f + 1],
        t[f + 2]
      ), o.set(c, l++);
    });
    for (let c = 0; c < n.length; c += 3)
      s.has(n[c]) && s.has(n[c + 1]) && s.has(n[c + 2]) && a.push(
        o.get(n[c]),
        o.get(n[c + 1]),
        o.get(n[c + 2])
      );
    const u = new yn();
    return u.setAttribute("position", new ur(i, 3)), u.setIndex(a), u.computeVertexNormals(), u.rotateX(0.5 * Math.PI), e.dispose(), u;
  }
  /**
   * Cleans up all cached resources.
   */
  dispose() {
    Object.values(this.geometries).forEach((e) => e.dispose()), Object.values(this.materials).forEach((e) => e.dispose()), Object.values(this.elementMaterials).forEach(([e, t]) => {
      e.dispose(), t.dispose();
    });
  }
}
class Lz {
  /**
   * Creates a new ORTEP structure visualization.
   * @param {CrystalStructure} crystalStructure - Input crystal structure with atoms, bonds, and unit cell
   * @param {object} [options] - Visualization options, extends defaults from structure-settings.js
   */
  constructor(e, t = {}) {
    const n = t || {}, i = { ...Ft.elementProperties };
    n.elementProperties && Object.entries(n.elementProperties).forEach(([a, s]) => {
      i[a] = {
        ...i[a],
        ...s
      };
    }), this.options = {
      ...Ft,
      ...n,
      elementProperties: i
    }, this.crystalStructure = e, this.cache = new Iz(this.options), this.createStructure();
  }
  /**
   * Creates 3D representations of atoms, bonds and H-bonds.
   * @private
   */
  createStructure() {
    this.atoms3D = [], this.bonds3D = [], this.hBonds3D = [];
    const e = this.crystalStructure.atoms.map((i) => i.label);
    for (const i of this.crystalStructure.atoms) {
      const [a, s] = this.cache.getAtomMaterials(i.atomType);
      i.adp instanceof vi ? this.atoms3D.push(new Uz(
        i,
        this.crystalStructure.cell,
        this.cache.geometries.atom,
        a,
        this.cache.geometries.adpRing,
        s
      )) : i.adp instanceof Zi ? this.atoms3D.push(new zz(
        i,
        this.crystalStructure.cell,
        this.cache.geometries.atom,
        a
      )) : this.atoms3D.push(new kz(
        i,
        this.crystalStructure.cell,
        this.cache.geometries.atom,
        a,
        this.options
      ));
    }
    const t = this.crystalStructure.bonds.map((i) => new wn(
      i.atom1Label,
      Bs.combineSymOpLabel(i.atom2Label, i.atom2SiteSymmetry),
      i.bondLength,
      i.bondLengthSU,
      "."
    )).filter((i) => e.includes(i.atom2Label));
    for (const i of t)
      try {
        this.bonds3D.push(new Hz(
          i,
          this.crystalStructure,
          this.cache.geometries.bond,
          this.cache.materials.bond
        ));
      } catch (a) {
        if (a.message !== "Error in ORTEP Bond Creation. Trying to create a zero length bond.")
          throw a;
      }
    const n = this.crystalStructure.hBonds.map((i) => new Wa(
      i.donorAtomLabel,
      i.hydrogenAtomLabel,
      Bs.combineSymOpLabel(
        i.acceptorAtomLabel,
        i.acceptorAtomSymmetry
      ),
      i.donorHydrogenDistance,
      i.donorHydrogenDistanceSU,
      i.acceptorHydrogenDistance,
      i.acceptorHydrogenDistanceSU,
      i.donorAcceptorDistance,
      i.donorAcceptorDistanceSU,
      i.hBondAngle,
      i.hBondAngleSU,
      "."
    )).filter((i) => e.includes(i.acceptorAtomLabel));
    for (const i of n)
      try {
        this.hBonds3D.push(new Gz(
          i,
          this.crystalStructure,
          this.cache.geometries.hbond,
          this.cache.materials.hbond,
          this.options.hbondDashSegmentLength,
          this.options.hbondDashFraction
        ));
      } catch (a) {
        if (a.message !== "Error in ORTEP Bond Creation. Trying to create a zero length bond.")
          throw a;
      }
  }
  /**
   * Returns a THREE.Group containing all visualization objects (atoms, bonds, H-bonds).
   * @returns {THREE.Group} Group containing all structure objects ready for rendering
   */
  getGroup() {
    const e = new ui();
    for (const t of this.atoms3D)
      e.add(t);
    for (const t of this.bonds3D)
      e.add(t);
    for (const t of this.hBonds3D)
      e.add(t);
    return Pz(e), e;
  }
  /**
   * Cleans up all resources.
   */
  dispose() {
    this.cache.dispose();
  }
}
class Ju extends Vt {
  /**
   * Creates a new selectable object.
   * @param {THREE.BufferGeometry} geometry - Object geometry
   * @param {THREE.Material} material - Object material
   * @throws {TypeError} If instantiated directly (abstract class)
   */
  constructor(e, t) {
    if (new.target === Ju)
      throw new TypeError("ORTEPObject is an abstract class and cannot be instantiated directly.");
    super(e, t), this._selectionColor = null, this.marker = null;
  }
  get selectionColor() {
    return this._selectionColor;
  }
  /**
   * Creates material for selection highlighting.
   * @param {number} color - Color in hex format
   * @returns {THREE.Material} Selection highlight material
   */
  createSelectionMaterial(e) {
    return new Wu({
      color: e,
      transparent: !0,
      opacity: 0.9,
      side: vr
    });
  }
  /**
   * Handles object selection, applying highlighting and creating selection markers.
   * @param {number} color - Selection color in hex format
   * @param {object} options - Selection options
   */
  select(e, t) {
    var a;
    this._selectionColor = e;
    const n = this.material.clone();
    (a = n.emissive) == null || a.setHex(t.selection.highlightEmissive), this.originalMaterial = this.material, this.material = n;
    const i = this.createSelectionMarker(e, t);
    this.add(i), this.marker = i;
  }
  /**
   * Handles object deselection, removing highlighting and markers.
   */
  deselect() {
    this._selectionColor = null, this.removeSelectionMarker();
  }
  /**
   * Creates visual marker for selection.
   * @abstract
   * @param {number} _color - Selection color in hex format
   * @param {object} _options - Selection options
   */
  createSelectionMarker(e, t) {
    throw new Error("createSelectionMarker needs to be implemented in a subclass");
  }
  /**
   * Removes selection marker and restores original material.
   * @private
   */
  removeSelectionMarker() {
    var e, t;
    this.marker && (this.remove(this.marker), (e = this.marker.geometry) == null || e.dispose(), (t = this.marker.material) == null || t.dispose(), this.marker = null), this.originalMaterial && (this.material.dispose(), this.material = this.originalMaterial, this.originalMaterial = null);
  }
  /**
   * Cleans up resources.
   */
  dispose() {
    var e, t;
    this.deselect(), (e = this.geometry) == null || e.dispose(), (t = this.material) == null || t.dispose();
  }
}
class Qf extends Ju {
  /**
   * Creates a new atom visualisation.
   * @param {Atom} atom - Input atom data
   * @param {UnitCell} unitCell - Unit cell parameters
   * @param {THREE.BufferGeometry} baseAtom - Base atom geometry
   * @param {THREE.Material} atomMaterial - Atom material
   */
  constructor(e, t, n, i) {
    super(n, i);
    const a = new ce(...e.position.toCartesian(t));
    this.position.copy(a), this.userData = {
      type: "atom",
      atomData: e,
      selectable: !0
    };
  }
  /**
   * Creates visual marker for selection of atoms.
   * @param {number} color - Selection color in hex format
   * @param {object} options - Selection options containing visualization parameters
   * @returns {THREE.Mesh} Selection marker mesh
   */
  createSelectionMarker(e, t) {
    const n = new Vt(
      this.geometry,
      this.createSelectionMaterial(e)
    );
    return n.scale.multiplyScalar(t.selection.markerMult), n.userData.selectable = !1, n;
  }
}
class Uz extends Qf {
  /**
   * Creates a new anisotropic atom visualisation.
   * @param {Atom} atom - Input atom data with anisotropic displacement parameters
   * @param {UnitCell} unitCell - Unit cell parameters
   * @param {THREE.BufferGeometry} baseAtom - Base atom geometry
   * @param {THREE.Material} atomMaterial - Atom material
   * @param {THREE.BufferGeometry} baseADPRing - ADP ring geometry
   * @param {THREE.Material} ADPRingMaterial - ADP ring material
   */
  constructor(e, t, n, i, a, s) {
    if (super(e, t, n, i), [e.adp.u11, e.adp.u3, e.adp.u33].some((l) => l <= 0))
      this.geometry = new Ps(0.8);
    else {
      const l = Bz(e.adp, t);
      if (l.toArray().includes(NaN))
        this.geometry = new Ps(0.8);
      else {
        for (const u of this.adpRingMatrices) {
          const c = new Vt(a, s);
          c.applyMatrix4(u), c.userData.selectable = !1, this.add(c);
        }
        this.applyMatrix4(l);
      }
    }
    const o = new ce(...e.position.toCartesian(t));
    this.position.copy(o), this.userData = {
      type: "atom",
      atomData: e,
      selectable: !0
    };
  }
  /**
   * Provides transformation matrices for positioning ADP rings in the three principal planes.
   * @returns {THREE.Matrix4[]} Array of matrices for the three orthogonal planes
   */
  get adpRingMatrices() {
    return [
      new mt().set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ),
      new mt().set(
        1,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1
      ),
      new mt().set(
        0,
        -1,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      )
    ];
  }
}
class zz extends Qf {
  /**
   * Creates a new isotropic atom visualisation.
   * @param {Atom} atom - Input atom data with isotropic displacement parameters
   * @param {UnitCell} unitCell - Unit cell parameters
   * @param {THREE.BufferGeometry} baseAtom - Base atom geometry
   * @param {THREE.Material} atomMaterial - Atom material
   * @throws {Error} If atom lacks isotropic displacement parameters
   */
  constructor(e, t, n, i) {
    if (super(e, t, n, i), !e.adp || !("uiso" in e.adp))
      throw new Error("Atom must have isotropic displacement parameters (UIsoADP)");
    e.adp.uiso <= 0 ? this.geometry = new Ps(1) : this.scale.multiplyScalar(Math.sqrt(e.adp.uiso));
  }
}
class kz extends Qf {
  /**
   * Creates a new constant radius atom visualization.
   * @param {Atom} atom - Input atom data
   * @param {UnitCell} unitCell - Unit cell parameters
   * @param {THREE.BufferGeometry} baseAtom - Base atom geometry
   * @param {THREE.Material} atomMaterial - Atom material
   * @param {object} options - Must contain elementProperties for atom type
   * @throws {Error} If element properties not found
   */
  constructor(e, t, n, i, a) {
    super(e, t, n, i);
    let s = e.atomType;
    try {
      a.elementProperties[s] || (s = Vu(e.atomType));
    } catch {
      throw new Error(`Element properties not found for atom type: '${e.atomType}'`);
    }
    this.scale.multiplyScalar(
      a.atomConstantRadiusMultiplier * a.elementProperties[s].radius
    );
  }
}
class Hz extends Ju {
  /**
   * Creates a new bond visualization.
   * @param {Bond} bond - Bond data containing connected atoms
   * @param {CrystalStructure} crystalStructure - Parent structure containing atom information
   * @param {THREE.BufferGeometry} baseBond - Bond geometry
   * @param {THREE.Material} baseBondMaterial - Bond material
   */
  constructor(e, t, n, i) {
    super(n, i);
    const a = t.getAtomByLabel(e.atom1Label), s = t.getAtomByLabel(e.atom2Label), o = new ce(...a.position.toCartesian(t.cell)), l = new ce(...s.position.toCartesian(t.cell)), u = Qy(o, l);
    this.applyMatrix4(u), this.userData = {
      type: "bond",
      bondData: e,
      selectable: !0
    };
  }
  /**
   * Creates visual marker for selection of bonds.
   * @param {number} color - Selection color in hex format
   * @param {object} options - Selection options containing visualization parameters
   * @returns {THREE.Mesh} Selection marker mesh
   */
  createSelectionMarker(e, t) {
    const n = new Vt(
      this.geometry,
      this.createSelectionMaterial(e)
    );
    return n.scale.x *= t.selection.bondMarkerMult, n.scale.z *= t.selection.bondMarkerMult, n.userData.selectable = !1, n;
  }
}
class jf extends ui {
  /**
   * Creates a new group object.
   * @throws {TypeError} If instantiated directly (abstract class)
   */
  constructor() {
    if (new.target === jf)
      throw new TypeError("ORTEPGroupObject is an abstract class and cannot be instantiated directly.");
    super(), this._selectionColor = null, this.marker = null;
  }
  get selectionColor() {
    return this._selectionColor;
  }
  /**
   * Adds objects with raycasting redirection to ensure proper selection handling.
   * @param {...THREE.Object3D} objects - Objects to add to the group
   * @returns {this} This group object for chaining
   */
  add(...e) {
    return e.forEach((t) => {
      if (t instanceof Vt) {
        const n = t.raycast;
        t.raycast = (i, a) => {
          const s = [];
          if (n.call(t, i, s), s.length > 0) {
            const o = s[0];
            a.push({
              distance: o.distance,
              point: o.point,
              object: this,
              // Return parent group
              face: o.face,
              faceIndex: o.faceIndex,
              uv: o.uv
            });
          }
        };
      }
    }), super.add(...e);
  }
  /**
   * Creates material for selection highlighting.
   * @param {number} color - Color in hex format (e.g., 0xFF0000 for red)
   * @returns {THREE.Material} Selection highlight material with transparency
   */
  createSelectionMaterial(e) {
    return new Wu({
      color: e,
      transparent: !0,
      opacity: 0.9,
      side: vr
    });
  }
  /**
   * Handles group selection, applying highlighting to all children and creating selection markers.
   * @param {number} color - Selection color in hex format
   * @param {object} options - Selection options containing visualization parameters
   */
  select(e, t) {
    this._selectionColor = e, this.traverse((i) => {
      var a;
      if (i instanceof Vt) {
        const s = i.material.clone();
        (a = s.emissive) == null || a.setHex(t.selection.highlightEmissive), i.originalMaterial = i.material, i.material = s;
      }
    });
    const n = this.createSelectionMarker(e, t);
    this.add(n), this.marker = n;
  }
  /**
   * Handles group deselection, removing highlighting and markers.
   */
  deselect() {
    this._selectionColor = null, this.marker && (this.remove(this.marker), this.marker.traverse((e) => {
      var t, n;
      e instanceof Vt && ((t = e.geometry) == null || t.dispose(), (n = e.material) == null || n.dispose());
    }), this.marker = null), this.traverse((e) => {
      e instanceof Vt && e.originalMaterial && (e.material.dispose(), e.material = e.originalMaterial, e.originalMaterial = null);
    });
  }
  /**
   * Creates visual marker for selection.
   * @abstract
   * @param {number} _color - Selection color in hex format
   * @param {object} _options - Selection options containing visualization parameters
   * @throws {Error} If not implemented by subclass
   */
  createSelectionMarker(e, t) {
    throw new Error("createSelectionMarker needs to be implemented in a subclass");
  }
  /**
   * Cleans up resources to prevent memory leaks.
   */
  dispose() {
    this.marker && this.deselect(), this.traverse((e) => {
      var t, n;
      e instanceof Vt && ((t = e.geometry) == null || t.dispose(), (n = e.material) == null || n.dispose());
    }), this.clear();
  }
}
class Gz extends jf {
  /**
   * Creates a new hydrogen bond visualization.
   * @param {HBond} hbond - H-bond data
   * @param {CrystalStructure} crystalStructure - Parent structure
   * @param {THREE.BufferGeometry} baseHBond - H-bond geometry
   * @param {THREE.Material} baseHBondMaterial - H-bond material
   * @param {number} targetSegmentLength - Approximate target length for dashed segments
   * @param {number} dashFraction - Fraction of segment that is solid
   */
  constructor(e, t, n, i, a, s) {
    super(), this.userData = {
      type: "hbond",
      hbondData: e,
      selectable: !0
    };
    const o = t.getAtomByLabel(e.hydrogenAtomLabel), l = t.getAtomByLabel(e.acceptorAtomLabel), u = new ce(...o.position.toCartesian(t.cell)), c = new ce(...l.position.toCartesian(t.cell));
    this.createDashedBondSegments(
      u,
      c,
      n,
      i,
      a,
      s
    );
  }
  /**
   * Creates dashed line segments for hydrogen bond visualization.
   * @private
   * @param {THREE.Vector3} start - Start position
   * @param {THREE.Vector3} end - End position
   * @param {THREE.BufferGeometry} baseHBond - Base H-bond geometry
   * @param {THREE.Material} material - H-bond material
   * @param {number} targetLength - approximate target segment length
   * @param {number} dashFraction - Fraction of segment that is solid
   */
  createDashedBondSegments(e, t, n, i, a, s) {
    const o = e.distanceTo(t), l = Math.max(1, Math.floor(o / a)), c = o / l * s;
    for (let f = 0; f < l; f++) {
      const h = f / l, d = h + c / o, m = new ce().lerpVectors(e, t, h), p = new ce().lerpVectors(e, t, d), g = new Vt(n, i.clone());
      g.applyMatrix4(Qy(m, p)), g.userData = this.userData, this.add(g);
    }
  }
  /**
   * Creates visual marker for selection of hydrogen bond.
   * @param {number} color - Selection color in hex format
   * @param {object} options - Selection options containing visualization parameters
   * @returns {THREE.Group} Group containing selection marker meshes
   */
  createSelectionMarker(e, t) {
    const n = new ui(), i = this.createSelectionMaterial(e);
    return this.children.forEach((a) => {
      const s = new Vt(a.geometry, i);
      s.applyMatrix4(a.matrix), s.scale.x *= t.selection.bondMarkerMult, s.scale.y *= 0.8 * t.selection.bondMarkerMult, s.scale.z *= t.selection.bondMarkerMult, s.userData.selectable = !1, n.add(s);
    }), n;
  }
}
function $z(r, e, t = 4) {
  if (!isFinite(1 / e))
    return Yl(r, t).toFixed(t);
  let n = Math.floor(Math.log10(e));
  e * Math.pow(10, -n) < 2 && (n -= 1);
  const i = Yl(r, -n);
  if (n < 0) {
    const s = Math.round(e / Math.pow(10, n));
    return `${i.toFixed(-n)}(${s})`;
  }
  const a = Yl(e, n);
  return `${i}(${a})`;
}
function Yl(r, e) {
  const t = Math.pow(10, e);
  return Math.round(r * t) / t;
}
function jy(r, e = !0) {
  if (!r || typeof r != "string")
    throw new Error("Empty atom label");
  let t = r.toUpperCase().replace(/[()[\]{}]/g, "");
  if (e && (t = t.replace(/\^[a-zA-Z1-9]+$/, "").replace(/_[a-zA-Z1-9]+$/, "").replace(/_\$\d+$/, "")), t === "")
    throw new Error(`Label "${r}" normalizes to empty string`);
  return t;
}
function Vz(r, e = !0) {
  const t = /* @__PURE__ */ new Map();
  r.forEach((i) => {
    try {
      const a = jy(i, e);
      t.has(a) || t.set(a, []), t.get(a).push(i);
    } catch (a) {
      console.warn(`Skipping invalid label: ${a.message}`);
    }
  });
  const n = /* @__PURE__ */ new Map();
  for (const [i, a] of t.entries())
    a.length === 1 ? n.set(i, a[0]) : console.warn(
      `Multiple labels map to ${i}: ${a.join(", ")}. Skipping mapping.`
    );
  return n;
}
function Aa(r, e, t, n = !0) {
  const i = Vz(t, n), s = r.get(e).map((o) => {
    const l = jy(o, n);
    return i.has(l) ? i.get(l) : o;
  });
  r.data[e] = s;
}
function qz(r) {
  if (!r || r === ".")
    return ".";
  const e = String(r).trim();
  if (/^\d+_\d{3}$/.test(e))
    return e;
  const t = e.match(/^-?([^\s\-_.]+)[\s-.](\d{3})$/);
  if (t) {
    const n = t[1], i = t[2];
    return t[0].startsWith("-") ? `-${n}_${i}` : `${n}_${i}`;
  }
  if (/^\d{5,6}$/.test(e)) {
    const n = e.slice(0, 3), i = e.slice(-3), a = Array.from(n).map((o) => Math.abs(parseInt(o) - 5)).reduce((o, l) => o + l, 0), s = Array.from(i).map((o) => Math.abs(parseInt(o) - 5)).reduce((o, l) => o + l, 0);
    return a < s ? `${parseInt(e.slice(3))}_${n}` : `${parseInt(e.slice(0, -4))}_${i}`;
  }
  return r;
}
function Zl(r, e) {
  const n = r.get(e).map((i) => qz(i));
  r.data[e] = n;
}
function In(r, e) {
  for (const t of e)
    if (r.headerLines.includes(t))
      return t;
  return null;
}
function Wz(r, e = !0, t = !0, n = !0) {
  let i;
  if ((e || t) && (i = r.get("_atom_site").get(["_atom_site.label", "_atom_site_label"])), e) {
    const a = r.get("_atom_site_aniso", !1);
    if (a) {
      const s = In(a, ["_atom_site_aniso.label", "_atom_site_aniso_label"]);
      s && Aa(a, s, i);
    }
  }
  if (t || n) {
    const a = r.get("_geom_bond", !1);
    if (a) {
      if (t) {
        const o = In(
          a,
          ["_geom_bond.atom_site_label_1", "_geom_bond_atom_site_label_1"]
        );
        Aa(a, o, i);
        const l = In(
          a,
          ["_geom_bond.atom_site_label_2", "_geom_bond_atom_site_label_2"]
        );
        Aa(a, l, i);
      }
      if (n) {
        const o = In(
          a,
          ["_geom_bond.site_symmetry_1", "_geom_bond_site_symmetry_1"]
        );
        o && Zl(a, o);
        const l = In(
          a,
          ["_geom_bond.site_symmetry_2", "_geom_bond_site_symmetry_2"]
        );
        l && Zl(a, l);
      }
    }
    const s = r.get("_geom_hbond", !1);
    if (s) {
      if (t) {
        const o = In(
          s,
          ["_geom_hbond.atom_site_label_d", "_geom_hbond_atom_site_label_D"]
        );
        Aa(s, o, i);
        const l = In(
          s,
          ["_geom_hbond.atom_site_label_h", "_geom_hbond_atom_site_label_H"]
        );
        l && Aa(s, l, i);
        const u = In(
          s,
          ["_geom_hbond.atom_site_label_a", "_geom_hbond_atom_site_label_A"]
        );
        Aa(s, u, i);
      }
      if (n) {
        const o = In(
          s,
          ["_geom_hbond.site_symmetry_a", "_geom_hbond_site_symmetry_A"]
        );
        o && Zl(s, o);
      }
    }
  }
}
const ni = Si(ra), Hi = class Hi extends Mi {
  /**
   * Creates a new atom label filter
   * @param {string[]|string} [filteredLabels] - Array of atom labels or comma-separated string to filter
   * @param {AtomLabelFilter.MODES} [mode] - Initial filter mode
   */
  constructor(e = [], t = Hi.MODES.OFF) {
    super(Hi.MODES, t, "AtomLabelFilter", []), this.setFilteredLabels(e);
  }
  get requiresCameraUpdate() {
    return !0;
  }
  /**
   * Parses a range expression (e.g., "A1>A10") and returns all labels in the range
   * @param {string} rangeExpr - Range expression in the format "start>end"
   * @param {string[]} allLabels - All available atom labels to filter the range against
   * @returns {string[]} Array of labels in the range
   * @private
   */
  _parseRangeExpression(e, t) {
    const [n, i] = e.split(">").map((o) => o.trim());
    if (!n || !i)
      return console.warn(`Invalid range expression: ${e}`), [];
    if (!t.includes(n))
      throw new Error(`Range filtering included unknown start label: ${n}`);
    if (!t.includes(i))
      throw new Error(`Range filtering included unknown end label: ${i}`);
    const a = t.indexOf(n), s = t.indexOf(i);
    return t.slice(a, s + 1);
  }
  /**
   * Updates the list of filtered atom labels
   * @param {string[]|string} labels - New array of atom labels or comma-separated string to filter
   */
  setFilteredLabels(e) {
    let t = [];
    typeof e == "string" ? t = e.split(",").map((n) => n.trim()).filter((n) => n) : Array.isArray(e) && (t = e), this.filteredLabels = new Set(t);
  }
  /**
   * Expands any range expressions in the filtered labels using available atom labels
   * @param {CrystalStructure} structure - Structure to filter
   * @returns {Set<string>} - set of expanded labels for the range
   * @private
   */
  _expandRanges(e) {
    const t = e.atoms.map((i) => i.label), n = /* @__PURE__ */ new Set();
    for (const i of this.filteredLabels)
      i.includes(">") && !t.includes(i) ? this._parseRangeExpression(i, t).forEach((s) => n.add(s)) : n.add(i);
    return n;
  }
  /**
   * Applies the filter to a structure, removing specified atoms and their bonds
   * @param {CrystalStructure} structure - Structure to filter
   * @returns {CrystalStructure} New structure with atoms removed if filter is on
   */
  apply(e) {
    if (this.mode === Hi.MODES.OFF)
      return e;
    const t = this._expandRanges(e), n = e.atoms.filter(
      (s) => !t.has(s.label)
    ), i = e.bonds.filter(
      (s) => !t.has(s.atom1Label) && !t.has(s.atom2Label)
    ), a = e.hBonds.filter(
      (s) => !t.has(s.donorAtomLabel) && !t.has(s.hydrogenAtomLabel) && !t.has(s.acceptorAtomLabel)
    );
    return new dn(
      e.cell,
      n,
      i,
      a,
      e.symmetry
    );
  }
  /**
   * Gets applicable modes - both modes are always available
   * @returns {Array<string>} Array containing both ON and OFF modes
   */
  getApplicableModes() {
    return Object.values(Hi.MODES);
  }
};
Vr(Hi, "MODES", Object.freeze({
  ON: "on",
  OFF: "off"
}));
let cf = Hi;
const zt = class zt extends Mi {
  /**
   * Creates a new bond generator to generate bonds between atoms based on their atomic radii
   * @class
   * @param {object} elementProperties - Element properties containing atomic radii from structure-settings.js
   * @param {number} toleranceFactor - How much longer than the sum of atomic radii a bond can be
   * @param {BondGenerator.MODES} [mode] - Initial operation mode
   */
  constructor(e, t, n = zt.MODES.KEEP) {
    super(zt.MODES, n, "BondGenerator", zt.PREFERRED_FALLBACK_ORDER), this.elementProperties = e, this.toleranceFactor = t;
  }
  /**
   * Gets the maximum allowed bond distance between two atoms
   * @param {string} element1 - First element symbol
   * @param {string} element2 - Second element symbol
   * @param {object} elementProperties - Element property definitions
   * @returns {number} Maximum allowed bond distance
   */
  getMaxBondDistance(e, t, n) {
    var s, o;
    const i = (s = n[e]) == null ? void 0 : s.radius, a = (o = n[t]) == null ? void 0 : o.radius;
    if (!i || !a)
      throw new Error(`Missing radius for element ${i ? t : e}`);
    return (i + a) * this.toleranceFactor;
  }
  /**
   * Generates bonds between atoms based on their distances
   * @private
   * @param {CrystalStructure} structure - Structure to analyze
   * @param {object} elementProperties - Element property definitions
   * @returns {Set<Bond>} Set of generated bonds
   */
  generateBonds(e, t) {
    const n = /* @__PURE__ */ new Set(), { cell: i, atoms: a } = e, s = /* @__PURE__ */ new Map(), o = /* @__PURE__ */ new Map();
    a.forEach((l) => {
      const u = l.position.toCartesian(i);
      if (s.set(l.label, [u.x, u.y, u.z]), Object.prototype.hasOwnProperty.call(t, l.atomType) && !o.has(l.atomType))
        o.set(l.atomType, l.atomType);
      else if (!o.has(l.atomType))
        try {
          o.set(l.atomType, Vu(l.atomType));
        } catch {
          throw new Error(`Missing radius for element ${l.atomType}`);
        }
    });
    for (let l = 0; l < a.length; l++) {
      const u = a[l], c = s.get(u.label);
      for (let f = l + 1; f < a.length; f++) {
        const h = a[f], d = s.get(h.label);
        if ((u.atomType === "H" || h.atomType === "H") && e.bonds.some((v) => v.atom1Label === u.label || v.atom1Label === h.label || v.atom2Label === u.label || v.atom2Label === h.label))
          continue;
        const m = ni.subtract(c, d), p = ni.norm(m), g = this.getMaxBondDistance(
          o.get(u.atomType),
          o.get(h.atomType),
          t
        );
        p <= g && p > 1e-4 && n.add(new wn(
          u.label,
          h.label,
          p,
          null,
          // No standard uncertainty for generated bonds
          "."
        ));
      }
    }
    return n;
  }
  /**
   * Applies bond generation to a structure according to current mode
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {CrystalStructure} Structure with modified bonds according to mode
   */
  apply(e) {
    this.ensureValidMode(e);
    let t;
    switch (this.mode) {
      case zt.MODES.KEEP:
        return e;
      // Keep existing bonds unchanged
      case zt.MODES.ADD: {
        const n = this.generateBonds(e, this.elementProperties);
        t = [...e.bonds, ...n];
        break;
      }
      case zt.MODES.REPLACE:
        t = [...this.generateBonds(e, this.elementProperties)];
        break;
      case zt.MODES.CREATE:
        t = [...this.generateBonds(e, this.elementProperties)];
        break;
      case zt.MODES.IGNORE:
        t = [...e.bonds];
        break;
      default:
        return e;
    }
    return new dn(
      e.cell,
      e.atoms,
      t,
      e.hBonds,
      e.symmetry
    );
  }
  /**
   * Gets applicable modes based on current structure
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<string>} Array of applicable mode names
   */
  getApplicableModes(e) {
    return e.bonds.length > 0 ? [
      zt.MODES.KEEP,
      zt.MODES.ADD,
      zt.MODES.REPLACE
    ] : [
      zt.MODES.CREATE,
      zt.MODES.IGNORE
    ];
  }
};
Vr(zt, "MODES", Object.freeze({
  KEEP: "keep",
  // Keep existing bonds only
  ADD: "add",
  // Add new bonds while keeping existing ones
  REPLACE: "replace",
  // Replace all bonds with generated ones
  CREATE: "create",
  // Create bonds only if none exist
  IGNORE: "ignore"
  // Don't create bonds if none exist
})), Vr(zt, "PREFERRED_FALLBACK_ORDER", [
  zt.MODES.KEEP,
  zt.MODES.ADD,
  zt.MODES.REPLACE,
  zt.MODES.CREATE,
  zt.MODES.IGNORE
]);
let ff = zt;
const Lr = class Lr extends Mi {
  /**
   * Creates a new isolated hydrogen fixer
   * @param {IsolatedHydrogenFixer.MODES} [mode] - Initial filter mode
   * @param {number} [maxBondDistance] - Maximum distance in Angstroms to consider for hydrogen bonds
   */
  constructor(e = Lr.MODES.OFF, t = 1.1) {
    super(
      Lr.MODES,
      e,
      "IsolatedHydrogenFixer",
      Lr.PREFERRED_FALLBACK_ORDER
    ), this.maxBondDistance = t;
  }
  /**
   * Applies the filter to create bonds for isolated hydrogen atoms
   * @param {CrystalStructure} structure - Structure to filter
   * @returns {CrystalStructure} Modified structure with additional bonds
   */
  apply(e) {
    if (this.ensureValidMode(e), this.mode === Lr.MODES.OFF)
      return e;
    const t = this.findIsolatedHydrogenAtoms(e);
    if (t.length === 0)
      return e;
    const n = this.createBondsForIsolatedHydrogens(e, t);
    return new dn(
      e.cell,
      e.atoms,
      [...e.bonds, ...n],
      e.hBonds,
      e.symmetry
    );
  }
  /**
   * Finds hydrogen atoms that are in connected groups of size one
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<object>} Array of isolated hydrogen atoms with their indices
   */
  findIsolatedHydrogenAtoms(e) {
    const t = [];
    return e.connectedGroups.forEach((n) => {
      if (n.atoms.length === 1 && n.atoms[0].atomType === "H") {
        const i = n.atoms[0], a = e.atoms.findIndex((s) => s.label === i.label);
        t.push({ atom: i, atomIndex: a });
      }
    }), t;
  }
  /**
   * Creates bonds for isolated hydrogen atoms to nearby potential bonding partners
   * @param {CrystalStructure} structure - Structure to analyze
   * @param {Array<object>} isolatedHydrogenAtoms - Array of isolated hydrogen atoms with their indices
   * @returns {Array<Bond>} Array of new bonds
   */
  createBondsForIsolatedHydrogens(e, t) {
    const n = [];
    return t.forEach(({ atom: i, atomIndex: a }) => {
      const s = i.position.toCartesian(e.cell), o = [s.x, s.y, s.z];
      if (a > 0) {
        const u = e.atoms[a - 1];
        if (u.atomType !== "H" && (u.disorderGroup === i.disorderGroup || u.disorderGroup === 0 || i.disorderGroup === 0)) {
          const c = u.position.toCartesian(e.cell), f = [c.x, c.y, c.z], h = ni.subtract(o, f), d = ni.norm(h);
          if (d <= this.maxBondDistance) {
            n.push(new wn(
              u.label,
              i.label,
              d,
              null,
              "."
            ));
            return;
          }
        }
      }
      let l = !1;
      for (let u = a - 1; u >= 0 && !l; u--) {
        const c = e.atoms[u];
        if (c.atomType === "H" || !(c.disorderGroup === i.disorderGroup || c.disorderGroup === 0 || i.disorderGroup === 0))
          continue;
        const f = c.position.toCartesian(e.cell), h = [f.x, f.y, f.z], d = ni.subtract(o, h), m = ni.norm(d);
        m <= this.maxBondDistance && (n.push(new wn(
          c.label,
          i.label,
          m,
          null,
          "."
        )), l = !0);
      }
      if (!l && a < e.atoms.length - 1)
        for (let u = a + 1; u < e.atoms.length && !l; u++) {
          const c = e.atoms[u];
          if (c.atomType === "H" || !(c.disorderGroup === i.disorderGroup || c.disorderGroup === 0 || i.disorderGroup === 0))
            continue;
          const f = c.position.toCartesian(e.cell), h = [f.x, f.y, f.z], d = ni.subtract(o, h), m = ni.norm(d);
          m <= this.maxBondDistance && (n.push(new wn(
            c.label,
            i.label,
            m,
            null,
            "."
          )), l = !0);
        }
    }), n;
  }
  /**
   * Gets applicable modes based on whether there are isolated hydrogen atoms
   * @param {CrystalStructure} structure - Structure to analyze
   * @returns {Array<string>} Array of applicable mode names
   */
  getApplicableModes(e) {
    return e.bonds.length === 0 ? [Lr.MODES.OFF] : e.connectedGroups.some(
      (n) => n.atoms.length === 1 && n.atoms[0].atomType === "H"
    ) ? [
      Lr.MODES.ON
      //IsolatedHydrogenFixer.MODES.OFF,
    ] : [Lr.MODES.OFF];
  }
};
Vr(Lr, "MODES", Object.freeze({
  ON: "on",
  OFF: "off"
})), Vr(Lr, "PREFERRED_FALLBACK_ORDER", [
  Lr.MODES.ON,
  Lr.MODES.OFF
]);
let hf = Lr;
const df = Si(ra, {});
function Xz(r) {
  const e = new ce();
  r.forEach((u) => e.add(u)), e.divideScalar(r.length);
  const t = new ot(), n = new ce();
  r.forEach((u) => {
    n.copy(u).sub(e), t.elements[0] += n.x * n.x, t.elements[1] += n.x * n.y, t.elements[2] += n.x * n.z, t.elements[3] += n.y * n.x, t.elements[4] += n.y * n.y, t.elements[5] += n.y * n.z, t.elements[6] += n.z * n.x, t.elements[7] += n.z * n.y, t.elements[8] += n.z * n.z;
  });
  const { values: i, eigenvectors: a } = df.eigs(Yz(t)), s = df.min(i);
  if (s <= 0)
    return console.warn("Could not find a mean plane, expected?"), new ce(0, 1, 0);
  const o = a.filter((u) => u.value === s)[0].vector, l = new ce(...o.toArray());
  return l.normalize(), l;
}
function Yz(r) {
  const e = r.elements;
  return df.matrix([
    [e[0], e[1], e[2]],
    [e[3], e[4], e[5]],
    [e[6], e[7], e[8]]
  ]);
}
function Zz(r) {
  const e = [], t = new ce();
  if (r.traverse((m) => {
    var p;
    ((p = m.userData) == null ? void 0 : p.type) === "atom" && (e.push(m.position.clone()), t.add(m.position));
  }), e.length === 0)
    return null;
  t.divideScalar(e.length);
  const n = e.map((m) => m.sub(t)), i = Xz(n), a = new ce(0, 0, 1), s = new ls();
  s.setFromUnitVectors(i, a);
  const o = new mt();
  o.makeRotationFromQuaternion(s);
  const l = n.map((m) => m.clone().applyMatrix4(o));
  let u = 0, c = 0;
  l.forEach((m, p) => {
    const g = Math.sqrt(m.x * m.x + m.y * m.y);
    g > u && (u = g, c = p);
  });
  const f = new ft(
    l[c].x,
    l[c].y
  );
  f.x < 0 && f.multiplyScalar(-1);
  const h = -Math.atan2(f.y, f.x), d = new mt().makeRotationZ(h);
  return o.premultiply(d), o.premultiply(new mt().makeRotationX(Math.PI / 8)), o.premultiply(new mt().makeRotationY(Math.PI / 48)), o;
}
function Kz(r, e) {
  r.children = r.children.filter((o) => !(o instanceof Zu));
  let t = 6;
  e.traverse((o) => {
    var l;
    ((l = o.userData) == null ? void 0 : l.type) === "atom" && o.position.length() > t && (t = o.position.length());
  });
  const n = t * 2, i = new YL(16777215, 1);
  r.add(i);
  const a = new qL(16777215, 1e3, 0, Math.PI * 0.27, 0.6);
  a.position.set(0, -0.5, n * 2), a.lookAt(new ce(0, 0, 0)), r.add(a), [
    { pos: [-1, -0.5, 1], intensity: 0.4 },
    { pos: [1, -0.5, 1], intensity: 0.4 },
    { pos: [0, -0.5, 1], intensity: 0.3 }
  ].forEach(({ pos: o, intensity: l }) => {
    const u = new XL(16777215, l);
    u.position.set(
      o[0] * n,
      o[1] * n,
      o[2] * n
    ), u.lookAt(new ce(0, 0, 0)), r.add(u);
  });
}
class Jz {
  /**
   * Creates a new viewer controls instance.
   * @param {object} viewer - The crystal viewer instance to control
   */
  constructor(e) {
    this.viewer = e, this.state = {
      isDragging: !1,
      isPanning: !1,
      mouse: new ft(),
      lastClickTime: 0,
      clickStartTime: 0,
      pinchStartDistance: 0,
      lastTouchRotation: 0,
      lastRightClickTime: 0,
      twoFingerStartPos: new ft(),
      initialCameraPosition: e.camera.position.clone()
    };
    const { container: t, camera: n, renderer: i, moleculeContainer: a, options: s } = e;
    this.container = t, this.camera = n, this.renderer = i, this.moleculeContainer = a, this.options = s, this.doubleClickDelay = 300, this.raycaster = new KL(), this.raycaster.near = 0.1, this.raycaster.far = 100, this.bindEventHandlers(), this.setupEventListeners();
  }
  /**
   * Binds all event handlers to maintain proper 'this' context.
   * @private
   */
  bindEventHandlers() {
    this.boundHandlers = {
      wheel: this.handleWheel.bind(this),
      mouseDown: this.handleMouseDown.bind(this),
      mouseMove: this.handleMouseMove.bind(this),
      mouseUp: this.handleMouseUp.bind(this),
      click: this.handleClick.bind(this),
      contextMenu: this.handleContextMenu.bind(this),
      touchStart: this.handleTouchStart.bind(this),
      touchMove: this.handleTouchMove.bind(this),
      touchEnd: this.handleTouchEnd.bind(this),
      resize: this.handleResize.bind(this)
    };
  }
  /**
   * Attaches all event listeners to the canvas and window.
   * @private
   */
  setupEventListeners() {
    const e = this.renderer.domElement, {
      wheel: t,
      mouseDown: n,
      mouseMove: i,
      mouseUp: a,
      click: s,
      contextMenu: o,
      touchStart: l,
      touchMove: u,
      touchEnd: c,
      resize: f
    } = this.boundHandlers;
    e.addEventListener("wheel", t, { passive: !1 }), e.addEventListener("mousedown", n), e.addEventListener("mousemove", i), e.addEventListener("mouseup", a), e.addEventListener("mouseleave", a), e.addEventListener("click", s), e.addEventListener("contextmenu", o), e.addEventListener("touchstart", l, { passive: !1 }), e.addEventListener("touchmove", u, { passive: !1 }), e.addEventListener("touchend", c), window.addEventListener("resize", f);
  }
  /**
   * Converts client (screen) coordinates to normalized device coordinates (-1 to 1).
   * @param {number} clientX - X coordinate in client space
   * @param {number} clientY - Y coordinate in client space
   * @returns {THREE.Vector2} Normalized device coordinates
   */
  clientToMouseCoordinates(e, t) {
    const n = this.container.getBoundingClientRect();
    return new ft(
      (e - n.left) / n.width * 2 - 1,
      -((t - n.top) / n.height) * 2 + 1
    );
  }
  /**
   * Updates the internal mouse state with new client coordinates.
   * @param {number} clientX - X coordinate in client space
   * @param {number} clientY - Y coordinate in client space
   * @private
   */
  updateMouseCoordinates(e, t) {
    const n = this.clientToMouseCoordinates(e, t);
    this.state.mouse.x = n.x, this.state.mouse.y = n.y;
  }
  /**
   * Resets camera to initial position and orientation.
   * @private
   */
  resetCameraPosition() {
    this.viewer.cameraController.reset(), this.viewer.requestRender();
  }
  /**
   * Handles selection logic using raycasting to identify objects under pointer.
   * @param {object} point - Event with clientX and clientY properties
   * @param {number} timeSinceLastInteraction - Time in ms since last click/touch
   * @private
   */
  handleSelection(e, t) {
    this.updateMouseCoordinates(e.clientX, e.clientY), this.raycaster.setFromCamera(this.state.mouse, this.camera);
    const n = [];
    this.moleculeContainer.traverse((a) => {
      var s;
      (s = a.userData) != null && s.selectable && n.push(a);
    });
    const i = this.raycaster.intersectObjects(n).filter((a) => {
      var s;
      return (s = a.object.userData) == null ? void 0 : s.selectable;
    });
    i.length > 0 ? this.viewer.selections.handle(i[0].object) : t < this.doubleClickDelay && this.viewer.selections.clear(), this.viewer.requestRender();
  }
  /**
   * Rotates the molecular structure based on delta movement.
   * @param {THREE.Vector2} delta - Movement delta in normalized device coordinates
   * @private
   */
  rotateStructure(e) {
    const t = this.options.interaction.rotationSpeed, n = new ce(1, 0, 0), i = new ce(0, 1, 0);
    this.moleculeContainer.applyMatrix4(
      new mt().makeRotationAxis(i, e.x * t)
    ), this.moleculeContainer.applyMatrix4(
      new mt().makeRotationAxis(n, -e.y * t)
    ), this.viewer.requestRender();
  }
  /**
   * Moves camera in the view plane based on delta movement.
   * @param {THREE.Vector2} delta - Movement delta in normalized device coordinates
   * @private
   */
  panCamera(e) {
    this.viewer.cameraController.pan(e), this.viewer.requestRender();
  }
  /**
   * Sets raycast thresholds for touch interaction and handles selection.
   * @param {object} point - Event with clientX and clientY properties
   * @param {number} timeSinceLastInteraction - Time in ms since last touch
   * @private
   */
  handleTouchSelect(e, t) {
    const n = this.options.interaction.touchRaycast;
    this.raycaster.params.Line.threshold = n.lineThreshold, this.raycaster.params.Points.threshold = n.pointsThreshold, this.raycaster.params.Mesh.threshold = n.meshThreshold, this.handleSelection(e, t);
  }
  /**
   * Adjusts camera distance to zoom in/out of the structure.
   * @param {number} zoomDelta - Zoom amount (positive for zoom out, negative for zoom in)
   * @private
   */
  handleZoom(e) {
    this.viewer.cameraController.zoom(e), this.viewer.requestRender();
  }
  /**
   * Handles touch start events for both single-touch (rotation) and multi-touch (zoom/pan) gestures.
   * @param {TouchEvent} event - Touch start event
   * @private
   */
  handleTouchStart(e) {
    e.preventDefault();
    const t = e.touches;
    if (t.length === 1 && !this.state.isDragging)
      this.state.isDragging = !0, this.state.clickStartTime = Date.now(), this.updateMouseCoordinates(t[0].clientX, t[0].clientY);
    else if (t.length === 2) {
      if (!this.state.isDragging) {
        const n = t[0].clientX - t[1].clientX, i = t[0].clientY - t[1].clientY;
        this.state.pinchStartDistance = Math.hypot(n, i);
        const a = this.clientToMouseCoordinates(
          (t[0].clientX + t[1].clientX) / 2,
          (t[0].clientY + t[1].clientY) / 2
        );
        this.state.twoFingerStartPos.copy(a);
      }
      this.state.isDragging = !1;
    }
  }
  /**
   * Handles touch move events for rotation, pinch-zoom, and panning.
   * @param {TouchEvent} event - Touch move event
   * @private
   */
  handleTouchMove(e) {
    e.preventDefault();
    const t = e.touches;
    if (t.length === 1 && this.state.isDragging) {
      const n = t[0], i = this.clientToMouseCoordinates(n.clientX, n.clientY), a = new ft(
        i.x - this.state.mouse.x,
        i.y - this.state.mouse.y
      );
      this.rotateStructure(a), this.state.mouse.set(i.x, i.y);
    } else if (t.length === 2) {
      const n = t[0].clientX - t[1].clientX, i = t[0].clientY - t[1].clientY, a = Math.hypot(n, i);
      if (!this.state.pinchStartDistance) {
        this.state.pinchStartDistance = a;
        const l = this.clientToMouseCoordinates(
          (t[0].clientX + t[1].clientX) / 2,
          (t[0].clientY + t[1].clientY) / 2
        );
        this.state.twoFingerStartPos.copy(l);
        return;
      }
      this.handleZoom((this.state.pinchStartDistance - a) * this.options.camera.pinchZoomSpeed), this.state.pinchStartDistance = a;
      const s = this.clientToMouseCoordinates(
        (t[0].clientX + t[1].clientX) / 2,
        (t[0].clientY + t[1].clientY) / 2
      ), o = s.clone().sub(this.state.twoFingerStartPos);
      this.panCamera(o), this.state.twoFingerStartPos.copy(s);
    }
  }
  /**
   * Handles touch end events, including tap selection.
   * @param {TouchEvent} event - Touch end event
   * @private
   */
  handleTouchEnd(e) {
    if (e.cancelable && e.preventDefault(), e.touches.length === 0 && e.changedTouches.length > 0) {
      if (Date.now() - this.state.clickStartTime < this.options.interaction.clickThreshold) {
        const n = e.changedTouches[0], i = Date.now(), a = {
          clientX: n.clientX,
          clientY: n.clientY
        };
        this.handleTouchSelect(a, i - this.state.lastClickTime), this.state.lastClickTime = i;
      }
      this.state.isDragging = !1, this.state.pinchStartDistance = 0;
    }
  }
  /**
   * Handles context menu events (right-click), including double-right-click for camera reset.
   * @param {MouseEvent} event - Context menu event
   * @private
   */
  handleContextMenu(e) {
    e.preventDefault();
    const t = Date.now();
    t - this.state.lastRightClickTime < this.doubleClickDelay && this.resetCameraPosition(), this.state.lastRightClickTime = t;
  }
  /**
   * Handles mouse down events to initiate dragging or panning.
   * @param {MouseEvent} event - Mouse down event
   * @private
   */
  handleMouseDown(e) {
    e.button === 2 ? this.state.isPanning = !0 : this.state.isDragging = !0, this.state.clickStartTime = Date.now(), this.updateMouseCoordinates(e.clientX, e.clientY);
  }
  /**
   * Handles mouse move events for rotation and panning.
   * @param {MouseEvent} event - Mouse move event
   * @private
   */
  handleMouseMove(e) {
    if (!this.state.isDragging && !this.state.isPanning)
      return;
    const t = this.container.getBoundingClientRect(), n = new ft(
      (e.clientX - t.left) / t.width * 2 - 1,
      -((e.clientY - t.top) / t.height) * 2 + 1
    ), i = n.clone().sub(this.state.mouse);
    this.state.isPanning ? this.panCamera(i) : this.rotateStructure(i), this.state.mouse.copy(n);
  }
  /**
   * Handles mouse up events to end dragging or panning.
   * @private
   */
  handleMouseUp() {
    this.state.isDragging = !1, this.state.isPanning = !1;
  }
  /**
   * Handles click events for atom/bond selection.
   * @param {MouseEvent} event - Click event
   * @private
   */
  handleClick(e) {
    if (e.button !== 0 || Date.now() - this.state.clickStartTime > this.options.interaction.clickThreshold || this.state.isDragging)
      return;
    const n = Date.now(), i = this.options.interaction.mouseRaycast;
    this.raycaster.params.Line.threshold = i.lineThreshold, this.raycaster.params.Points.threshold = i.pointsThreshold, this.raycaster.params.Mesh.threshold = i.meshThreshold, this.handleSelection(e, n - this.state.lastClickTime), this.state.lastClickTime = n;
  }
  /**
   * Handles wheel events for zooming.
   * @param {WheelEvent} event - Wheel event
   * @private
   */
  handleWheel(e) {
    e.preventDefault(), this.handleZoom(e.deltaY * this.options.camera.wheelZoomSpeed);
  }
  /**
   * Handles window resize events by adjusting camera aspect ratio and field of view.
   * @private
   */
  handleResize() {
    this.viewer.cameraController.handleResize(), this.viewer.resizeRendererToDisplaySize(), this.viewer.requestRender();
  }
  /**
   * Removes all event listeners to prevent memory leaks.
   */
  dispose() {
    const e = this.renderer.domElement, {
      wheel: t,
      mouseDown: n,
      mouseMove: i,
      mouseUp: a,
      click: s,
      contextMenu: o,
      touchStart: l,
      touchMove: u,
      touchEnd: c,
      resize: f
    } = this.boundHandlers;
    e.removeEventListener("wheel", t), e.removeEventListener("mousedown", n), e.removeEventListener("mousemove", i), e.removeEventListener("mouseup", a), e.removeEventListener("mouseleave", a), e.removeEventListener("click", s), e.removeEventListener("contextmenu", o), e.removeEventListener("touchstart", l), e.removeEventListener("touchmove", u), e.removeEventListener("touchend", c), window.removeEventListener("resize", f);
  }
}
class Qu {
  /**
   * Creates a new camera controller instance.
   * @param {HTMLElement} container - The DOM container element
   * @param {object} options - Camera configuration options
   */
  constructor(e, t) {
    if (new.target === Qu)
      throw new Error("AbstractCamera is an abstract class and cannot be instantiated directly");
    this.container = e, this.options = t, this.cameraTarget = new ce(0, 0, 0), this.createCamera();
  }
  /**
   * Creates and initializes the Three.js camera
   * @abstract
   * @returns {THREE.Camera} The created camera instance
   */
  createCamera() {
    throw new Error("createCamera() must be implemented by subclass");
  }
  /**
   * Adjusts camera to fit the structure
   * @abstract
   * @param {THREE.Object3D} _structureGroup - The molecular structure to fit in view
   */
  fitToStructure(e) {
    throw new Error("fitToStructure() must be implemented by subclass");
  }
  /**
   * Handles zoom operations
   * @abstract
   * @param {number} _zoomDelta - Amount and direction of zoom
   */
  zoom(e) {
    throw new Error("zoom() must be implemented by subclass");
  }
  /**
   * Handles pan operations
   * @abstract
   * @param {THREE.Vector2} _delta - Amount and direction of pan in normalized coordinates
   */
  pan(e) {
    throw new Error("pan() must be implemented by subclass");
  }
  /**
   * Updates camera parameters when container is resized
   * @abstract
   */
  handleResize() {
    throw new Error("handleResize() must be implemented by subclass");
  }
  /**
   * Resets camera to default position
   */
  reset() {
    this.camera.position.copy(this.basePosition), this.camera.lookAt(this.cameraTarget);
  }
}
class Qz extends Qu {
  /**
   * Creates and initializes a perspective camera
   * @returns {THREE.PerspectiveCamera} The created perspective camera
   */
  createCamera() {
    return this.camera = new zr(
      this.options.fov,
      this.container.clientWidth / this.container.clientHeight,
      this.options.near,
      this.options.far
    ), this.camera.position.copy(this.options.initialPosition), this.camera.lookAt(this.cameraTarget), this.camera;
  }
  /**
   * Adjusts camera distance to fit the entire structure in view
   * @param {THREE.Object3D} structureGroup - The molecular structure to fit in view
   */
  fitToStructure(e) {
    const t = new Ei().setFromObject(e);
    if (t.isEmpty())
      return;
    const n = new ce();
    t.getSize(n);
    const i = this.options.fov * Math.PI / 180, a = this.container.clientWidth / this.container.clientHeight, s = Math.atan(a * Math.tan(i / 2) * 2), o = n.x / n.y;
    let l;
    o <= a ? l = n.y / 2 / Math.tan(i / 2) + n.z / 2 : l = n.x / 2 / Math.tan(s / 2) + n.z / 2, this.camera.position.set(0, 0, l), this.camera.lookAt(this.cameraTarget), this.options.minDistance = l * 0.2, this.options.maxDistance = l * 2, this.basePosition = new ce(0, 0, l);
  }
  /**
   * Adjusts camera distance based on zoom delta
   * @param {number} zoomDelta - Amount to zoom (positive = zoom out, negative = zoom in)
   */
  zoom(e) {
    const { minDistance: t, maxDistance: n } = this.options, i = n - t, a = this.camera.position.length(), s = Py.clamp(
      a + e * i,
      t,
      n
    ), o = this.camera.position.clone().normalize();
    this.camera.position.copy(o.multiplyScalar(s));
  }
  /**
   * Moves camera in the view plane
   * @param {THREE.Vector2} delta - Pan amount in normalized device coordinates (-1 to 1)
   */
  pan(e) {
    const t = this.camera.position.z, n = this.options.fov * Math.PI / 180, i = Math.tan(n / 2) * t, a = i * this.camera.aspect, s = -e.x * a, o = -e.y * i, l = new ce(), u = new ce();
    this.camera.matrix.extractBasis(l, u, new ce()), this.camera.position.addScaledVector(l, s), this.camera.position.addScaledVector(u, o);
  }
  /**
   * Updates camera aspect ratio and projection when container is resized
   */
  handleResize() {
    const e = this.container.clientWidth / this.container.clientHeight;
    this.camera.aspect = e;
    const t = this.options.fov;
    this.container.clientWidth < this.container.clientHeight ? this.camera.fov = 2 * Math.atan(Math.tan(t * Math.PI / 360) / e) * 180 / Math.PI : this.camera.fov = t, this.camera.updateProjectionMatrix();
  }
}
class jz extends Qu {
  /**
   * Creates and initializes an orthographic camera
   * @returns {THREE.OrthographicCamera} The created orthographic camera
   */
  createCamera() {
    const e = this.container.clientWidth / this.container.clientHeight, t = this.options.orthoSize || 5;
    return this.camera = new Kf(
      -t * e,
      t * e,
      t,
      -t,
      this.options.near,
      this.options.far
    ), this.camera.position.copy(this.options.initialPosition), this.camera.lookAt(this.cameraTarget), this.camera;
  }
  /**
   * Adjusts orthographic camera parameters to fit the structure in view
   * @param {THREE.Object3D} structureGroup - The molecular structure to fit in view
   */
  fitToStructure(e) {
    const t = new Ei().setFromObject(e);
    if (t.isEmpty())
      return;
    const n = new ce();
    t.getSize(n);
    const i = this.container.clientWidth / this.container.clientHeight, a = n.x / n.y;
    let s;
    a <= i ? s = n.y / 2 : s = n.x / (2 * i), s *= 1.05, this.setOrthoSize(s), this.camera.updateProjectionMatrix(), this.options.minSize = s * 0.2, this.options.maxSize = s * 2, this.baseSize = s, this.basePosition = new ce(0, 0, Math.max(n.x, n.y)), this.camera.position.set(this.basePosition.x, this.basePosition.y, this.basePosition.z);
  }
  /**
   * Adjusts orthographic camera size based on zoom delta
   * @param {number} zoomDelta - Amount to zoom (positive = zoom out, negative = zoom in)
   */
  zoom(e) {
    const { minDistance: t, maxDistance: n } = this.options, i = n - t, { minSize: a, maxSize: s } = this.options, o = 1 + e * this.options.wheelZoomSpeed * i * 50, l = Py.clamp(
      this.camera.top * o,
      a,
      s
    );
    this.setOrthoSize(l), this.camera.updateProjectionMatrix();
  }
  /**
   * Moves orthographic camera in the view plane
   * @param {THREE.Vector2} delta - Pan amount in normalized device coordinates (-1 to 1)
   */
  pan(e) {
    const t = this.camera.top, n = -e.x * t * 1.41, i = -e.y * t, a = new ce(), s = new ce();
    this.camera.matrix.extractBasis(a, s, new ce()), this.camera.position.addScaledVector(a, n), this.camera.position.addScaledVector(s, i);
  }
  /**
   * Updates orthographic camera frustum when container is resized
   */
  handleResize() {
    const e = this.container.clientWidth / this.container.clientHeight, t = this.camera.top;
    this.camera.left = -t * e, this.camera.right = t * e, this.camera.updateProjectionMatrix();
  }
  /**
   * Updates the orthographic camera's frustum size
   * @param {number} size - Half-height of the camera's view frustum
   */
  setOrthoSize(e) {
    const t = this.container.clientWidth / this.container.clientHeight;
    this.camera.top = e, this.camera.bottom = -e, this.camera.left = -e * t, this.camera.right = e * t;
  }
}
function ek(r, e) {
  var n;
  switch ((((n = e.camera) == null ? void 0 : n.type) || "perspective").toLowerCase()) {
    case "orthographic":
      return new jz(r, e.camera);
    case "perspective":
    default:
      return new Qz(r, e.camera);
  }
}
class tk {
  /**
   * Creates a selection manager with the given configuration.
   * @param {object} options - Selection configuration options
   */
  constructor(e) {
    this.options = e, this.selectedObjects = /* @__PURE__ */ new Set(), this.selectionCallbacks = /* @__PURE__ */ new Set(), this.selectedData = /* @__PURE__ */ new Set();
  }
  /**
   * Removes invalid selections and restores valid ones after structure changes.
   * @param {THREE.Object3D} container - Container with selectable objects
   */
  pruneInvalidSelections(e) {
    this.selectedObjects.clear();
    const t = /* @__PURE__ */ new Set();
    e.traverse((n) => {
      var i;
      if ((i = n.userData) != null && i.selectable) {
        const a = this.getObjectDescriptorData(n);
        a && t.add(JSON.stringify(a));
      }
    }), this.selectedData = new Set(
      Array.from(this.selectedData).filter(
        (n) => t.has(JSON.stringify({
          type: n.type,
          ...this.getDataWithoutColor(n)
        }))
      )
    ), e.traverse((n) => {
      var i;
      if ((i = n.userData) != null && i.selectable) {
        const a = this.getObjectDescriptorData(n);
        if (this.hasMatchingData(a)) {
          const s = this.getColorForData(a);
          n.select(s, this.options), this.selectedObjects.add(n);
        }
      }
    }), this.notifyCallbacks();
  }
  /**
   * Returns a copy of the data without the color property.
   * @param {object} data - Data object containing selection information
   * @returns {object} Data without color information
   */
  getDataWithoutColor(e) {
    const { color: t, ...n } = e;
    return n;
  }
  /**
   * Extracts data from an object's to create a combination of uniquely identifyable
   * properties.
   * @param {THREE.Object3D} object - Object to extract data from
   * @returns {object|null} Extracted data or null if unavailable
   */
  getObjectDescriptorData(e) {
    if (!e.userData)
      return null;
    switch (e.userData.type) {
      case "atom":
        return {
          type: "atom",
          label: e.userData.atomData.label
        };
      case "bond":
        return {
          type: "bond",
          atom1: e.userData.bondData.atom1Label,
          atom2: e.userData.bondData.atom2Label
        };
      case "hbond":
        return {
          type: "hbond",
          donor: e.userData.hbondData.donorAtomLabel,
          hydrogen: e.userData.hbondData.hydrogenAtomLabel,
          acceptor: e.userData.hbondData.acceptorAtomLabel
        };
      default:
        return null;
    }
  }
  /**
   * Checks if there is stored data matching the given object data.
   * @param {object} data - Data to check against stored selections
   * @returns {boolean} True if matching data exists
   */
  hasMatchingData(e) {
    return e ? Array.from(this.selectedData).some((t) => this.matchData(t, e)) : !1;
  }
  /**
   * Gets the color for a given data object, reuse the color if the data object has one 
   * assigned, otherwise get a new color.
   * @param {object} data - Data to get color for
   * @returns {number} Hex color code for the data
   */
  getColorForData(e) {
    const t = Array.from(this.selectedData).find((n) => this.matchData(n, e));
    return t ? t.color : this.getNextColor();
  }
  /**
   * Gets the next available color for a new selection.
   * @returns {number} Hex color code for the new selection
   */
  getNextColor() {
    const e = /* @__PURE__ */ new Map();
    this.selectedData.forEach((n) => {
      e.set(n.color, (e.get(n.color) || 0) + 1);
    });
    let t = this.options.selection.markerColors.find((n) => !e.has(n));
    if (!t) {
      const n = Math.min(...e.values());
      t = this.options.selection.markerColors.find(
        (i) => e.get(i) === n
      );
    }
    return t;
  }
  /**
   * Processes selection/deselection of an object and manages selection state.
   * @param {THREE.Object3D} object - Object to handle selection for
   * @returns {number|null} The selection color or null if selection failed
   */
  handle(e) {
    this.options.mode === "single" && (this.selectedObjects.forEach((i) => {
      this.remove(i);
    }), this.selectedObjects.clear(), this.selectedData.clear());
    const t = this.getObjectDescriptorData(e);
    if (!t)
      return null;
    let n;
    return this.hasMatchingData(t) ? (n = e.selectionColor, this.remove(e), this.selectedData = new Set(
      Array.from(this.selectedData).filter((i) => !this.matchData(i, t))
    )) : (n = this.getNextColor(), this.add(e, n), this.selectedData.add({ ...t, color: n })), this.notifyCallbacks(), n;
  }
  /**
   * Compares two data objects to determine if they represent the same entity.
   * @param {object} data1 - First data object
   * @param {object} data2 - Second data object
   * @returns {boolean} True if data objects match
   */
  matchData(e, t) {
    if (e.type !== t.type)
      return !1;
    switch (e.type) {
      case "atom":
        return e.label === t.label;
      case "bond":
        return e.atom1 === t.atom1 && e.atom2 === t.atom2 || e.atom1 === t.atom2 && e.atom2 === t.atom1;
      case "hbond":
        return e.donor === t.donor && e.hydrogen === t.hydrogen && e.acceptor === t.acceptor;
      default:
        return !1;
    }
  }
  /**
   * Adds an object to the selection set.
   * @param {THREE.Object3D} object - Object to add to selection
   * @param {number} [color] - Color to use for selection visualization
   */
  add(e, t) {
    e.select(t || this.getNextColor(), this.options), this.selectedObjects.add(e);
  }
  /**
   * Removes an object from the selection set.
   * @param {THREE.Object3D} object - Object to remove from selection
   */
  remove(e) {
    this.selectedObjects.delete(e), e.deselect();
  }
  /**
   * Clears all current selections.
   */
  clear() {
    this.selectedObjects.forEach((e) => {
      this.remove(e);
    }), this.selectedObjects.clear(), this.selectedData.clear(), this.notifyCallbacks();
  }
  /**
   * Registers a callback to be notified when selection changes.
   * @param {Function} callback - Function called with updated selections
   */
  onChange(e) {
    this.selectionCallbacks.add(e);
  }
  /**
   * Notifies all registered callbacks about selection changes.
   * See the class JSDoc documentation for more information.
   */
  notifyCallbacks() {
    const e = Array.from(this.selectedObjects).map((t) => ({
      type: t.userData.type,
      data: t.userData.type === "hbond" ? t.userData.hbondData : t.userData.type === "bond" ? t.userData.bondData : t.userData.atomData,
      color: t.selectionColor
    }));
    this.selectionCallbacks.forEach((t) => t(e));
  }
  /**
   * Sets the selection mode (single or multiple).
   * @param {string} mode - 'single' or 'multiple'
   * @throws {Error} If mode value is invalid
   */
  setMode(e) {
    if (e !== "single" && e !== "multiple")
      throw new Error('Selection mode must be either "single" or "multiple"');
    if (this.options.mode = e, e === "single" && this.selectedObjects.size > 1) {
      const t = Array.from(this.selectedObjects), n = t[t.length - 1], i = this.getObjectDescriptorData(n);
      this.clear(), i && (this.add(n), this.selectedData.add({ ...i, color: n.selectionColor })), this.notifyCallbacks();
    }
  }
  /**
   * Releases resources used by the selection manager.
   */
  dispose() {
    this.clear(), this.selectionCallbacks.clear();
  }
}
class Qv {
  /**
   * Creates a new crystal structure viewer with the given configuration.
   * @param {HTMLElement} container - DOM element to contain the viewer
   * @param {object} [options] - Viewer configuration options including:
   * - camera: Camera settings (fov, position, distance limits, etc.)
   * - selection: Selection behavior configuration
   * - interaction: User interaction parameters (rotation speed, click thresholds)
   * - atomDetail/atomColorRoughness/etc.: Appearance settings for atoms
   * - bondRadius/bondColor/etc.: Appearance settings for bonds
   * - elementProperties: Per-element appearance settings (colors, radii)
   * - hydrogenMode/disorderMode/symmetryMode: Initial display modes
   * - renderMode: 'constant' for continuous updates or 'onDemand' for efficient rendering
   * - fixCifErrors: Whether to attempt automatic fixes for common CIF format issues
   * see ./structure-settings.js for the default values
   * @throws {Error} If an invalid render mode is provided
   */
  constructor(e, t = {}) {
    const n = ["constant", "onDemand"];
    if (t.renderMode && !n.includes(t.renderMode))
      throw new Error(
        `Invalid render mode: "${t.renderMode}". Must be one of: ${n.join(", ")}`
      );
    this.container = e, this.options = {
      camera: {
        ...Ft.camera,
        initialPosition: new ce(...Ft.camera.initialPosition),
        ...t.camera || {}
      },
      selection: {
        ...Ft.selection,
        ...t.selection || {}
      },
      interaction: {
        ...Ft.interaction,
        ...t.interaction || {}
      },
      atomDetail: t.atomDetail || Ft.atomDetail,
      atomColorRoughness: t.atomColorRoughness || Ft.atomColorRoughness,
      atomColorMetalness: t.atomColorMetalness || Ft.atomColorMetalness,
      atomADPRingWidthFactor: t.atomADPRingWidthFactor || Ft.atomADPRingWidthFactor,
      atomADPRingHeight: t.atomADPRingHeight || Ft.atomADPRingHeight,
      atomADPRingSections: t.atomADPRingSections || Ft.atomADPRingSections,
      bondRadius: t.bondRadius || Ft.bondRadius,
      bondSections: t.bondSections || Ft.bondSections,
      bondColor: t.bondColor || Ft.bondColor,
      bondColorRoughness: t.bondColorRoughness || Ft.bondColorRoughness,
      bondColorMetalness: t.bondColorMetalness || Ft.bondColorMetalness,
      bondGrowToleranceFactor: t.bondGrowToleranceFactor || Ft.bondGrowToleranceFactor,
      elementProperties: {
        ...Ft.elementProperties,
        ...t.elementProperties
      },
      hydrogenMode: t.hydrogenMode || Ft.hydrogenMode,
      disorderMode: t.disorderMode || Ft.disorderMode,
      symmetryMode: t.symmetryMode || Ft.symmetryMode,
      renderMode: t.renderMode || Ft.renderMode,
      fixCifErrors: t.fixCifErrors || Ft.fixCifErrors
    }, this.state = {
      isDragging: !1,
      currentCifContent: null,
      currentStructure: null,
      currentFloor: null,
      baseStructure: null,
      ortepObjects: /* @__PURE__ */ new Map(),
      structureCenter: new ce()
    }, this.modifiers = {
      removeatoms: new cf(),
      addhydrogen: new hf(),
      missingbonds: new ff(
        this.options.elementProperties,
        this.options.bondGrowToleranceFactor
      ),
      disorder: new lf(this.options.disorderMode),
      symmetry: new Bs(this.options.symmetryMode),
      hydrogen: new uf(this.options.hydrogenMode)
    }, this.selections = new tk(this.options), this.setupScene(), this.controls = new Jz(this), this.animate(), this.needsRender = !0;
  }
  /**
   * Sets up the Three.js scene, camera, and renderer.
   * @private
   */
  setupScene() {
    this.scene = new zL(), this.cameraController = ek(this.container, this.options), this.camera = this.cameraController.camera, this.renderer = new Oz({ antialias: !0, alpha: !0 }), this.resizeRendererToDisplaySize(), this.container.appendChild(this.renderer.domElement), this.moleculeContainer = new ui(), this.scene.add(this.moleculeContainer), this.camera.position.copy(this.options.camera.initialPosition), this.cameraTarget = new ce(0, 0, 0), this.camera.lookAt(this.cameraTarget);
  }
  /**
   * Loads a crystal structure from CIF text.
   * This is the main entry point for displaying a new structure.
   * @param {string} cifText - CIF format text content
   * @param {number} [cifBlockIndex] - Index of the CIF block to load (for multi-block CIFs)
   * @returns {Promise<object>} Result object with:
   * - success: Boolean indicating if loading succeeded
   * - error: Error message if loading failed
   * 
   * Example:
   * ```
   * const result = await viewer.loadCIF(cifContent);
   * if (result.success) {
   *   console.log('Structure loaded successfully');
   * } else {
   *   console.error('Failed to load structure:', result.error);
   * }
   * ```
   */
  async loadCIF(e, t = 0) {
    if (e === void 0)
      return console.error("Cannot load an empty text as CIF"), { success: !1, error: "Cannot load an empty text as CIF" };
    try {
      const n = new ox(e);
      let i;
      try {
        i = dn.fromCIF(n.getBlock(t));
      } catch (a) {
        if (this.options.fixCifErrors)
          throw a;
        try {
          const s = Wz(n.getBlock(t));
          i = dn.fromCIF(s);
        } catch {
          throw a;
        }
      }
      return await this.loadStructure(i), { success: !0 };
    } catch (n) {
      return console.error("Error loading structure:", n), { success: !1, error: n.message };
    }
  }
  /**
   * Loads a crystal structure from SHELX text (.res or .ins format).
   * @param {string} shelxText - Raw SHELX file content
   * @returns {Promise<object>} Object with success status and error message if failed
   * @example
   * ```javascript
   * const result = await viewer.loadSHELX(shelxContent);
   * if (result.success) {
   *     console.log('Structure loaded successfully');
   * } else {
   *     console.error('Error:', result.error);
   * }
   * ```
   */
  async loadSHELX(e) {
    if (e === void 0)
      return console.error("Cannot load an empty text as SHELX"), { success: !1, error: "Cannot load an empty text as SHELX" };
    try {
      const t = new ux(e), n = dn.fromCIF(t.getBlock());
      return await this.loadStructure(n), { success: !0 };
    } catch (t) {
      return console.error("Error loading SHELX structure:", t), { success: !1, error: t.message };
    }
  }
  /**
   * Automatically detects file format and loads the appropriate structure type.
   * Supports both CIF and SHELX formats.
   * @param {string} structureText - Raw structure file content
   * @param {string} [filename] - Optional filename to help detect format
   * @returns {Promise<object>} Object with success status and error message if failed
   */
  async loadStructureFromText(e, t = "") {
    return e === void 0 || e.trim() === "" ? (console.error("Cannot load empty structure data"), { success: !1, error: "Cannot load empty structure data" }) : this.detectShelxFormat(e, t) ? await this.loadSHELX(e) : await this.loadCIF(e);
  }
  /**
   * Detects if the given text is in SHELX format
   * @param {string} text - Structure file content
   * @param {string} filename - Optional filename
   * @returns {boolean} True if SHELX format detected
   * @private
   */
  detectShelxFormat(e, t = "") {
    const n = t.toLowerCase();
    if (n.endsWith(".res") || n.endsWith(".ins"))
      return !0;
    const i = e.split(`
`).map((l) => l.trim()), a = ["TITL", "CELL", "ZERR", "LATT", "SYMM", "SFAC", "HKLF"];
    let s = 0, o = 0;
    for (const l of i.slice(0, 20)) {
      const u = l.toUpperCase();
      a.some((c) => u.startsWith(c)) && s++, (u.startsWith("DATA_") || u.startsWith("LOOP_") || u.startsWith("_")) && o++;
    }
    return s > o && s >= 2;
  }
  /**
   * Initializes a new structure in the viewer with proper orientation.
   * @param {CrystalStructure} structure - crystal structure to load
   * @returns {Promise<object>} Object indicating success
   * @private
   */
  async loadStructure(e) {
    this.state.baseStructure = e, this.selections.clear(), this.moleculeContainer.position.set(0, 0, 0), this.moleculeContainer.rotation.set(0, 0, 0), this.moleculeContainer.scale.set(1, 1, 1), this.moleculeContainer.updateMatrix(), this.moleculeContainer.matrixAutoUpdate = !0, this.moleculeContainer.updateMatrixWorld(!0), this.cameraTarget.set(0, 0, 0), this.camera.position.copy(this.options.camera.initialPosition), this.camera.lookAt(this.cameraTarget), this.state.structureCenter.set(0, 0, 0), this.update3DOrtep();
    const t = Zz(this.state.currentStructure);
    return this.container.clientHeight > this.container.clientWidth && t.premultiply(new mt().makeRotationZ(Math.PI / 2)), t && (this.moleculeContainer.setRotationFromMatrix(t), this.moleculeContainer.updateMatrix()), new Ei().setFromObject(this.moleculeContainer).getCenter(this.state.structureCenter), this.moleculeContainer.position.sub(this.state.structureCenter), this.updateCamera(), Kz(this.scene, this.state.currentStructure), this.requestRender(), { success: !0 };
  }
  /**
   * Updates the current structure while preserving rotation.
   * Used internally when structure modifiers change.
   * @returns {Promise<object>} Object indicating success or failure
   * @private
   */
  async updateStructure() {
    try {
      const e = this.moleculeContainer.matrix.clone();
      return this.update3DOrtep(), this.moleculeContainer.matrix.copy(e), this.moleculeContainer.matrixAutoUpdate = !1, this.requestRender(), { success: !0 };
    } catch (e) {
      return console.error("Error updating structure:", e), { success: !1, error: e.message };
    }
  }
  /**
   * Updates the 3D visualization by applying structure modifiers and creating visual elements.
   * @private
   */
  update3DOrtep() {
    this.removeStructure();
    let e = this.state.baseStructure;
    for (const i of Object.values(this.modifiers))
      e = i.apply(e);
    const n = new Lz(e, this.options).getGroup();
    this.moleculeContainer.add(n), this.state.currentStructure = n, this.selections.pruneInvalidSelections(this.moleculeContainer);
  }
  /**
   * Updates camera position and parameters based on structure size.
   * @private
   */
  updateCamera() {
    this.controls.handleResize(), this.cameraController.fitToStructure(this.moleculeContainer), this.requestRender();
  }
  /**
   * Removes the current structure and frees associated resources.
   * @private
   */
  removeStructure() {
    this.moleculeContainer.traverse((e) => {
      e.geometry && e.geometry.dispose(), e.material && e.material.dispose();
    }), this.moleculeContainer.clear();
  }
  /**
   * Cycles through available modes for a structure modifier.
   * This method allows switching between different visualization options for:
   * - hydrogen: Control how hydrogen atoms are displayed
   * - disorder: Control which disorder groups are shown
   * - symmetry: Control how symmetry-equivalent atoms are generated
   * - removeatoms: Toggle atom filtering on/off
   * @param {string} modifierName - Name of the modifier to cycle ('hydrogen', 'disorder', 'symmetry', etc.)
   * @returns {Promise<object>} Result object with:
   * - success: Boolean indicating if mode change succeeded
   * - mode: The new active mode after cycling
   * - error: Error message if change failed
   * 
   * Example:
   * ```
   * const result = await viewer.cycleModifierMode('hydrogen');
   * console.log(`New hydrogen display mode: ${result.mode}`);
   * ```
   */
  async cycleModifierMode(e) {
    const t = this.modifiers[e], n = t.cycleMode(this.state.baseStructure);
    let i;
    return t.requiresCameraUpdate ? i = await this.loadStructure(this.state.baseStructure) : i = await this.updateStructure(), { ...i, mode: n };
  }
  /**
   * Gets the number of available modes for a structure modifier.
   * Useful for determining if a modifier has options for the current structure.
   * @param {string} modifierName - Name of the modifier to check ('hydrogen', 'disorder', 'symmetry', etc.)
   * @returns {number|boolean} Number of available modes or false if no structure loaded
   * 
   * Example:
   * ```
   * // Check if hydrogen display options are available
   * const hydrogenModes = viewer.numberModifierModes('hydrogen');
   * if (hydrogenModes > 1) {
   *   // Enable hydrogen toggle button
   * }
   * ```
   */
  numberModifierModes(e) {
    if (!this.state.baseStructure)
      return !1;
    const t = this.modifiers.removeatoms.apply(this.state.baseStructure);
    return this.modifiers[e].getApplicableModes(t).length;
  }
  /**
   * Animation loop that renders the scene when needed.
   * Called automatically; users don't need to invoke this directly.
   * @private
   */
  animate() {
    (this.options.renderMode === "constant" || this.needsRender) && (this.renderer.render(this.scene, this.camera), this.needsRender = !1), requestAnimationFrame(this.animate.bind(this));
  }
  /**
   * Requests a render update for the on-demand rendering mode (on by default).
   * Call this after making changes that should be reflected in the display.
   */
  requestRender() {
    this.options.renderMode === "onDemand" && (this.needsRender = !0);
  }
  /**
   * Resizes the renderer to match the container's display size.
   * Called automatically on window resize.
   * @returns {boolean} True if resize was needed
   * @private
   */
  resizeRendererToDisplaySize() {
    const e = this.renderer.domElement, t = window.devicePixelRatio || 1, n = Math.floor(this.container.clientWidth * t), i = Math.floor(this.container.clientHeight * t), a = e.width !== n || e.height !== i;
    return a && (this.renderer.setSize(n, i, !1), e.style.width = `${this.container.clientWidth}px`, e.style.height = `${this.container.clientHeight}px`, this.renderer.setViewport(0, 0, n, i)), a;
  }
  /**
   * Selects specific atoms by their labels.
   * Allows programmatic selection of atoms without user interaction.
   * @param {string[]} atomLabels - Array of atom labels to select
   * 
   * Example:
   * ```
   * // Select specific atoms of interest
   * viewer.selectAtoms(['C1', 'O1', 'N2']);
   * ```
   */
  selectAtoms(e) {
    this.selections.selectAtoms(e, this.moleculeContainer);
  }
  /**
   * Releases all resources used by the viewer.
   * Call this when the viewer is no longer needed to prevent memory leaks.
   * 
   * Example:
   * ```
   * // When removing the viewer from the application
   * viewer.dispose();
   * viewer = null;
   * ```
   */
  dispose() {
    this.controls.dispose(), this.scene.traverse((e) => {
      e.geometry && e.geometry.dispose(), e.material && (Array.isArray(e.material) ? e.material.forEach((t) => t.dispose()) : e.material.dispose());
    }), this.selections.dispose(), this.renderer.dispose(), this.renderer.domElement.parentNode && this.renderer.domElement.parentNode.removeChild(this.renderer.domElement), this.scene = null, this.camera = null, this.renderer = null, this.state = null, this.options = null;
  }
}
const rk = {
  disorder: {
    all: '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path4-5" style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.2;stroke-dasharray:none;stroke-opacity:1" d="m 28.684508,10.729386 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607593 2.6075482,2.6075482 0 0 0 1.079004,2.104776 l -2.987415,6.12935 a 2.6075482,2.6075482 0 0 0 -0.778764,-0.11938 2.6075482,2.6075482 0 0 0 -2.607592,2.6076 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -0.948262,-2.01125 l 3.013252,-6.18464 a 2.6075482,2.6075482 0 0 0 0.622185,0.08114 2.6075482,2.6075482 0 0 0 0.624251,-0.07648 l 3.01377,6.18308 a 2.6075482,2.6075482 0 0 0 -0.950847,2.00815 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.6076 2.6075482,2.6075482 0 0 0 -0.777214,0.12196 l -2.985347,-6.12727 A 2.6075482,2.6075482 0 0 0 31.2921,13.336979 2.6075482,2.6075482 0 0 0 28.684508,10.729386 Z" /><path id="path8-7" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 23.328762,11.972721 a 2.6075482,2.6075482 0 0 0 -2.607592,2.607594 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 0.70435,-0.0987 l 1.051099,2.16473 0.556038,-1.14205 -0.720886,-1.4733 a 2.6075482,2.6075482 0 0 0 1.016992,-2.05827 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path8-0-5" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 33.918297,11.972721 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607594 2.6075482,2.6075482 0 0 0 1.0604,2.09083 l -0.673344,1.37666 0.556039,1.14205 1.014408,-2.08876 a 2.6075482,2.6075482 0 0 0 0.65009,0.08681 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path9-8" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 30.92003,19.636335 -1.539441,3.15433 a 2.6075482,2.6075482 0 0 0 -0.696081,-0.0956 2.6075482,2.6075482 0 0 0 -0.750342,0.1142 l -1.51412,-3.10265 -0.557071,1.13998 1.187007,2.43345 a 2.6075482,2.6075482 0 0 0 -0.973067,2.02261 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607592,-2.60759 2.6075482,2.6075482 0 0 0 -1.015958,-2.06447 l 1.20096,-2.46187 z" /></g></svg>',
    group1: '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><g id="g1" transform="translate(-0.54705812,0.13474933)"><path id="path4-5" style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.2;stroke-dasharray:none;stroke-opacity:1" d="m 29.231566,10.594637 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607593 2.6075482,2.6075482 0 0 0 1.079004,2.104776 l -2.987415,6.12935 a 2.6075482,2.6075482 0 0 0 -0.778764,-0.11938 2.6075482,2.6075482 0 0 0 -2.607592,2.6076 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -0.948262,-2.01125 l 3.013252,-6.18464 a 2.6075482,2.6075482 0 0 0 0.622185,0.08114 2.6075482,2.6075482 0 0 0 0.624251,-0.07648 l 3.01377,6.18308 a 2.6075482,2.6075482 0 0 0 -0.950847,2.00815 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.6076 2.6075482,2.6075482 0 0 0 -0.777214,0.12196 l -2.985347,-6.12727 a 2.6075482,2.6075482 0 0 0 1.075386,-2.109436 2.6075482,2.6075482 0 0 0 -2.607592,-2.607593 z" /><path id="path8-7" style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 23.87582,11.837972 a 2.6075482,2.6075482 0 0 0 -2.607592,2.607594 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 0.70435,-0.0987 l 1.051099,2.16473 0.556038,-1.14205 -0.720886,-1.4733 a 2.6075482,2.6075482 0 0 0 1.016992,-2.05827 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path8-0-5" style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 34.465355,11.837972 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607594 2.6075482,2.6075482 0 0 0 1.0604,2.09083 l -0.673344,1.37666 0.556039,1.14205 1.014408,-2.08876 a 2.6075482,2.6075482 0 0 0 0.65009,0.08681 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path9-8" style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 31.467088,19.501586 -1.539441,3.15433 a 2.6075482,2.6075482 0 0 0 -0.696081,-0.0956 2.6075482,2.6075482 0 0 0 -0.750342,0.1142 l -1.51412,-3.10265 -0.557071,1.13998 1.187007,2.43345 a 2.6075482,2.6075482 0 0 0 -0.973067,2.02261 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607592,-2.60759 2.6075482,2.6075482 0 0 0 -1.015958,-2.06447 l 1.20096,-2.46187 z" /></g></g></svg>',
    group2: '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path4-5" style="color:#000000;fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.2;stroke-dasharray:none;stroke-opacity:1" d="m 28.684508,10.729386 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607593 2.6075482,2.6075482 0 0 0 1.079004,2.104776 l -2.987415,6.12935 a 2.6075482,2.6075482 0 0 0 -0.778764,-0.11938 2.6075482,2.6075482 0 0 0 -2.607592,2.6076 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -0.948262,-2.01125 l 3.013252,-6.18464 a 2.6075482,2.6075482 0 0 0 0.622185,0.08114 2.6075482,2.6075482 0 0 0 0.624251,-0.07648 l 3.01377,6.18308 a 2.6075482,2.6075482 0 0 0 -0.950847,2.00815 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.6076 2.6075482,2.6075482 0 0 0 -0.777214,0.12196 l -2.985347,-6.12727 A 2.6075482,2.6075482 0 0 0 31.2921,13.336979 2.6075482,2.6075482 0 0 0 28.684508,10.729386 Z" /><path id="path8-7" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 23.328762,11.972721 a 2.6075482,2.6075482 0 0 0 -2.607592,2.607594 2.6075482,2.6075482 0 0 0 2.607592,2.60759 2.6075482,2.6075482 0 0 0 0.70435,-0.0987 l 1.051099,2.16473 0.556038,-1.14205 -0.720886,-1.4733 a 2.6075482,2.6075482 0 0 0 1.016992,-2.05827 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path8-0-5" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 33.918297,11.972721 a 2.6075482,2.6075482 0 0 0 -2.607593,2.607594 2.6075482,2.6075482 0 0 0 1.0604,2.09083 l -0.673344,1.37666 0.556039,1.14205 1.014408,-2.08876 a 2.6075482,2.6075482 0 0 0 0.65009,0.08681 2.6075482,2.6075482 0 0 0 2.607593,-2.60759 2.6075482,2.6075482 0 0 0 -2.607593,-2.607594 z" /><path id="path9-8" style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0;stroke-dashoffset:0.0831496" d="m 30.92003,19.636335 -1.539441,3.15433 a 2.6075482,2.6075482 0 0 0 -0.696081,-0.0956 2.6075482,2.6075482 0 0 0 -0.750342,0.1142 l -1.51412,-3.10265 -0.557071,1.13998 1.187007,2.43345 a 2.6075482,2.6075482 0 0 0 -0.973067,2.02261 2.6075482,2.6075482 0 0 0 2.607593,2.60759 2.6075482,2.6075482 0 0 0 2.607592,-2.60759 2.6075482,2.6075482 0 0 0 -1.015958,-2.06447 l 1.20096,-2.46187 z" /></g></svg>'
  },
  hydrogen: {
    anisotropic: '<svg width="17.85038mm" height="17.850386mm" viewBox="0 0 17.85038 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-78.600695,-38.873141)"><ellipse style="fill:none;fill-opacity:1;stroke:#8f8f8f;stroke-width:1.8975;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" id="path7-4" cx="37.167099" cy="89.280861" rx="4.8005486" ry="9.1209068" transform="matrix(0.82466981,-0.56561445,0.63703802,0.77083238,0,0)" /><path id="path17-7-9" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.26484;-inkscape-stroke:none" d="m 85.424476,44.723369 v 6.149929 h 1.191773 v -2.479079 h 1.819274 v 2.479079 h 1.191771 v -6.149929 h -1.191771 v 2.479077 h -1.819274 v -2.479077 z" /></g></svg>',
    constant: '<svg width="17.850388mm" height="17.850386mm" viewBox="0 0 17.850388 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-58.39314,-38.873141)"><circle style="fill:none;fill-opacity:1;stroke:#8f8f8f;stroke-width:2;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" id="path6-0" cx="67.318336" cy="47.798332" r="6.8755083" /><path id="path17-7-9" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.26484;-inkscape-stroke:none" d="m 65.216925,44.723369 v 6.149929 h 1.191773 v -2.479079 h 1.819274 v 2.479079 h 1.191771 v -6.149929 h -1.191771 v 2.479077 h -1.819274 v -2.479077 z" /></g></svg>',
    none: '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-37.755639,-38.873141)"><g id="g2"><path style="fill:#000000;fill-opacity:1;stroke:#8f8f8f;stroke-width:2;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" d="m 39.917575,41.035079 13.526512,13.52651" id="path5-9" /><g id="g1" style="stroke:#8f8f8f;stroke-opacity:1"><path style="fill:#a4a4a4;fill-opacity:1;stroke:#8f8f8f;stroke-width:2;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" d="M 53.444087,41.035079 39.917575,54.561589" id="path5-1-0" /></g></g><path id="path17-7-9" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.26484;-inkscape-stroke:none" d="m 44.579422,44.723369 v 6.149929 h 1.191773 v -2.479079 h 1.819274 v 2.479079 h 1.191771 v -6.149929 h -1.191771 v 2.479077 h -1.819274 v -2.479077 z" /></g></svg>'
  },
  symmetry: {
    "bonds-no-hbonds-no": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path19-3" style="color:#000000;fill:#8f8f8f;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none;fill-opacity:1" d="m 25.466978,23.914458 v 0.898 h 0.90006 v -0.898 z m 1.80013,0 v 0.898 h 0.89852 v -0.898 z m 1.82804,0 v 0.898 h 0.90006 v -0.898 z m 1.80065,0 v 0.898 h 0.898 v -0.898 z m 1.80013,0 v 0.898 h 0.80655 v -0.898 z" /><circle style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-53-4" cx="33.972233" cy="24.363457" r="2.3135188" /><path id="path17-0" style="color:#000000;fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.421606;-inkscape-stroke:none" d="m 23.896828,13.771675 v 0.898 h 9.51437 v -0.898 z" /><circle style="fill:#000000;stroke:none;stroke-width:0.565;stroke-dasharray:none" id="path1-7-1" cx="23.335804" cy="14.220675" r="2.3135188" /><circle style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-7-8" cx="33.972233" cy="14.220675" r="2.3135188" /><g id="path7-73" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.99998067,-2.3e-6,-0.02721318)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-6" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-4" /></g><path id="path17-7-4" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.755798,22.051454 v 4.624007 h 0.89607 v -1.863969 h 1.36787 v 1.863969 h 0.89607 v -4.624007 h -0.89607 v 1.863968 h -1.36787 v -1.863968 z" /></g></svg>',
    "bonds-no-hbonds-none": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path17-0" style="color:#000000;fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.421606;-inkscape-stroke:none" d="m 23.896827,18.870815 v 0.898 h 9.51437 v -0.898 z" /><circle style="fill:#000000;stroke:none;stroke-width:0.565;stroke-dasharray:none" id="path1-7-1" cx="23.335804" cy="19.319817" r="2.3135188" /><circle style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-7-8" cx="33.972233" cy="19.319817" r="2.3135188" /><path style="fill:#000000;stroke:#000000;stroke-width:0.6;stroke-dasharray:none" d="M 28.654019,10.932651 V 27.762155" id="path7" /></g></svg>',
    "bonds-none-hbonds-no": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path19" style="color:#000000;fill:#8f8f8f;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none;fill-opacity:1" d="m 25.466979,18.872141 v 0.898 h 0.900067 v -0.898 z m 1.800134,0 v 0.898 h 0.898517 v -0.898 z m 1.828036,0 v 0.898 h 0.900067 v -0.898 z m 1.800651,0 v 0.898 h 0.898 v -0.898 z m 1.800134,0 v 0.898 h 0.806547 v -0.898 z" /><circle style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-53-2" cx="33.972233" cy="19.321142" r="2.3135188" /><path id="path17-7" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.7558,17.009137 v 4.624007 h 0.89607 v -1.863969 h 1.367875 v 1.863969 h 0.896069 v -4.624007 h -0.896069 v 1.863968 H 22.65187 v -1.863968 z" /><path style="fill:#000000;stroke:#000000;stroke-width:0.6;stroke-dasharray:none" d="M 28.654019,10.932651 V 27.762155" id="path7" /></g></svg>',
    "bonds-none-hbonds-none": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path style="fill:#000000;fill-opacity:1;stroke:#8f8f8f;stroke-width:0.895002;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" d="m 20.701184,16.686517 5.269247,5.269247" id="path5-9" /><path style="fill:none;fill-opacity:1;stroke:#8f8f8f;stroke-width:0.895002;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" d="m 25.970431,16.686517 -5.269247,5.269247" id="path5-1-0" /><path id="path19" style="color:#000000;fill:#8f8f8f;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none;fill-opacity:1" d="m 25.466979,18.872141 v 0.898 h 0.900067 v -0.898 z m 1.800134,0 v 0.898 h 0.898517 v -0.898 z m 1.828036,0 v 0.898 h 0.900067 v -0.898 z m 1.800651,0 v 0.898 h 0.898 v -0.898 z m 1.800134,0 v 0.898 h 0.806547 v -0.898 z" /><circle style="fill:#8f8f8f;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-53-2" cx="33.972233" cy="19.321142" r="2.3135188" /><path id="path17-7" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.7558,17.009137 v 4.624007 h 0.89607 v -1.863969 h 1.367875 v 1.863969 h 0.896069 v -4.624007 h -0.896069 v 1.863968 H 22.65187 v -1.863968 z" /><path style="fill:#000000;stroke:#000000;stroke-width:0.6;stroke-dasharray:none" d="M 28.654019,10.932651 V 27.762155" id="path7" /></g></svg>',
    "bonds-none-hbonds-yes": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path19" style="color:#000000;fill:#000000;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none;fill-opacity:1" d="m 25.466978,18.844554 v 0.898 h 0.900067 v -0.898 z m 1.800134,0 v 0.898 h 0.898517 v -0.898 z m 1.828036,0 v 0.898 h 0.900067 v -0.898 z m 1.800651,0 v 0.898 h 0.898 v -0.898 z m 1.800134,0 v 0.898 h 0.806547 v -0.898 z" /><circle style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-53-2" cx="33.972233" cy="19.293554" r="2.3135188" /><path id="path17-7" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.755799,16.98155 v 4.624007 h 0.89607 v -1.863969 h 1.367875 v 1.863969 h 0.896069 V 16.98155 h -0.896069 v 1.863968 H 22.651869 V 16.98155 Z" /><path style="fill:#000000;stroke:#000000;stroke-width:0.600002;stroke-dasharray:none" d="m 28.654019,20.03939 v 7.695178" id="path7-6" /><path style="fill:#000000;stroke:#000000;stroke-width:0.600002;stroke-dasharray:none" d="m 28.654018,10.905064 v 7.643502" id="path7-6-2" /></g></svg>',
    "bonds-yes-hbonds-no": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path19" style="color:#000000;fill:#8f8f8f;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none;fill-opacity:1" d="m 25.466978,23.942207 v 0.898 h 0.900067 v -0.898 z m 1.800134,0 v 0.898 h 0.898517 v -0.898 z m 1.828036,0 v 0.898 h 0.900067 v -0.898 z m 1.800651,0 v 0.898 h 0.898 v -0.898 z m 1.800134,0 v 0.898 h 0.806547 v -0.898 z" /><circle style="fill:#8f8f8f;stroke:none;stroke-width:0.564999;fill-opacity:1" id="path1-7-53" cx="33.972233" cy="24.391207" r="2.3135188" /><path id="path17" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.421606;-inkscape-stroke:none" d="m 23.896835,13.799425 v 0.898 h 9.514368 v -0.898 z" /><circle style="fill:#000000;stroke:none;stroke-width:0.565;stroke-dasharray:none" id="path1-7" cx="23.335806" cy="14.248425" r="2.3135188" /><circle style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-7" cx="33.972233" cy="14.248425" r="2.3135188" /><g id="path7" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.75508504,0,6.799367)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15" /></g><g id="path7-2" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.15009676,0,9.2916955)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-3" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-3" /></g><path id="path17-7" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.755799,22.079203 v 4.624007 h 0.89607 v -1.863969 h 1.367875 v 1.863969 h 0.896069 v -4.624007 h -0.896069 v 1.863968 h -1.367875 v -1.863968 z" /></g></svg>',
    "bonds-yes-hbonds-none": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><g id="g1" transform="translate(20.608042,9.8427536)"><path id="path17-4" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.4;-inkscape-stroke:none" d="m 3.245596,9.0762805 v 0.800985 h 9.601481 v -0.800985 z" /><circle style="fill:#000000;stroke:none;stroke-width:0.565;stroke-dasharray:none" id="path1-7-8" cx="2.7277639" cy="9.4770622" r="2.3135188" /><circle style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-7-2" cx="13.364189" cy="9.4770622" r="2.3135188" /></g><g id="g2" transform="translate(-1.2072753e-7,-0.02758705)"><g id="path7-7-3" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.45417979,6.985e-4,15.153145)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-9-2" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-6-5" /></g><g id="path7-7-3-7" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.45140061,6.985e-4,5.9976457)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-9-2-1" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-6-5-6" /></g></g></g></svg>',
    "bonds-yes-hbonds-yes": '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1" /><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><path id="path19" style="color:#000000;fill:#000000;fill-opacity:1;stroke-width:0.999849;stroke-dashoffset:0.022;-inkscape-stroke:none" d="m 25.466978,23.91462 v 0.898 h 0.900067 v -0.898 z m 1.800134,0 v 0.898 h 0.898517 v -0.898 z m 1.828036,0 v 0.898 h 0.900067 v -0.898 z m 1.800651,0 v 0.898 h 0.898 v -0.898 z m 1.800134,0 v 0.898 h 0.806547 v -0.898 z" /><circle style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-53-8" cx="33.972233" cy="24.363619" r="2.3135188" /><path id="path17" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.421606;-inkscape-stroke:none" d="m 23.896835,13.771838 v 0.898 h 9.514368 v -0.898 z" /><circle style="fill:#000000;stroke:none;stroke-width:0.565;stroke-dasharray:none" id="path1-7-59" cx="23.335806" cy="14.220837" r="2.3135188" /><circle style="fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.564999" id="path1-7-7-5" cx="33.972233" cy="14.220837" r="2.3135188" /><g id="path7-2" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.15009676,0,9.2641086)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-3" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-3" /></g><path id="path17-7" style="color:#000000;fill:#000000;stroke:none;stroke-width:0.199128;-inkscape-stroke:none" d="m 21.755799,22.051616 v 4.624007 h 0.89607 v -1.863969 h 1.367875 v 1.863969 h 0.896069 v -4.624007 h -0.896069 v 1.863968 h -1.367875 v -1.863968 z" /><g id="path7-9" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.51054368,0,9.4452649)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15" /></g><g id="path7-9-3" style="fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1" transform="matrix(1,0,0,0.15604158,0,23.402517)"><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="M 28.654019,10.932651 V 27.762155" id="path11-7" /><path style="color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-opacity:1;-inkscape-stroke:none" d="m 28.353516,10.933594 v 16.828125 h 0.599609 V 10.933594 Z" id="path15-9" /></g></g></svg>'
  },
  upload: '<svg width="17.850384mm" height="17.850386mm" viewBox="0 0 17.850384 17.850386" version="1.1" id="svg1" (0e150ed6c4, 2023-07-21)"xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><id="namedview1" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" showguides="false" /><defs id="defs1"><marker style="overflow:visible" id="ArrowWide" refX="0" refY="0" orient="auto-start-reverse" arrow" markerWidth="1" markerHeight="1" viewBox="0 0 1 1" preserveAspectRatio="xMidYMid"><path style="fill:none;stroke:context-stroke;stroke-width:1;stroke-linecap:butt" d="M 3,-3 0,0 3,3" transform="rotate(180,0.125,0)" id="path1" /></marker></defs><g 1" id="layer1" transform="translate(-19.728827,-10.394623)"><text xml:space="preserve" style="font-size:7.05556px;fill:#e6e6e6;stroke:none;stroke-width:0.5;stroke-linecap:round;stroke-dasharray:none" x="22.242813" y="28.151989" id="text2"><tspan id="tspan2" style="font-size:7.05556px;fill:#1a1a1a;stroke-width:0.5;stroke-linecap:round;stroke-dasharray:none" x="22.242813" y="28.151989">CIF</tspan></text><path style="fill:none;stroke:#000000;stroke-width:0.68;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1" d="m 20.714121,18.107197 v 3.07807 h 15.879794 v -3.07807" id="path2" /><path style="fill:none;stroke:#000000;stroke-width:0.68;stroke-linecap:butt;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#ArrowWide)" d="M 28.654018,19.170064 V 11.045456" id="path3" /></g></svg>'
}, nk = `
  cifview-widget {
    display: flex;
    flex-direction: column;
    font-family: system-ui, -apple-system, sans-serif;
    height: 100%;
    position: relative;
    background: #ffffff;
    border-radius: 8px;
    overflow: hidden;
  }
  
  cifview-widget .crystal-container {
    flex: 1;
    min-height: 0;
    position: relative;
  }
  
  cifview-widget .crystal-caption {
    padding: 12px 16px;
    background: #fafafa;
    border-top: 1px solid #eaeaea;
    color: #333;
    font-size: 14px;
    line-height: 1.5;
    height: 50px;
  }

  cifview-widget .button-container {
    position: absolute;
    top: 16px;
    right: 16px;
    display: flex;
    gap: 8px;
    z-index: 1000;
  }

  cifview-widget .control-button {
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 8px;
    background: rgba(255, 255, 255, 0.9);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  cifview-widget .control-button:hover {
    background: #ffffff;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  }

  cifview-widget .control-button svg {
    width: 24px;
    height: 24px;
  }
`;
class ik extends HTMLElement {
  static get observedAttributes() {
    return [
      "caption",
      "src",
      "data",
      "icons",
      "filtered-atoms",
      "options",
      "hydrogen-mode",
      "disorder-mode",
      "symmetry-mode"
    ];
  }
  constructor() {
    if (super(), !document.getElementById("cifview-styles")) {
      const e = document.createElement("style");
      e.id = "cifview-styles", e.textContent = nk, document.head.appendChild(e);
    }
    this.viewer = null, this.baseCaption = "", this.selections = [], this.customIcons = null, this.userOptions = {}, this.defaultCaption = 'Generated with <a href="https://github.com/Niolon/cifvis">CifVis</a>.';
  }
  get icons() {
    return { ...rk, ...this.customIcons };
  }
  async connectedCallback() {
    this.baseCaption = this.getAttribute("caption") || this.defaultCaption, this.parseOptions(), this.parseInitialModes();
    const e = document.createElement("div");
    e.className = "crystal-container", this.appendChild(e);
    const t = document.createElement("div");
    t.className = "button-container", e.appendChild(t), this.buttonContainer = t;
    const n = document.createElement("div");
    n.className = "crystal-caption", n.innerHTML = this.baseCaption, this.appendChild(n), this.captionElement = n, this.viewer = new Qv(e, this.userOptions), this.viewer.selections.onChange((s) => {
      this.selections = s, this.updateCaption();
    }), this.customIcons = this.parseCustomIcons(), await this.updateFilteredAtoms();
    const i = this.getAttribute("src"), a = this.getAttribute("data");
    i ? await this.loadFromUrl(i) : a && await this.loadFromString(a);
  }
  parseOptions() {
    const e = this.getAttribute("options");
    if (e)
      try {
        const t = JSON.parse(e);
        this.userOptions = this.mergeOptions(t);
      } catch (t) {
        console.warn("Failed to parse options:", t);
      }
  }
  mergeOptions(e) {
    const t = { ...Ft };
    return Object.keys(e).forEach((n) => {
      n === "elementProperties" ? (t.elementProperties = { ...t.elementProperties }, Object.keys(e.elementProperties || {}).forEach((i) => {
        t.elementProperties[i] = {
          ...t.elementProperties[i] || {},
          ...e.elementProperties[i]
        };
      })) : typeof e[n] == "object" && e[n] !== null ? t[n] = {
        ...t[n] || {},
        ...e[n]
      } : t[n] = e[n];
    }), t;
  }
  parseInitialModes() {
    const e = this.getAttribute("hydrogen-mode"), t = this.getAttribute("disorder-mode"), n = this.getAttribute("symmetry-mode");
    e && (this.userOptions.hydrogenMode = e), t && (this.userOptions.disorderMode = t), n && (this.userOptions.symmetryMode = n);
  }
  clearButtons() {
    if (this.buttonContainer)
      for (; this.buttonContainer.firstChild; )
        this.buttonContainer.removeChild(this.buttonContainer.firstChild);
  }
  setupButtons() {
    !this.viewer || !this.viewer.state.baseStructure || (this.clearButtons(), this.viewer.numberModifierModes("hydrogen") > 1 && this.addButton(this.buttonContainer, "hydrogen", "Toggle Hydrogen Display"), this.viewer.numberModifierModes("disorder") > 2 && this.addButton(this.buttonContainer, "disorder", "Toggle Disorder Display"), this.viewer.numberModifierModes("symmetry") > 1 && this.addButton(this.buttonContainer, "symmetry", "Toggle Symmetry Display"));
  }
  parseCustomIcons() {
    try {
      let e;
      try {
        e = JSON.parse(this.getAttribute("icons"));
      } catch {
        throw new Error("Failed to parse custom icon definition. Needs to be valid JSON.");
      }
      if (!e)
        return null;
      const t = Object.getOwnPropertyNames(e), n = Object.getOwnPropertyNames(this.viewer.modifiers), i = t.filter((o) => !n.includes(o));
      if (i.length > 0)
        throw new Error(
          `One or more invalid categories for custom icons: ${i.join(", ")}. Valid categories: ${n.join(", ")}`
        );
      const a = {}, s = [];
      for (const o of t) {
        a[o] = {};
        const l = Object.values(this.viewer.modifiers[o].MODES);
        Object.getOwnPropertyNames(e[t]).forEach((c) => {
          l.includes(c) ? a[o][c] = e[o][c] : s.push([o, c]);
        });
      }
      if (s.length > 0) {
        const o = s.map(([l, u]) => `${l}: ${u}`).join(" ,");
        throw new Error(`The following custom icons do not map to a valid mode: ${o}`);
      }
      return a;
    } catch (e) {
      return console.warn("Failed to parse custom icons:", e), null;
    }
  }
  async updateFilteredAtoms() {
    const e = this.getAttribute("filtered-atoms");
    this.viewer.modifiers.removeatoms.setFilteredLabels(e || ""), e && e.trim() ? this.viewer.modifiers.removeatoms.mode = "on" : this.viewer.modifiers.removeatoms.mode = "off", this.setupButtons();
  }
  addButton(e, t, n) {
    const i = document.createElement("button");
    i.className = `control-button ${t}-button`;
    const a = this.viewer.modifiers[t].mode;
    i.innerHTML = this.icons[t][a], i.title = n;
    const s = i.querySelector("svg");
    s && (s.setAttribute("alt", n), s.setAttribute("role", "img"), s.setAttribute("aria-label", n)), e.appendChild(i), i.addEventListener("click", async () => {
      const o = await this.viewer.cycleModifierMode(t);
      o.success && (i.innerHTML = this.icons[t][o.mode]);
    });
  }
  async attributeChangedCallback(e, t, n) {
    if (this.viewer)
      switch (e) {
        case "caption":
          this.baseCaption = n && n === "" ? this.defaultCaption : n, this.updateCaption();
          break;
        case "src":
          n && await this.loadFromUrl(n);
          break;
        case "data":
          n && await this.loadFromString(n);
          break;
        case "icons":
          this.customIcons = this.parseCustomIcons();
          break;
        case "filtered-atoms":
          await this.updateFilteredAtoms(), await this.viewer.updateStructure();
          break;
        case "options":
          if (this.parseOptions(), this.viewer) {
            const i = this.querySelector(".crystal-container"), a = this.viewer.state.currentCifContent;
            this.viewer.dispose(), this.viewer = new Qv(i, this.userOptions), this.viewer.selections.onChange((s) => {
              this.selections = s, this.updateCaption();
            }), a && (await this.viewer.loadCIF(a), this.setupButtons());
          }
          break;
        case "hydrogen-mode":
          this.viewer.modifiers.hydrogen && (this.viewer.modifiers.hydrogen.mode = n, await this.viewer.updateStructure(), this.setupButtons());
          break;
        case "disorder-mode":
          this.viewer.modifiers.disorder && (this.viewer.modifiers.disorder.mode = n, await this.viewer.updateStructure(), this.setupButtons());
          break;
        case "symmetry-mode":
          this.viewer.modifiers.symmetry && (this.viewer.modifiers.symmetry.mode = n, await this.viewer.loadStructure(), this.setupButtons());
          break;
      }
  }
  async loadFromUrl(e) {
    try {
      const t = await fetch(e);
      if (!t.ok)
        throw new Error(`Failed to load structure file: ${t.status} ${t.statusText}`);
      const n = t.headers.get("content-type");
      if (n && n.includes("text/html"))
        throw new Error("Received no or invalid content for src.");
      const i = await t.text();
      if (i.includes("<!DOCTYPE html>") || i.includes("<html>"))
        throw new Error("Received no or invalid content for src.");
      const a = e.split("/").pop() || "", s = await this.viewer.loadStructureFromText(i, a);
      if (s.success)
        this.setupButtons();
      else
        throw new Error(s.error || "Unknown Error");
    } catch (t) {
      this.createErrorDiv(t);
    }
  }
  async loadFromString(e) {
    try {
      const t = await this.viewer.loadStructureFromText(e);
      if (t.success)
        this.setupButtons();
      else
        throw new Error(t.error || "Unknown Error");
    } catch (t) {
      this.createErrorDiv(t);
    }
  }
  createErrorDiv(e) {
    console.error("Error loading structure:", e);
    const t = this.sanitizeHTML(e.message);
    if (this.baseCaption = `Error loading structure: ${t}`, this.updateCaption(), this.viewer) {
      const n = this.querySelector(".crystal-container");
      if (n) {
        for (; n.firstChild; )
          n.firstChild.remove();
        const i = document.createElement("div");
        i.style.display = "flex", i.style.justifyContent = "center", i.style.alignItems = "center", i.style.height = "100%", i.style.padding = "20px", i.style.textAlign = "center", i.style.color = "#d32f2f";
        const a = document.createElement("div"), s = document.createElement("h3");
        s.textContent = "Error Loading Structure", a.appendChild(s);
        const o = document.createElement("p");
        o.textContent = t, a.appendChild(o);
        const l = document.createElement("p");
        l.textContent = "Please check that the file exists and is a valid CIF file.", a.appendChild(l), i.appendChild(a), n.appendChild(i);
      }
    }
  }
  /**
   * Sanitizes HTML strings to prevent XSS attacks
   * @param {string} html - The potentially unsafe HTML string
   * @returns {string} - Sanitized string with HTML entities escaped
   */
  sanitizeHTML(e) {
    return e ? String(e).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;") : "";
  }
  updateCaption() {
    let e = this.baseCaption;
    if (this.selections.length > 0) {
      e.endsWith(".") || (e += "."), e += " Selected Atoms and Bonds: ";
      const t = this.selections.map((n) => {
        const i = "#" + n.color.toString(16).padStart(6, "0");
        let a = "";
        if (n.type === "atom")
          a = `${n.data.label} (${n.data.atomType})`;
        else if (n.type === "bond") {
          const s = $z(n.data.bondLength, n.data.bondLengthSU);
          a = `${n.data.atom1Label}-${n.data.atom2Label}: ${s} Å`;
        } else n.type === "hbond" && (a = `${n.data.donorAtomLabel}→${n.data.acceptorAtomLabel}`);
        return `<span style="color:${i}">${a}</span>`;
      }).join(", ");
      e += t + ".";
    }
    this.captionElement.innerHTML = e, this.viewer.controls.handleResize();
  }
  disconnectedCallback() {
    this.viewer && this.viewer.dispose();
  }
}
if (typeof window < "u" && window.customElements)
  try {
    window.customElements.define("cifview-widget", ik);
  } catch (r) {
    r.message.includes("already been defined") || console.warn("Failed to register cifview-widget:", r);
  }
export {
  cf as AtomLabelFilter,
  ff as BondGenerator,
  ox as CIF,
  ik as CifViewWidget,
  dn as CrystalStructure,
  Qv as CrystalViewer,
  lf as DisorderFilter,
  uf as HydrogenFilter,
  Lz as ORTEP3JsStructure,
  ux as SHELX,
  Bs as SymmetryGrower,
  $z as formatValueEsd,
  Wz as tryToFixCifBlock
};
